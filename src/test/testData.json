{"articles":[{"title":"Design with Difficult Data","pubDate":"2018-09-06 13:21:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/2kDmYy4kCuo/design-with-difficult-data","guid":"http://alistapart.com/article/design-with-difficult-data","author":"by","thumbnail":"https://alistapart.com/d/design-with-difficult-data/IntroExample--template.png","description":"\n<p>You’ve been asked to design a profile screen for a mobile or web app. It will need to include an avatar, a name, a job title, and a location. You fire up Sketch or Figma. Maybe you pull out your drafting pencil or head straight to markup and CSS.</p>\n\n<h2>What’s your go-to fake name?</h2>\n\n<p>Regardless of your choice in tools, you’re probably going to end up with some placeholder data. Are you the type that uses your own name, or do you conjure up your old friend, <i>Mr. Lorem Ipsum</i>? Maybe you have a go-to fake name, like <i>Sophia J. Placeholder</i>.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/IntroExample--template@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/IntroExample--template.png\" alt=\"A content placeholder card, with spaces for full name, job title, and location\"></source></picture></figure><p>For me, it’s <i>Nuno Bettencourt</i>. Or <i>Nuno Duarte Gil Mendes Bettencourt</i>, more formally. Nuno played guitar in the subtly-named early 90s band Extreme. To the younger among you, he was a touring musician with Rihanna. None of that matters for our purposes here today, except that he has a fairly long name.</p>\n\n<p>It may not seem like it matters what you put in for a placeholder name. It won’t end up in the final product—it’s just a variable. Well, it does matter. <strong>The text you start with will subtly influence your approach to layout and style.</strong> It may limit the scope of options you allow yourself to consider, or more dangerously, obscure actual limits that you’ll run into later.</p>\n\n<figure><img src=\"https://alistapart.com/d/design-with-difficult-data/IntroExample--bad@2x.png\" alt=\"The same content placeholder card, with long data for each of the values. It's too long for the design.\"></figure><p>A few obvious solutions may spring to mind: use a long placeholder name; use real data in your design. While these are a good start, it’s worth exploring more deeply how these and other practices can both improve your design process and help produce more durable products.</p>\n\n<h2>It’s more than just fake names</h2>\n\n<p>This is about more than just fake names. It’s also fake addresses! Fake headlines! Fake photos! When we design around limited data, the limitations bleed into our designs.</p>\n\n<p>The inability to deal with long strings of text is the most basic and maybe most common way components can fail when coming in contact with real data. You thought the tab would be labelled “Settings”? Well, now it’s called “Application Preferences.” Oh, and the product launches tomorrow.</p>\n\n<p>Length is just one of many ways that real text and data can strain a weak design. You may also encounter unanticipated line-breaks or even text that’s too short. Beware of the following areas where we tend to cheat with easy placeholder data.</p>\n\n<h3>Account profile photos</h3>\n\n<p>Don’t expect people to have a studio quality self-portrait with a solid white background (and be suspicious of those who do!). Many people may not be interested in uploading a photo for their account at all. Others may try to squeeze in their much-too-wide company logo into that little square or circular area. You can’t account for all possible data, but if you incorporate some of these less-than-visually-ideal cases early in your design process, your output will be that much more resilient.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--avatars@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--avatars.png\" alt=\"Several round avatar graphics, with images that don't fit in the round shape\"></source></picture></figure><h3>Thumbnails for videos and photos</h3>\n\n<p>Not all thumbnails will be in the aspect ratio you’ve anticipated. Some might include text or images that clash unexpectedly with the surrounding page. A common issue I’ve seen is a nicely designed home page with a company logo prominently displayed at the top. Then, the video arrives and the default poster image for the video also includes the company logo. Now your beautiful home page layout looks like a logo salad.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--thumbnails@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--thumbnails.png\" alt=\"Several video thumbnails with graphics that don't fit the thumbnail size\"></source></picture></figure><h3>Wild variations in amounts</h3>\n\n<p>Watch for elements containing lists where the amount of items in those lists may vary significantly. Imagine a layout with cards where each card includes a set of tags. One card may have three tags while another may have twenty-five. Tabular data can also suffer both aesthetically and in legibility when one particular cell varies wildly in length from the others.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--amounts@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--amounts.png\" alt=\"Several wireframes showing content of different lengths\"></source></picture></figure><h3>Missing elements</h3>\n\n<p>You may create a nice layout for your site header that scales beautifully from your phone to your 27” display. Then you discover it needs a Support menu item—but there’s no room! I often start a wireframe by compiling two lists. The first contains the goals a visitor to this screen needs to accomplish. The second has the elements that need to live on this screen. Be sure to include all of the elements—from the primary content to advertisements, and down to a privacy link in the footer. It’s particularly easy to spot a site that was designed without accounting for the advertisements it includes.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--missing-elements@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--missing-elements.png\" alt=\"Wireframe showing a nav bar and a spot where an element was removed\"></source></picture></figure><h3>Viewport sizes</h3>\n\n<p>Beyond placeholder data, we have a tendency to present our designs at the most flattering viewport sizes. Or rather, we design our layouts to look best at the sizes we choose for our mockups—particularly when we design with tools built around fixed frame sizes. In the neglected troughs of responsive design, we find two common pitfalls: the stretched mobile layout and the squished desktop design layout.</p>\n\n<div class=\"b_col\">\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/responsiveExample--desktop@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/responsiveExample--desktop.png\" alt=\"Wireframe showing a mobile design stretched to desktop size\"></source></picture><p><figcaption>The stretched mobile layout</figcaption></p>\n</figure>\n</div>\n<div class=\"b_col\">\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/responsiveExample--mobile@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/responsiveExample--mobile.png\" alt=\"Wireframe showing a desktop design squished to mobile size\"></source></picture><p><figcaption>The squished desktop layout</figcaption></p>\n</figure>\n</div>\n\n<h2>Flexible design can be more accessible design</h2>\n\n<p>We can’t spend endless amounts of our time (and our clients’ money) on every edge case imaginable. We can be more mindful of the influence of the canvas on which we create, the tools we use, and the data we design around.</p>\n\n<p>It’s necessary to focus attention and testing on the ways in which your site will most commonly be accessed. Things don’t have to be, and never will be, perfect at every screen size. <a href=\"https://alistapart.com/article/the-illusion-of-control-in-web-design\">Letting go of control</a> and embracing this fluidity is part of designing for the web.</p>\n\n<p>Designing with flexibility can also make your design more accessible. Those with vision impairments (which is most of us at some point in our lives) may browse with a customized minimum font size. Others may browser at a zoom level that triggers responsive layouts intended for mobile devices even on a large desktop browser.</p>\n\n<h2>Avoid the disappointing reveal</h2>\n\n<p>There are enough factors that can already contribute to clients and stakeholders having unrealistic expectations and being disappointed by the eventual implementation. Don’t add to this potential mismatch of expectations by showing designs that look flawless, only to have the client review them in the harsh light of real data.</p>\n\n<p>While you may need to convince people of the merits of your design, you’ll only set yourself up for failure if you choose to showcase an unrealistic design. Instead, indulge initially by showing the layout with ideal data <em>Then</em> show how durable and flexible the design is by showing variations with difficult data. This not only helps people understand your design but also the value of your process and expertise.</p>\n\n<p>When I was a kid, I distinctly remember a door-to-door vacuum salesman jumping on a vacuum cleaner to demonstrate the durability of his product. We didn’t need a new vacuum (the immediate flaw in the whole door-to-door model), but the image stuck with me. Jump on your designs! Throw them against the wall! Fill them with garbage and show how well they hold up.</p>\n\n<p>For example, when showing a design to a client, show them how it adapts to various viewport widths and default font sizes. Showing a client how their site responds to browser sizes can also help them let go of the need to polish designs solely for the particular device and size they happen to use. If you’ve got a robust way of dealing with long names on a profile page, show it off! This can help your client understand that there is a whole other dimension of work (and time, and money) beyond what’s visible in a static screenshot.</p>\n\n<h2>Garbage in, gold out?</h2>\n\n<p>The old computer science adage reads, “garbage in, garbage out.” Instead, aim for “garbage in, hrm … not bad.” A better adage to lean on may be <a href=\"https://en.wikipedia.org/wiki/Robustness_principle\"><i>Postel’s law</i>, also known as the <i>robustness principle</i></a>: “Be conservative in what you do, be liberal in what you accept from others.” If you imagine your evil twin trying to pick apart your design, how would they break it? Maybe squish the browser to a narrow size, and enter some unusually long headlines (garbage in). Your design should respond nicely to the narrow width, and gracefully reduce the font size of particularly long headlines (gold out).</p>\n\n<p>With practice, you can internalize some of this process. You’ll come to know instinctively what pitfalls come with a given visual design. Much in the same way experts in accessibility or internationalization learn to quickly spot the common pitfalls that limit the universality of designs. While our intuition can help us, it can also trick us—be sure to test, and see how real people work with your product.</p>\n\n<p>Even as you do hone your ability to anticipate and avoid common mistakes, your mind will constantly be pulling toward the path of least resistance. Like endurance athletes training at high altitudes, exercising with ankle weights, or the pro baseball player taking practice swings with a weighted bat, we must continue to artificially increase the strain on our work.</p>\n\n<h2>Real data isn’t good enough</h2>\n\n<p>Much has been written on the benefits of designing with real data. My colleague <a href=\"https://library.gv.com/fake-designs-yield-real-results-c39cfc9ae93\">Daniel Burka writes</a>:</p>\n\n<figure class=\"quote\"><blockquote>Try not to gloss over complexity. Design work in the real world is pretty hard. If you design a fake graph, put in realistic data. If you fake redesign a site, … don’t just magically remove an ad unit. If you create a sexy fake login screen, don’t forget to include a way to recover lost passwords or usernames. … Write real copy. Lorem ipsum is for amateurs.</blockquote>\n</figure><p>Daniel is right—especially when it comes to interface elements where the meaning of the text is inextricable from the function. When it comes to design elements that may display widely variable contents (profile photos or names, for example), you can do better than using real data. Go beyond realistic data. Get <em>difficult</em> data.</p>\n\n<p>If you are able to pull in real data, dig through it for the worst cases. If you can handle the worst, the common cases will be a breeze.</p>\n\n<p>When redesigning an existing screen, take advantage of the current and historical data available. Dig into the extremes of the data, finding the longest and shortest titles. If you’re designing with thumbnails of photos or videos, grab a random set of real thumbnails and throw away those you know are easy to design around.</p>\n\n<p>When you don’t have existing data, and even when you do, create difficult examples. Write headlines that push up to and beyond the limits of what the screen can accommodate. Create thumbnail images that have their own built-in border or shadow, and see how they clash with what you’ve got in place. </p>\n\n<h2>Sometimes difficult data can (and should) be fixed</h2>\n\n<p>While your design should be as robust as possible, you may sometimes turn up edge cases that needn’t be so. In designing a list page with a client, we looked at their complete archive of data to see how the length of the item titles varied. The shortest title was 8 characters, and the longest was over 320, but only a handful were over 80.</p>\n\n<p>We worked with the client to create a design that catered to the maximum 80-character titles. Some editorial surgery was then performed on those few outliers to get them in under the limit. They ended up being better titles as a result.</p>\n\n<p>When dealing with content that is managed by your company, team, or client, it is also worth codifying the practices into a style guide. You needn’t spend all of your energy designing around difficult data that’s coming from down the hall.</p>\n\n<h2>Internationalization</h2>\n\n<p>I’ve had the privilege of working with teams at Mozilla, where pages are translated into as many as eighty languages. With such broad localization efforts, we learned to build page layouts and designs that supported both non-Latin character sets and languages with right-to-left text direction.</p>\n\n<p>Supporting both left-to-right and right-to-left languages requires more than just allowing text strings to reverse. The entire visual structure of your layout and design needs to be able to flip horizontally. Rather than being a frustrating limitation, you’ll find this and other similar constraints will help you develop design superpowers. </p>\n\n<p>In anticipation of the longer text strings in languages like German, some designers developed a process where Latin text is generated at twice the length of the source text. The W3C has a <a href=\"https://www.w3.org/International/articles/article-text-size\">handy article on common length ratios across languages</a>.</p>\n\n<p>Capitalization can also be problematic in some locales—especially when forced with CSS. If your design really relies on <code>text-transform: uppercase</code> or <code>text-transform: lowercase</code>, either revisit the design to be more flexible, or handle capitalization in the source text (rather than via CSS) so a localization team can maintain control over capitalization.</p>\n\n<p>MDN is a great resource for more on <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Localization/Localization_content_best_practices#Create_localizable_UI\">designing for localization</a>.</p>\n\n<p>Beware of your own cultural blindness when it comes to placeholder data during the design process. Design cheating often affects those least like yourself.</p>\n\n<h2>Whenever possible, design with <em>difficult</em> data</h2>\n\n<p>Much has been written (and should be read) about how our <a href=\"https://medium.com/bridge-collection/modern-design-tools-using-real-data-62d499e97482\">tools can help us design with real data</a>. With modern design and prototyping tools, HTML/CSS/JS prototypes, and even static mockups, we only cheat ourselves if we aren’t pushing our designs to the breaking point.</p>\n\n<p>There’s always a balance to strike between making something quick and over-building. As with all things in design and on the web, <em>it depends</em>. It depends on the data, the audience, the project, and the goals.</p>\n\n<p>Schedule and budget are the common excuses for not delivering more robust design components. Especially on larger projects, though, learning to incorporate more difficult data into your early design process can save you time in the long run.</p>\n\n<p>Like that long-distance runner who improves by training in the thin air of high altitudes, by building with difficult data from the very beginning, you’ll become a stronger designer. You’ll be more aware of where and how your design may break, and be better able to communicate your process and decisions.</p>\n\n<p> </p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/2kDmYy4kCuo\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>You’ve been asked to design a profile screen for a mobile or web app. It will need to include an avatar, a name, a job title, and a location. You fire up Sketch or Figma. Maybe you pull out your drafting pencil or head straight to markup and CSS.</p>\n\n<h2>What’s your go-to fake name?</h2>\n\n<p>Regardless of your choice in tools, you’re probably going to end up with some placeholder data. Are you the type that uses your own name, or do you conjure up your old friend, <i>Mr. Lorem Ipsum</i>? Maybe you have a go-to fake name, like <i>Sophia J. Placeholder</i>.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/IntroExample--template@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/IntroExample--template.png\" alt=\"A content placeholder card, with spaces for full name, job title, and location\"></source></picture></figure><p>For me, it’s <i>Nuno Bettencourt</i>. Or <i>Nuno Duarte Gil Mendes Bettencourt</i>, more formally. Nuno played guitar in the subtly-named early 90s band Extreme. To the younger among you, he was a touring musician with Rihanna. None of that matters for our purposes here today, except that he has a fairly long name.</p>\n\n<p>It may not seem like it matters what you put in for a placeholder name. It won’t end up in the final product—it’s just a variable. Well, it does matter. <strong>The text you start with will subtly influence your approach to layout and style.</strong> It may limit the scope of options you allow yourself to consider, or more dangerously, obscure actual limits that you’ll run into later.</p>\n\n<figure><img src=\"https://alistapart.com/d/design-with-difficult-data/IntroExample--bad@2x.png\" alt=\"The same content placeholder card, with long data for each of the values. It's too long for the design.\"></figure><p>A few obvious solutions may spring to mind: use a long placeholder name; use real data in your design. While these are a good start, it’s worth exploring more deeply how these and other practices can both improve your design process and help produce more durable products.</p>\n\n<h2>It’s more than just fake names</h2>\n\n<p>This is about more than just fake names. It’s also fake addresses! Fake headlines! Fake photos! When we design around limited data, the limitations bleed into our designs.</p>\n\n<p>The inability to deal with long strings of text is the most basic and maybe most common way components can fail when coming in contact with real data. You thought the tab would be labelled “Settings”? Well, now it’s called “Application Preferences.” Oh, and the product launches tomorrow.</p>\n\n<p>Length is just one of many ways that real text and data can strain a weak design. You may also encounter unanticipated line-breaks or even text that’s too short. Beware of the following areas where we tend to cheat with easy placeholder data.</p>\n\n<h3>Account profile photos</h3>\n\n<p>Don’t expect people to have a studio quality self-portrait with a solid white background (and be suspicious of those who do!). Many people may not be interested in uploading a photo for their account at all. Others may try to squeeze in their much-too-wide company logo into that little square or circular area. You can’t account for all possible data, but if you incorporate some of these less-than-visually-ideal cases early in your design process, your output will be that much more resilient.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--avatars@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--avatars.png\" alt=\"Several round avatar graphics, with images that don't fit in the round shape\"></source></picture></figure><h3>Thumbnails for videos and photos</h3>\n\n<p>Not all thumbnails will be in the aspect ratio you’ve anticipated. Some might include text or images that clash unexpectedly with the surrounding page. A common issue I’ve seen is a nicely designed home page with a company logo prominently displayed at the top. Then, the video arrives and the default poster image for the video also includes the company logo. Now your beautiful home page layout looks like a logo salad.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--thumbnails@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--thumbnails.png\" alt=\"Several video thumbnails with graphics that don't fit the thumbnail size\"></source></picture></figure><h3>Wild variations in amounts</h3>\n\n<p>Watch for elements containing lists where the amount of items in those lists may vary significantly. Imagine a layout with cards where each card includes a set of tags. One card may have three tags while another may have twenty-five. Tabular data can also suffer both aesthetically and in legibility when one particular cell varies wildly in length from the others.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--amounts@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--amounts.png\" alt=\"Several wireframes showing content of different lengths\"></source></picture></figure><h3>Missing elements</h3>\n\n<p>You may create a nice layout for your site header that scales beautifully from your phone to your 27” display. Then you discover it needs a Support menu item—but there’s no room! I often start a wireframe by compiling two lists. The first contains the goals a visitor to this screen needs to accomplish. The second has the elements that need to live on this screen. Be sure to include all of the elements—from the primary content to advertisements, and down to a privacy link in the footer. It’s particularly easy to spot a site that was designed without accounting for the advertisements it includes.</p>\n\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/Example--missing-elements@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/Example--missing-elements.png\" alt=\"Wireframe showing a nav bar and a spot where an element was removed\"></source></picture></figure><h3>Viewport sizes</h3>\n\n<p>Beyond placeholder data, we have a tendency to present our designs at the most flattering viewport sizes. Or rather, we design our layouts to look best at the sizes we choose for our mockups—particularly when we design with tools built around fixed frame sizes. In the neglected troughs of responsive design, we find two common pitfalls: the stretched mobile layout and the squished desktop design layout.</p>\n\n<div class=\"b_col\">\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/responsiveExample--desktop@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/responsiveExample--desktop.png\" alt=\"Wireframe showing a mobile design stretched to desktop size\"></source></picture><p><figcaption>The stretched mobile layout</figcaption></p>\n</figure>\n</div>\n<div class=\"b_col\">\n<figure><picture><source media=\"(min-width: 600px)\" srcset=\"/d/design-with-difficult-data/responsiveExample--mobile@2x.png\"><img src=\"https://alistapart.com/d/design-with-difficult-data/responsiveExample--mobile.png\" alt=\"Wireframe showing a desktop design squished to mobile size\"></source></picture><p><figcaption>The squished desktop layout</figcaption></p>\n</figure>\n</div>\n\n<h2>Flexible design can be more accessible design</h2>\n\n<p>We can’t spend endless amounts of our time (and our clients’ money) on every edge case imaginable. We can be more mindful of the influence of the canvas on which we create, the tools we use, and the data we design around.</p>\n\n<p>It’s necessary to focus attention and testing on the ways in which your site will most commonly be accessed. Things don’t have to be, and never will be, perfect at every screen size. <a href=\"https://alistapart.com/article/the-illusion-of-control-in-web-design\">Letting go of control</a> and embracing this fluidity is part of designing for the web.</p>\n\n<p>Designing with flexibility can also make your design more accessible. Those with vision impairments (which is most of us at some point in our lives) may browse with a customized minimum font size. Others may browser at a zoom level that triggers responsive layouts intended for mobile devices even on a large desktop browser.</p>\n\n<h2>Avoid the disappointing reveal</h2>\n\n<p>There are enough factors that can already contribute to clients and stakeholders having unrealistic expectations and being disappointed by the eventual implementation. Don’t add to this potential mismatch of expectations by showing designs that look flawless, only to have the client review them in the harsh light of real data.</p>\n\n<p>While you may need to convince people of the merits of your design, you’ll only set yourself up for failure if you choose to showcase an unrealistic design. Instead, indulge initially by showing the layout with ideal data <em>Then</em> show how durable and flexible the design is by showing variations with difficult data. This not only helps people understand your design but also the value of your process and expertise.</p>\n\n<p>When I was a kid, I distinctly remember a door-to-door vacuum salesman jumping on a vacuum cleaner to demonstrate the durability of his product. We didn’t need a new vacuum (the immediate flaw in the whole door-to-door model), but the image stuck with me. Jump on your designs! Throw them against the wall! Fill them with garbage and show how well they hold up.</p>\n\n<p>For example, when showing a design to a client, show them how it adapts to various viewport widths and default font sizes. Showing a client how their site responds to browser sizes can also help them let go of the need to polish designs solely for the particular device and size they happen to use. If you’ve got a robust way of dealing with long names on a profile page, show it off! This can help your client understand that there is a whole other dimension of work (and time, and money) beyond what’s visible in a static screenshot.</p>\n\n<h2>Garbage in, gold out?</h2>\n\n<p>The old computer science adage reads, “garbage in, garbage out.” Instead, aim for “garbage in, hrm … not bad.” A better adage to lean on may be <a href=\"https://en.wikipedia.org/wiki/Robustness_principle\"><i>Postel’s law</i>, also known as the <i>robustness principle</i></a>: “Be conservative in what you do, be liberal in what you accept from others.” If you imagine your evil twin trying to pick apart your design, how would they break it? Maybe squish the browser to a narrow size, and enter some unusually long headlines (garbage in). Your design should respond nicely to the narrow width, and gracefully reduce the font size of particularly long headlines (gold out).</p>\n\n<p>With practice, you can internalize some of this process. You’ll come to know instinctively what pitfalls come with a given visual design. Much in the same way experts in accessibility or internationalization learn to quickly spot the common pitfalls that limit the universality of designs. While our intuition can help us, it can also trick us—be sure to test, and see how real people work with your product.</p>\n\n<p>Even as you do hone your ability to anticipate and avoid common mistakes, your mind will constantly be pulling toward the path of least resistance. Like endurance athletes training at high altitudes, exercising with ankle weights, or the pro baseball player taking practice swings with a weighted bat, we must continue to artificially increase the strain on our work.</p>\n\n<h2>Real data isn’t good enough</h2>\n\n<p>Much has been written on the benefits of designing with real data. My colleague <a href=\"https://library.gv.com/fake-designs-yield-real-results-c39cfc9ae93\">Daniel Burka writes</a>:</p>\n\n<figure class=\"quote\"><blockquote>Try not to gloss over complexity. Design work in the real world is pretty hard. If you design a fake graph, put in realistic data. If you fake redesign a site, … don’t just magically remove an ad unit. If you create a sexy fake login screen, don’t forget to include a way to recover lost passwords or usernames. … Write real copy. Lorem ipsum is for amateurs.</blockquote>\n</figure><p>Daniel is right—especially when it comes to interface elements where the meaning of the text is inextricable from the function. When it comes to design elements that may display widely variable contents (profile photos or names, for example), you can do better than using real data. Go beyond realistic data. Get <em>difficult</em> data.</p>\n\n<p>If you are able to pull in real data, dig through it for the worst cases. If you can handle the worst, the common cases will be a breeze.</p>\n\n<p>When redesigning an existing screen, take advantage of the current and historical data available. Dig into the extremes of the data, finding the longest and shortest titles. If you’re designing with thumbnails of photos or videos, grab a random set of real thumbnails and throw away those you know are easy to design around.</p>\n\n<p>When you don’t have existing data, and even when you do, create difficult examples. Write headlines that push up to and beyond the limits of what the screen can accommodate. Create thumbnail images that have their own built-in border or shadow, and see how they clash with what you’ve got in place. </p>\n\n<h2>Sometimes difficult data can (and should) be fixed</h2>\n\n<p>While your design should be as robust as possible, you may sometimes turn up edge cases that needn’t be so. In designing a list page with a client, we looked at their complete archive of data to see how the length of the item titles varied. The shortest title was 8 characters, and the longest was over 320, but only a handful were over 80.</p>\n\n<p>We worked with the client to create a design that catered to the maximum 80-character titles. Some editorial surgery was then performed on those few outliers to get them in under the limit. They ended up being better titles as a result.</p>\n\n<p>When dealing with content that is managed by your company, team, or client, it is also worth codifying the practices into a style guide. You needn’t spend all of your energy designing around difficult data that’s coming from down the hall.</p>\n\n<h2>Internationalization</h2>\n\n<p>I’ve had the privilege of working with teams at Mozilla, where pages are translated into as many as eighty languages. With such broad localization efforts, we learned to build page layouts and designs that supported both non-Latin character sets and languages with right-to-left text direction.</p>\n\n<p>Supporting both left-to-right and right-to-left languages requires more than just allowing text strings to reverse. The entire visual structure of your layout and design needs to be able to flip horizontally. Rather than being a frustrating limitation, you’ll find this and other similar constraints will help you develop design superpowers. </p>\n\n<p>In anticipation of the longer text strings in languages like German, some designers developed a process where Latin text is generated at twice the length of the source text. The W3C has a <a href=\"https://www.w3.org/International/articles/article-text-size\">handy article on common length ratios across languages</a>.</p>\n\n<p>Capitalization can also be problematic in some locales—especially when forced with CSS. If your design really relies on <code>text-transform: uppercase</code> or <code>text-transform: lowercase</code>, either revisit the design to be more flexible, or handle capitalization in the source text (rather than via CSS) so a localization team can maintain control over capitalization.</p>\n\n<p>MDN is a great resource for more on <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Localization/Localization_content_best_practices#Create_localizable_UI\">designing for localization</a>.</p>\n\n<p>Beware of your own cultural blindness when it comes to placeholder data during the design process. Design cheating often affects those least like yourself.</p>\n\n<h2>Whenever possible, design with <em>difficult</em> data</h2>\n\n<p>Much has been written (and should be read) about how our <a href=\"https://medium.com/bridge-collection/modern-design-tools-using-real-data-62d499e97482\">tools can help us design with real data</a>. With modern design and prototyping tools, HTML/CSS/JS prototypes, and even static mockups, we only cheat ourselves if we aren’t pushing our designs to the breaking point.</p>\n\n<p>There’s always a balance to strike between making something quick and over-building. As with all things in design and on the web, <em>it depends</em>. It depends on the data, the audience, the project, and the goals.</p>\n\n<p>Schedule and budget are the common excuses for not delivering more robust design components. Especially on larger projects, though, learning to incorporate more difficult data into your early design process can save you time in the long run.</p>\n\n<p>Like that long-distance runner who improves by training in the thin air of high altitudes, by building with difficult data from the very beginning, you’ll become a stronger designer. You’ll be more aware of where and how your design may break, and be better able to communicate your process and decisions.</p>\n\n<p> </p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/2kDmYy4kCuo\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Design, Layout &amp;amp; Grids"],"color":"tan","category":"A List Apart:","date":"2018-09-06 13:21:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Can Software Make You Less Racist?","pubDate":"2016-08-25 07:52:37","link":"https://blog.codinghorror.com/can-software-make-you-less-racist/","guid":"5988f60721f57d0019a2e123","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2016/08/gay_marriage.png","description":"<div class=\"kg-card-markdown\"><p>I don't think we computer geeks appreciate how profoundly the rise of the smartphone, and Facebook, has changed the Internet audience. It's something that really only happened in <strong>the last five years</strong>, as smartphones and data plans dropped radically in price and became accessible – and addictive – to huge segments of</p></div>","content":"<div class=\"kg-card-markdown\">\n<p>I don't think we computer geeks appreciate how profoundly the rise of the smartphone, and Facebook, has changed the Internet audience. It's something that really only happened in <strong>the last five years</strong>, as smartphones and data plans dropped radically in price and became accessible – and addictive – to huge segments of the population.</p>\n<p>People may have regularly <em>used</em> computers in 2007, sure, but that is a very different thing than having your computer in your pocket, 24/7, with you every step of every day, fully integrated into your life. As Jerry Seinfeld noted in 2014:</p>\n\n<blockquote>\n<p>But I know you got your phone. Everybody here's got their phone. There's not one person here who doesn't have it. You better have it … you gotta have it. Because there is no <em>safety</em>, there is no <em>comfort</em>, there is no <em>security</em> for you in this life any more … unless when you're walking down the street you can feel a <em>hard rectangle in your pants</em>.</p>\n</blockquote>\n<p>It's an addiction that is new to millions – but eerily familiar to us.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">From \"only nerds will use the Internet\" to \"everyone stares at their smartphones all day long!\" in 20 years. Not bad, team :-).</p>— Marc Andreessen (@pmarca) <a href=\"https://twitter.com/pmarca/status/556161530455023617\">January 16, 2015</a>\n</blockquote>\n<p>The good news is that, at this moment, every human being is far more connected to their fellow humans than any human has ever been in the entirety of recorded history.</p>\n<p>Spoiler alert: that's also the bad news.</p>\n<p><a href=\"https://nextdoor.com/\">Nextdoor</a> is a Facebook-alike focused on specific neighborhoods. The idea is that you and everyone else on your block would join, and you can privately discuss local events, block parties, and generally hang out like neighbors do. It's a good idea, and my wife started using it a fair amount in the last few years. We feel more connected to our neighbors through the service. But one unfortunate thing you'll find out when using Nextdoor is that <strong>your neighbors are probably a <em>little bit racist</em>.</strong></p>\n<p>I don't use Nextdoor myself, but I remember Betsy specifically complaining about the casual racism she saw there, and I've also seen it mentioned several times on Twitter by people I follow. They're <a href=\"http://www.eastbayexpress.com/oakland/racial-profiling-via-nextdoorcom/Content?oid=4526919\">not the only ones</a>. It became so epidemic that Nextdoor got a reputation for being a <a href=\"http://fusion.net/story/106341/nextdoor-the-social-network-for-neighbors-is-becoming-a-home-for-racial-profiling/\">racial profiling hub</a>. Which is obviously not good.</p>\n<p>Social networking historically trends young, with the early adopters. Facebook launched as a site for college students. But as those networks grow, they inevitably age. They begin to include older people. And those older people will, statistically speaking, be more racist. I apologize if this sounds ageist, but let me ask you something: do you consider your parents a little racist? I will personally admit that <strong>one of my parents is definitely someone I would label a little bit racist</strong>. It's … not awesome.</p>\n<p><a href=\"http://theoatmeal.com/comics/gay_marriage\"><img src=\"https://blog.codinghorror.com/content/images/2016/08/gay_marriage.png\" alt=\"\"></a></p>\n<p>The older the person, the more likely they are to have these \"old fashioned\" notions that the mere presence of differently-colored people on your block is inherently suspicious, and marriage should <a href=\"http://en.wikipedia.org/wiki/Public_opinion_of_same-sex_marriage_in_the_United_States#By_age\">probably be defined as between a man and a woman</a>.</p>\n<blockquote>\n<p>In one meta-analysis by Jeffrey Lax and Justin Phillips of Columbia University, a majority of 18–29 year old Americans in 38 states support same sex marriage while in only 6 states do less than 45% of 18–29 year olds support same-sex marriage. At the same time not a single state shows support for same-sex marriage greater than 35% amongst those 64 and older</p>\n</blockquote>\n<p>The idea that regressive social opinions correlate with age isn't an opinion; it's <a href=\"http://en.wikipedia.org/wiki/Public_opinion_of_same-sex_marriage_in_the_United_States#By_age\">a statistical fact</a>.</p>\n<blockquote>\n<p>Support for same-sex marriage in the U.S.</p>\n<pre><code>18 - 29 years old    65%\n30 - 49 years old    54%\n50 - 64 years old    45%\n65+ years old        39%\n</code></pre>\n</blockquote>\n<p>Are there progressive septuagenarians? Sure there are. But not many.</p>\n<p>To me, failure to support same-sex marriage is as inconceivable as failing to support interracial marriage. Which was <em>not</em> that long ago, to the tune of the late 60s and early 70s. If you want some truly hair-raising reading, <a href=\"http://en.wikipedia.org/wiki/Loving_v._Virginia\">try Loving v. Virginia on for size</a>. Because Virginia <a href=\"http://www.virginia.org/virginiaisforlovers/\">is for lovers</a>. Just not those kind of lovers, 49 years ago. In the interests of full disclosure, I am 45 years old, and I graduated from the University of Virginia.</p>\n<p>With Nextdoor, you're more connected with your neighbors than ever before. But through that connection you may also find out some regressive things about your neighbors that you'd never have discovered in years of the traditional daily routine of polite waves, hellos from the driveway, and casual sidewalk conversations.</p>\n<p>To their immense credit, rather than accepting this status quo, Nextdoor did what any self-respecting computer geek would do: they <strong>changed their software</strong>. Now, when you attempt to post about a crime or suspicious activity …</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/08/nextdoor-race-1.png\" alt=\"\"></p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/08/nextdoor-race-2.png\" alt=\"\"></p>\n<p>… you get <a href=\"https://blog.codinghorror.com/the-just-in-time-theory/\">smart, just in time nudges</a> to think less about race, and more about <em>behavior</em>.</p>\n<p>The results were <a href=\"https://www.buzzfeed.com/carolineodonovan/nextdoor-rolls-out-product-fix-it-hopes-will-stem-racial-pro\">striking</a>:</p>\n<blockquote>\n<p>Nextdoor claims this new multi-step system has, so far, reduced instances of racial profiling by 75%. It’s also decreased considerably the number of notes about crime and safety. During testing, the number of crime and safety issue reports abandoned before being published rose by 50%. “It’s a fairly significant dropoff,” said Tolia, “but we believe that, for Nextdoor, quality is more important than quantity.”</p>\n</blockquote>\n<p>I'm a huge fan of designing software to help nudge people, at <em>exactly the right time</em>, to <a href=\"https://blog.codinghorror.com/what-if-we-could-weaponize-empathy/\">be their better selves</a>. And this is a textbook example of doing it right.</p>\n<p>Would using Nextdoor and encountering these dialogs make my aforementioned parent a little bit less racist? Probably not. But I like to think they would stop for at least a moment and <strong>consider the importance of focusing on the <em>behavior</em> that is problematic, rather than the individual person</strong>. This is a philosophy I promoted on Stack Overflow, I continue to promote with Discourse, and I reinforce daily with our three kids. You never, ever judge someone by what they look like. Consider <em>what they do</em> instead.</p>\n<p>If you were getting excited about the prospect of validating <a href=\"https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines\">Betteridge's Law</a> yet again, I'm sorry to disappoint you. I truly do believe software, properly designed software, can not only help us <a href=\"https://blog.codinghorror.com/civilized-discourse-construction-kit/\">be more civil to each other</a>, but can also help people – maybe even people you love – <em>behave</em> a bit less like racists online.</p>\n<table><tr><td class=\"welovecodinghorror\">\n[advertisement] At Stack Overflow, we help developers learn, share, and grow. Whether you’re looking for your next dream job or looking to build out your team, <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">we've got your back</a>.\n</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2016-08-25 07:52:37","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Coding with Clarity: Part II","pubDate":"2018-08-23 13:05:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/e5kHmoFPvtE/coding-with-clarity-part-ii","guid":"http://alistapart.com/article/coding-with-clarity-part-ii","author":"by","thumbnail":"http://feeds.feedburner.com/~r/alistapart/main/~4/e5kHmoFPvtE","description":"\n<p>As any developer who works with other developers can attest, if code is unclear, problems occur. In <a href=\"https://alistapart.com/article/coding-with-clarity\">Part I</a> of this series, I went over some principles to improve clarity in our code to prevent problems that can arise from unclear code. As our apps get larger, clarity becomes even more important, and we need to take extra care to ensure that our code is easy to read, understand, and modify or extend. This article discusses some more-advanced principles related to object-oriented programming (OOP) to improve clarity in larger apps.</p>\n\n<p><i>Note: Though the principles in this article are applicable to a variety of programming languages, the examples pull from object-oriented JavaScript. If you’re not familiar with this, read <a href=\"https://alistapart.com/article/coding-with-clarity\">my first article</a> to get up to speed, as well as to find some other resources to help improve your understanding of object-oriented programming.</i></p>\n\n<h2>The Law of Demeter</h2>\n\n<p>Imagine you’re an office manager at an apartment complex. The end of the month comes and the rent is due. You go through the drop box in the office and find checks from most of your tenants. But among the neatly-folded checks is a messy note on a scrap of paper that instructs you to unlock apartment 309, open the top drawer of the dresser on the left side of the bed, and remove the money from the tenant’s wallet. Oh, and don’t let the cat out! If you’re thinking that’s ridiculous, yeah, you’re right. To get the rent money each month, you shouldn’t be required to know how a tenant lays out their apartment and where they store their wallet. It’s just as ridiculous when we write our code this  way.</p>\n\n<p>The <i>Law of Demeter</i>, or <i>principle of least knowledge</i>, states that a unit of code should require only limited knowledge of other code units and should only talk to close friends. In other words, your class should not have to reach several levels deep into another class to accomplish what it needs to. Instead, classes should provide abstractions to make any of its internal data available to the rest of the application.</p>\n\n<p>(<i>Note: the Law of Demeter is a specific application of <a href=\"https://alistapart.com/article/coding-with-clarity#section3\">loose coupling</a>, which I talk about in my first article.</i>)</p>\n\n<p>As an example, let’s say we have a class for a department in your office. It includes various bits of information, including a manager. Now, let’s say we have another bit of code that wants to email one of these managers. Without the Law of Demeter, here’s how that function might look:</p>\n\n<pre><code class=\"language-javascript\">function emailManager(department) {\n  const managerFirstName = department.manager.firstName;\n  const managerLastName = department.manager.lastName;\n  const managerFullName = `${managerFirstName} ${managerLastName}`;\n  const managerEmail = department.manager.email;\n  sendEmail(managerFullName, managerEmail);\n}</code></pre>\n\n<p>Very tedious! And on top of that, if anything changes with the implementation of the manager in the <code>Department</code> class, there’s a good chance this will break. What we need is a level of abstraction to make this function’s job easier.</p>\n\n<p>We can add this method to our <code>Department</code> class:</p>\n\n<pre><code class=\"language-javascript\">getManagerEmailObj: function() {\n  return {\n    firstName: this.manager.firstName,\n    lastName: this.manager.lastName,\n    fullName: `${this.manager.firstName} ${this.manager.lastName}`,\n    email: this.manager.email\n  };\n}</code></pre>\n\n<p>With that, the first function can be rewritten as this:</p>\n\n<pre><code class=\"language-javascript\">function emailManager(department) {\n  let emailObj = department.getManagerEmailObj();\n  sendEmail(emailObj.fullName, emailObj.email);\n}</code></pre>\n\n<p>This not only makes the function much cleaner and easier to understand, but it makes it easier to update the <code>Department</code> class if needed (although that can also be dangerous, as we’ll discuss later). You won’t have to look for every place that tries to access its internal information, you just update the internal method. </p>\n\n<p>Setting up our classes to enforce this can be tricky. It helps to draw a distinction between traditional OOP objects and data structures. Data structures should expose <i>data</i> and contain no behavior. OOP objects should expose <i>behavior</i> and limit access to data. In languages like C, these are separate entities, and you have to explicitly choose one of these types. In JavaScript, the lines are blurred a bit because the object type is used for both.</p>\n\n<p>Here’s a data structure in JavaScript:</p>\n\n<pre><code class=\"language-javascript\">let Manager = {\n  firstName: 'Brandon',\n  lastName: 'Gregory',\n  email: 'brandon@myurl.com'\n};</code></pre>\n\n<p>Note how the data is easily accessible. That’s the whole point. However, if we want to expose behavior, per best practice, we’d want to hide the data using internal variables on a class:</p>\n\n<pre><code class=\"language-javascript\">class Manager {\n  constructor(options) {\n    let firstName = options.firstName;\n    let lastName = options.lastName;\n    this.setFullName = function(newFirstName, newLastName) {\n      firstName = newFirstName;\n      lastName = newLastName;\n    };\n    this.getFullName = function() {\n      return `${firstName} ${lastName}`;\n    }\n  }\n}</code></pre>\n\n<p>Now, if you’re thinking that’s unnecessary, you’re correct in this case—there’s not much point to having getters and setters in a simple object like this one. Where getters and setters become important is when internal logic is involved:</p>\n\n<pre><code class=\"language-javascript\">class Department {\n  constructor(options) {\n    // Some other properties\n    let Manager = options.Manager;\n    this.changeManager(NewManager) {\n      if (checkIfManagerExists(NewManager)) {\n        Manager = NewManager;\n        // AJAX call to update Manager in database\n      }\n    };\n    this.getManager {\n      if (checkIfUserHasClearance()) {\n        return Manager;\n      }\n    }\n  }\n}</code></pre>\n\n<p>This is still a small example, but you can see how the getter and setter here are doing more than just obfuscating the data. We can attach logic and validation to these methods that consumers of a <code>Department</code> object shouldn’t have to worry about. And if the logic changes, we can change it on the getter and setter without finding and changing every bit of code that tries to get and set those properties. Even if there’s no internal logic when you’re building your app, there’s no guarantee that you won’t need it later. You don’t have to know what you’ll need in the future, you just have to leave space so you can add it later. Limiting access to data in an object that exposes behavior gives you a buffer to do this in case the need arises later.</p>\n\n<p>As a general rule, if your object exposes behavior, it’s an OOP object, and it should not allow direct access to the data; instead, it should provide methods to access it safely, as in the above example. However, if the point of the object is to expose data, it’s a data structure, and it should not also contain behavior. Mixing these types muddies the water in your code and can lead to some unexpected (and sometimes dangerous) uses of your object’s data, as other functions and methods may not be aware of all of the internal logic needed for interacting with that data.</p>\n\n<h2>The interface segregation principle</h2>\n\n<p>Imagine you get a new job designing cars for a major manufacturer. Your first task: design a sports car. You immediately sit down and start sketching a car that’s designed to go fast and handle well. The next day, you get a report from management, asking you to turn your sports car into a sporty minivan. Alright, that’s weird, but it’s doable. You sketch out a sporty minivan. The next day, you get another report. Your car now has to function as a boat as well as a car. Ridiculous? Well, yes. There’s no way to design one vehicle that meets the needs of all consumers. Similarly, depending on your app, it can be a bad idea to code one function or method that’s flexible enough to handle everything your app could throw at it.</p>\n\n<p>The <i>interface segregation principle</i> states that no client should be forced to depend on methods it does not use. In simpler terms, if your class has a plethora of methods and only a few of them are used by each user of the object, it makes more sense to break up your object into several more focused objects or interfaces. Similarly, if your function or method contains several branches to behave differently based on what data it receives, that’s a good sign that you need different functions or methods rather than one giant one.</p>\n\n<p>One big warning sign for this is flags that get passed into functions or methods. Flags are Boolean variables that significantly change the behavior of the function if true. Take a look at the following function:</p>\n\n<pre><code class=\"language-javascript\">function addPerson(person, isManager) {\n  if (isManager) {\n    // add manager\n  } else {\n    // add employee\n  }\n}</code></pre>\n\n<p>In this case, the function is split up into two different exclusive branches—there’s no way both branches are going to be used, so it makes more sense to break this up into separate functions, since we know if the person is a manager when we call it.</p>\n\n<p>That’s a simplified example. An example closer to the actual definition of the interface segregation principle would be if a module contained numerous methods for dealing with employees and separate methods for dealing with managers. In this case, it makes much more sense to split the manager methods off into a separate module, even if the manager module is a child class of the employee module and shares some of the properties and methods.</p>\n\n<p>Please note: flags are not automatically evil. A flag can be fine if you’re using it to trigger a small optional step while most of the functionality remains the same for both cases. What we want to avoid is using flags to create “clever” code that makes it harder to use, edit, and understand. Complexity can be fine as long as you’re gaining something from it. But if you’re adding complexity and there’s no significant payoff, think about why you’re coding it that way.</p>\n\n<p>Unnecessary dependencies can also happen when developers try to implement features they think they might need in the future. There are a few problems with this. One, there’s a considerable cost to pay now in both development time and testing time for features that won’t be used now—or possibly at all. Two, it’s unlikely that the team will know enough about future requirements to adequately prepare for the future. Things will change, and you probably won’t know <em>how</em> things will change until phase one goes out into production. You should write your functions and methods to be open to extend later, but be careful trying to guess what the future holds for your codebase.</p>\n\n<p>Adhering to the interface segregation principle is definitely a balancing act, as it’s possible to go too far with abstractions and have a ridiculous number of objects and methods. This, ironically, causes the same problem: added complexity without a payoff. There’s no hard rule to keep this in check—it’s going to depend on your app, your data, and your team. But there’s no shame in keeping things simple if making them complex does not help you. In fact, that’s usually the best route to go.</p>\n\n<h2>The open/closed principle</h2>\n\n<p>Many younger developers don’t remember the days before web standards changed development. (Thanks, Jeffrey Zeldman, for making our lives easier!) It used to be that whenever a new browser was released, it had its own interpretation of things, and developers had to scramble to find out what was different and how it broke all of their websites. There were articles and blog posts written quickly about new browser quirks and how to fix them, and developers had to drop everything to implement those fixes before clients noticed that their websites were broken. For many of the brave veterans of the first browser war, this wasn’t just a nightmare scenario—it was part of our job. As bad as that sounds, it’s easy for our code to do the same thing if we’re not careful about how we modify it.</p>\n\n<p>The <i>open/closed principle</i> states that software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. In other words, your code should be written in such a way that it’s easy to add new functionality while you disallow  changing existing functionality. Changing existing functionality is a great way to break your app, often without realizing it. Just like browsers rely on web standards to keep new releases from breaking our sites, your code needs to rely on its own internal standards for consistency to keep your code from breaking in unexpected ways.</p>\n\n<p>Let’s say your codebase has this function:</p>\n\n<pre><code class=\"language-javascript\">function getFullName(person) {\n  return `${person.firstName} ${person.lastName}`;\n}</code></pre>\n\n<p>A pretty simple function. But then, there’s a new use case where you need just the last name. <em>Under no circumstances</em> should you modify the above function like so:</p>\n\n<pre><code class=\"language-javascript\">function getFullName(person) {\n  return {\n    firstName: person.firstName,\n    lastName: person.lastName\n  };\n}</code></pre>\n\n<p>That solves your new problem, but it modifies existing functionality and will break every bit of code that was using the old version. Instead, you should extend functionality by creating a new function:</p>\n\n<pre><code class=\"language-javascript\">function getLastName(person) {\n  return person.lastName;\n}</code></pre>\n\n<p>Or, if we want to make it more flexible:</p>\n\n<pre><code class=\"language-javascript\">function getNameObject(person) {\n  return {\n    firstName: person.firstName,\n    lastName: person.lastName\n  };\n}</code></pre>\n\n<p>This is a simple example, but it’s easy to see how modifying existing functionality can cause major problems. Even if you’re able to locate every call to your function or method, they all have to be tested—the open/closed principle helps to reduce testing time as well as unexpected errors.</p>\n\n<p>So what does this look like on a larger scale? Let’s say we have a function to grab some data via an <code>XMLHTTPrequest</code> and do something with it:</p>\n\n<pre><code class=\"language-javascript\">function request(endpoint, params) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', endpoint, true);\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {     \n      // Do something with the data\n    }\n  };\n  xhr.send(params);\n}\n\nrequest('https://myapi.com','id=91');</code></pre>\n\n<p>That’s great if you’re always going to be doing the same thing with that data. But how many times does that happen? If we do <em>anything else</em> with that data, coding the function that way means we’ll need another function to do almost the same thing.</p>\n\n<p>What would work better would be to code our request function to accept a callback function as an argument:</p>\n\n<pre><code class=\"language-javascript\">function request(endpoint, params, callback) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', endpoint, true);\n  xhr.onreadystatechange = function() {\n    if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) {     \n      callback(xhr.responseText);\n    }\n  };\n  xhr.send(params);\n}\n\nconst defaultAction = function(responseText) {\n  // Do something with the data\n};\n\nconst alternateAction = function(responseText) {\n  // Do something different with the data\n};\n\nrequest('https://myapi.com','id=91',defaultAction);\nrequest('https://myapi.com','id=42',alternateAction);</code></pre>\n\n<p>With the function coded this way, it’s much more flexible and useful to us, because it’s easy to add in new functionality without modifying existing functionality. Passing a function as a parameter is one of the most useful tools we have in keeping our code extensible, so keep this one in mind when you’re coding as a way to future-proof your code.</p>\n\n<h2>Keeping it clear</h2>\n\n<p>Clever code that increases complexity without improving clarity helps nobody. The bigger our apps get, the more clarity matters, and the more we have to plan to make sure our code is clear. Following these guidelines helps improve clarity and reduce overall complexity, leading to fewer bugs, shorter timelines, and happier developers. They should be a consideration for any complex app.</p>\n\n<h2>Thanks</h2>\n\n<p>A special thanks to Zell Liew of <a href=\"https://learnjavascript.today/\">Learn JavaScript</a> for lending his technical oversight to this article. Learn JavaScript is a great resource for moving your JavaScript expertise from beginner to advanced, so it’s worth checking out to further your knowledge!</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/e5kHmoFPvtE\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>As any developer who works with other developers can attest, if code is unclear, problems occur. In <a href=\"https://alistapart.com/article/coding-with-clarity\">Part I</a> of this series, I went over some principles to improve clarity in our code to prevent problems that can arise from unclear code. As our apps get larger, clarity becomes even more important, and we need to take extra care to ensure that our code is easy to read, understand, and modify or extend. This article discusses some more-advanced principles related to object-oriented programming (OOP) to improve clarity in larger apps.</p>\n\n<p><i>Note: Though the principles in this article are applicable to a variety of programming languages, the examples pull from object-oriented JavaScript. If you’re not familiar with this, read <a href=\"https://alistapart.com/article/coding-with-clarity\">my first article</a> to get up to speed, as well as to find some other resources to help improve your understanding of object-oriented programming.</i></p>\n\n<h2>The Law of Demeter</h2>\n\n<p>Imagine you’re an office manager at an apartment complex. The end of the month comes and the rent is due. You go through the drop box in the office and find checks from most of your tenants. But among the neatly-folded checks is a messy note on a scrap of paper that instructs you to unlock apartment 309, open the top drawer of the dresser on the left side of the bed, and remove the money from the tenant’s wallet. Oh, and don’t let the cat out! If you’re thinking that’s ridiculous, yeah, you’re right. To get the rent money each month, you shouldn’t be required to know how a tenant lays out their apartment and where they store their wallet. It’s just as ridiculous when we write our code this  way.</p>\n\n<p>The <i>Law of Demeter</i>, or <i>principle of least knowledge</i>, states that a unit of code should require only limited knowledge of other code units and should only talk to close friends. In other words, your class should not have to reach several levels deep into another class to accomplish what it needs to. Instead, classes should provide abstractions to make any of its internal data available to the rest of the application.</p>\n\n<p>(<i>Note: the Law of Demeter is a specific application of <a href=\"https://alistapart.com/article/coding-with-clarity#section3\">loose coupling</a>, which I talk about in my first article.</i>)</p>\n\n<p>As an example, let’s say we have a class for a department in your office. It includes various bits of information, including a manager. Now, let’s say we have another bit of code that wants to email one of these managers. Without the Law of Demeter, here’s how that function might look:</p>\n\n<pre><code class=\"language-javascript\">function emailManager(department) {\n  const managerFirstName = department.manager.firstName;\n  const managerLastName = department.manager.lastName;\n  const managerFullName = `${managerFirstName} ${managerLastName}`;\n  const managerEmail = department.manager.email;\n  sendEmail(managerFullName, managerEmail);\n}</code></pre>\n\n<p>Very tedious! And on top of that, if anything changes with the implementation of the manager in the <code>Department</code> class, there’s a good chance this will break. What we need is a level of abstraction to make this function’s job easier.</p>\n\n<p>We can add this method to our <code>Department</code> class:</p>\n\n<pre><code class=\"language-javascript\">getManagerEmailObj: function() {\n  return {\n    firstName: this.manager.firstName,\n    lastName: this.manager.lastName,\n    fullName: `${this.manager.firstName} ${this.manager.lastName}`,\n    email: this.manager.email\n  };\n}</code></pre>\n\n<p>With that, the first function can be rewritten as this:</p>\n\n<pre><code class=\"language-javascript\">function emailManager(department) {\n  let emailObj = department.getManagerEmailObj();\n  sendEmail(emailObj.fullName, emailObj.email);\n}</code></pre>\n\n<p>This not only makes the function much cleaner and easier to understand, but it makes it easier to update the <code>Department</code> class if needed (although that can also be dangerous, as we’ll discuss later). You won’t have to look for every place that tries to access its internal information, you just update the internal method. </p>\n\n<p>Setting up our classes to enforce this can be tricky. It helps to draw a distinction between traditional OOP objects and data structures. Data structures should expose <i>data</i> and contain no behavior. OOP objects should expose <i>behavior</i> and limit access to data. In languages like C, these are separate entities, and you have to explicitly choose one of these types. In JavaScript, the lines are blurred a bit because the object type is used for both.</p>\n\n<p>Here’s a data structure in JavaScript:</p>\n\n<pre><code class=\"language-javascript\">let Manager = {\n  firstName: 'Brandon',\n  lastName: 'Gregory',\n  email: 'brandon@myurl.com'\n};</code></pre>\n\n<p>Note how the data is easily accessible. That’s the whole point. However, if we want to expose behavior, per best practice, we’d want to hide the data using internal variables on a class:</p>\n\n<pre><code class=\"language-javascript\">class Manager {\n  constructor(options) {\n    let firstName = options.firstName;\n    let lastName = options.lastName;\n    this.setFullName = function(newFirstName, newLastName) {\n      firstName = newFirstName;\n      lastName = newLastName;\n    };\n    this.getFullName = function() {\n      return `${firstName} ${lastName}`;\n    }\n  }\n}</code></pre>\n\n<p>Now, if you’re thinking that’s unnecessary, you’re correct in this case—there’s not much point to having getters and setters in a simple object like this one. Where getters and setters become important is when internal logic is involved:</p>\n\n<pre><code class=\"language-javascript\">class Department {\n  constructor(options) {\n    // Some other properties\n    let Manager = options.Manager;\n    this.changeManager(NewManager) {\n      if (checkIfManagerExists(NewManager)) {\n        Manager = NewManager;\n        // AJAX call to update Manager in database\n      }\n    };\n    this.getManager {\n      if (checkIfUserHasClearance()) {\n        return Manager;\n      }\n    }\n  }\n}</code></pre>\n\n<p>This is still a small example, but you can see how the getter and setter here are doing more than just obfuscating the data. We can attach logic and validation to these methods that consumers of a <code>Department</code> object shouldn’t have to worry about. And if the logic changes, we can change it on the getter and setter without finding and changing every bit of code that tries to get and set those properties. Even if there’s no internal logic when you’re building your app, there’s no guarantee that you won’t need it later. You don’t have to know what you’ll need in the future, you just have to leave space so you can add it later. Limiting access to data in an object that exposes behavior gives you a buffer to do this in case the need arises later.</p>\n\n<p>As a general rule, if your object exposes behavior, it’s an OOP object, and it should not allow direct access to the data; instead, it should provide methods to access it safely, as in the above example. However, if the point of the object is to expose data, it’s a data structure, and it should not also contain behavior. Mixing these types muddies the water in your code and can lead to some unexpected (and sometimes dangerous) uses of your object’s data, as other functions and methods may not be aware of all of the internal logic needed for interacting with that data.</p>\n\n<h2>The interface segregation principle</h2>\n\n<p>Imagine you get a new job designing cars for a major manufacturer. Your first task: design a sports car. You immediately sit down and start sketching a car that’s designed to go fast and handle well. The next day, you get a report from management, asking you to turn your sports car into a sporty minivan. Alright, that’s weird, but it’s doable. You sketch out a sporty minivan. The next day, you get another report. Your car now has to function as a boat as well as a car. Ridiculous? Well, yes. There’s no way to design one vehicle that meets the needs of all consumers. Similarly, depending on your app, it can be a bad idea to code one function or method that’s flexible enough to handle everything your app could throw at it.</p>\n\n<p>The <i>interface segregation principle</i> states that no client should be forced to depend on methods it does not use. In simpler terms, if your class has a plethora of methods and only a few of them are used by each user of the object, it makes more sense to break up your object into several more focused objects or interfaces. Similarly, if your function or method contains several branches to behave differently based on what data it receives, that’s a good sign that you need different functions or methods rather than one giant one.</p>\n\n<p>One big warning sign for this is flags that get passed into functions or methods. Flags are Boolean variables that significantly change the behavior of the function if true. Take a look at the following function:</p>\n\n<pre><code class=\"language-javascript\">function addPerson(person, isManager) {\n  if (isManager) {\n    // add manager\n  } else {\n    // add employee\n  }\n}</code></pre>\n\n<p>In this case, the function is split up into two different exclusive branches—there’s no way both branches are going to be used, so it makes more sense to break this up into separate functions, since we know if the person is a manager when we call it.</p>\n\n<p>That’s a simplified example. An example closer to the actual definition of the interface segregation principle would be if a module contained numerous methods for dealing with employees and separate methods for dealing with managers. In this case, it makes much more sense to split the manager methods off into a separate module, even if the manager module is a child class of the employee module and shares some of the properties and methods.</p>\n\n<p>Please note: flags are not automatically evil. A flag can be fine if you’re using it to trigger a small optional step while most of the functionality remains the same for both cases. What we want to avoid is using flags to create “clever” code that makes it harder to use, edit, and understand. Complexity can be fine as long as you’re gaining something from it. But if you’re adding complexity and there’s no significant payoff, think about why you’re coding it that way.</p>\n\n<p>Unnecessary dependencies can also happen when developers try to implement features they think they might need in the future. There are a few problems with this. One, there’s a considerable cost to pay now in both development time and testing time for features that won’t be used now—or possibly at all. Two, it’s unlikely that the team will know enough about future requirements to adequately prepare for the future. Things will change, and you probably won’t know <em>how</em> things will change until phase one goes out into production. You should write your functions and methods to be open to extend later, but be careful trying to guess what the future holds for your codebase.</p>\n\n<p>Adhering to the interface segregation principle is definitely a balancing act, as it’s possible to go too far with abstractions and have a ridiculous number of objects and methods. This, ironically, causes the same problem: added complexity without a payoff. There’s no hard rule to keep this in check—it’s going to depend on your app, your data, and your team. But there’s no shame in keeping things simple if making them complex does not help you. In fact, that’s usually the best route to go.</p>\n\n<h2>The open/closed principle</h2>\n\n<p>Many younger developers don’t remember the days before web standards changed development. (Thanks, Jeffrey Zeldman, for making our lives easier!) It used to be that whenever a new browser was released, it had its own interpretation of things, and developers had to scramble to find out what was different and how it broke all of their websites. There were articles and blog posts written quickly about new browser quirks and how to fix them, and developers had to drop everything to implement those fixes before clients noticed that their websites were broken. For many of the brave veterans of the first browser war, this wasn’t just a nightmare scenario—it was part of our job. As bad as that sounds, it’s easy for our code to do the same thing if we’re not careful about how we modify it.</p>\n\n<p>The <i>open/closed principle</i> states that software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. In other words, your code should be written in such a way that it’s easy to add new functionality while you disallow  changing existing functionality. Changing existing functionality is a great way to break your app, often without realizing it. Just like browsers rely on web standards to keep new releases from breaking our sites, your code needs to rely on its own internal standards for consistency to keep your code from breaking in unexpected ways.</p>\n\n<p>Let’s say your codebase has this function:</p>\n\n<pre><code class=\"language-javascript\">function getFullName(person) {\n  return `${person.firstName} ${person.lastName}`;\n}</code></pre>\n\n<p>A pretty simple function. But then, there’s a new use case where you need just the last name. <em>Under no circumstances</em> should you modify the above function like so:</p>\n\n<pre><code class=\"language-javascript\">function getFullName(person) {\n  return {\n    firstName: person.firstName,\n    lastName: person.lastName\n  };\n}</code></pre>\n\n<p>That solves your new problem, but it modifies existing functionality and will break every bit of code that was using the old version. Instead, you should extend functionality by creating a new function:</p>\n\n<pre><code class=\"language-javascript\">function getLastName(person) {\n  return person.lastName;\n}</code></pre>\n\n<p>Or, if we want to make it more flexible:</p>\n\n<pre><code class=\"language-javascript\">function getNameObject(person) {\n  return {\n    firstName: person.firstName,\n    lastName: person.lastName\n  };\n}</code></pre>\n\n<p>This is a simple example, but it’s easy to see how modifying existing functionality can cause major problems. Even if you’re able to locate every call to your function or method, they all have to be tested—the open/closed principle helps to reduce testing time as well as unexpected errors.</p>\n\n<p>So what does this look like on a larger scale? Let’s say we have a function to grab some data via an <code>XMLHTTPrequest</code> and do something with it:</p>\n\n<pre><code class=\"language-javascript\">function request(endpoint, params) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', endpoint, true);\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {     \n      // Do something with the data\n    }\n  };\n  xhr.send(params);\n}\n\nrequest('https://myapi.com','id=91');</code></pre>\n\n<p>That’s great if you’re always going to be doing the same thing with that data. But how many times does that happen? If we do <em>anything else</em> with that data, coding the function that way means we’ll need another function to do almost the same thing.</p>\n\n<p>What would work better would be to code our request function to accept a callback function as an argument:</p>\n\n<pre><code class=\"language-javascript\">function request(endpoint, params, callback) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', endpoint, true);\n  xhr.onreadystatechange = function() {\n    if(xhr.readyState == 4 &amp;&amp; xhr.status == 200) {     \n      callback(xhr.responseText);\n    }\n  };\n  xhr.send(params);\n}\n\nconst defaultAction = function(responseText) {\n  // Do something with the data\n};\n\nconst alternateAction = function(responseText) {\n  // Do something different with the data\n};\n\nrequest('https://myapi.com','id=91',defaultAction);\nrequest('https://myapi.com','id=42',alternateAction);</code></pre>\n\n<p>With the function coded this way, it’s much more flexible and useful to us, because it’s easy to add in new functionality without modifying existing functionality. Passing a function as a parameter is one of the most useful tools we have in keeping our code extensible, so keep this one in mind when you’re coding as a way to future-proof your code.</p>\n\n<h2>Keeping it clear</h2>\n\n<p>Clever code that increases complexity without improving clarity helps nobody. The bigger our apps get, the more clarity matters, and the more we have to plan to make sure our code is clear. Following these guidelines helps improve clarity and reduce overall complexity, leading to fewer bugs, shorter timelines, and happier developers. They should be a consideration for any complex app.</p>\n\n<h2>Thanks</h2>\n\n<p>A special thanks to Zell Liew of <a href=\"https://learnjavascript.today/\">Learn JavaScript</a> for lending his technical oversight to this article. Learn JavaScript is a great resource for moving your JavaScript expertise from beginner to advanced, so it’s worth checking out to further your knowledge!</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/e5kHmoFPvtE\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Code, Application Development, JavaScript"],"color":"tan","category":"A List Apart:","date":"2018-08-23 13:05:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Make Something Great: Become an Open Source Contributor","pubDate":"2018-08-16 13:03:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/RIurDUrQYDE/make-something-great-become-an-open-source-contributor","guid":"http://alistapart.com/article/make-something-great-become-an-open-source-contributor","author":"by","thumbnail":"http://feeds.feedburner.com/~r/alistapart/main/~4/RIurDUrQYDE","description":"\n<p>My first contribution to Bootstrap was a tiny line of CSS. It was a no-brainer to merge, but the feeling of seeing that bit of code in the project’s codebase was unreal and addictive.</p>\n\n<p>You may think that open source is not for you. After all, it has always been a developer-dominant ecosystem. But code is by no means the only thing a piece of software is made of. Open source is first and foremost about community. Whether you’re a designer, developer, writer, doctor, or lawyer, there are many paths to the open source world. </p>\n\n<p>Learn what you need to know to set out on your journey, from first steps to becoming a core contributor. It might change your career.</p>\n\n<h2>It’s OK if you don’t code</h2>\n\n<p>Developers think about their work logically. They break problems down into solvable pieces to make things work. They will devote themselves to crafting an API or a data structure, and optimize those solutions for performance and reusability. Unfortunately, this deconstruction often results in a Swiss Army knife of an interface, with a design that reflects the underlying data structures and APIs available.</p>\n\n<figure class=\"quote\"><blockquote>Diversity is what can take open source from where it is to where it could be.</blockquote>\n<figcaption>Una Kravets, “<a href=\"https://www.youtube.com/watch?v=hBp6nP_hqBM\">Open Source Design: A Call to Arms</a>”</figcaption></figure><p>This is why the open source community needs you. Not only diversity in perspective, but also diversity of gender, location, cultures, and social backgrounds. Together these become greater than the sum of their parts.</p>\n\n<h3>Designers</h3>\n\n<p>Most people who contribute to an open source project are also users of the software. But designers look at the project from a different perspective. Their job is to defend the user, especially those that are not able to contribute to the project but still need the software. They make sure that everyone working on the project understands users’ needs and stays focused on them as the community makes decisions.</p>\n\n<h3>Writers</h3>\n\n<p>Let’s face it: writing is really hard! Designers and developers are usually bad at it. But it’s so valuable to an open source community, where members have to collaborate and communicate remotely, asynchronously, and, more often than not, in a non-native language.</p>\n\n<p>Documentation, especially on open source projects, is rarely up-to-date. It’s worse when it involves the documentation meant for contributors. Information for getting started with a project frequently has gaps, with important information missing. </p>\n\n<p>Also, like developers who dedicate themselves to different pieces of a software project, different types of writers can contribute to different pieces of a project’s messaging. They can team up with designers and subject matter experts to write copy for user interfaces, landing pages, or help documentation. </p>\n\n<p><a href=\"https://twitter.com/GeertjanW\">Geertjan Wielenga</a> was a technical writer in the NetBeans community. Through his documentation, articles, and getting-started guides, he helped thousands of Java developers navigate their way around the project. His contributions had a profound impact, and he became the most acclaimed person in the community.</p>\n\n<p>Without communication, you have no community. What you write may be the reason why someone decides to get involved. It can make the difference between someone feeling welcome or feeling lost. Your contribution as a writer is invaluable.</p>\n\n<h3>Developers that don’t want to code</h3>\n\n<p>Coding is optional; even software developers don’t always code. There’s administrative work too! Replying to issues, reviewing contributions, and helping users on forums, chats, Reddit, or Stack Overflow is as important to the success of the project as writing code. </p>\n\n<h3>Subject matter experts</h3>\n\n<p>Participation in open source projects is by no means limited to software engineers, designers, and writers. Lawyers, other engineers, and even <a href=\"https://nursingassistantguides.com/2009/50-successful-open-source-projects-that-are-changing-medicine/\">medical doctors</a> and other specialists can find a place to apply their knowledge too.</p>\n\n<p>So if you thought open source projects were just for developers, think again. There is a place for you and every single contribution is important.</p>\n\n<h2>Why bother?</h2>\n\n<p>In 2013, Jay Balunas, the cofounder of <a href=\"https://github.com/aerogear\">AeroGear</a>, a small open source project, saw that more than 85% of its Android code was written by a single developer: <a href=\"https://twitter.com/passos\">Daniel Passos</a>. Jay had received some funding, so he reached out, offering him a job on the spot. But Daniel turned it down. </p>\n\n<p>Why would someone turn down a paid position and want to continue working for free? Passos lived thousands of miles away, in Rio de Janeiro. He also didn’t speak any English. </p>\n\n<p>Not about to lose a great developer that had already proven his worth, Jay solved the problem. He made the position remote, and sent an English teacher to Daniel’s house every week.</p>\n\n<p>This story may sound too good to be true. But this may describe the careers of more people than you think—people who did not start out contributing to open source ever expecting anything in return. They would probably describe their experience starting out as a labor of love. </p>\n\n<p>Getting a job offer shouldn’t be your only motivation to contribute to an open source project. If it is, you’ll likely be frustrated with the results. </p>\n\n<h2>Working for free</h2>\n\n<p>You may have a problem with working for free, especially when there seems to be plenty of well-paid work to go around. Why should you work in a vulnerable environment with total strangers, without ever receiving compensation?</p>\n\n<figure class=\"quote\"><blockquote>If you are in your early twenties, willing to work all night for the love of this industry, and have few pressing expenses, then building up your professional reputation on open source projects and sharing your ideas is a great thing to do. It’s how we all got started, how I and the majority of my peers found our voices.</blockquote>\n<figcaption>Rachel Andrew, “<a href=\"https://alistapart.com/article/the-high-price-of-free\">The High Price of Free</a>”</figcaption></figure><p>On a professional level, among the biggest assets you have are your connections. But not everyone lives in a major tech industry area. Not everyone can attend industry conferences or participate in hackathons. The open source community opens a network of passionate and talented people from around the world. To become part of it, you don’t have to worry about whiteboarding exercises, interviews, or whether you have a degree from the right university.</p>\n\n<p>But you may be disappointed if you contribute to an open source project just to get a job. Open source is volunteer work, just like helping other not-for-profit and community organizations that need people in order to stay open and reach as many people as possible. It should be approached from a place of wanting to give back to your community and contributing to a worthy cause.</p>\n\n<p><a href=\"https://qz.com/work/1289444/automattics-secret-to-successful-remote-work-is-having-everyone-meet-in-person/\">Still, good employees are hard to find</a>, and it’s often not a question of a person’s technical skills. Many companies today require applicants to participate in a months-long interview process, and complete hours of coding and design challenges that are unpaid, are unrecognized, and become the company’s property. In the case of Daniel Passos, by contributing to a project over time, he was able to demonstrate what he was capable of building, how he collaborated with others, and how passionate he was. This let him get past job requirements that aren’t related to the work but that are used to deny qualified job applicants all the time. This results in people who pay it forward: Daniel has since mentored many people in the community, including me.</p>\n\n<p>As a contributor, you will be able to experiment and play with bleeding-edge techniques at a scale that you would hardly find on a personal project or in a hackathon scenario. It’s also an opportunity to continue working with technologies that you might not get to use anymore in other work. And if you have been away from making things for a long time, an open source project is a great way to get back on track.</p>\n\n<p>Last but not least, it’s hard to explain with words the feeling you get when your name appears on a project. The positive feedback loop of being part of something larger than yourself is what makes open source addictive. Just ask what happened when a couple of people took over the blogging tool <a href=\"https://en.wikipedia.org/wiki/WordPress\">b2</a> when it was abandoned by its creator.</p>\n\n<h2>Finding your community</h2>\n\n<p>If all of this sounds good to you, it’s time to find your people. Start by taking a look at what you like and use. Ask yourself what problems you would like to solve. If you are passionate about something, there is probably a community around it.</p>\n\n<p>If you enjoy working with a particular technology, you have options spanning the entire programming realm. For example, if you are like me and enjoy working with CSS, you can contribute to projects like <a href=\"https://bulma.io/\">Bulma</a>, <a href=\"https://getbootstrap.com/\">Bootstrap</a>, <a href=\"https://tachyons.io/\">Tachyons</a>, <a href=\"https://tailwindcss.com/\">Tailwind CSS</a>, or <a href=\"https://foundation.zurb.com/\">Foundation</a>, or design systems like <a href=\"https://primer.github.io/\">Primer</a>, <a href=\"https://www.patternfly.org/\">PatternFly</a>, or <a href=\"https://www.lightningdesignsystem.com/\">Lightning</a>, among <a href=\"http://styleguides.io/examples\">many others</a>. GitHub has a great <a href=\"https://github.com/explore\">open source explorer</a> you can use to find a group.</p>\n\n<p>If you would like to work on use cases that you don’t get to in your day job, like healthcare software, for example, you can find <a href=\"https://en.wikipedia.org/wiki/List_of_open-source_health_software\">lists of active projects by area</a> and see what kind of contributions they need. OpenMRS is a great example of a project that benefits people outside the industry and that would never be successful with millions of developers but no designers, writers, or subject matter experts.</p>\n\n<h3>Respect</h3>\n\n<p>Brian Leathem, a notable open source developer, describes working on an open source project as being like working behind a glass wall. Every single action you take will be visible, transparent, and recorded. This makes you vulnerable, but a healthy community will make you feel welcome and comfortable. Check your project’s code of conduct before you contribute. Never tolerate harassment, bullying of any kind, or unkindness. If it happens and the members don’t act swiftly to enforce their code of conduct, they don’t deserve you.</p>\n\n<h3>Communication</h3>\n\n<p>Having said that, it’s essential to have a thick skin. Frame any criticism you will receive as a learning opportunity. When interacting with others, commit to setting aside ego for something bigger. Be humble, stay positive, have good arguments, and remain open-minded. </p>\n\n<p>Being able to connect with people who are very different from you will be critical. You may collaborate with someone from a part of the world where communication styles and customs are different. For example, some cultures expect you to be very assertive if you care deeply about something. This is very different than cultures where it’s impolite to disagree in an open forum.</p>\n\n<h3>Trust</h3>\n\n<p>As you take your first steps, you might notice that thriving open source communities are supported by people who trust each other. Learn to trust and to be trusted by showing what you are able to do, admitting when you are wrong or don’t know something, and letting people do their work. Approach your first contributions from a place of humility. Once you gain an understanding of how people like to work with one another, you will be able to make a bigger dent with bolder contributions.</p>\n\n<p>My very first contribution was to AeroGear, a small open source project. I downloaded the codebase to my computer, made my design changes, zipped the files, and sent an email to the community mailing list.</p>\n\n<p>To say that the community had trouble understanding the improvements I had made to the user experience would be an understatement. I felt terribly lost, and a little rejected. I really wanted to become a part of this open source project, but I didn’t know where to begin. So I asked for help, and the community had endless patience with me, even when I destroyed the repository a few times.</p>\n\n<h2>The toolbox</h2>\n\n<p>To participate in an open source project, you will need to shed any fears you may have of using the command line and working with version control. However, many open source projects are hosted on Github, where you might be able to avoid some of this if you do not code and are posting sketches, making changes to copy, or writing documentation. </p>\n\n<h3>The command line</h3>\n\n<p>Level Up Tutorials has a <a href=\"https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg\">great video series</a> about the command line if you are a visual learner. Their <a href=\"https://youtu.be/yreJBmV4_6c\">Command Line Basics #1 video</a> is a good place to start. If you prefer to read, <a href=\"https://abookapart.com/products/working-the-command-line\">Remy Sharp’s <i>Working the Command Line</i></a> is excellent.</p>\n\n<h3>Git</h3>\n\n<p>For getting started with version control, <a href=\"https://try.github.io/\">GitHub has a great step-by-step guide to Git</a>. There are many Git desktop apps like <a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a>, <a href=\"https://desktop.github.com/\">GitHub Desktop</a>, or <a href=\"https://www.gitkraken.com/\">GitKraken</a> that will help you visualize what Git does. I still highly recommend becoming familiar with the Git command-line tool. It’s a steeper learning curve, but you’ll get a return on your investment.</p>\n\n<h3>Communication channels</h3>\n\n<p>Every community has its communication channels. There is almost always a mailing list where the most important decisions are made. GitHub’s Issues feature is used for contribution issue tracking. Forums are common for user discussions. </p>\n\n<p>Chat among contributors has traditionally been on IRC, but Slack, Rocket.Chat, and Gitter have become more popular, including for user discussions. Find out where your community hangs out, and get to know its members.</p>\n\n<h2>Making your first contribution</h2>\n\n<p>The harder part of getting started with open source is finding a community and becoming familiar with how it operates and communicates. If you have cleared that hurdle, you are more than ready to begin contributing. Start small, and <a href=\"https://css-tricks.com/open-source-etiquette-guidebook/\">be nice</a>. </p>\n\n<p>Look at the issues for a small task you feel comfortable doing. On some projects they are tagged as “help wanted” or “good first issue.” Documentation is also a great place to start. Go through the “getting started” guides and see if they make sense to a newcomer, like you. Can you improve them, make them more clear? Look for a typo or a grammar mistake. Contributions like these are easy to merge and are a perfect starting point.</p>\n\n<p>If you want to contribute to a project in ways other than working on the code, these issues are good ways to introduce yourself and what you can do. For example, if you are a designer, a project will sometimes, but not always, be looking for UI designs. But in most cases, even on projects with very little UI, like a utility or a service, there will be usability problems that need solutions. By starting with pointing out unclear information and offering lots of quick solutions to a problem, you can start to demonstrate both your expertise and your passion. </p>\n\n<p>Sometimes, changes or further explanation will be requested. Other times you’ll break things, and that’s OK. <a href=\"https://github.com/twbs/bootstrap/pull/23439\">I once sent a pull request that messed up the border radius of Bootstrap buttons.</a> I hadn’t tested the result. Mark Otto, the leader of the project, took the time to write a comment explaining where I made a mistake and how I might fix it. He didn’t have to do that; I should have known better. The gesture and the respect for my time as a contributor made me want to help the project even more.</p>\n\n<h3>Leveling up</h3>\n\n<p>Here is a secret: you don’t need to make a ton of commits to become a top contributor. React is probably the most active open source project today, and <a href=\"https://github.com/facebook/react/graphs/contributors\">to become a Top 100 React contributor, you only need to merge five commits</a>. They can even be five <a href=\"https://github.com/facebook/react/pull/12473/files\">typos</a> that you’ve fixed in the docs! And you can make an even greater impact in smaller communities with that level of contribution.</p>\n\n<h2>Commit to contribute</h2>\n\n<p>If you value the idea of open source, you are worthy of contributing to a project, earning recognition, and being a respected member of a community. If you have different expertise, experience, or points of view about a project, we need you even more. At the end of the day, without people contributing to the community, the web will not remain open and free.</p>\n\n<p>Rachel Andrew <a href=\"https://alistapart.com/article/the-high-price-of-free\">goes on to write about</a> how she’s seen people of her generation taking a step back, as she started to feel the pressure of the finite amount of time she has. Pioneers of the modern web like her paid it forward. Can you?</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/RIurDUrQYDE\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>My first contribution to Bootstrap was a tiny line of CSS. It was a no-brainer to merge, but the feeling of seeing that bit of code in the project’s codebase was unreal and addictive.</p>\n\n<p>You may think that open source is not for you. After all, it has always been a developer-dominant ecosystem. But code is by no means the only thing a piece of software is made of. Open source is first and foremost about community. Whether you’re a designer, developer, writer, doctor, or lawyer, there are many paths to the open source world. </p>\n\n<p>Learn what you need to know to set out on your journey, from first steps to becoming a core contributor. It might change your career.</p>\n\n<h2>It’s OK if you don’t code</h2>\n\n<p>Developers think about their work logically. They break problems down into solvable pieces to make things work. They will devote themselves to crafting an API or a data structure, and optimize those solutions for performance and reusability. Unfortunately, this deconstruction often results in a Swiss Army knife of an interface, with a design that reflects the underlying data structures and APIs available.</p>\n\n<figure class=\"quote\"><blockquote>Diversity is what can take open source from where it is to where it could be.</blockquote>\n<figcaption>Una Kravets, “<a href=\"https://www.youtube.com/watch?v=hBp6nP_hqBM\">Open Source Design: A Call to Arms</a>”</figcaption></figure><p>This is why the open source community needs you. Not only diversity in perspective, but also diversity of gender, location, cultures, and social backgrounds. Together these become greater than the sum of their parts.</p>\n\n<h3>Designers</h3>\n\n<p>Most people who contribute to an open source project are also users of the software. But designers look at the project from a different perspective. Their job is to defend the user, especially those that are not able to contribute to the project but still need the software. They make sure that everyone working on the project understands users’ needs and stays focused on them as the community makes decisions.</p>\n\n<h3>Writers</h3>\n\n<p>Let’s face it: writing is really hard! Designers and developers are usually bad at it. But it’s so valuable to an open source community, where members have to collaborate and communicate remotely, asynchronously, and, more often than not, in a non-native language.</p>\n\n<p>Documentation, especially on open source projects, is rarely up-to-date. It’s worse when it involves the documentation meant for contributors. Information for getting started with a project frequently has gaps, with important information missing. </p>\n\n<p>Also, like developers who dedicate themselves to different pieces of a software project, different types of writers can contribute to different pieces of a project’s messaging. They can team up with designers and subject matter experts to write copy for user interfaces, landing pages, or help documentation. </p>\n\n<p><a href=\"https://twitter.com/GeertjanW\">Geertjan Wielenga</a> was a technical writer in the NetBeans community. Through his documentation, articles, and getting-started guides, he helped thousands of Java developers navigate their way around the project. His contributions had a profound impact, and he became the most acclaimed person in the community.</p>\n\n<p>Without communication, you have no community. What you write may be the reason why someone decides to get involved. It can make the difference between someone feeling welcome or feeling lost. Your contribution as a writer is invaluable.</p>\n\n<h3>Developers that don’t want to code</h3>\n\n<p>Coding is optional; even software developers don’t always code. There’s administrative work too! Replying to issues, reviewing contributions, and helping users on forums, chats, Reddit, or Stack Overflow is as important to the success of the project as writing code. </p>\n\n<h3>Subject matter experts</h3>\n\n<p>Participation in open source projects is by no means limited to software engineers, designers, and writers. Lawyers, other engineers, and even <a href=\"https://nursingassistantguides.com/2009/50-successful-open-source-projects-that-are-changing-medicine/\">medical doctors</a> and other specialists can find a place to apply their knowledge too.</p>\n\n<p>So if you thought open source projects were just for developers, think again. There is a place for you and every single contribution is important.</p>\n\n<h2>Why bother?</h2>\n\n<p>In 2013, Jay Balunas, the cofounder of <a href=\"https://github.com/aerogear\">AeroGear</a>, a small open source project, saw that more than 85% of its Android code was written by a single developer: <a href=\"https://twitter.com/passos\">Daniel Passos</a>. Jay had received some funding, so he reached out, offering him a job on the spot. But Daniel turned it down. </p>\n\n<p>Why would someone turn down a paid position and want to continue working for free? Passos lived thousands of miles away, in Rio de Janeiro. He also didn’t speak any English. </p>\n\n<p>Not about to lose a great developer that had already proven his worth, Jay solved the problem. He made the position remote, and sent an English teacher to Daniel’s house every week.</p>\n\n<p>This story may sound too good to be true. But this may describe the careers of more people than you think—people who did not start out contributing to open source ever expecting anything in return. They would probably describe their experience starting out as a labor of love. </p>\n\n<p>Getting a job offer shouldn’t be your only motivation to contribute to an open source project. If it is, you’ll likely be frustrated with the results. </p>\n\n<h2>Working for free</h2>\n\n<p>You may have a problem with working for free, especially when there seems to be plenty of well-paid work to go around. Why should you work in a vulnerable environment with total strangers, without ever receiving compensation?</p>\n\n<figure class=\"quote\"><blockquote>If you are in your early twenties, willing to work all night for the love of this industry, and have few pressing expenses, then building up your professional reputation on open source projects and sharing your ideas is a great thing to do. It’s how we all got started, how I and the majority of my peers found our voices.</blockquote>\n<figcaption>Rachel Andrew, “<a href=\"https://alistapart.com/article/the-high-price-of-free\">The High Price of Free</a>”</figcaption></figure><p>On a professional level, among the biggest assets you have are your connections. But not everyone lives in a major tech industry area. Not everyone can attend industry conferences or participate in hackathons. The open source community opens a network of passionate and talented people from around the world. To become part of it, you don’t have to worry about whiteboarding exercises, interviews, or whether you have a degree from the right university.</p>\n\n<p>But you may be disappointed if you contribute to an open source project just to get a job. Open source is volunteer work, just like helping other not-for-profit and community organizations that need people in order to stay open and reach as many people as possible. It should be approached from a place of wanting to give back to your community and contributing to a worthy cause.</p>\n\n<p><a href=\"https://qz.com/work/1289444/automattics-secret-to-successful-remote-work-is-having-everyone-meet-in-person/\">Still, good employees are hard to find</a>, and it’s often not a question of a person’s technical skills. Many companies today require applicants to participate in a months-long interview process, and complete hours of coding and design challenges that are unpaid, are unrecognized, and become the company’s property. In the case of Daniel Passos, by contributing to a project over time, he was able to demonstrate what he was capable of building, how he collaborated with others, and how passionate he was. This let him get past job requirements that aren’t related to the work but that are used to deny qualified job applicants all the time. This results in people who pay it forward: Daniel has since mentored many people in the community, including me.</p>\n\n<p>As a contributor, you will be able to experiment and play with bleeding-edge techniques at a scale that you would hardly find on a personal project or in a hackathon scenario. It’s also an opportunity to continue working with technologies that you might not get to use anymore in other work. And if you have been away from making things for a long time, an open source project is a great way to get back on track.</p>\n\n<p>Last but not least, it’s hard to explain with words the feeling you get when your name appears on a project. The positive feedback loop of being part of something larger than yourself is what makes open source addictive. Just ask what happened when a couple of people took over the blogging tool <a href=\"https://en.wikipedia.org/wiki/WordPress\">b2</a> when it was abandoned by its creator.</p>\n\n<h2>Finding your community</h2>\n\n<p>If all of this sounds good to you, it’s time to find your people. Start by taking a look at what you like and use. Ask yourself what problems you would like to solve. If you are passionate about something, there is probably a community around it.</p>\n\n<p>If you enjoy working with a particular technology, you have options spanning the entire programming realm. For example, if you are like me and enjoy working with CSS, you can contribute to projects like <a href=\"https://bulma.io/\">Bulma</a>, <a href=\"https://getbootstrap.com/\">Bootstrap</a>, <a href=\"https://tachyons.io/\">Tachyons</a>, <a href=\"https://tailwindcss.com/\">Tailwind CSS</a>, or <a href=\"https://foundation.zurb.com/\">Foundation</a>, or design systems like <a href=\"https://primer.github.io/\">Primer</a>, <a href=\"https://www.patternfly.org/\">PatternFly</a>, or <a href=\"https://www.lightningdesignsystem.com/\">Lightning</a>, among <a href=\"http://styleguides.io/examples\">many others</a>. GitHub has a great <a href=\"https://github.com/explore\">open source explorer</a> you can use to find a group.</p>\n\n<p>If you would like to work on use cases that you don’t get to in your day job, like healthcare software, for example, you can find <a href=\"https://en.wikipedia.org/wiki/List_of_open-source_health_software\">lists of active projects by area</a> and see what kind of contributions they need. OpenMRS is a great example of a project that benefits people outside the industry and that would never be successful with millions of developers but no designers, writers, or subject matter experts.</p>\n\n<h3>Respect</h3>\n\n<p>Brian Leathem, a notable open source developer, describes working on an open source project as being like working behind a glass wall. Every single action you take will be visible, transparent, and recorded. This makes you vulnerable, but a healthy community will make you feel welcome and comfortable. Check your project’s code of conduct before you contribute. Never tolerate harassment, bullying of any kind, or unkindness. If it happens and the members don’t act swiftly to enforce their code of conduct, they don’t deserve you.</p>\n\n<h3>Communication</h3>\n\n<p>Having said that, it’s essential to have a thick skin. Frame any criticism you will receive as a learning opportunity. When interacting with others, commit to setting aside ego for something bigger. Be humble, stay positive, have good arguments, and remain open-minded. </p>\n\n<p>Being able to connect with people who are very different from you will be critical. You may collaborate with someone from a part of the world where communication styles and customs are different. For example, some cultures expect you to be very assertive if you care deeply about something. This is very different than cultures where it’s impolite to disagree in an open forum.</p>\n\n<h3>Trust</h3>\n\n<p>As you take your first steps, you might notice that thriving open source communities are supported by people who trust each other. Learn to trust and to be trusted by showing what you are able to do, admitting when you are wrong or don’t know something, and letting people do their work. Approach your first contributions from a place of humility. Once you gain an understanding of how people like to work with one another, you will be able to make a bigger dent with bolder contributions.</p>\n\n<p>My very first contribution was to AeroGear, a small open source project. I downloaded the codebase to my computer, made my design changes, zipped the files, and sent an email to the community mailing list.</p>\n\n<p>To say that the community had trouble understanding the improvements I had made to the user experience would be an understatement. I felt terribly lost, and a little rejected. I really wanted to become a part of this open source project, but I didn’t know where to begin. So I asked for help, and the community had endless patience with me, even when I destroyed the repository a few times.</p>\n\n<h2>The toolbox</h2>\n\n<p>To participate in an open source project, you will need to shed any fears you may have of using the command line and working with version control. However, many open source projects are hosted on Github, where you might be able to avoid some of this if you do not code and are posting sketches, making changes to copy, or writing documentation. </p>\n\n<h3>The command line</h3>\n\n<p>Level Up Tutorials has a <a href=\"https://www.youtube.com/channel/UCyU5wkjgQYGRB0hIHMwm2Sg\">great video series</a> about the command line if you are a visual learner. Their <a href=\"https://youtu.be/yreJBmV4_6c\">Command Line Basics #1 video</a> is a good place to start. If you prefer to read, <a href=\"https://abookapart.com/products/working-the-command-line\">Remy Sharp’s <i>Working the Command Line</i></a> is excellent.</p>\n\n<h3>Git</h3>\n\n<p>For getting started with version control, <a href=\"https://try.github.io/\">GitHub has a great step-by-step guide to Git</a>. There are many Git desktop apps like <a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a>, <a href=\"https://desktop.github.com/\">GitHub Desktop</a>, or <a href=\"https://www.gitkraken.com/\">GitKraken</a> that will help you visualize what Git does. I still highly recommend becoming familiar with the Git command-line tool. It’s a steeper learning curve, but you’ll get a return on your investment.</p>\n\n<h3>Communication channels</h3>\n\n<p>Every community has its communication channels. There is almost always a mailing list where the most important decisions are made. GitHub’s Issues feature is used for contribution issue tracking. Forums are common for user discussions. </p>\n\n<p>Chat among contributors has traditionally been on IRC, but Slack, Rocket.Chat, and Gitter have become more popular, including for user discussions. Find out where your community hangs out, and get to know its members.</p>\n\n<h2>Making your first contribution</h2>\n\n<p>The harder part of getting started with open source is finding a community and becoming familiar with how it operates and communicates. If you have cleared that hurdle, you are more than ready to begin contributing. Start small, and <a href=\"https://css-tricks.com/open-source-etiquette-guidebook/\">be nice</a>. </p>\n\n<p>Look at the issues for a small task you feel comfortable doing. On some projects they are tagged as “help wanted” or “good first issue.” Documentation is also a great place to start. Go through the “getting started” guides and see if they make sense to a newcomer, like you. Can you improve them, make them more clear? Look for a typo or a grammar mistake. Contributions like these are easy to merge and are a perfect starting point.</p>\n\n<p>If you want to contribute to a project in ways other than working on the code, these issues are good ways to introduce yourself and what you can do. For example, if you are a designer, a project will sometimes, but not always, be looking for UI designs. But in most cases, even on projects with very little UI, like a utility or a service, there will be usability problems that need solutions. By starting with pointing out unclear information and offering lots of quick solutions to a problem, you can start to demonstrate both your expertise and your passion. </p>\n\n<p>Sometimes, changes or further explanation will be requested. Other times you’ll break things, and that’s OK. <a href=\"https://github.com/twbs/bootstrap/pull/23439\">I once sent a pull request that messed up the border radius of Bootstrap buttons.</a> I hadn’t tested the result. Mark Otto, the leader of the project, took the time to write a comment explaining where I made a mistake and how I might fix it. He didn’t have to do that; I should have known better. The gesture and the respect for my time as a contributor made me want to help the project even more.</p>\n\n<h3>Leveling up</h3>\n\n<p>Here is a secret: you don’t need to make a ton of commits to become a top contributor. React is probably the most active open source project today, and <a href=\"https://github.com/facebook/react/graphs/contributors\">to become a Top 100 React contributor, you only need to merge five commits</a>. They can even be five <a href=\"https://github.com/facebook/react/pull/12473/files\">typos</a> that you’ve fixed in the docs! And you can make an even greater impact in smaller communities with that level of contribution.</p>\n\n<h2>Commit to contribute</h2>\n\n<p>If you value the idea of open source, you are worthy of contributing to a project, earning recognition, and being a respected member of a community. If you have different expertise, experience, or points of view about a project, we need you even more. At the end of the day, without people contributing to the community, the web will not remain open and free.</p>\n\n<p>Rachel Andrew <a href=\"https://alistapart.com/article/the-high-price-of-free\">goes on to write about</a> how she’s seen people of her generation taking a step back, as she started to feel the pressure of the finite amount of time she has. Pioneers of the modern web like her paid it forward. Can you?</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/RIurDUrQYDE\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Industry &amp;amp; Business, Industry"],"color":"tan","category":"A List Apart:","date":"2018-08-16 13:03:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"What is Typesetting?","pubDate":"2018-08-09 13:02:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/3ffTxdpc8A8/flexible-typesetting","guid":"http://alistapart.com/article/flexible-typesetting","author":"by","thumbnail":"https://alistapart.com/d/flexible-typesetting/1-1.png","description":"\n<p><b>A note from the editors:</b> We’re pleased to share an excerpt from Chapter 1 of <a href=\"https://abookapart.com/products/flexible-typesetting\">Tim Brown’s <i>Flexible Typesetting</i></a>, from <a href=\"https://abookapart.com/\">A Book Apart</a>.</p>\n<p>Typesetting is the most important part of typography, because most text is meant to be read, and typesetting involves preparing text for reading.</p>\n\n<p>You’re already great at typesetting. Think about it. You choose good typefaces. You determine font sizes and line spacing. You decide on the margins that surround text elements. You set media query breakpoints. All of that is typesetting.</p>\n\n<p>Maybe you’re thinking, <i>But Tim, I am a font muggins. Help me make better decisions!</i> Relax. You make better decisions than you realize. Some people will try to make you feel inferior; ignore them. Your intuition is good. Practice, and your skills will improve. Make a few solid decisions; then build on them. I’ll help you get started.</p>\n\n<p>In this chapter, I’ll identify the value of typesetting and its place within the practice of typography. I’ll talk about pressure, a concept I use throughout this book to explain why typeset texts sometimes feel awkward or wrong. I’ll also discuss how typesetting for the web differs from traditional typesetting.</p>\n\n<h2>Why does typesetting matter?</h2>\n\n<p>Typesetting shows readers you care. If your work looks good and feels right, people will stick around—not only because the typography is comfortable and familiar, but also because you show your audience respect by giving their experience your serious attention (<b>Fig 1.1</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-1.png\" alt=\"Two panels. On the left, text is small an unbalanced. On the right, the text is larger with proportional spacing.\"><figcaption>Fig 1.1: Glance at these two screenshots. Which one would you rather read? Which publisher do you think cares more about your experience?</figcaption></figure><p>Sure, you could buy the “it” font of the moment (you know, the font all the cool people are talking about). You could use a template that promises good typography. You could use a script that spiffs up small typographic details. None of these things is necessarily bad in and of itself.</p>\n\n<p>But when you take shortcuts, you miss opportunities to care about your readers, the text in your charge, and the practice of typography, all of which are worthwhile investments. Spending time on these things can feel overwhelming, but the more you do it, the easier and more fun it becomes. And you can avoid feeling overwhelmed by focusing on the jobs type does.</p>\n\n<p>Imagine yourself in a peaceful garden. You feel the soft sun on your arms, and take a deep breath of fresh, clean air. The smell of flowers makes you feel happy. You hear honeybees hard at work, water trickling in a nearby brook, and birds singing. Now imagine that this garden needs a website, and you’re trying to find the right typeface.</p>\n\n<p>Sorry to spoil the moment! But hey, if you do this right, the website could give people the same amazing feeling as sitting in the garden itself.</p>\n\n<p>If you’re anything like me, your first instinct will be to recall sensations from the imaginary garden and look for a typeface with shapes that evoke similar sensations. But this is not a good way to choose among thousands upon thousands of fonts, because it’s too easy to end up with typefaces that—as charming as they may seem at first—don’t do their jobs. You’ll get disappointed and go right back to relying on shortcuts.</p>\n\n<p>Finding typefaces that are appropriate for a project, and that evoke the right mood, is easier and more effective if you know they’re good at the jobs you need them to do. The trick is to eliminate type that won’t do the job well (<b>Fig 1.2</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-2.png\" alt=\"The Hatch font used as both heading and body copy. The body copy is awkward to read.\"><figcaption>Fig 1.2: Hatch, a typeface by Mark Caneso, is fun to use large, but not a good choice for body text.</figcaption></figure><p>Depending on the job, some typefaces work better than others—and some don’t work well at all. Detailed, ornate type is not the best choice for body text, just as traditional text typefaces are not great for signage and user interfaces. Sleek, geometric fonts can make small text hard to read. I’ll come back to this at the beginning of Chapter 3.</p>\n\n<p>Considering these different jobs helps you make better design decisions, whether you’re selecting typefaces, tending to typographic details, or making text and layout feel balanced. We’ll do all of that in this book.</p>\n\n<h3>Typesetting covers type’s most important jobs</h3>\n\n<p>Typesetting, or the act of <i>setting type</i>, consists of typographic jobs that form the backbone of a reading experience: body text (paragraphs, lists, subheads) and small text (such as captions and asides). These are type’s most important jobs. The other parts of typography—which I call <i>arranging</i> and <i>calibrating</i> type—exist to bring people to the typeset text, so they can read and gather information (<b>Fig 1.3</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-3.png\" alt=\"Illustrated typographic activities arranged in a pie chart, aligned with the jobs of setting, aligning, and calibrating text.\"><figcaption>Fig 1.3: Think of these typographic activities as job categories. In Chapter 3, we’ll identify the text blocks in our example project and the jobs they need to do.</figcaption></figure><p>Let’s go over these categories of typographic jobs one by one. <i>Setting type</i> well makes it easy for people to read and comprehend textual information. It covers jobs like paragraphs, subheads, lists, and captions. <i>Arranging type</i> turns visitors and passersby into readers, by catching their attention in an expressive, visual way. It’s for jobs like large headlines, titles, calls to action, and “hero” areas. <i>Calibrating type</i> helps people scan and process complicated information, and find their way, by being clear and organized. This is for jobs like tabular data, navigation systems, infographics, math, and code.</p>\n\n<p>Arranging and calibrating type, and the jobs they facilitate, are extremely important, but I won’t spend much time discussing them in this book except to put them in context and explain where in my process I usually give them attention. They deserve their own dedicated texts. This book focuses specifically on setting type, for several reasons.</p>\n\n<p>First, typesetting is critical to the success of our projects. Although the decisions we make while typesetting are subtle almost to the point of being unnoticeable, they add up to give readers a gut feeling about the work. Typesetting lays a strong foundation for everything else.</p>\n\n<p>It also happens to be more difficult than other parts of typography. Good type for typesetting is harder to find than good type for other activities. Good typesetting decisions are harder to make than decisions about arranging type or calibrating type.</p>\n\n<p>Furthermore, typesetting can help us deeply understand the web’s inherent flexibility, which responsive web design has called attention to so well. The main reason I make a distinction between typesetting, arranging type, and calibrating type is because these different activities each require text to <i>flex</i> in different ways.</p>\n\n<p>In sum, typesetting matters because it is critical for readers, it supports other typographic activities, the difficult decisions informing it take practice, and its nature can help us understand flexibility and responsiveness on the web. A command of typesetting makes us better designers.</p>\n\n<h3>Why do some websites feel wrong?</h3>\n\n<p>It’s not hard to find websites that just feel, well, sort of wrong. They’re everywhere. The type they use is not good, the font size is too small (or too big), lines of text are too long (or comically short), line spacing is too loose or too tight, margins are either too small or way too big, and so on (<b>Fig 1.4</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-4.png\" alt=\"Two panels. Text in the left panel is smaller with more vertical space between lines than the text in the right panel.\"><figcaption>Fig 1.4: Some typesetting just looks wrong. Why? Keep reading.</figcaption></figure><p>It’s logical to think that websites feel wrong because, somewhere along the line, a typographer made bad decisions. Remember that a <i>type designer</i> is someone who makes type; a <i>typographer</i> is someone who uses type to communicate. In that sense, we are all typographers, even if we think of what we do as designing, or developing, or editing.</p>\n\n<p>For more than 500 years, the job of a typographer has been to decide how text works and looks, and over those years, typographers have made some beautiful stuff. So if some websites feel wrong, it must be because the typographers who worked on them were inexperienced, or lazy, or had no regard for typographic history. Right?</p>\n\n<p>Except that even the best typographers, who have years of experience, who have chosen a good typeface for the job at hand, who have made great typesetting decisions, who work hard and respect tradition—even those people can produce websites that feel wrong. Websites just seem to look awful in one way or another, and it’s hard to say why. Something’s just not quite right. In all likelihood, it’s the typesetting. Specifically, websites feel wrong when they put <i>pressure</i> on typographic relationships.</p>\n\n<h3>Typographic relationships</h3>\n\n<p>Have you ever chosen a new font for your blog template, or an existing project, and instinctively adjusted the font size or line spacing to make it feel better?</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-5.png\" alt=\"Three panels (from left): Text set in Libre Franklin, the same text re-rendered in Kepler, and (finally) adjusted in Kepler.\"><figcaption>Fig 1.5: Replacing this theme’s default font with Kepler made the text seem too small. Size and line-spacing adjustments felt necessary</figcaption></figure><p>Those typesetting adjustments help because the typeface itself, as well as its font size, <i>measure</i> (a typographic term for the length of lines of text), and line spacing all work together to make a text block feel balanced. (We’ll return to text blocks in more detail in Chapter 3.) This balance is something we all instinctively notice; when it’s disrupted, we sense pressure.</p>\n\n<p>But let’s continue for a moment with this example of choosing a new font. We sense pressure every time we choose a new font. Why? Because each typeface is sized and positioned in unique ways by its designer (<b>Fig 1.6</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-6.png\" alt=\"Three panels (from left): “R” in Libre Franklin, Kepler at 100%, and Kepler height-adjusted to match Libre Franklin at 116%.\"><figcaption>Fig 1.6: Glyphs are sized and positioned within a font’s em box. When we set a font size, we are sizing the em box—not the glyph inside it.</figcaption></figure><p>In Chapter 2, we’ll take a closer look at <i>glyphs</i>, which are instances of one or more characters. For now, suffice it to say that glyphs live within a bounding box called the <i>em box</i>, which is a built-in part of a font file. Type designers decide how big, small, narrow, or wide glyphs are, and where they are positioned, within this box. The em box is what becomes our CSS-specified font size—it maps to the CSS content area.</p>\n\n<p>So when we select a new typeface, the visible font size of our <i>text block</i>—the chunk of text to which we are applying styles— often changes, throwing off its balance. This means we need to carefully adjust the font size and then the measure, which depends on both the typeface and the font size. Finally, we adjust line spacing, which depends on the typeface, font size, and measure. I’ll cover how to fine-tune all of these adjustments in Chapter 4.</p>\n\n<p>Making so many careful adjustments to one measly text block seems quite disruptive, doesn’t it? Especially because the finest typographic examples in history—the work we admire, the work that endures—commands a compositional balance. <i>Composition</i>, of course, refers to a work of art or design in its<br>\nentirety. Every text block, every shape, every space in a composition relates to another. If one text block is off-kilter, the whole work suffers.</p>\n\n<p>I’m sure you can see where I’m headed with this. The web puts constant pressure on text blocks, easily disrupting their balance in myriad ways.</p>\n\n<h3>Pressure</h3>\n\n<p>There are no “correct” fonts, font sizes, measures, or line heights. But relationships among these aspects of a text block determine whether reading is easier or harder. Outside forces can apply pressure to a balanced, easy-to-read text block, making the typesetting feel wrong, and thus interfering with reading.</p>\n\n<p>We just discussed how choosing a new typeface introduces pressure. The same thing happens when our sites use local fonts that could be different for each reader, or when webfonts fail to load and our text is styled with fallback fonts. Typefaces are not interchangeable. When they change, they cause pressure that we have to work hard to relieve.</p>\n\n<p>We also experience pressure when the font size changes (<b>Fig 1.7</b>). Sometimes, when we’re designing sites, we increase font size to better fill large <i>viewports</i>—the viewing area on our screens—or decrease it to better fit small ones. Readers can even get involved, by increasing or decreasing font size themselves to make text more legible. When font size changes, we have to consider whether our typeface, measure, and line spacing are still appropriate.</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-7.png\" alt=\"Two panels (from left): The original typographic design and the effect of an increased font size.\"><figcaption>Fig 1.7: Left: a balanced text block. Right: a larger font size causes pressure.</figcaption></figure><p>Changes to the width of our text block also introduce pressure (<b>Fig 1.8</b>). When text blocks stretch across very wide screens, or are squeezed into very narrow viewports, the entire composition has to be reevaluated. We may find that our text blocks need new boundaries, or a different font size, or even a different typeface, to make sure they maintain a good internal balance—and feel right for the composition. (This may seem fuzzy right now, but it will become clearer in Chapters 5 and 6, I promise.)</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-8.png\" alt=\"Two panels (from left): The original typographic design and the effect of a narrower display area.\"><figcaption>Fig 1.8: Left: a balanced text block. Right: a narrower measure causes pressure.</figcaption></figure><p>We also experience pressure when we try to manage white space without considering the relationships in our text blocks (<b>Fig 1.9</b>). When we predetermine our line height with a baseline grid, or when we adjust the margins that surround text as if they were part of a container into which text is poured rather than an extension of the balance in the typesetting, we risk destroying relationships among compositional white spaces— not only the white spaces in text blocks (word spacing, line spacing), but also the smaller white spaces built into our typefaces. These relationships are at risk whenever a website flexes, whenever a new viewport size comes along.</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-9.png\" alt=\"Two panels (from left): The original typographic design and the effect of looser line spacing.\"><figcaption>Fig 1.9: Left: a balanced text block. Right: looser line spacing causes pressure.</figcaption></figure><p>Typesetting for the web can only be successful if it relieves inevitable pressures like these. The problem is that we can’t see all of the pressures we face, and we don’t yet have the means (the words, the tools) to address what we <i>can</i> see. Yet our natural response, based on centuries of typographic control, is to try to make better decisions.</p>\n\n<p>But on the web, that’s like trying to predict the weather. We can’t decide whether to wear a raincoat a year ahead of time. What we can do is <i>get a raincoat</i> and be ready to use it under certain conditions. Typographers are now in the business of making sure text has a raincoat. We can’t know when it’ll be needed, and we can’t force our text to wear it, but we can make recommendations based on conditional instructions.</p>\n\n<p>For the first time in hundreds of years, <i>because of the web</i>, the role of the typographer has changed. We no longer decide; we make suggestions. We no longer choose typefaces, font size, line length, line spacing, and margins; we prepare and instruct text to make those choices for itself. We no longer determine page shape and quality; we respond to our readers’ contexts and environments.</p>\n\n<p>These changes may seem like a weakness compared to the command we have always been able to exercise. But they are in fact an incredible strength, because they mean that typeset text has the potential to fit everyone just right. In theory, at least, the web is universal.</p>\n\n<figure class=\"quote\"><blockquote>The primary design principle underlying the web’s usefulness and growth is universality.</blockquote>\n<figcaption><a href=\"http://bkaprt.com/ft/01-01/\">Tim Berners-Lee</a></figcaption></figure><p>We must now practice a <i>universal</i> typography that strives to work for everyone. To start, we need to acknowledge that typography is <i>multidimensional</i>, <i>relative</i> to each reader, and unequivocally <i>optional</i>.</p>\n\n<p><i>Read the rest of this chapter and more when you <a href=\"https://abookapart.com/products/flexible-typesetting\">buy the book</a>!</i></p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/3ffTxdpc8A8\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p><b>A note from the editors:</b> We’re pleased to share an excerpt from Chapter 1 of <a href=\"https://abookapart.com/products/flexible-typesetting\">Tim Brown’s <i>Flexible Typesetting</i></a>, from <a href=\"https://abookapart.com/\">A Book Apart</a>.</p>\n<p>Typesetting is the most important part of typography, because most text is meant to be read, and typesetting involves preparing text for reading.</p>\n\n<p>You’re already great at typesetting. Think about it. You choose good typefaces. You determine font sizes and line spacing. You decide on the margins that surround text elements. You set media query breakpoints. All of that is typesetting.</p>\n\n<p>Maybe you’re thinking, <i>But Tim, I am a font muggins. Help me make better decisions!</i> Relax. You make better decisions than you realize. Some people will try to make you feel inferior; ignore them. Your intuition is good. Practice, and your skills will improve. Make a few solid decisions; then build on them. I’ll help you get started.</p>\n\n<p>In this chapter, I’ll identify the value of typesetting and its place within the practice of typography. I’ll talk about pressure, a concept I use throughout this book to explain why typeset texts sometimes feel awkward or wrong. I’ll also discuss how typesetting for the web differs from traditional typesetting.</p>\n\n<h2>Why does typesetting matter?</h2>\n\n<p>Typesetting shows readers you care. If your work looks good and feels right, people will stick around—not only because the typography is comfortable and familiar, but also because you show your audience respect by giving their experience your serious attention (<b>Fig 1.1</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-1.png\" alt=\"Two panels. On the left, text is small an unbalanced. On the right, the text is larger with proportional spacing.\"><figcaption>Fig 1.1: Glance at these two screenshots. Which one would you rather read? Which publisher do you think cares more about your experience?</figcaption></figure><p>Sure, you could buy the “it” font of the moment (you know, the font all the cool people are talking about). You could use a template that promises good typography. You could use a script that spiffs up small typographic details. None of these things is necessarily bad in and of itself.</p>\n\n<p>But when you take shortcuts, you miss opportunities to care about your readers, the text in your charge, and the practice of typography, all of which are worthwhile investments. Spending time on these things can feel overwhelming, but the more you do it, the easier and more fun it becomes. And you can avoid feeling overwhelmed by focusing on the jobs type does.</p>\n\n<p>Imagine yourself in a peaceful garden. You feel the soft sun on your arms, and take a deep breath of fresh, clean air. The smell of flowers makes you feel happy. You hear honeybees hard at work, water trickling in a nearby brook, and birds singing. Now imagine that this garden needs a website, and you’re trying to find the right typeface.</p>\n\n<p>Sorry to spoil the moment! But hey, if you do this right, the website could give people the same amazing feeling as sitting in the garden itself.</p>\n\n<p>If you’re anything like me, your first instinct will be to recall sensations from the imaginary garden and look for a typeface with shapes that evoke similar sensations. But this is not a good way to choose among thousands upon thousands of fonts, because it’s too easy to end up with typefaces that—as charming as they may seem at first—don’t do their jobs. You’ll get disappointed and go right back to relying on shortcuts.</p>\n\n<p>Finding typefaces that are appropriate for a project, and that evoke the right mood, is easier and more effective if you know they’re good at the jobs you need them to do. The trick is to eliminate type that won’t do the job well (<b>Fig 1.2</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-2.png\" alt=\"The Hatch font used as both heading and body copy. The body copy is awkward to read.\"><figcaption>Fig 1.2: Hatch, a typeface by Mark Caneso, is fun to use large, but not a good choice for body text.</figcaption></figure><p>Depending on the job, some typefaces work better than others—and some don’t work well at all. Detailed, ornate type is not the best choice for body text, just as traditional text typefaces are not great for signage and user interfaces. Sleek, geometric fonts can make small text hard to read. I’ll come back to this at the beginning of Chapter 3.</p>\n\n<p>Considering these different jobs helps you make better design decisions, whether you’re selecting typefaces, tending to typographic details, or making text and layout feel balanced. We’ll do all of that in this book.</p>\n\n<h3>Typesetting covers type’s most important jobs</h3>\n\n<p>Typesetting, or the act of <i>setting type</i>, consists of typographic jobs that form the backbone of a reading experience: body text (paragraphs, lists, subheads) and small text (such as captions and asides). These are type’s most important jobs. The other parts of typography—which I call <i>arranging</i> and <i>calibrating</i> type—exist to bring people to the typeset text, so they can read and gather information (<b>Fig 1.3</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-3.png\" alt=\"Illustrated typographic activities arranged in a pie chart, aligned with the jobs of setting, aligning, and calibrating text.\"><figcaption>Fig 1.3: Think of these typographic activities as job categories. In Chapter 3, we’ll identify the text blocks in our example project and the jobs they need to do.</figcaption></figure><p>Let’s go over these categories of typographic jobs one by one. <i>Setting type</i> well makes it easy for people to read and comprehend textual information. It covers jobs like paragraphs, subheads, lists, and captions. <i>Arranging type</i> turns visitors and passersby into readers, by catching their attention in an expressive, visual way. It’s for jobs like large headlines, titles, calls to action, and “hero” areas. <i>Calibrating type</i> helps people scan and process complicated information, and find their way, by being clear and organized. This is for jobs like tabular data, navigation systems, infographics, math, and code.</p>\n\n<p>Arranging and calibrating type, and the jobs they facilitate, are extremely important, but I won’t spend much time discussing them in this book except to put them in context and explain where in my process I usually give them attention. They deserve their own dedicated texts. This book focuses specifically on setting type, for several reasons.</p>\n\n<p>First, typesetting is critical to the success of our projects. Although the decisions we make while typesetting are subtle almost to the point of being unnoticeable, they add up to give readers a gut feeling about the work. Typesetting lays a strong foundation for everything else.</p>\n\n<p>It also happens to be more difficult than other parts of typography. Good type for typesetting is harder to find than good type for other activities. Good typesetting decisions are harder to make than decisions about arranging type or calibrating type.</p>\n\n<p>Furthermore, typesetting can help us deeply understand the web’s inherent flexibility, which responsive web design has called attention to so well. The main reason I make a distinction between typesetting, arranging type, and calibrating type is because these different activities each require text to <i>flex</i> in different ways.</p>\n\n<p>In sum, typesetting matters because it is critical for readers, it supports other typographic activities, the difficult decisions informing it take practice, and its nature can help us understand flexibility and responsiveness on the web. A command of typesetting makes us better designers.</p>\n\n<h3>Why do some websites feel wrong?</h3>\n\n<p>It’s not hard to find websites that just feel, well, sort of wrong. They’re everywhere. The type they use is not good, the font size is too small (or too big), lines of text are too long (or comically short), line spacing is too loose or too tight, margins are either too small or way too big, and so on (<b>Fig 1.4</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-4.png\" alt=\"Two panels. Text in the left panel is smaller with more vertical space between lines than the text in the right panel.\"><figcaption>Fig 1.4: Some typesetting just looks wrong. Why? Keep reading.</figcaption></figure><p>It’s logical to think that websites feel wrong because, somewhere along the line, a typographer made bad decisions. Remember that a <i>type designer</i> is someone who makes type; a <i>typographer</i> is someone who uses type to communicate. In that sense, we are all typographers, even if we think of what we do as designing, or developing, or editing.</p>\n\n<p>For more than 500 years, the job of a typographer has been to decide how text works and looks, and over those years, typographers have made some beautiful stuff. So if some websites feel wrong, it must be because the typographers who worked on them were inexperienced, or lazy, or had no regard for typographic history. Right?</p>\n\n<p>Except that even the best typographers, who have years of experience, who have chosen a good typeface for the job at hand, who have made great typesetting decisions, who work hard and respect tradition—even those people can produce websites that feel wrong. Websites just seem to look awful in one way or another, and it’s hard to say why. Something’s just not quite right. In all likelihood, it’s the typesetting. Specifically, websites feel wrong when they put <i>pressure</i> on typographic relationships.</p>\n\n<h3>Typographic relationships</h3>\n\n<p>Have you ever chosen a new font for your blog template, or an existing project, and instinctively adjusted the font size or line spacing to make it feel better?</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-5.png\" alt=\"Three panels (from left): Text set in Libre Franklin, the same text re-rendered in Kepler, and (finally) adjusted in Kepler.\"><figcaption>Fig 1.5: Replacing this theme’s default font with Kepler made the text seem too small. Size and line-spacing adjustments felt necessary</figcaption></figure><p>Those typesetting adjustments help because the typeface itself, as well as its font size, <i>measure</i> (a typographic term for the length of lines of text), and line spacing all work together to make a text block feel balanced. (We’ll return to text blocks in more detail in Chapter 3.) This balance is something we all instinctively notice; when it’s disrupted, we sense pressure.</p>\n\n<p>But let’s continue for a moment with this example of choosing a new font. We sense pressure every time we choose a new font. Why? Because each typeface is sized and positioned in unique ways by its designer (<b>Fig 1.6</b>).</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-6.png\" alt=\"Three panels (from left): “R” in Libre Franklin, Kepler at 100%, and Kepler height-adjusted to match Libre Franklin at 116%.\"><figcaption>Fig 1.6: Glyphs are sized and positioned within a font’s em box. When we set a font size, we are sizing the em box—not the glyph inside it.</figcaption></figure><p>In Chapter 2, we’ll take a closer look at <i>glyphs</i>, which are instances of one or more characters. For now, suffice it to say that glyphs live within a bounding box called the <i>em box</i>, which is a built-in part of a font file. Type designers decide how big, small, narrow, or wide glyphs are, and where they are positioned, within this box. The em box is what becomes our CSS-specified font size—it maps to the CSS content area.</p>\n\n<p>So when we select a new typeface, the visible font size of our <i>text block</i>—the chunk of text to which we are applying styles— often changes, throwing off its balance. This means we need to carefully adjust the font size and then the measure, which depends on both the typeface and the font size. Finally, we adjust line spacing, which depends on the typeface, font size, and measure. I’ll cover how to fine-tune all of these adjustments in Chapter 4.</p>\n\n<p>Making so many careful adjustments to one measly text block seems quite disruptive, doesn’t it? Especially because the finest typographic examples in history—the work we admire, the work that endures—commands a compositional balance. <i>Composition</i>, of course, refers to a work of art or design in its<br>\nentirety. Every text block, every shape, every space in a composition relates to another. If one text block is off-kilter, the whole work suffers.</p>\n\n<p>I’m sure you can see where I’m headed with this. The web puts constant pressure on text blocks, easily disrupting their balance in myriad ways.</p>\n\n<h3>Pressure</h3>\n\n<p>There are no “correct” fonts, font sizes, measures, or line heights. But relationships among these aspects of a text block determine whether reading is easier or harder. Outside forces can apply pressure to a balanced, easy-to-read text block, making the typesetting feel wrong, and thus interfering with reading.</p>\n\n<p>We just discussed how choosing a new typeface introduces pressure. The same thing happens when our sites use local fonts that could be different for each reader, or when webfonts fail to load and our text is styled with fallback fonts. Typefaces are not interchangeable. When they change, they cause pressure that we have to work hard to relieve.</p>\n\n<p>We also experience pressure when the font size changes (<b>Fig 1.7</b>). Sometimes, when we’re designing sites, we increase font size to better fill large <i>viewports</i>—the viewing area on our screens—or decrease it to better fit small ones. Readers can even get involved, by increasing or decreasing font size themselves to make text more legible. When font size changes, we have to consider whether our typeface, measure, and line spacing are still appropriate.</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-7.png\" alt=\"Two panels (from left): The original typographic design and the effect of an increased font size.\"><figcaption>Fig 1.7: Left: a balanced text block. Right: a larger font size causes pressure.</figcaption></figure><p>Changes to the width of our text block also introduce pressure (<b>Fig 1.8</b>). When text blocks stretch across very wide screens, or are squeezed into very narrow viewports, the entire composition has to be reevaluated. We may find that our text blocks need new boundaries, or a different font size, or even a different typeface, to make sure they maintain a good internal balance—and feel right for the composition. (This may seem fuzzy right now, but it will become clearer in Chapters 5 and 6, I promise.)</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-8.png\" alt=\"Two panels (from left): The original typographic design and the effect of a narrower display area.\"><figcaption>Fig 1.8: Left: a balanced text block. Right: a narrower measure causes pressure.</figcaption></figure><p>We also experience pressure when we try to manage white space without considering the relationships in our text blocks (<b>Fig 1.9</b>). When we predetermine our line height with a baseline grid, or when we adjust the margins that surround text as if they were part of a container into which text is poured rather than an extension of the balance in the typesetting, we risk destroying relationships among compositional white spaces— not only the white spaces in text blocks (word spacing, line spacing), but also the smaller white spaces built into our typefaces. These relationships are at risk whenever a website flexes, whenever a new viewport size comes along.</p>\n\n<figure><img src=\"https://alistapart.com/d/flexible-typesetting/1-9.png\" alt=\"Two panels (from left): The original typographic design and the effect of looser line spacing.\"><figcaption>Fig 1.9: Left: a balanced text block. Right: looser line spacing causes pressure.</figcaption></figure><p>Typesetting for the web can only be successful if it relieves inevitable pressures like these. The problem is that we can’t see all of the pressures we face, and we don’t yet have the means (the words, the tools) to address what we <i>can</i> see. Yet our natural response, based on centuries of typographic control, is to try to make better decisions.</p>\n\n<p>But on the web, that’s like trying to predict the weather. We can’t decide whether to wear a raincoat a year ahead of time. What we can do is <i>get a raincoat</i> and be ready to use it under certain conditions. Typographers are now in the business of making sure text has a raincoat. We can’t know when it’ll be needed, and we can’t force our text to wear it, but we can make recommendations based on conditional instructions.</p>\n\n<p>For the first time in hundreds of years, <i>because of the web</i>, the role of the typographer has changed. We no longer decide; we make suggestions. We no longer choose typefaces, font size, line length, line spacing, and margins; we prepare and instruct text to make those choices for itself. We no longer determine page shape and quality; we respond to our readers’ contexts and environments.</p>\n\n<p>These changes may seem like a weakness compared to the command we have always been able to exercise. But they are in fact an incredible strength, because they mean that typeset text has the potential to fit everyone just right. In theory, at least, the web is universal.</p>\n\n<figure class=\"quote\"><blockquote>The primary design principle underlying the web’s usefulness and growth is universality.</blockquote>\n<figcaption><a href=\"http://bkaprt.com/ft/01-01/\">Tim Berners-Lee</a></figcaption></figure><p>We must now practice a <i>universal</i> typography that strives to work for everyone. To start, we need to acknowledge that typography is <i>multidimensional</i>, <i>relative</i> to each reader, and unequivocally <i>optional</i>.</p>\n\n<p><i>Read the rest of this chapter and more when you <a href=\"https://abookapart.com/products/flexible-typesetting\">buy the book</a>!</i></p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/3ffTxdpc8A8\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Typography &amp;amp; Web Fonts"],"color":"tan","category":"A List Apart:","date":"2018-08-09 13:02:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Fixing Variable Scope Issues with ECMAScript&amp;#8239;6","pubDate":"2018-08-02 13:07:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/HABsRgajnlo/fixing-variable-scope-issues-with-ecmascript-6","guid":"http://alistapart.com/article/fixing-variable-scope-issues-with-ecmascript-6","author":"by","thumbnail":"http://feeds.feedburner.com/~r/alistapart/main/~4/HABsRgajnlo","description":"\n<p>Variable scope has always been tricky in JavaScript, particularly when compared to more structured languages like C and Java. For years, there wasn’t much talk about it because we had few options for really changing it. But ECMAScript 6 introduced some new features to help give developers more control of variable scope. Browser support is pretty great and these features are ready to use for most developers today. But which to choose? And what, exactly, do they do?</p>\n\n<p>This article spells out what these new features are, why they matter, and how to use them. If you’re ready to take more control over variable scope in your projects or just want to learn the new way of doing things, read on.</p>\n\n<h2>Variable scope: a quick primer</h2>\n\n<p>Variable scope is an important concept in programming, but it can confuse some developers, especially those new to programming. Scope is the area in which a variable is known. Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">var myVar = 1;\n\nfunction setMyVar() {\n  myVar = 2;\n}\n\nsetMyVar();\n\nconsole.log(myVar);</code></pre>\n\n<p>What does the console log read? Not surprisingly, it reads <code>2</code>. The variable <code>myVar</code> is defined outside of any function, meaning it’s defined in the <i>global scope</i>. Consequently, every function here will know what <code>myVar</code> is. In fact, even functions in other files that are included on the same page will know what this variable is.</p>\n\n<p>Now consider the following code:</p>\n\n<pre><code class=\"language-javascript\">function setMyVar() {\n  var myVar = 2;\n}\n\nsetMyVar();\n\nconsole.log(myVar);</code></pre>\n\n<p>All we did was move where the variable was declared. So what does the console log read now? Well, it throws a <code>ReferenceError</code> because <code>myVar</code> is not defined. That’s because the <code>var</code> declaration here is function-level, making the scope extend only within the function (and any potential functions nested in it), but not beyond. If we want a variable’s scope to be shared by two or more functions on the same level, we need to define the variable one level higher than the functions.</p>\n\n<p>Here’s the tricky thing: most websites and apps don’t have all of the code written by one developer. Most will have several developers touching the code, as well as third-party libraries and frameworks thrown into the mix. And even if it’s just one developer, it’s common to pull JavaScript in from several places. Because of this, it’s generally considered bad practice to define a variable in the global scope—you never know what other variables other developers will be defining. There are some workarounds to share variables among a group of functions—most notably, <a href=\"https://alistapart.com/article/the-design-of-code-organizing-javascript\">the module pattern</a> and <a href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">IIFEs</a> in object-oriented JavaScript, although encapsulating data and functions in any object will accomplish this. But variables with scopes larger than necessary are generally problematic.</p>\n\n<h2>The problem with <code>var</code>\n</h2>\n\n<p>Alright, so we’ve got a handle on variable scope. Let’s get into something more complex. Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">function varTest() {\n  for (var i = 0; i </code></pre>\n\n<p>What are the console logs? Well, inside the loop, you get the iteration variable as it increments: <code>0</code>, <code>1</code>, <code>2</code>. After that, the loop ends and we move on. Now we try to reference that same variable outside of the <code>for</code> loop it was created in. What do we get?</p>\n\n<p>The console log reads <code>3</code> because the <code>var</code> statement is function-level. If you define a variable using <code>var</code>, the entire function will have access to it, no matter where it is defined in that function.</p>\n\n<p>This can get problematic when functions become more complex. Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  var myVar = 1;\n  if (true) {\n    var myVar = 2;\n    console.log(myVar);\n  }\n  console.log(myVar);\n}\n\ndoSomething();</code></pre>\n\n<p>What are the console logs? <code>2</code> and <code>2</code>. We define a variable equal to 1, and then try to redefine the same variable inside the <code>if</code> statement. Since those two exist in the same scope, we can’t define a new variable, even though that’s obviously what we want, and the first variable we set is overwritten inside the <code>if</code> statement.</p>\n\n<p>That right there is the biggest shortcoming with <code>var</code>: its scope is too large, which can lead to unintentional overwriting of data, and other errors. Large scope often leads to sloppy coding as well—in general, a variable should only have as much scope as it needs and no more. What we need is a way to declare a variable with a more limited scope, allowing us to exercise more caution when we need to.</p>\n\n<p>Enter ECMAScript 6.</p>\n\n<h2>New ways to declare variables</h2>\n\n<p>ECMAScript 6 (a new set of features baked into JavaScript, also known as ES6 or ES2015) gives us two new ways to define variables with a more limited scope: <code>let</code> and <code>const</code>. Both give us <i>block-level scope</i>, meaning scope can be contained within blocks of code like <code>for</code> loops and <code>if</code> statements, giving us more flexibility in choosing how our variables are scoped. Let’s take a look at both.</p>\n\n<h3>Using <code>let</code>\n</h3>\n\n<p>The <code>let</code> statement is simple: it’s mostly like <code>var</code>, but with limited scope. Let’s revisit that code sample from above, replacing <code>var</code> with <code>let</code>:</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  let myVar = 1;\n  if (true) {\n    let myVar = 2;\n    console.log(myVar);\n  }\n  console.log(myVar);\n}\n\ndoSomething();</code></pre>\n\n<p>In this case, the console logs would read <code>2</code> and <code>1</code>. This is because an <code>if</code> statement defines a new scope for a variable declared with <code>let</code>—the second variable we declare is actually a separate entity than the first one, and we can set both independently. But that doesn’t mean that nested blocks like that <code>if</code> statement are completely cut off from higher-level scopes. Observe:</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  let myVar = 1;\n  if (true) {\n    console.log(myVar);\n  }\n}\n\ndoSomething();</code></pre>\n\n<p>In this case, the console log would read <code>1</code>. The <code>if</code> statement has access to the variable we created outside of it and is able to log that. But what happens if we try to mix scopes?</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  let myVar = 1;\n  if (true) {\n    console.log(myVar);\n    let myVar = 2;\n    console.log(myVar);\n  }\n}\n\ndoSomething();</code></pre>\n\n<p>You might think that first console log would read <code>1</code>, but it actually throws a <code>ReferenceError</code>, telling us that <code>myVar</code> is not defined or initialized for that scope. (The terminology varies across browsers.) JavaScript variables are <i>hoisted</i> in their scope—if you declare a variable within a scope, JavaScript reserves a place for it even before you declare it. How that variable is reserved differs between <code>var</code> and <code>let</code>.</p>\n\n<pre><code class=\"language-javascript\">console.log(varTest);\nvar varTest = 1;\n\nconsole.log(letTest);\nlet letTest = 2;</code></pre>\n\n<p>In both cases here, we’re trying to use a variable before it’s defined. But the console logs behave differently. The first one, using a variable later declared with <code>var</code>, will read <code>undefined</code>, which is an actual variable type. The second one, using a variable later defined with <code>let</code>, will throw a <code>ReferenceError</code> and tell us that we’re trying to use that variable before it’s defined/initialized. What’s going on?</p>\n\n<p>Before executing, JavaScript will do a quick read of the code and see if any variables will be defined, and hoist them within their scope if they are. Hoisting reserves that space, even if the variable exists in the parent scope. Variables declared with <code>var</code> will be auto-initialized to <code>undefined</code> within their scope, <em>even if you reference them before they’re declared</em>. The big problem is that <code>undefined</code> doesn’t always mean you’re using a variable before it’s defined. Look at the following code:</p>\n\n<pre><code class=\"language-javascript\">var var1;\nconsole.log(var1);\n\nconsole.log(var2);\nvar var2 = 1;</code></pre>\n\n<p>In this case, both console logs read <code>undefined</code>, even though different things are happening. Variables that are declared with <code>var</code> but have no value will be assigned a value of <code>undefined</code>; but variables declared with <code>var</code> that are referenced within their scope before being declared will also return <code>undefined</code>. So if something goes wrong in our code, we have no indication which of these two things is happening.</p>\n\n<p>Variables defined with <code>let</code> are reserved in their block, but until they’re defined, they go into the <i>Temporal Dead Zone (TDZ)</i>—they can’t be used and will throw an error, but JavaScript knows exactly why and will tell you.</p>\n\n<pre><code class=\"language-javascript\">let var1;\nconsole.log(var1);\n\nconsole.log(var2);\nlet var2 = 1;</code></pre>\n\n<p>In this case, the first console log reads <code>undefined</code>, but the second throws a <code>ReferenceError</code>, telling us the variable hasn’t been defined/initialized yet.</p>\n\n<p>So, using <code>var</code>, if we see <code>undefined</code>, we don’t know if the variable has been defined and just doesn’t have a value, or if it hasn’t been defined yet in that scope but will be. Using <code>let</code>, we get an indication of which of these things is happening—much more useful for debugging.</p>\n\n<h3>Using <code>const</code>\n</h3>\n\n<p>The <code>const</code> statement is very similar to <code>let</code>, but with one major exception: it does not allow you to change the value once initialized. (Some more complex types, like <code>Object</code> and <code>Array</code>, can be modified, but can’t be replaced. Primitive types, like <code>Number</code> and <code>String</code>, cannot change at all.) Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">let mutableVar = 1;\nconst immutableVar = 2;\n\nmutableVar = 3;\nimmutableVar = 4;</code></pre>\n\n<p>That code will run fine until the last line, which throws a <code>TypeError</code> for assignment to a constant variable. Variables defined with <code>const</code> will throw this error almost any time you try to reassign one, although <a href=\"https://alistapart.com/article/why-mutation-can-be-scary\">object mutation can cause some unexpected results</a>.</p>\n\n<p>As a JavaScript developer, you might be wondering what the big deal is about immutable variables. Constant variables are new to JavaScript, but they’ve been a part of languages like C and Java for years. Why so popular? They make us think about how our code is working. There are some cases where changing a variable can be harmful to the code, like when doing calculations with pi or when you have to reference a certain HTML element over and over:</p>\n\n<pre><code class=\"language-javascript\">const myButton = document.querySelector('#my-button');</code></pre>\n\n<p>If our code depends on that reference to that specific HTML element, we should make sure it can’t be reassigned.</p>\n\n<p>But the case for <code>const</code> goes beyond that. Remember our best practice of only giving variables the scope they need and no more. In that same line of thought, we should only give variables the mutability they need and no more. Zell Liew has written <a href=\"https://zellwk.com/blog/dont-reassign/\">much more on the subject of immutable variables</a>, but the bottom line is that making variables immutable makes us think more about our code and leads to cleaner code and fewer surprises.</p>\n\n<p>When I was first starting to use <code>let</code> and <code>const</code>, my default option was <code>let</code>, and I would use <code>const</code> only if reassignment would cause harm to the code. But after learning more about programming practices, I changed my mind on this. Now, my default option is <code>const</code>, and I use <code>let</code> only if reassignment is necessary. That forces me to ask if reassignment for a variable is really necessary—most of the time, it’s not.</p>\n\n<h2>Is there a case for <code>var</code>?</h2>\n\n<p>Since <code>let</code> and <code>const</code> allow for more careful coding, is there a case for <code>var</code> anymore? Well, yes. There are a few cases where you’d want to use <code>var</code> over the new syntax. Give these careful consideration before switching over to the new declarations.</p>\n\n<h3>Variables for the masses</h3>\n\n<p>Variables declared with <code>var</code> do have one thing that the others don’t, and it’s a big one: universal browser support. 100% of browsers support <code>var</code>. Support is pretty great for both <a href=\"https://caniuse.com/#feat=let\"><code>let</code></a> and <a href=\"https://caniuse.com/#feat=const\"><code>const</code></a>, but you have to consider how differently browsers handle JavaScript it doesn’t understand vs. CSS it doesn’t understand.</p>\n\n<p>If a browser doesn’t support a CSS feature, most of the time that’s just going to mean a display bug. Your site may not look the same as in a supporting browser, but it’s most likely still usable. If you use <code>let</code> and a browser doesn’t support it, that JavaScript will not work. At all. With JavaScript being such an integral part of the web today, that can be a major problem if you’re aiming to support old browsers in any way.</p>\n\n<p>Most support conversations pose the question, “What browsers do we want to deliver an optimal experience for?” When you’re dealing with a site containing core functionality that relies on <code>let</code> and <code>const</code>, you’re essentially asking the question, “What browsers do we want to ban from using our site?” This should be a different conversation than deciding whether you can use <code>display: flex</code>. For most websites, there won’t be enough users of non-supporting browsers to worry about. But for major revenue-generating sites or sites where you’re paying for traffic, this can be a serious consideration. Make sure that risk is alright with your team before proceeding.</p>\n\n<p>If you need to support really old browsers but want to use <code>let</code> and <code>const</code> (and other new, ES6 constructs), one solution is to use a JavaScript transpiler like <a href=\"https://babeljs.io/\">Babel</a> to take care of this for you. With Babel, you can write modern JavaScript with new features and then compile it into code that’s supported by older browsers. </p>\n\n<p>Sound too good to be true? Well, there are some caveats. The resulting code is much more verbose than you’d write on your own, so you end up with a much larger file than necessary. Also, once you commit to a transpiler, that codebase is going to be stuck with that solution for a while. Even if you’re writing valid ECMAScript 6 for Babel, dropping Babel later will mean testing your code all over again, and that’s a hard sell for any project team when you have a version that’s working perfectly already. When’s the next time you’re going to rework that codebase? And when is that IE8 support not going to matter anymore? It might still be the best solution for the project, but make sure you’re comparing those two timelines.</p>\n\n<h3>And for the next trick ...</h3>\n\n<p>There is one more thing <code>var</code> can do that the others can’t. This is a niche case, but let’s say you have a situation like this:</p>\n\n<pre><code class=\"language-javascript\">var myVar = 1;\n\nfunction myFunction() {\n  var myVar = 2;\n  // Oops! We need to reference the original myVar!\n}</code></pre>\n\n<p>So we defined <code>myVar</code> in the global scope, but later lost that reference because we defined it in a function, yet we need to reference the original variable. This might seem silly, because you can ordinarily just pass the first variable into the function or rename one of them, but there may be some situations where your level of control over the code prevents this. Well, <code>var</code> can do something about that. Check it out:</p>\n\n<pre><code class=\"language-javascript\">var myVar = 1;\n\nfunction myFunction() {\n  var myVar = 2;\n  console.log(myVar); // 2\n  console.log(window.myVar); // 1\n}</code></pre>\n\n<p>When a variable is defined on the global scope using <code>var</code>, it automatically attaches itself to the global <code>window</code> object—something <code>let</code> and <code>const</code> don’t do. This feature helped me out once in a situation where a build script validated JavaScript before concatenating files together, so a reference to a global variable in another file (that would soon be concatenated into the same file upon compilation) threw an error and prevented compilation.</p>\n\n<p>That said, relying on this feature often leads to sloppy coding. This problem is most often solved with greater clarity and smaller margin of error by attaching variables to your own object:</p>\n\n<pre><code class=\"language-javascript\">let myGlobalVars = {};\nlet myVar = 1;\nmyGlobalVars.myVar = myVar;\n\nfunction myFunction() {\n  let myVar = 2;\n  console.log(myVar); // 2\n  console.log(myGlobalVars.myVar); // 1\n}</code></pre>\n\n<p>Yes, this requires an extra step, but it reduces confusion in working around something you’re not really supposed to be doing anyway. Nonetheless, there may be times when this feature of <code>var</code> is useful. Try to find a cleaner workaround before resorting to this one, though.</p>\n\n<h2>Which do I use?</h2>\n\n<p>So how do you choose? What’s the priority for using these? Here’s the bottom line.</p>\n\n<p>First question: are you supporting IE10 or really old versions of other browsers in any way? If the answer is yes, and you don’t want to go with a transpiler solution, you need to choose <code>var</code>.</p>\n\n<p>If you’re free to use the features that are new in ES6, start by making every variable a <code>const</code>. If a variable needs to be reassigned (and try to write your code so it doesn’t), switch it to <code>let</code>.</p>\n\n<h2>Scoping for the future</h2>\n\n<p>ECMAScript 6 statements like <code>let</code> and <code>const</code> give us more options for controlling variable scope in our websites and apps. They make us think about what our code is doing, and support is great. Give it careful consideration, of course, but coding with these declarations will make your codebase more stable and prepare it for the future.</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/HABsRgajnlo\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Variable scope has always been tricky in JavaScript, particularly when compared to more structured languages like C and Java. For years, there wasn’t much talk about it because we had few options for really changing it. But ECMAScript 6 introduced some new features to help give developers more control of variable scope. Browser support is pretty great and these features are ready to use for most developers today. But which to choose? And what, exactly, do they do?</p>\n\n<p>This article spells out what these new features are, why they matter, and how to use them. If you’re ready to take more control over variable scope in your projects or just want to learn the new way of doing things, read on.</p>\n\n<h2>Variable scope: a quick primer</h2>\n\n<p>Variable scope is an important concept in programming, but it can confuse some developers, especially those new to programming. Scope is the area in which a variable is known. Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">var myVar = 1;\n\nfunction setMyVar() {\n  myVar = 2;\n}\n\nsetMyVar();\n\nconsole.log(myVar);</code></pre>\n\n<p>What does the console log read? Not surprisingly, it reads <code>2</code>. The variable <code>myVar</code> is defined outside of any function, meaning it’s defined in the <i>global scope</i>. Consequently, every function here will know what <code>myVar</code> is. In fact, even functions in other files that are included on the same page will know what this variable is.</p>\n\n<p>Now consider the following code:</p>\n\n<pre><code class=\"language-javascript\">function setMyVar() {\n  var myVar = 2;\n}\n\nsetMyVar();\n\nconsole.log(myVar);</code></pre>\n\n<p>All we did was move where the variable was declared. So what does the console log read now? Well, it throws a <code>ReferenceError</code> because <code>myVar</code> is not defined. That’s because the <code>var</code> declaration here is function-level, making the scope extend only within the function (and any potential functions nested in it), but not beyond. If we want a variable’s scope to be shared by two or more functions on the same level, we need to define the variable one level higher than the functions.</p>\n\n<p>Here’s the tricky thing: most websites and apps don’t have all of the code written by one developer. Most will have several developers touching the code, as well as third-party libraries and frameworks thrown into the mix. And even if it’s just one developer, it’s common to pull JavaScript in from several places. Because of this, it’s generally considered bad practice to define a variable in the global scope—you never know what other variables other developers will be defining. There are some workarounds to share variables among a group of functions—most notably, <a href=\"https://alistapart.com/article/the-design-of-code-organizing-javascript\">the module pattern</a> and <a href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">IIFEs</a> in object-oriented JavaScript, although encapsulating data and functions in any object will accomplish this. But variables with scopes larger than necessary are generally problematic.</p>\n\n<h2>The problem with <code>var</code>\n</h2>\n\n<p>Alright, so we’ve got a handle on variable scope. Let’s get into something more complex. Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">function varTest() {\n  for (var i = 0; i </code></pre>\n\n<p>What are the console logs? Well, inside the loop, you get the iteration variable as it increments: <code>0</code>, <code>1</code>, <code>2</code>. After that, the loop ends and we move on. Now we try to reference that same variable outside of the <code>for</code> loop it was created in. What do we get?</p>\n\n<p>The console log reads <code>3</code> because the <code>var</code> statement is function-level. If you define a variable using <code>var</code>, the entire function will have access to it, no matter where it is defined in that function.</p>\n\n<p>This can get problematic when functions become more complex. Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  var myVar = 1;\n  if (true) {\n    var myVar = 2;\n    console.log(myVar);\n  }\n  console.log(myVar);\n}\n\ndoSomething();</code></pre>\n\n<p>What are the console logs? <code>2</code> and <code>2</code>. We define a variable equal to 1, and then try to redefine the same variable inside the <code>if</code> statement. Since those two exist in the same scope, we can’t define a new variable, even though that’s obviously what we want, and the first variable we set is overwritten inside the <code>if</code> statement.</p>\n\n<p>That right there is the biggest shortcoming with <code>var</code>: its scope is too large, which can lead to unintentional overwriting of data, and other errors. Large scope often leads to sloppy coding as well—in general, a variable should only have as much scope as it needs and no more. What we need is a way to declare a variable with a more limited scope, allowing us to exercise more caution when we need to.</p>\n\n<p>Enter ECMAScript 6.</p>\n\n<h2>New ways to declare variables</h2>\n\n<p>ECMAScript 6 (a new set of features baked into JavaScript, also known as ES6 or ES2015) gives us two new ways to define variables with a more limited scope: <code>let</code> and <code>const</code>. Both give us <i>block-level scope</i>, meaning scope can be contained within blocks of code like <code>for</code> loops and <code>if</code> statements, giving us more flexibility in choosing how our variables are scoped. Let’s take a look at both.</p>\n\n<h3>Using <code>let</code>\n</h3>\n\n<p>The <code>let</code> statement is simple: it’s mostly like <code>var</code>, but with limited scope. Let’s revisit that code sample from above, replacing <code>var</code> with <code>let</code>:</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  let myVar = 1;\n  if (true) {\n    let myVar = 2;\n    console.log(myVar);\n  }\n  console.log(myVar);\n}\n\ndoSomething();</code></pre>\n\n<p>In this case, the console logs would read <code>2</code> and <code>1</code>. This is because an <code>if</code> statement defines a new scope for a variable declared with <code>let</code>—the second variable we declare is actually a separate entity than the first one, and we can set both independently. But that doesn’t mean that nested blocks like that <code>if</code> statement are completely cut off from higher-level scopes. Observe:</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  let myVar = 1;\n  if (true) {\n    console.log(myVar);\n  }\n}\n\ndoSomething();</code></pre>\n\n<p>In this case, the console log would read <code>1</code>. The <code>if</code> statement has access to the variable we created outside of it and is able to log that. But what happens if we try to mix scopes?</p>\n\n<pre><code class=\"language-javascript\">function doSomething() {\n  let myVar = 1;\n  if (true) {\n    console.log(myVar);\n    let myVar = 2;\n    console.log(myVar);\n  }\n}\n\ndoSomething();</code></pre>\n\n<p>You might think that first console log would read <code>1</code>, but it actually throws a <code>ReferenceError</code>, telling us that <code>myVar</code> is not defined or initialized for that scope. (The terminology varies across browsers.) JavaScript variables are <i>hoisted</i> in their scope—if you declare a variable within a scope, JavaScript reserves a place for it even before you declare it. How that variable is reserved differs between <code>var</code> and <code>let</code>.</p>\n\n<pre><code class=\"language-javascript\">console.log(varTest);\nvar varTest = 1;\n\nconsole.log(letTest);\nlet letTest = 2;</code></pre>\n\n<p>In both cases here, we’re trying to use a variable before it’s defined. But the console logs behave differently. The first one, using a variable later declared with <code>var</code>, will read <code>undefined</code>, which is an actual variable type. The second one, using a variable later defined with <code>let</code>, will throw a <code>ReferenceError</code> and tell us that we’re trying to use that variable before it’s defined/initialized. What’s going on?</p>\n\n<p>Before executing, JavaScript will do a quick read of the code and see if any variables will be defined, and hoist them within their scope if they are. Hoisting reserves that space, even if the variable exists in the parent scope. Variables declared with <code>var</code> will be auto-initialized to <code>undefined</code> within their scope, <em>even if you reference them before they’re declared</em>. The big problem is that <code>undefined</code> doesn’t always mean you’re using a variable before it’s defined. Look at the following code:</p>\n\n<pre><code class=\"language-javascript\">var var1;\nconsole.log(var1);\n\nconsole.log(var2);\nvar var2 = 1;</code></pre>\n\n<p>In this case, both console logs read <code>undefined</code>, even though different things are happening. Variables that are declared with <code>var</code> but have no value will be assigned a value of <code>undefined</code>; but variables declared with <code>var</code> that are referenced within their scope before being declared will also return <code>undefined</code>. So if something goes wrong in our code, we have no indication which of these two things is happening.</p>\n\n<p>Variables defined with <code>let</code> are reserved in their block, but until they’re defined, they go into the <i>Temporal Dead Zone (TDZ)</i>—they can’t be used and will throw an error, but JavaScript knows exactly why and will tell you.</p>\n\n<pre><code class=\"language-javascript\">let var1;\nconsole.log(var1);\n\nconsole.log(var2);\nlet var2 = 1;</code></pre>\n\n<p>In this case, the first console log reads <code>undefined</code>, but the second throws a <code>ReferenceError</code>, telling us the variable hasn’t been defined/initialized yet.</p>\n\n<p>So, using <code>var</code>, if we see <code>undefined</code>, we don’t know if the variable has been defined and just doesn’t have a value, or if it hasn’t been defined yet in that scope but will be. Using <code>let</code>, we get an indication of which of these things is happening—much more useful for debugging.</p>\n\n<h3>Using <code>const</code>\n</h3>\n\n<p>The <code>const</code> statement is very similar to <code>let</code>, but with one major exception: it does not allow you to change the value once initialized. (Some more complex types, like <code>Object</code> and <code>Array</code>, can be modified, but can’t be replaced. Primitive types, like <code>Number</code> and <code>String</code>, cannot change at all.) Take a look at the following code:</p>\n\n<pre><code class=\"language-javascript\">let mutableVar = 1;\nconst immutableVar = 2;\n\nmutableVar = 3;\nimmutableVar = 4;</code></pre>\n\n<p>That code will run fine until the last line, which throws a <code>TypeError</code> for assignment to a constant variable. Variables defined with <code>const</code> will throw this error almost any time you try to reassign one, although <a href=\"https://alistapart.com/article/why-mutation-can-be-scary\">object mutation can cause some unexpected results</a>.</p>\n\n<p>As a JavaScript developer, you might be wondering what the big deal is about immutable variables. Constant variables are new to JavaScript, but they’ve been a part of languages like C and Java for years. Why so popular? They make us think about how our code is working. There are some cases where changing a variable can be harmful to the code, like when doing calculations with pi or when you have to reference a certain HTML element over and over:</p>\n\n<pre><code class=\"language-javascript\">const myButton = document.querySelector('#my-button');</code></pre>\n\n<p>If our code depends on that reference to that specific HTML element, we should make sure it can’t be reassigned.</p>\n\n<p>But the case for <code>const</code> goes beyond that. Remember our best practice of only giving variables the scope they need and no more. In that same line of thought, we should only give variables the mutability they need and no more. Zell Liew has written <a href=\"https://zellwk.com/blog/dont-reassign/\">much more on the subject of immutable variables</a>, but the bottom line is that making variables immutable makes us think more about our code and leads to cleaner code and fewer surprises.</p>\n\n<p>When I was first starting to use <code>let</code> and <code>const</code>, my default option was <code>let</code>, and I would use <code>const</code> only if reassignment would cause harm to the code. But after learning more about programming practices, I changed my mind on this. Now, my default option is <code>const</code>, and I use <code>let</code> only if reassignment is necessary. That forces me to ask if reassignment for a variable is really necessary—most of the time, it’s not.</p>\n\n<h2>Is there a case for <code>var</code>?</h2>\n\n<p>Since <code>let</code> and <code>const</code> allow for more careful coding, is there a case for <code>var</code> anymore? Well, yes. There are a few cases where you’d want to use <code>var</code> over the new syntax. Give these careful consideration before switching over to the new declarations.</p>\n\n<h3>Variables for the masses</h3>\n\n<p>Variables declared with <code>var</code> do have one thing that the others don’t, and it’s a big one: universal browser support. 100% of browsers support <code>var</code>. Support is pretty great for both <a href=\"https://caniuse.com/#feat=let\"><code>let</code></a> and <a href=\"https://caniuse.com/#feat=const\"><code>const</code></a>, but you have to consider how differently browsers handle JavaScript it doesn’t understand vs. CSS it doesn’t understand.</p>\n\n<p>If a browser doesn’t support a CSS feature, most of the time that’s just going to mean a display bug. Your site may not look the same as in a supporting browser, but it’s most likely still usable. If you use <code>let</code> and a browser doesn’t support it, that JavaScript will not work. At all. With JavaScript being such an integral part of the web today, that can be a major problem if you’re aiming to support old browsers in any way.</p>\n\n<p>Most support conversations pose the question, “What browsers do we want to deliver an optimal experience for?” When you’re dealing with a site containing core functionality that relies on <code>let</code> and <code>const</code>, you’re essentially asking the question, “What browsers do we want to ban from using our site?” This should be a different conversation than deciding whether you can use <code>display: flex</code>. For most websites, there won’t be enough users of non-supporting browsers to worry about. But for major revenue-generating sites or sites where you’re paying for traffic, this can be a serious consideration. Make sure that risk is alright with your team before proceeding.</p>\n\n<p>If you need to support really old browsers but want to use <code>let</code> and <code>const</code> (and other new, ES6 constructs), one solution is to use a JavaScript transpiler like <a href=\"https://babeljs.io/\">Babel</a> to take care of this for you. With Babel, you can write modern JavaScript with new features and then compile it into code that’s supported by older browsers. </p>\n\n<p>Sound too good to be true? Well, there are some caveats. The resulting code is much more verbose than you’d write on your own, so you end up with a much larger file than necessary. Also, once you commit to a transpiler, that codebase is going to be stuck with that solution for a while. Even if you’re writing valid ECMAScript 6 for Babel, dropping Babel later will mean testing your code all over again, and that’s a hard sell for any project team when you have a version that’s working perfectly already. When’s the next time you’re going to rework that codebase? And when is that IE8 support not going to matter anymore? It might still be the best solution for the project, but make sure you’re comparing those two timelines.</p>\n\n<h3>And for the next trick ...</h3>\n\n<p>There is one more thing <code>var</code> can do that the others can’t. This is a niche case, but let’s say you have a situation like this:</p>\n\n<pre><code class=\"language-javascript\">var myVar = 1;\n\nfunction myFunction() {\n  var myVar = 2;\n  // Oops! We need to reference the original myVar!\n}</code></pre>\n\n<p>So we defined <code>myVar</code> in the global scope, but later lost that reference because we defined it in a function, yet we need to reference the original variable. This might seem silly, because you can ordinarily just pass the first variable into the function or rename one of them, but there may be some situations where your level of control over the code prevents this. Well, <code>var</code> can do something about that. Check it out:</p>\n\n<pre><code class=\"language-javascript\">var myVar = 1;\n\nfunction myFunction() {\n  var myVar = 2;\n  console.log(myVar); // 2\n  console.log(window.myVar); // 1\n}</code></pre>\n\n<p>When a variable is defined on the global scope using <code>var</code>, it automatically attaches itself to the global <code>window</code> object—something <code>let</code> and <code>const</code> don’t do. This feature helped me out once in a situation where a build script validated JavaScript before concatenating files together, so a reference to a global variable in another file (that would soon be concatenated into the same file upon compilation) threw an error and prevented compilation.</p>\n\n<p>That said, relying on this feature often leads to sloppy coding. This problem is most often solved with greater clarity and smaller margin of error by attaching variables to your own object:</p>\n\n<pre><code class=\"language-javascript\">let myGlobalVars = {};\nlet myVar = 1;\nmyGlobalVars.myVar = myVar;\n\nfunction myFunction() {\n  let myVar = 2;\n  console.log(myVar); // 2\n  console.log(myGlobalVars.myVar); // 1\n}</code></pre>\n\n<p>Yes, this requires an extra step, but it reduces confusion in working around something you’re not really supposed to be doing anyway. Nonetheless, there may be times when this feature of <code>var</code> is useful. Try to find a cleaner workaround before resorting to this one, though.</p>\n\n<h2>Which do I use?</h2>\n\n<p>So how do you choose? What’s the priority for using these? Here’s the bottom line.</p>\n\n<p>First question: are you supporting IE10 or really old versions of other browsers in any way? If the answer is yes, and you don’t want to go with a transpiler solution, you need to choose <code>var</code>.</p>\n\n<p>If you’re free to use the features that are new in ES6, start by making every variable a <code>const</code>. If a variable needs to be reassigned (and try to write your code so it doesn’t), switch it to <code>let</code>.</p>\n\n<h2>Scoping for the future</h2>\n\n<p>ECMAScript 6 statements like <code>let</code> and <code>const</code> give us more options for controlling variable scope in our websites and apps. They make us think about what our code is doing, and support is great. Give it careful consideration, of course, but coding with these declarations will make your codebase more stable and prepare it for the future.</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/HABsRgajnlo\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Code, JavaScript"],"color":"tan","category":"A List Apart:","date":"2018-08-02 13:07:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Webmentions: Enabling Better Communication on the Internet","pubDate":"2018-07-19 13:00:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/G24i4TcJwdk/webmentions-enabling-better-communication-on-the-internet","guid":"http://alistapart.com/article/webmentions-enabling-better-communication-on-the-internet","author":"by","thumbnail":"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/wiz-khalifa-tweet.png","description":"\n<p>Over <a href=\"https://snarfed.org/1-million-webmentions\">1 million Webmentions</a> will have been sent across the internet since the <a href=\"https://www.w3.org/TR/webmention/\">specification</a> was made a full Recommendation by the W3C—the standards body that guides the direction of the web—in early January 2017. That number is rising rapidly, and in the last few weeks I’ve seen a growing volume of chatter on social media and the blogosphere about these new “mentions” and the people implementing them.</p>\n\n<p>So what are Webmentions and why should we care? </p>\n\n<p>While the technical specification published by the W3C may seem incomprehensible to most, it’s actually a straightforward and extremely useful concept with a relatively simple implementation. Webmentions help to break down some of the artificial walls being built within the internet and so help create a more open and decentralized web. There is also an expanding list of major web platforms already supporting Webmentions either natively or with easy-to-use plugins (more on this later).</p>\n\n<p>Put simply, Webmention is a (now) standardized protocol that enables one website address (URL) to notify another website address that the former contains a reference to the latter. It also allows the latter to verify the authenticity of the reference and include its own corresponding reference in a reciprocal way. In order to understand what a big step forward this is, a little history is needed.</p>\n\n<h2>The rise of @mentions</h2>\n\n<p>By now most people are familiar with the ubiquitous use of the “@” symbol in front of a username, which <a href=\"https://support.twitter.com/articles/14023\">originated on Twitter</a> and became known as <a href=\"https://en.wikipedia.org/wiki/Mention_(blogging)\"><i>@mentions</i> and <i>@replies</i></a> (read “at mentions” and “at replies”). For the vast majority, this is the way that one user communicates with other users on the platform, and over the past decade these @mentions, with their corresponding notification to the receiver, have become a relatively standard way of communicating on the internet.</p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/wiz-khalifa-tweet.png\" alt=\"Tweet from Wiz Khalifa: 'I been smashed the idea of that album even existing. I got joints to roll @kanyewest'\"><figcaption><a href=\"https://twitter.com/wizkhalifa/status/692424370250186752\">Tweet from Wiz Khalifa</a></figcaption></figure><p>Many other services also use this type of internal notification to indicate to other users that they have been referenced directly or tagged in a post or photograph. Facebook allows it, so does Instagram. Google+ has a variant that uses + instead of @, and even the long-form article platform Medium, whose founder Ev Williams also co-founded Twitter, quickly joined the @mentions party.</p>\n\n<h3>The biggest communications problem on the internet</h3>\n\n<p>If you use Twitter, your friend Alice only uses Facebook, your friend Bob only uses his blog on WordPress, and your pal Chuck is over on Medium, it’s impossible for any one of you to @mention another. You’re all on different and competing platforms, none of which interoperate to send these mentions or notifications of them. The only way to communicate in this way is if you all join the same social media platforms, resulting in the average person being signed up to multiple services just to stay in touch with all their friends and acquaintances.</p>\n\n<p>Given the issues of privacy and identity protection, different use cases, the burden of additional usernames and passwords, and the time involved, many people don’t want to do this. Possibly worst of all, your personal identity on the internet can end up fragmented like a Horcrux across multiple websites over which you have little, if any, control. </p>\n\n<p>Imagine if AT&amp;T customers could only speak to other AT&amp;T customers and needed a separate phone, account, and phone number to speak to friends and family on Verizon. And still another to talk to friends on Sprint or T-Mobile. The massive benefit of the telephone system is that if you have a telephone and service (from any one of hundreds or even thousands of providers worldwide), you can potentially reach anyone else using the network. Surely, with a basic architecture based on simple standards, links, and interconnections, the same should apply to the internet?</p>\n\n<h3>The solution? Enter Webmentions!</h3>\n\n<p>As mentioned earlier, Webmentions allow notifications between web addresses. If both sites are set up to send and receive them, the system works like this: </p>\n\n<ol>\n<li>Alice has a website where she writes an article about her rocket engine hobby.</li>\n<li>Bob has his own website where he writes a reply to Alice’s article. Within his reply, Bob includes the permalink URL of Alice’s article.</li>\n<li>When Bob publishes his reply, his publishing software automatically notifies Alice’s server that her post has been linked to by the URL of Bob’s reply.</li>\n<li>Alice’s publishing software verifies that Bob’s post actually contains a link to her post and then (optionally) includes information about Bob’s post on her site; for example, displaying it as a comment.</li>\n</ol>\n<p>A Webmention is simply an @mention that works from one website to another!</p>\n\n<p>If she chooses, Alice can include the full text of Bob’s reply—along with his name, photo, and his article’s URL (presuming he’s made these available)—as a comment on her original post. Any new readers of Alice’s article can then see Bob’s reply underneath it. Each can carry on a full conversation from their own websites and in both cases display (if they wish) the full context and content. </p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/webmention-diagram.png\" alt=\"Diagram showing comments sections on two different websites, carrying on a single conversation\"><figcaption>Using Webmentions, both sides can carry on a conversation where each is able to own a copy of the content and provide richer context.</figcaption></figure><p>User behaviors with Webmentions are a little different than they are with @mentions on Twitter and the like in that they work <em>between</em> websites in addition to within a particular website. They enable authors (of both the original content and the responses) to own the content, allowing them to keep a record on the web page where it originated, whether that’s a website they own or the third-party platform from which they chose to send it.</p>\n\n<h2>Interaction examples with Webmention</h2>\n\n<p>Webmentions certainly aren’t limited to creating or displaying “traditional” comments or replies. With the use of simple semantic microformats classes and a variety of parsers written in numerous languages, one can explicitly post bookmarks, likes, favorites, RSVPs, check-ins, listens, follows, reads, reviews, issues, edits, and even purchases. The result? Richer connections and interactions with other content on the web and a genuine two-way conversation instead of a mass of unidirectional links. We’ll take a look at some examples, but you can find more on the <a href=\"https://indieweb.org/Webmention\">IndieWeb wiki page for Webmention</a> alongside some other useful resources.</p>\n\n<h3>Marginalia</h3>\n\n<p>With Webmention support, one could architect a site to allow inline marginalia and highlighting similar to Medium.com’s relatively well-known functionality. With the clever use of <a href=\"https://indieweb.org/fragmention\">URL fragments</a>, which are well supported in major browsers, there are already <a href=\"https://kartikprabhu.com/articles/marginalia\">examples of people</a> who use Webmentions to display word-, sentence-, or paragraph-level marginalia on their sites. After all, aren’t inline annotations just a more targeted version of comments?</p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/hey-ev-what-about-mentions.png\" alt=\"Screenshot of an article with a response off to the side\"><figcaption>An inline annotation on the post “<a href=\"https://blog.medium.com/hey-ev-what-about-mentions-37aa9313e9d9\">Hey Ev, what about mentions?</a>,” in which Medium began to roll out their @mention functionality.</figcaption></figure><h3>Reads</h3>\n\n<p>As another example, and something that could profoundly impact the online news business, I might post a link on my website indicating I’ve read a particular article on, say, <i>The New York Times</i>. My site sends a “read” Webmention to the article, where a <a href=\"https://indieweb.org/facepile\">facepile</a> or counter showing the number of read Webmentions received could be implemented. Because of the simplified two-way link between the two web pages, there is now auditable proof of interaction with the content. This could similarly work with microinteractions such as likes, favorites, bookmarks, and reposts, resulting in a clearer representation of the particular types of interaction a piece of content has received. Compared to an array of nebulous social media mini-badges that provide only basic counters, this is a potentially more valuable indicator of a post’s popularity, reach, and ultimate impact.</p>\n\n<h3>Listens</h3>\n\n<p>Building on the idea of using reads, one could extend Webmentions to the podcasting or online music sectors. Many platforms are reasonably good at providing download numbers for podcasts, but it is far more difficult to track the number of actual listens. This can have a profound effect on the advertising market that supports many podcasts. People can post about what they’re actively listening to (either on their personal websites or via podcast apps that could report the percentage of the episode listened to) and send “listen” Webmentions to pages for podcasts or other audio content. These could then be aggregated for demographics on the back end or even shown on the particular episode’s page as social proof of the podcast’s popularity.</p>\n\n<p>For additional fun, podcasters or musicians might use Webmentions in conjunction with <a href=\"https://www.w3.org/TR/media-frags/\">media fragments</a> and audio or video content to add timecode-specific, inline comments to audio/video players to create an open standards version of <a href=\"https://help.soundcloud.com/hc/en-us/articles/115003451147-Writing-or-replying-to-a-comment\">SoundCloud-like annotations and commenting</a>.</p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/soundcloud-annotations.png\" alt=\"Screenshot of a Soundcloud audio file with little icons scatter about the timeline\"><figcaption>SoundCloud allows users to insert inline comments that dovetail with specific portions of audio.</figcaption></figure><h3>Reviews</h3>\n\n<p>Websites selling products or services could also accept review-based Webmentions that include star-based ratings scales as well as written comments with photos, audio, or even video. Because Webmentions are a two-way protocol, the reverse link to the original provides an auditable path to the reviewer and the opportunity to assess how trustworthy their review may be. Of course, third-party trusted sites might also accept these reviews, so that the receiving sites can’t easily cherry-pick only positive reviews for display. And because the Webmention specification includes the functionality for editing or deletion, the original author has the option to update or remove their reviews at any time.</p>\n\n<h2>Getting started with Webmentions</h2>\n\n<h3>Extant platforms with support</h3>\n\n<p>While the specification has only recently become a broad recommendation for use on the internet, there are <a href=\"https://indieweb.org/Webmention#Publishing_Software\">already an actively growing number of content management systems (CMSs) and platforms that support Webmentions</a>, either natively or with plugins. The simplest option, requiring almost no work, is a relatively new and excellent social media service called <a href=\"https://micro.blog/\">Micro.blog</a>, which handles Webmentions out of the box. CMSs like <a href=\"https://withknown.com/\">Known</a> and <a href=\"https://grabaperch.com/\">Perch</a> also have Webmention functionality built in. Download and set up the open source software and you’re ready to go.</p>\n\n<p>If you’re working with WordPress, there’s a simple <a href=\"https://wordpress.org/plugins/webmention/\">Webmention plugin</a> that will allow you to begin using Webmentions—just download and activate it. (For additional functionality when displaying Webmentions, there’s also the recommended <a href=\"https://wordpress.org/plugins/semantic-linkbacks/\">Semantic Linkbacks plugin</a>.) Other CMSs like Drupal, ProcessWire, Elgg, Nucleus CMS, Craft, Django, and Kirby also have plugins that support the standard. A wide variety of static site generators, like Hugo and Jekyll, have <a href=\"https://indieweb.org/static_site#Sending_Webmentions\">solutions</a> for Webmention technology as well. More are certainly coming. </p>\n\n<p>If you can compose basic HTML on your website, Aaron Parecki has written an excellent primer on “<a href=\"https://aaronparecki.com/2018/06/30/11/your-first-webmention\">Sending Your First Webmention from Scratch</a>.”</p>\n\n<p>A weak form of Webmention support can be bootstrapped for Tumblr, WordPress.com, Blogger, and Medium <a href=\"https://brid.gy/about#blogs\">with help from the free Bridgy</a> service, but the user interface and display would obviously be better if they were supported fully and natively. </p>\n\n<p>As a last resort, if you’re using Tumblr, WordPress.com, Wix, Squarespace, Ghost, Joomla, Magento, or any of the other systems without Webmention, file tickets asking them to support the standard. It only takes a few days of work for a reasonably experienced developer to build support, and it substantially improves the value of the platform for its users. It also makes them first-class decentralized internet citizens.</p>\n\n<h3>Webmentions for developers</h3>\n\n<p>If you’re a developer or a company able to hire a developer, it is relatively straightforward to build Webmentions into your CMS or project, even potentially open-sourcing the solution as a plugin for others. For anyone familiar with the old specifications for pingback or trackback, you can think of Webmentions as a major iteration of those systems, but with easier implementation and testing, improved performance and display capabilities, and decreased spam vulnerabilities. Because the specification supports editing and deleting Webmentions, it provides individuals with more direct control of their data, which is important in light of new laws like GDPR.</p>\n\n<p>In addition to reading the specification, as mentioned previously, there are multiple open source implementations already written in a variety of languages that you can use directly, or as examples. There are also a <a href=\"https://webmention.rocks/\">test suite</a> and pre-built services like <a href=\"https://webmention.io/\">Webmention.io</a>, <a href=\"https://telegraph.p3k.io/\">Telegraph</a>, <a href=\"https://mention-tech.appspot.com/\">mention-tech</a>, and <a href=\"https://webmention.herokuapp.com/\">webmention.herokuapp.com</a> that can be quickly leveraged.</p>\n\n<p>Maybe your company allows employees to spend 20% of their time on non-specific projects, as Google does. If so, I’d encourage you to take the opportunity to fbuild Webmentions support for one or more platforms—let’s spread the love and democratize communication on the web as fast as we can!</p>\n\n<p>And if you already have a major social platform but don’t want to completely open up to sending and receiving Webmentions, consider using Webmention functionality as a simple post API. I could easily see services like Twitter, Mastodon, or Google+ supporting the receiving of Webmentions, combined with a simple parsing mechanism to allow Webmention senders to publish syndicated content on their platform. There are already several services like <a href=\"https://news.indieweb.org/\">IndieNews</a>, with Hacker News-like functionality, that allow posting to them via Webmention.</p>\n\n<p>If you have problems or questions, I’d recommend joining the <a href=\"https://indieweb.org/discuss\">IndieWeb chat room</a> online via IRC, web interface, Slack, or Matrix to gain access to further hints, pointers, and resources for implementing a particular Webmention solution.</p>\n\n<h3>The expansion of Webmentions</h3>\n\n<p>The big question many will now have is <i>Will the traditional social media walled gardens like Facebook, Twitter, Instagram, and the like support the Webmention specification?</i></p>\n\n<p>At present, they don’t, and many may never do so. After all, locking you into their services is enabling them to leverage your content and your interactions to generate income. However, I suspect that if one of the major social platforms enabled sending/receiving Webmentions, it would dramatically disrupt the entire social space. </p>\n\n<p>In the meantime, if your site already has Webmentions enabled, then congratulations on joining the next revolution in web communication! Just make sure you advertise the fact by using a button or badge. <a href=\"https://indieweb.org/buttons\">You can download a copy here.</a></p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/G24i4TcJwdk\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Over <a href=\"https://snarfed.org/1-million-webmentions\">1 million Webmentions</a> will have been sent across the internet since the <a href=\"https://www.w3.org/TR/webmention/\">specification</a> was made a full Recommendation by the W3C—the standards body that guides the direction of the web—in early January 2017. That number is rising rapidly, and in the last few weeks I’ve seen a growing volume of chatter on social media and the blogosphere about these new “mentions” and the people implementing them.</p>\n\n<p>So what are Webmentions and why should we care? </p>\n\n<p>While the technical specification published by the W3C may seem incomprehensible to most, it’s actually a straightforward and extremely useful concept with a relatively simple implementation. Webmentions help to break down some of the artificial walls being built within the internet and so help create a more open and decentralized web. There is also an expanding list of major web platforms already supporting Webmentions either natively or with easy-to-use plugins (more on this later).</p>\n\n<p>Put simply, Webmention is a (now) standardized protocol that enables one website address (URL) to notify another website address that the former contains a reference to the latter. It also allows the latter to verify the authenticity of the reference and include its own corresponding reference in a reciprocal way. In order to understand what a big step forward this is, a little history is needed.</p>\n\n<h2>The rise of @mentions</h2>\n\n<p>By now most people are familiar with the ubiquitous use of the “@” symbol in front of a username, which <a href=\"https://support.twitter.com/articles/14023\">originated on Twitter</a> and became known as <a href=\"https://en.wikipedia.org/wiki/Mention_(blogging)\"><i>@mentions</i> and <i>@replies</i></a> (read “at mentions” and “at replies”). For the vast majority, this is the way that one user communicates with other users on the platform, and over the past decade these @mentions, with their corresponding notification to the receiver, have become a relatively standard way of communicating on the internet.</p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/wiz-khalifa-tweet.png\" alt=\"Tweet from Wiz Khalifa: 'I been smashed the idea of that album even existing. I got joints to roll @kanyewest'\"><figcaption><a href=\"https://twitter.com/wizkhalifa/status/692424370250186752\">Tweet from Wiz Khalifa</a></figcaption></figure><p>Many other services also use this type of internal notification to indicate to other users that they have been referenced directly or tagged in a post or photograph. Facebook allows it, so does Instagram. Google+ has a variant that uses + instead of @, and even the long-form article platform Medium, whose founder Ev Williams also co-founded Twitter, quickly joined the @mentions party.</p>\n\n<h3>The biggest communications problem on the internet</h3>\n\n<p>If you use Twitter, your friend Alice only uses Facebook, your friend Bob only uses his blog on WordPress, and your pal Chuck is over on Medium, it’s impossible for any one of you to @mention another. You’re all on different and competing platforms, none of which interoperate to send these mentions or notifications of them. The only way to communicate in this way is if you all join the same social media platforms, resulting in the average person being signed up to multiple services just to stay in touch with all their friends and acquaintances.</p>\n\n<p>Given the issues of privacy and identity protection, different use cases, the burden of additional usernames and passwords, and the time involved, many people don’t want to do this. Possibly worst of all, your personal identity on the internet can end up fragmented like a Horcrux across multiple websites over which you have little, if any, control. </p>\n\n<p>Imagine if AT&amp;T customers could only speak to other AT&amp;T customers and needed a separate phone, account, and phone number to speak to friends and family on Verizon. And still another to talk to friends on Sprint or T-Mobile. The massive benefit of the telephone system is that if you have a telephone and service (from any one of hundreds or even thousands of providers worldwide), you can potentially reach anyone else using the network. Surely, with a basic architecture based on simple standards, links, and interconnections, the same should apply to the internet?</p>\n\n<h3>The solution? Enter Webmentions!</h3>\n\n<p>As mentioned earlier, Webmentions allow notifications between web addresses. If both sites are set up to send and receive them, the system works like this: </p>\n\n<ol>\n<li>Alice has a website where she writes an article about her rocket engine hobby.</li>\n<li>Bob has his own website where he writes a reply to Alice’s article. Within his reply, Bob includes the permalink URL of Alice’s article.</li>\n<li>When Bob publishes his reply, his publishing software automatically notifies Alice’s server that her post has been linked to by the URL of Bob’s reply.</li>\n<li>Alice’s publishing software verifies that Bob’s post actually contains a link to her post and then (optionally) includes information about Bob’s post on her site; for example, displaying it as a comment.</li>\n</ol>\n<p>A Webmention is simply an @mention that works from one website to another!</p>\n\n<p>If she chooses, Alice can include the full text of Bob’s reply—along with his name, photo, and his article’s URL (presuming he’s made these available)—as a comment on her original post. Any new readers of Alice’s article can then see Bob’s reply underneath it. Each can carry on a full conversation from their own websites and in both cases display (if they wish) the full context and content. </p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/webmention-diagram.png\" alt=\"Diagram showing comments sections on two different websites, carrying on a single conversation\"><figcaption>Using Webmentions, both sides can carry on a conversation where each is able to own a copy of the content and provide richer context.</figcaption></figure><p>User behaviors with Webmentions are a little different than they are with @mentions on Twitter and the like in that they work <em>between</em> websites in addition to within a particular website. They enable authors (of both the original content and the responses) to own the content, allowing them to keep a record on the web page where it originated, whether that’s a website they own or the third-party platform from which they chose to send it.</p>\n\n<h2>Interaction examples with Webmention</h2>\n\n<p>Webmentions certainly aren’t limited to creating or displaying “traditional” comments or replies. With the use of simple semantic microformats classes and a variety of parsers written in numerous languages, one can explicitly post bookmarks, likes, favorites, RSVPs, check-ins, listens, follows, reads, reviews, issues, edits, and even purchases. The result? Richer connections and interactions with other content on the web and a genuine two-way conversation instead of a mass of unidirectional links. We’ll take a look at some examples, but you can find more on the <a href=\"https://indieweb.org/Webmention\">IndieWeb wiki page for Webmention</a> alongside some other useful resources.</p>\n\n<h3>Marginalia</h3>\n\n<p>With Webmention support, one could architect a site to allow inline marginalia and highlighting similar to Medium.com’s relatively well-known functionality. With the clever use of <a href=\"https://indieweb.org/fragmention\">URL fragments</a>, which are well supported in major browsers, there are already <a href=\"https://kartikprabhu.com/articles/marginalia\">examples of people</a> who use Webmentions to display word-, sentence-, or paragraph-level marginalia on their sites. After all, aren’t inline annotations just a more targeted version of comments?</p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/hey-ev-what-about-mentions.png\" alt=\"Screenshot of an article with a response off to the side\"><figcaption>An inline annotation on the post “<a href=\"https://blog.medium.com/hey-ev-what-about-mentions-37aa9313e9d9\">Hey Ev, what about mentions?</a>,” in which Medium began to roll out their @mention functionality.</figcaption></figure><h3>Reads</h3>\n\n<p>As another example, and something that could profoundly impact the online news business, I might post a link on my website indicating I’ve read a particular article on, say, <i>The New York Times</i>. My site sends a “read” Webmention to the article, where a <a href=\"https://indieweb.org/facepile\">facepile</a> or counter showing the number of read Webmentions received could be implemented. Because of the simplified two-way link between the two web pages, there is now auditable proof of interaction with the content. This could similarly work with microinteractions such as likes, favorites, bookmarks, and reposts, resulting in a clearer representation of the particular types of interaction a piece of content has received. Compared to an array of nebulous social media mini-badges that provide only basic counters, this is a potentially more valuable indicator of a post’s popularity, reach, and ultimate impact.</p>\n\n<h3>Listens</h3>\n\n<p>Building on the idea of using reads, one could extend Webmentions to the podcasting or online music sectors. Many platforms are reasonably good at providing download numbers for podcasts, but it is far more difficult to track the number of actual listens. This can have a profound effect on the advertising market that supports many podcasts. People can post about what they’re actively listening to (either on their personal websites or via podcast apps that could report the percentage of the episode listened to) and send “listen” Webmentions to pages for podcasts or other audio content. These could then be aggregated for demographics on the back end or even shown on the particular episode’s page as social proof of the podcast’s popularity.</p>\n\n<p>For additional fun, podcasters or musicians might use Webmentions in conjunction with <a href=\"https://www.w3.org/TR/media-frags/\">media fragments</a> and audio or video content to add timecode-specific, inline comments to audio/video players to create an open standards version of <a href=\"https://help.soundcloud.com/hc/en-us/articles/115003451147-Writing-or-replying-to-a-comment\">SoundCloud-like annotations and commenting</a>.</p>\n\n<figure><img src=\"https://alistapart.com/d/webmentions-enabling-better-communication-on-the-internet/soundcloud-annotations.png\" alt=\"Screenshot of a Soundcloud audio file with little icons scatter about the timeline\"><figcaption>SoundCloud allows users to insert inline comments that dovetail with specific portions of audio.</figcaption></figure><h3>Reviews</h3>\n\n<p>Websites selling products or services could also accept review-based Webmentions that include star-based ratings scales as well as written comments with photos, audio, or even video. Because Webmentions are a two-way protocol, the reverse link to the original provides an auditable path to the reviewer and the opportunity to assess how trustworthy their review may be. Of course, third-party trusted sites might also accept these reviews, so that the receiving sites can’t easily cherry-pick only positive reviews for display. And because the Webmention specification includes the functionality for editing or deletion, the original author has the option to update or remove their reviews at any time.</p>\n\n<h2>Getting started with Webmentions</h2>\n\n<h3>Extant platforms with support</h3>\n\n<p>While the specification has only recently become a broad recommendation for use on the internet, there are <a href=\"https://indieweb.org/Webmention#Publishing_Software\">already an actively growing number of content management systems (CMSs) and platforms that support Webmentions</a>, either natively or with plugins. The simplest option, requiring almost no work, is a relatively new and excellent social media service called <a href=\"https://micro.blog/\">Micro.blog</a>, which handles Webmentions out of the box. CMSs like <a href=\"https://withknown.com/\">Known</a> and <a href=\"https://grabaperch.com/\">Perch</a> also have Webmention functionality built in. Download and set up the open source software and you’re ready to go.</p>\n\n<p>If you’re working with WordPress, there’s a simple <a href=\"https://wordpress.org/plugins/webmention/\">Webmention plugin</a> that will allow you to begin using Webmentions—just download and activate it. (For additional functionality when displaying Webmentions, there’s also the recommended <a href=\"https://wordpress.org/plugins/semantic-linkbacks/\">Semantic Linkbacks plugin</a>.) Other CMSs like Drupal, ProcessWire, Elgg, Nucleus CMS, Craft, Django, and Kirby also have plugins that support the standard. A wide variety of static site generators, like Hugo and Jekyll, have <a href=\"https://indieweb.org/static_site#Sending_Webmentions\">solutions</a> for Webmention technology as well. More are certainly coming. </p>\n\n<p>If you can compose basic HTML on your website, Aaron Parecki has written an excellent primer on “<a href=\"https://aaronparecki.com/2018/06/30/11/your-first-webmention\">Sending Your First Webmention from Scratch</a>.”</p>\n\n<p>A weak form of Webmention support can be bootstrapped for Tumblr, WordPress.com, Blogger, and Medium <a href=\"https://brid.gy/about#blogs\">with help from the free Bridgy</a> service, but the user interface and display would obviously be better if they were supported fully and natively. </p>\n\n<p>As a last resort, if you’re using Tumblr, WordPress.com, Wix, Squarespace, Ghost, Joomla, Magento, or any of the other systems without Webmention, file tickets asking them to support the standard. It only takes a few days of work for a reasonably experienced developer to build support, and it substantially improves the value of the platform for its users. It also makes them first-class decentralized internet citizens.</p>\n\n<h3>Webmentions for developers</h3>\n\n<p>If you’re a developer or a company able to hire a developer, it is relatively straightforward to build Webmentions into your CMS or project, even potentially open-sourcing the solution as a plugin for others. For anyone familiar with the old specifications for pingback or trackback, you can think of Webmentions as a major iteration of those systems, but with easier implementation and testing, improved performance and display capabilities, and decreased spam vulnerabilities. Because the specification supports editing and deleting Webmentions, it provides individuals with more direct control of their data, which is important in light of new laws like GDPR.</p>\n\n<p>In addition to reading the specification, as mentioned previously, there are multiple open source implementations already written in a variety of languages that you can use directly, or as examples. There are also a <a href=\"https://webmention.rocks/\">test suite</a> and pre-built services like <a href=\"https://webmention.io/\">Webmention.io</a>, <a href=\"https://telegraph.p3k.io/\">Telegraph</a>, <a href=\"https://mention-tech.appspot.com/\">mention-tech</a>, and <a href=\"https://webmention.herokuapp.com/\">webmention.herokuapp.com</a> that can be quickly leveraged.</p>\n\n<p>Maybe your company allows employees to spend 20% of their time on non-specific projects, as Google does. If so, I’d encourage you to take the opportunity to fbuild Webmentions support for one or more platforms—let’s spread the love and democratize communication on the web as fast as we can!</p>\n\n<p>And if you already have a major social platform but don’t want to completely open up to sending and receiving Webmentions, consider using Webmention functionality as a simple post API. I could easily see services like Twitter, Mastodon, or Google+ supporting the receiving of Webmentions, combined with a simple parsing mechanism to allow Webmention senders to publish syndicated content on their platform. There are already several services like <a href=\"https://news.indieweb.org/\">IndieNews</a>, with Hacker News-like functionality, that allow posting to them via Webmention.</p>\n\n<p>If you have problems or questions, I’d recommend joining the <a href=\"https://indieweb.org/discuss\">IndieWeb chat room</a> online via IRC, web interface, Slack, or Matrix to gain access to further hints, pointers, and resources for implementing a particular Webmention solution.</p>\n\n<h3>The expansion of Webmentions</h3>\n\n<p>The big question many will now have is <i>Will the traditional social media walled gardens like Facebook, Twitter, Instagram, and the like support the Webmention specification?</i></p>\n\n<p>At present, they don’t, and many may never do so. After all, locking you into their services is enabling them to leverage your content and your interactions to generate income. However, I suspect that if one of the major social platforms enabled sending/receiving Webmentions, it would dramatically disrupt the entire social space. </p>\n\n<p>In the meantime, if your site already has Webmentions enabled, then congratulations on joining the next revolution in web communication! Just make sure you advertise the fact by using a button or badge. <a href=\"https://indieweb.org/buttons\">You can download a copy here.</a></p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/G24i4TcJwdk\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Code, The Server Side"],"color":"tan","category":"A List Apart:","date":"2018-07-19 13:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Order Out of Chaos: Patterns of Organization for Writing on the Job","pubDate":"2018-07-05 13:18:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/2iOHftq7asw/order-out-of-chaos-patterns-of-organization-for-writing-on-the-job","guid":"http://alistapart.com/article/order-out-of-chaos-patterns-of-organization-for-writing-on-the-job","author":"by","thumbnail":"https://alistapart.com/d/order-out-of-chaos/fig1.png","description":"\n<p>A few years ago, a former boss of mine emailed me out of the blue and asked for a resource that would help him and his colleagues organize information more effectively. Like a dutiful friend, I sent him links to a few articles and the names of some professional writing books. And I qualified my answer with that dreaded disclaimer: “Advice varies widely depending on the situation.” Implication: “You’ll just have to figure out what works best for you. So, good luck!”</p>\n\n<p>In retrospect, I could have given him a better answer. Much like the <a href=\"https://www.interaction-design.org/literature/topics/gestalt-principles\">gestalt principles</a> of design that underpin so much of what designers do, there are foundational principles and patterns of organization that are relevant to any professional who must convey technical information in writing, and you can adapt these concepts to bring order out of chaos whether or not you’re a full-time writer.</p>\n\n<h2>Recognize the primary goals: comprehension and performance</h2>\n\n<p>Not long after I wrote my response, I revisited a book I’d read in college: <a href=\"https://www.amazon.com/Technical-Editing-Allyn-Seriesin-Communication/dp/0205786715\"><i>Technical Editing</i></a>, by Carolyn D. Rude. In my role as a technical writer, I reference the book every now and then for practical advice on revising software documentation. This time, as I reviewed the chapter on organization, I realized that Rude explained the high-level goals and principles better than any other author I’d read up to that point.</p>\n\n<p>In short, she says that whether you are outlining a procedure, describing a product, or announcing a cool new feature, a huge amount of writing in the workplace is aimed at comprehension (here’s what X is and why you should care) and performance (here’s how to do X). She then suggests that editors choose from two broad kinds of order to support these goals: <i>content-based order</i> and <i>task-based order</i>. The first refers to structures that guide readers from major sections to more detailed sections to facilitate top-down learning; the second refers to structures of actions that readers need to carry out. Content-based orders typically start with nouns, whereas task-based orders typically begin with verbs.</p>\n\n<div class=\"row\">\n<div class=\"col\">\n<p><b>Content-Based Order Example</b></p>\n\n<p>Product Overview</p>\n<ul>\n<li>Introduction</li>\n<li>Features\n<ul>\n<li>Feature 1</li>\n<li>Feature 2</li>\n<li>Feature <i>n</i>\n</li>\n</ul>\n</li>\n<li>Contact</li>\n<li>Support</li>\n</ul>\n</div>\n<div class=\"col\">\n<p><b>Task-Based Order Example</b></p>\n\n<p><a href=\"https://en.support.wordpress.com/five-step-blog-setup/\">User Guide (WordPress)</a></p>\n<ul>\n<li>Update your title and tagline</li>\n<li>Pick a theme you love</li>\n<li>Add a header or background</li>\n<li>Add a site icon</li>\n<li>Add a widget</li>\n</ul>\n</div>\n</div>\n\n<p>Of course, not all writing situations fall neatly into these buckets. If you were to visit <a href=\"https://confluence.atlassian.com/doc/confluence-user-s-guide-139509.html\">Atlassian’s online help content</a>, you would see a hybrid of content-based topics at the first level and task-based topics within them. The point is that as you begin to think about your organization, you should ask yourself: </p>\n\n<ul>\n<li>Which of the major goals of organization (comprehension or performance) am I trying to achieve?</li>\n<li>And which broad kind of order will help me best achieve those goals?</li>\n</ul>\n<p>This is still pretty abstract, so let’s consider the other principles from Carolyn Rude, but with a focus on how a writer rather than an editor should approach the task of organization.<sup data-footnote>1</sup></p>\n\n<h2>Steal like an organizer: follow pre-established document structures</h2>\n\n<p>In his book <a href=\"https://www.amazon.com/Steal-Like-Artist-Things-Creative-ebook/dp/B0074QGGK6/ref=sr_1_1?ie=UTF8&amp;qid=1526326170&amp;sr=8-1&amp;keywords=steal+like+an+artist\"><i>Steal Like an Artist</i></a>, Austin Kleon argues that smart artists don’t actually create anything new but rather collect inspiring ideas from specific role models, and produce work that is profoundly shaped by them.</p>\n\n<p>“If we’re free from the burden of trying to be completely original,” he writes, “we can stop trying to make something out of nothing, and we can embrace influence instead of running away from it.”</p>\n\n<p>The same principle applies to the art of organization. To “steal like an organizer” means to look at what other people have written and to identify and follow pre-established structures that may apply to your situation. Doing so not only saves time and effort but also forces you to remember that your audience may already expect a particular pattern—and experience cognitive dissonance if they don’t get it.</p>\n\n<p>You are probably familiar with more pre-established structures than you think. News reports follow the <a href=\"https://en.wikipedia.org/wiki/Inverted_pyramid_(journalism)\"><i>inverted pyramid</i></a>. Research reports often adhere to some form of the <a href=\"https://en.wikipedia.org/wiki/IMRAD\"><i>IMRAD structure</i></a> (Introduction, Methodology, Results, and Discussion). Instruction manuals typically have an introductory section followed by tasks grouped according to the typical sequence a user would need to follow. Even troubleshooting articles tend to have a standard structure of Problem, Cause, and Solution.</p>\n\n<p>All this may sound like common sense, and yet many writers entirely skip this process of adapting pre-made structures. I can understand the impulse. When you face a blank screen, it feels simpler to capture the raw notes and organize it all later. That approach can certainly help you get into the flow, but it may also result in an ad hoc structure that fails to serve readers who are less familiar with your material.</p>\n\n<p>Instead, when you begin the writing process, start by researching available templates or pre-made structures that could support your situation. Standard word processors and content management systems already contain some good templates, and it’s easy to search for others online. Your fellow writers and designers are also good resources. If you’re contributing to a series of documents at your organization, you should get familiar with the structure of that series and learn how to work within it. Or you can do some benchmarking and steal some ideas from how other companies structure similar content. </p>\n\n<p>My team once had to do our own stealing for a major project that affected about half our company. We needed to come up with a repeatable structure for standard operating procedures (SOPs) that any employee could use to document a set of tasks. Knowing SOPs to be a well-established genre, we found several recommended structures online and in books, and came up with a list of common elements. We then decided which ones to steal and arranged them into a sequence that best suited our audience. We made out like bandits.</p>\n\n<figure><table>\n<thead><tr>\n<th scope=\"col\">Structural SOP Elements We Found</th>\n<th scope=\"col\">Our Assessment</th>\n</tr></thead>\n<tbody>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Overview</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Roles Involved</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Dependencies</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Estimated Level of Effort</td>\n<td data-title=\"Our Assessment\"><i>Nah, too hard to calculate and maintain.</i></td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Process Diagram</td>\n<td data-title=\"Our Assessment\"><i>Meh, kind of redundant, not to mention a lot of work. No thanks.</i></td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Tasks</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i>\n</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i> Introduction</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i> Responsibility</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i> Steps</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">See Also</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n</tbody>\n</table></figure><p>But what if there is no pre-established pattern? Or what if a pattern exists, but it’s either too simple or too complex for what you’re trying to accomplish? Or what if it’s not as user-friendly as you would like? </p>\n\n<p>There may indeed be cases where you need to develop a mostly customized structure, which can be daunting. But fear not! That’s where the other principles of organization come in.</p>\n\n<h2>Anticipate your readers’ questions (and maybe even talk to them)</h2>\n\n<p>Recently I had an extremely frustrating user experience. While consulting some documentation to learn about a new process, I encountered a series of web pages that gave no introduction and dove straight into undefined jargon and acronyms that I had never heard of. When I visited related pages to get more context, I found the same problem. There was no background information for a newbie like me. The writers failed in this case to anticipate my questions and instead assumed a great deal of prior knowledge.</p>\n\n<p>Don’t make this mistake when you design your structure. Like a journalist, you need to answer the <i>who, what, where, when, how</i>, and <i>why</i> of your content, and then incorporate the answers in your structure. Anticipate common questions, such as “What is this? Where do I start? What must I know? What must I do?” This sort of critical reflection is all the more important when organizing web content, because users will almost certainly enter and exit your pages in nonlinear, unpredictable ways.</p>\n\n<p>If possible, you should also meet with your readers, and gather information about what would best serve them. One simple technique you could try is to create a <i>knowledge map</i>, an annotated matrix of sorts that my team once built after asking various teams about their information priorities. On the left axis, we listed categories of information that we thought each team needed. Along the top axis, we listed a column for each team. We then gave team representatives a chance to rank each category and add custom categories we hadn’t included. (You can learn more about the process we followed in this <a href=\"https://www.atlassian.com/company/events/summit-us/watch-sessions/2013/archives/inside-the-massive-team/cultivating-content-designing-wiki-solutions-that-scale\">video presentation</a>.)</p>\n\n<figure><img src=\"https://alistapart.com/d/order-out-of-chaos/fig1.png\" alt=\"A screenshot of a knowledge map my team created after asking other teams which categories of information were most important to them.\"><figcaption>A knowledge map my team created after asking other teams which categories of information were most important to them.</figcaption></figure><p>The weakness of this approach is that it doesn’t reveal information that your audience doesn’t know how to articulate. To fill in this gap, I recommend running a few informal usability tests. But if you don’t have the time for that, building a knowledge map is better than not meeting with your readers at all, because it will help you discover structural ideas you hadn’t considered. Our knowledge map revealed multiple categories that were required across almost all teams—which, in turn, suggested a particular hierarchy and sequence to weave into our design. </p>\n\n<h2>Go from general to specific, familiar to new</h2>\n\n<p>People tend to learn and digest information best by going from general to specific, and familiar to new. By remembering this principle, which is articulated in the <a href=\"https://www.verywellmind.com/what-is-a-schema-2795873\"><i>schema</i> theory</a> of learning, you can better conceptualize the structure you’re building. What are the foundational concepts of your content? They should appear in your introductory sections. What are the umbrella categories under which more detailed categories fall? The answer should determine which headings belong at the top and subordinate levels of your hierarchy. What you want to avoid is presenting new ideas that don’t flow logically from the foundational concepts and expectations that your readers bring to the table.</p>\n\n<p>Consider the wikiHow article “<a href=\"https://www.wikihow.com/Create-a-Dungeons-and-Dragons-Character\">How to Create a Dungeons and Dragons Character</a>.” It begins by defining what Dungeons and Dragons <em>is</em> and explaining why you need to create a character before you can start playing the game.</p>\n\n<figure><img src=\"https://alistapart.com/d/order-out-of-chaos/fig2.png\" alt=\"A screenshot of Part 1 of the wikiHow article “How to Create a Dungeons and Dragons Character,” which helps readers learn by starting with general concepts before moving on to specifics.\"><figcaption>Writers at wikiHow help readers learn by starting with general concepts before moving on to specifics.</figcaption></figure><p>The next section, “Part 1: Establishing the Basics,” guides the reader into subsequent foundational steps, such as deciding which version of the game to follow and printing out a character sheet. Later sections (“Selecting a gender and race,” “Choosing a class,” and “Calculating ability scores”) expand on these concepts to introduce more specific, unfamiliar ideas in an incremental fashion, leading readers up a gentle ramp into new territory.</p>\n\n<h2>Use conventional patterns to match structure to meaning</h2>\n\n<p>Within the general-to-specific/familiar-to-new framework, you can apply additional patterns of organization that virtually all humans understand. Whereas the pre-established document structures above are usually constructed for particular use cases or genres, other conventional patterns match more general mental models (or “schemas,” as the schema theory so elegantly puts it) that we use to make sense of the world. These patterns include <i>chronological, spatial, comparison-contrast, cause-effect</i>, and <i>order of importance</i>.</p>\n\n<h3>Chronological</h3>\n\n<p>The chronological pattern reveals time or sequence. It’s appropriate for things like instructions, process flows, progress reports, and checklists. In the case of instructions, the order of tasks on a page often implies (or explicitly states) the “proper” or most common sequence for a user to follow. The wikiHow article above, for example, offers a recommended sequence of tasks for beginner players. In the case of progress reports, the sections may be ordered according to the periods of time in which work was done, as in this sample outline from the book <a href=\"https://www.amazon.com/Reporting-Technical-Information-Kenneth-Houp/dp/0195178793\"><i>Reporting Technical Information</i></a>, by Kenneth W. Houp et al.:</p>\n\n<figure class=\"quote\"><blockquote>\n<p><b>Beginning</b></p>\n<ul>\n<li>Introduction</li>\n<li>Summary of work completed</li>\n</ul>\n<p><b>Middle</b></p>\n<ul>\n<li>Work completed\n<ul>\n<li>Period 1 (beginning and end dates)\n<ul>\n<li>Description</li>\n<li>Cost</li>\n</ul>\n</li>\n<li>\n<p>Period 2 (beginning and end dates)</p>\n<ul>\n<li>Description</li>\n<li>Cost</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Work remaining</p>\n<ul>\n<li>Period 3 (or remaining periods)\n<ul>\n<li>Description of work to be done</li>\n<li>Expected cost</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><b>End</b></p>\n<ul>\n<li>Evaluation of work in this period</li>\n<li>Conclusions and recommendations</li>\n</ul>\n</blockquote>\n</figure><p>The principles of organization listed in this article are in fact another example of the chronological pattern. As Carolyn Rude points out in her book, the principles are arranged as a sort of methodology to follow. Try starting at the top of the list and work your way down. You may find it to be a useful way to produce order out of the chaos before you.</p>\n\n<h3>Spatial</h3>\n\n<p>The spatial pattern refers to top-to-bottom, left-to-right structures of organization. This is a good pattern if you need to describe the components of an interface or a physical object. </p>\n\n<p>Take a look at the neighbor comparison graph below, which is derived from a sample <a href=\"http://www.oracle.com/us/industries/utilities/ou-opower-energy-efficiency-ds-3553419.pdf\">energy efficiency</a> solution offered by Oracle Utilities. Customers who see this graph would most likely view it from top to bottom and left to right.</p>\n\n<figure><img src=\"https://alistapart.com/d/order-out-of-chaos/fig3.png\" alt=\"A neighbor comparison graph that shows a customer how they compare with their neighbors in terms of energy efficiency.\"><figcaption>A neighbor comparison graph that shows a customer how they compare with their neighbors in terms of energy efficiency.</figcaption></figure><p>A detailed description of this feature would then describe each component in that same order. Here’s a sample outline: </p>\n\n<ul>\n<li>Feature name\n<ul>\n<li>Title</li>\n<li>Bar chart\n<ul>\n<li>Efficient neighbors</li>\n<li>You</li>\n<li>Average neighbors</li>\n</ul>\n</li>\n<li>Date range</li>\n<li>\n<p>Performance insight</p>\n<ul>\n<li>Great</li>\n<li>Good</li>\n<li>Using more than average</li>\n</ul>\n</li>\n<li>Energy use insight</li>\n<li>Comparison details (“You’re compared with 10 homes within 6 miles …”)</li>\n</ul>\n</li>\n</ul>\n<h3>Comparison-contrast</h3>\n\n<p>The comparison-contrast pattern helps users weigh options. It’s useful when reporting the pros and cons of different decisions or comparing the attributes of two or more products or features. You see it often when you shop online and need to compare features and prices. It’s also a common pattern for feasibility studies or investigations that list options along with upsides and downsides.</p>\n\n<h3>Cause-effect</h3>\n\n<p>The cause-effect pattern shows relationships between actions and reactions. Writers often use it for things like troubleshooting articles, medical diagnoses, retrospectives, and root cause analyses. You can move from effect to cause, or cause to effect, but you should stick to one direction and use it consistently. For example, the <a href=\"https://www.drugs.com/health-guide/common-cold-viral-rhinitis.html\">cold</a> and <a href=\"https://www.drugs.com/health-guide/flu-influenza.html\">flu</a> pages at Drugs.com follow a standard cause-effect pattern that incorporates logical follow-up sections such as “Prevention” and “Treatment”: </p>\n\n<ul>\n<li>What Is It? (This section defines the illness and describes possible “causes.”)</li>\n<li>Symptoms (This section goes into the “effects” of the illness.)</li>\n<li>Diagnosis</li>\n<li>Expected Duration</li>\n<li>Prevention</li>\n<li>Treatment</li>\n<li>When to Call a Professional</li>\n<li>Prognosis</li>\n</ul>\n<p>For another example, see the “Use parallel structure for parallel sections” section below, which shows what a software troubleshooting article might look like.</p>\n\n<h3>Order of importance</h3>\n\n<p>The order of importance pattern organizes sections and subsections of content according to priority or significance. It is common in announcements, marketing brochures, release notes, advice articles, and FAQs. </p>\n\n<p>The order of importance pattern is perhaps the trickiest one to get right. As Carolyn Rude says, it’s not always clear what the most important information is. What should come in the beginning, middle, and end? Who decides? The answers will vary according to the author, audience, and purpose.</p>\n\n<p>When writing release notes, for example, my team often debates which software update should come first, because we know that the decision will underscore the significance of that update relative to the others. FAQs by definition are focused on which questions are most common and thus most important, but the exact order will depend on what you perceive as being the most frequent or the most important for readers to know. (If you are considering writing FAQs, I recommend this <a href=\"https://alistapart.com/article/no-more-faqs-create-purposeful-information-for-a-more-effective-user-experi\">great advice</a> from technical writer Lisa Wright.)</p>\n\n<h3>Other common patterns</h3>\n\n<p>Alphabetical order is a common pattern that Rude doesn’t mention in detail but that you may find helpful for your situation. To use this pattern, you would simply list sections or headings based on the first letter of the first word of the heading. For example, alphabetical order is used frequently to list API methods in API documentation sites such as those for <a href=\"https://www.flickr.com/services/api/\">Flickr</a>, <a href=\"https://developer.twitter.com/en/docs/api-reference-index\">Twitter</a>, and <a href=\"https://docs.oracle.com/javase/7/docs/api/\">Java</a>. It is also common in glossaries, indexes, and encyclopedic reference materials where each entry is more or less given equal footing. The downside of this pattern is that the most important information for your audience may not appear in a prominent, findable location. Still, it is useful if you have a large and diverse set of content that defies simple hierarchies and is referenced in a non-linear, piecemeal fashion.</p>\n\n<h2>Group related material</h2>\n\n<p>Take a look at the lists below. Which do you find easier to scan and digest? </p>\n\n<div class=\"row\">\n<div class=\"col\">\n<ol>\n<li>Settle on a version of D&amp;D.</li>\n<li>Print a character sheet, if desired.</li>\n<li>Select a gender and race.</li>\n<li>Choose a class.</li>\n<li>Name your character.</li>\n<li>Identify the main attributes of your character.</li>\n<li>Roll for ability scores.</li>\n<li>Assign the six recorded numbers to the six main attributes.</li>\n<li>Use the “Point Buy” system, alternatively.</li>\n<li>Generate random ability scores online.</li>\n<li>Record the modifier for each ability.</li>\n<li>Select skills for your character.</li>\n<li>List your character’s feats.</li>\n<li>Roll for your starting gold.</li>\n<li>Equip your character with items.</li>\n<li>Fill in armor class and combat bonuses.</li>\n<li>Paint a picture of your character.</li>\n<li>Determine the alignment of your character.</li>\n<li>Play your character in a campaign.</li>\n</ol>\n</div>\n<div class=\"col\">\n<p><b>Part 1: Establishing the Basics</b></p>\n<ol>\n<li>Settle on a version of D&amp;D.</li>\n<li>Print a character sheet, if desired.</li>\n<li>Select a gender and race.</li>\n<li>Choose a class.</li>\n<li>Name your character.</li>\n</ol>\n<p><b>Part 2: Calculating Ability Scores</b></p>\n<ol>\n<li>Identify the main attributes of your character.</li>\n<li>Roll for ability scores.</li>\n<li>Assign the six recorded numbers to the six main attributes.</li>\n<li>Use the “Point Buy” system, alternatively.</li>\n<li>Generate random ability scores online.</li>\n<li>Record the modifier for each ability.</li>\n</ol>\n<p><b>Part 3: Equipping Skills, Feats, Weapons, and Armor</b></p>\n<ol>\n<li>Select skills for your character.</li>\n<li>List your character’s feats.</li>\n<li>Roll for your starting gold.</li>\n<li>Equip your character with items.</li>\n<li>Fill in armor class and combat bonuses.</li>\n</ol>\n<p><b>Part 4: Finishing Your Character</b></p>\n<ol>\n<li>Paint a picture of your character.</li>\n<li>Determine the alignment of your character.</li>\n<li>Play your character in a campaign.</li>\n</ol>\n<p>(Source: <a href=\"https://www.wikihow.com/Create-a-Dungeons-and-Dragons-Character\">wikiHow: How to Create a Dungeons and Dragons Character</a>.)</p>\n</div>\n</div>\n\n<p>If you chose the second list, that is probably because the writers relied on a widely used organizational technique: <i>grouping</i>.</p>\n\n<p>Grouping is the process of identifying meaningful categories of information and putting information within those categories to aid reader comprehension. Grouping is especially helpful when you have a long, seemingly random list of information that could benefit from an extra layer of logical order. An added benefit of grouping is that it may reveal where you have gaps in your content or where you have mingled types of content that don’t really belong together.</p>\n\n<p>To group information effectively, first analyze your content and identify the discrete chunks of information you need to convey. Then tease out which chunks fall within similar conceptual buckets, and determine what intuitive headings or labels you can assign to those buckets. Writers do this when creating major and minor sections within a book or printed document. For online content, grouping is typically done at the level of articles or topics within a web-based system, such as a wiki or knowledge base. The <a href=\"https://support.google.com/mail/?hl=en#topic=3394150\">Gmail Help Center</a>, for example, groups topics within categories like “Popular articles,” “Read &amp; organize emails,” and “Send emails.” </p>\n\n<p>It’s possible to go overboard here. Too many headings in a short document or too many topics in a small help system can add unnecessary complexity. I once faced the latter scenario when I reviewed a help system written by one of my colleagues. At least five of the topics were so short that it made more sense to merge them together on a single page rather than forcing the end user to click through to separate pages. I’ve also encountered plenty of documents that contain major section headings with only one or two sentences under them. Sometimes this is fine; you may need to keep those sections for the sake of consistency. But it’s worth assessing whether such sections can simply be merged together (or conversely, whether they should be expanded to include more details).</p>\n\n<p>Because of scenarios like these, Carolyn Rude recommends keeping the number of groupings to around seven, give or take a few—though, as always, striking the right balance ultimately depends on your audience and purpose, as well as the amount of information you have to manage.</p>\n\n<h2>Use parallel structure for parallel sections</h2>\n\n<p>One of the reasons <a href=\"https://en.wikipedia.org/wiki/Veni,_vidi,_vici\">Julius Caesar’s phrase</a> “I came, I saw, I conquered” still sticks in our memory after thousands of years is the simple fact of parallelism. Each part of the saying follows a distinct, repetitive grammatical form that is easy to recall.</p>\n\n<p>Parallelism works in a similar manner with organization. By using a consistent and repetitive structure across types of information that fit in the same category, you make it easier for your readers to navigate and digest your content.</p>\n\n<p>Imagine you’re writing a troubleshooting guide in which all the topics follow the same basic breakdown: Problem Title, Problem, Cause, Solution, and See Also. In this case, you should make sure that each topic includes those same headings, in the exact same hierarchy and sequence, and using the exact same style and formatting. This kind of parallelism delivers a symmetry that reduces the reader’s cognitive load and clarifies the relationships of each part of your content. Deviations from the pattern not only cause confusion but can undermine the credibility of the content.</p>\n\n<div class=\"row\">\n<div class=\"col\">\n<p><b>Do This</b></p>\n\n<p><i>ABC Troubleshooting Guide</i></p>\n\n<ul>\n<li>Introduction</li>\n<li>Problem 1 Title\n<ul>\n<li>Problem</li>\n<li>Cause</li>\n<li>Solution</li>\n<li>See Also</li>\n</ul>\n</li>\n<li>\n<p>Problem 2 Title</p>\n<ul>\n<li>Problem</li>\n<li>Cause</li>\n<li>Solution</li>\n<li>See Also</li>\n</ul>\n</li>\n<li>\n<p>Problem 3 Title</p>\n<ul>\n<li>...</li>\n</ul>\n</li>\n\n</ul>\n</div>\n<div class=\"col\">\n<p><b>Don’t Do This</b></p>\n\n<p><i>ABC Troubleshooting Guide</i></p>\n\n<ul>\n<li>Introduction</li>\n<li>Problem 1 Title\n<ul>\n<li>Problem</li>\n<li>Root causes</li>\n<li>How to Fix it</li>\n<li>Advanced Tips and tricks</li>\n<li>Related</li>\n</ul>\n</li>\n<li>\n<p>Problem 2 title</p>\n<ul>\n<li>Issue</li>\n<li>Steps to Fix</li>\n<li>Why did this happen, and how can I avoid it next time?</li>\n<li>See also</li>\n</ul>\n</li>\n<li>\n<p>Problem 3 title</p>\n<ul>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<p>This last principle is probably the easiest to grasp but may be the most difficult to enforce, especially if you are managing contributions from multiple authors. Templates and style guides are useful here because they invite authors to provide standard inputs, but you will still need to watch the content like a hawk to squash the inconsistencies that inevitably emerge.</p>\n\n<h2>Conclusion</h2>\n\n<p>In one sense, my response to my former boss was accurate. Given the endless variety of writing situations, there is no such thing as a single organization solution. But saying that “advice varies widely depending on the situation” doesn’t tell the whole story. There are flexible patterns and principles that can guide you in finding, customizing, and creating structures for your goals. </p>\n\n<p>The key thing to remember is that structure affects meaning. The sequence of information, the categories you use, the emphasis you imply through your hierarchy—all of these decisions impact how well your audience understands what you write. Your ideal structure should therefore reinforce what you mean to say.</p>\n<h3>Footnotes</h3>\n<ul class=\"the-footnotes\"><li>1. The principles in this article are based on the same ones that Carolyn Rude outlines in chapter 17, pp. 289–296, of the third edition of her book. I highly recommend it for anyone who’s interested in gaining an in-depth understanding of editing. The book is now in its fifth edition and includes an additional author, Angela Eaton. See <a href=\"https://www.amazon.com/Technical-Editing-Allyn-Seriesin-Communication/dp/0205786715\"><i>Technical Editing (Fifth Edition)</i></a> for details. The examples and illustrations used in this article are derived from a variety of other sources, including my own work.</li></ul>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/2iOHftq7asw\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>A few years ago, a former boss of mine emailed me out of the blue and asked for a resource that would help him and his colleagues organize information more effectively. Like a dutiful friend, I sent him links to a few articles and the names of some professional writing books. And I qualified my answer with that dreaded disclaimer: “Advice varies widely depending on the situation.” Implication: “You’ll just have to figure out what works best for you. So, good luck!”</p>\n\n<p>In retrospect, I could have given him a better answer. Much like the <a href=\"https://www.interaction-design.org/literature/topics/gestalt-principles\">gestalt principles</a> of design that underpin so much of what designers do, there are foundational principles and patterns of organization that are relevant to any professional who must convey technical information in writing, and you can adapt these concepts to bring order out of chaos whether or not you’re a full-time writer.</p>\n\n<h2>Recognize the primary goals: comprehension and performance</h2>\n\n<p>Not long after I wrote my response, I revisited a book I’d read in college: <a href=\"https://www.amazon.com/Technical-Editing-Allyn-Seriesin-Communication/dp/0205786715\"><i>Technical Editing</i></a>, by Carolyn D. Rude. In my role as a technical writer, I reference the book every now and then for practical advice on revising software documentation. This time, as I reviewed the chapter on organization, I realized that Rude explained the high-level goals and principles better than any other author I’d read up to that point.</p>\n\n<p>In short, she says that whether you are outlining a procedure, describing a product, or announcing a cool new feature, a huge amount of writing in the workplace is aimed at comprehension (here’s what X is and why you should care) and performance (here’s how to do X). She then suggests that editors choose from two broad kinds of order to support these goals: <i>content-based order</i> and <i>task-based order</i>. The first refers to structures that guide readers from major sections to more detailed sections to facilitate top-down learning; the second refers to structures of actions that readers need to carry out. Content-based orders typically start with nouns, whereas task-based orders typically begin with verbs.</p>\n\n<div class=\"row\">\n<div class=\"col\">\n<p><b>Content-Based Order Example</b></p>\n\n<p>Product Overview</p>\n<ul>\n<li>Introduction</li>\n<li>Features\n<ul>\n<li>Feature 1</li>\n<li>Feature 2</li>\n<li>Feature <i>n</i>\n</li>\n</ul>\n</li>\n<li>Contact</li>\n<li>Support</li>\n</ul>\n</div>\n<div class=\"col\">\n<p><b>Task-Based Order Example</b></p>\n\n<p><a href=\"https://en.support.wordpress.com/five-step-blog-setup/\">User Guide (WordPress)</a></p>\n<ul>\n<li>Update your title and tagline</li>\n<li>Pick a theme you love</li>\n<li>Add a header or background</li>\n<li>Add a site icon</li>\n<li>Add a widget</li>\n</ul>\n</div>\n</div>\n\n<p>Of course, not all writing situations fall neatly into these buckets. If you were to visit <a href=\"https://confluence.atlassian.com/doc/confluence-user-s-guide-139509.html\">Atlassian’s online help content</a>, you would see a hybrid of content-based topics at the first level and task-based topics within them. The point is that as you begin to think about your organization, you should ask yourself: </p>\n\n<ul>\n<li>Which of the major goals of organization (comprehension or performance) am I trying to achieve?</li>\n<li>And which broad kind of order will help me best achieve those goals?</li>\n</ul>\n<p>This is still pretty abstract, so let’s consider the other principles from Carolyn Rude, but with a focus on how a writer rather than an editor should approach the task of organization.<sup data-footnote>1</sup></p>\n\n<h2>Steal like an organizer: follow pre-established document structures</h2>\n\n<p>In his book <a href=\"https://www.amazon.com/Steal-Like-Artist-Things-Creative-ebook/dp/B0074QGGK6/ref=sr_1_1?ie=UTF8&amp;qid=1526326170&amp;sr=8-1&amp;keywords=steal+like+an+artist\"><i>Steal Like an Artist</i></a>, Austin Kleon argues that smart artists don’t actually create anything new but rather collect inspiring ideas from specific role models, and produce work that is profoundly shaped by them.</p>\n\n<p>“If we’re free from the burden of trying to be completely original,” he writes, “we can stop trying to make something out of nothing, and we can embrace influence instead of running away from it.”</p>\n\n<p>The same principle applies to the art of organization. To “steal like an organizer” means to look at what other people have written and to identify and follow pre-established structures that may apply to your situation. Doing so not only saves time and effort but also forces you to remember that your audience may already expect a particular pattern—and experience cognitive dissonance if they don’t get it.</p>\n\n<p>You are probably familiar with more pre-established structures than you think. News reports follow the <a href=\"https://en.wikipedia.org/wiki/Inverted_pyramid_(journalism)\"><i>inverted pyramid</i></a>. Research reports often adhere to some form of the <a href=\"https://en.wikipedia.org/wiki/IMRAD\"><i>IMRAD structure</i></a> (Introduction, Methodology, Results, and Discussion). Instruction manuals typically have an introductory section followed by tasks grouped according to the typical sequence a user would need to follow. Even troubleshooting articles tend to have a standard structure of Problem, Cause, and Solution.</p>\n\n<p>All this may sound like common sense, and yet many writers entirely skip this process of adapting pre-made structures. I can understand the impulse. When you face a blank screen, it feels simpler to capture the raw notes and organize it all later. That approach can certainly help you get into the flow, but it may also result in an ad hoc structure that fails to serve readers who are less familiar with your material.</p>\n\n<p>Instead, when you begin the writing process, start by researching available templates or pre-made structures that could support your situation. Standard word processors and content management systems already contain some good templates, and it’s easy to search for others online. Your fellow writers and designers are also good resources. If you’re contributing to a series of documents at your organization, you should get familiar with the structure of that series and learn how to work within it. Or you can do some benchmarking and steal some ideas from how other companies structure similar content. </p>\n\n<p>My team once had to do our own stealing for a major project that affected about half our company. We needed to come up with a repeatable structure for standard operating procedures (SOPs) that any employee could use to document a set of tasks. Knowing SOPs to be a well-established genre, we found several recommended structures online and in books, and came up with a list of common elements. We then decided which ones to steal and arranged them into a sequence that best suited our audience. We made out like bandits.</p>\n\n<figure><table>\n<thead><tr>\n<th scope=\"col\">Structural SOP Elements We Found</th>\n<th scope=\"col\">Our Assessment</th>\n</tr></thead>\n<tbody>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Overview</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Roles Involved</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Dependencies</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Estimated Level of Effort</td>\n<td data-title=\"Our Assessment\"><i>Nah, too hard to calculate and maintain.</i></td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Process Diagram</td>\n<td data-title=\"Our Assessment\"><i>Meh, kind of redundant, not to mention a lot of work. No thanks.</i></td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">Tasks</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i>\n</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i> Introduction</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i> Responsibility</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td class=\"indent-left\" data-title=\"Structural SOP Elements We Found\">Task <i>n</i> Steps</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n<tr>\n<td data-title=\"Structural SOP Elements We Found\">See Also</td>\n<td data-title=\"Our Assessment\">Steal</td>\n</tr>\n</tbody>\n</table></figure><p>But what if there is no pre-established pattern? Or what if a pattern exists, but it’s either too simple or too complex for what you’re trying to accomplish? Or what if it’s not as user-friendly as you would like? </p>\n\n<p>There may indeed be cases where you need to develop a mostly customized structure, which can be daunting. But fear not! That’s where the other principles of organization come in.</p>\n\n<h2>Anticipate your readers’ questions (and maybe even talk to them)</h2>\n\n<p>Recently I had an extremely frustrating user experience. While consulting some documentation to learn about a new process, I encountered a series of web pages that gave no introduction and dove straight into undefined jargon and acronyms that I had never heard of. When I visited related pages to get more context, I found the same problem. There was no background information for a newbie like me. The writers failed in this case to anticipate my questions and instead assumed a great deal of prior knowledge.</p>\n\n<p>Don’t make this mistake when you design your structure. Like a journalist, you need to answer the <i>who, what, where, when, how</i>, and <i>why</i> of your content, and then incorporate the answers in your structure. Anticipate common questions, such as “What is this? Where do I start? What must I know? What must I do?” This sort of critical reflection is all the more important when organizing web content, because users will almost certainly enter and exit your pages in nonlinear, unpredictable ways.</p>\n\n<p>If possible, you should also meet with your readers, and gather information about what would best serve them. One simple technique you could try is to create a <i>knowledge map</i>, an annotated matrix of sorts that my team once built after asking various teams about their information priorities. On the left axis, we listed categories of information that we thought each team needed. Along the top axis, we listed a column for each team. We then gave team representatives a chance to rank each category and add custom categories we hadn’t included. (You can learn more about the process we followed in this <a href=\"https://www.atlassian.com/company/events/summit-us/watch-sessions/2013/archives/inside-the-massive-team/cultivating-content-designing-wiki-solutions-that-scale\">video presentation</a>.)</p>\n\n<figure><img src=\"https://alistapart.com/d/order-out-of-chaos/fig1.png\" alt=\"A screenshot of a knowledge map my team created after asking other teams which categories of information were most important to them.\"><figcaption>A knowledge map my team created after asking other teams which categories of information were most important to them.</figcaption></figure><p>The weakness of this approach is that it doesn’t reveal information that your audience doesn’t know how to articulate. To fill in this gap, I recommend running a few informal usability tests. But if you don’t have the time for that, building a knowledge map is better than not meeting with your readers at all, because it will help you discover structural ideas you hadn’t considered. Our knowledge map revealed multiple categories that were required across almost all teams—which, in turn, suggested a particular hierarchy and sequence to weave into our design. </p>\n\n<h2>Go from general to specific, familiar to new</h2>\n\n<p>People tend to learn and digest information best by going from general to specific, and familiar to new. By remembering this principle, which is articulated in the <a href=\"https://www.verywellmind.com/what-is-a-schema-2795873\"><i>schema</i> theory</a> of learning, you can better conceptualize the structure you’re building. What are the foundational concepts of your content? They should appear in your introductory sections. What are the umbrella categories under which more detailed categories fall? The answer should determine which headings belong at the top and subordinate levels of your hierarchy. What you want to avoid is presenting new ideas that don’t flow logically from the foundational concepts and expectations that your readers bring to the table.</p>\n\n<p>Consider the wikiHow article “<a href=\"https://www.wikihow.com/Create-a-Dungeons-and-Dragons-Character\">How to Create a Dungeons and Dragons Character</a>.” It begins by defining what Dungeons and Dragons <em>is</em> and explaining why you need to create a character before you can start playing the game.</p>\n\n<figure><img src=\"https://alistapart.com/d/order-out-of-chaos/fig2.png\" alt=\"A screenshot of Part 1 of the wikiHow article “How to Create a Dungeons and Dragons Character,” which helps readers learn by starting with general concepts before moving on to specifics.\"><figcaption>Writers at wikiHow help readers learn by starting with general concepts before moving on to specifics.</figcaption></figure><p>The next section, “Part 1: Establishing the Basics,” guides the reader into subsequent foundational steps, such as deciding which version of the game to follow and printing out a character sheet. Later sections (“Selecting a gender and race,” “Choosing a class,” and “Calculating ability scores”) expand on these concepts to introduce more specific, unfamiliar ideas in an incremental fashion, leading readers up a gentle ramp into new territory.</p>\n\n<h2>Use conventional patterns to match structure to meaning</h2>\n\n<p>Within the general-to-specific/familiar-to-new framework, you can apply additional patterns of organization that virtually all humans understand. Whereas the pre-established document structures above are usually constructed for particular use cases or genres, other conventional patterns match more general mental models (or “schemas,” as the schema theory so elegantly puts it) that we use to make sense of the world. These patterns include <i>chronological, spatial, comparison-contrast, cause-effect</i>, and <i>order of importance</i>.</p>\n\n<h3>Chronological</h3>\n\n<p>The chronological pattern reveals time or sequence. It’s appropriate for things like instructions, process flows, progress reports, and checklists. In the case of instructions, the order of tasks on a page often implies (or explicitly states) the “proper” or most common sequence for a user to follow. The wikiHow article above, for example, offers a recommended sequence of tasks for beginner players. In the case of progress reports, the sections may be ordered according to the periods of time in which work was done, as in this sample outline from the book <a href=\"https://www.amazon.com/Reporting-Technical-Information-Kenneth-Houp/dp/0195178793\"><i>Reporting Technical Information</i></a>, by Kenneth W. Houp et al.:</p>\n\n<figure class=\"quote\"><blockquote>\n<p><b>Beginning</b></p>\n<ul>\n<li>Introduction</li>\n<li>Summary of work completed</li>\n</ul>\n<p><b>Middle</b></p>\n<ul>\n<li>Work completed\n<ul>\n<li>Period 1 (beginning and end dates)\n<ul>\n<li>Description</li>\n<li>Cost</li>\n</ul>\n</li>\n<li>\n<p>Period 2 (beginning and end dates)</p>\n<ul>\n<li>Description</li>\n<li>Cost</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Work remaining</p>\n<ul>\n<li>Period 3 (or remaining periods)\n<ul>\n<li>Description of work to be done</li>\n<li>Expected cost</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><b>End</b></p>\n<ul>\n<li>Evaluation of work in this period</li>\n<li>Conclusions and recommendations</li>\n</ul>\n</blockquote>\n</figure><p>The principles of organization listed in this article are in fact another example of the chronological pattern. As Carolyn Rude points out in her book, the principles are arranged as a sort of methodology to follow. Try starting at the top of the list and work your way down. You may find it to be a useful way to produce order out of the chaos before you.</p>\n\n<h3>Spatial</h3>\n\n<p>The spatial pattern refers to top-to-bottom, left-to-right structures of organization. This is a good pattern if you need to describe the components of an interface or a physical object. </p>\n\n<p>Take a look at the neighbor comparison graph below, which is derived from a sample <a href=\"http://www.oracle.com/us/industries/utilities/ou-opower-energy-efficiency-ds-3553419.pdf\">energy efficiency</a> solution offered by Oracle Utilities. Customers who see this graph would most likely view it from top to bottom and left to right.</p>\n\n<figure><img src=\"https://alistapart.com/d/order-out-of-chaos/fig3.png\" alt=\"A neighbor comparison graph that shows a customer how they compare with their neighbors in terms of energy efficiency.\"><figcaption>A neighbor comparison graph that shows a customer how they compare with their neighbors in terms of energy efficiency.</figcaption></figure><p>A detailed description of this feature would then describe each component in that same order. Here’s a sample outline: </p>\n\n<ul>\n<li>Feature name\n<ul>\n<li>Title</li>\n<li>Bar chart\n<ul>\n<li>Efficient neighbors</li>\n<li>You</li>\n<li>Average neighbors</li>\n</ul>\n</li>\n<li>Date range</li>\n<li>\n<p>Performance insight</p>\n<ul>\n<li>Great</li>\n<li>Good</li>\n<li>Using more than average</li>\n</ul>\n</li>\n<li>Energy use insight</li>\n<li>Comparison details (“You’re compared with 10 homes within 6 miles …”)</li>\n</ul>\n</li>\n</ul>\n<h3>Comparison-contrast</h3>\n\n<p>The comparison-contrast pattern helps users weigh options. It’s useful when reporting the pros and cons of different decisions or comparing the attributes of two or more products or features. You see it often when you shop online and need to compare features and prices. It’s also a common pattern for feasibility studies or investigations that list options along with upsides and downsides.</p>\n\n<h3>Cause-effect</h3>\n\n<p>The cause-effect pattern shows relationships between actions and reactions. Writers often use it for things like troubleshooting articles, medical diagnoses, retrospectives, and root cause analyses. You can move from effect to cause, or cause to effect, but you should stick to one direction and use it consistently. For example, the <a href=\"https://www.drugs.com/health-guide/common-cold-viral-rhinitis.html\">cold</a> and <a href=\"https://www.drugs.com/health-guide/flu-influenza.html\">flu</a> pages at Drugs.com follow a standard cause-effect pattern that incorporates logical follow-up sections such as “Prevention” and “Treatment”: </p>\n\n<ul>\n<li>What Is It? (This section defines the illness and describes possible “causes.”)</li>\n<li>Symptoms (This section goes into the “effects” of the illness.)</li>\n<li>Diagnosis</li>\n<li>Expected Duration</li>\n<li>Prevention</li>\n<li>Treatment</li>\n<li>When to Call a Professional</li>\n<li>Prognosis</li>\n</ul>\n<p>For another example, see the “Use parallel structure for parallel sections” section below, which shows what a software troubleshooting article might look like.</p>\n\n<h3>Order of importance</h3>\n\n<p>The order of importance pattern organizes sections and subsections of content according to priority or significance. It is common in announcements, marketing brochures, release notes, advice articles, and FAQs. </p>\n\n<p>The order of importance pattern is perhaps the trickiest one to get right. As Carolyn Rude says, it’s not always clear what the most important information is. What should come in the beginning, middle, and end? Who decides? The answers will vary according to the author, audience, and purpose.</p>\n\n<p>When writing release notes, for example, my team often debates which software update should come first, because we know that the decision will underscore the significance of that update relative to the others. FAQs by definition are focused on which questions are most common and thus most important, but the exact order will depend on what you perceive as being the most frequent or the most important for readers to know. (If you are considering writing FAQs, I recommend this <a href=\"https://alistapart.com/article/no-more-faqs-create-purposeful-information-for-a-more-effective-user-experi\">great advice</a> from technical writer Lisa Wright.)</p>\n\n<h3>Other common patterns</h3>\n\n<p>Alphabetical order is a common pattern that Rude doesn’t mention in detail but that you may find helpful for your situation. To use this pattern, you would simply list sections or headings based on the first letter of the first word of the heading. For example, alphabetical order is used frequently to list API methods in API documentation sites such as those for <a href=\"https://www.flickr.com/services/api/\">Flickr</a>, <a href=\"https://developer.twitter.com/en/docs/api-reference-index\">Twitter</a>, and <a href=\"https://docs.oracle.com/javase/7/docs/api/\">Java</a>. It is also common in glossaries, indexes, and encyclopedic reference materials where each entry is more or less given equal footing. The downside of this pattern is that the most important information for your audience may not appear in a prominent, findable location. Still, it is useful if you have a large and diverse set of content that defies simple hierarchies and is referenced in a non-linear, piecemeal fashion.</p>\n\n<h2>Group related material</h2>\n\n<p>Take a look at the lists below. Which do you find easier to scan and digest? </p>\n\n<div class=\"row\">\n<div class=\"col\">\n<ol>\n<li>Settle on a version of D&amp;D.</li>\n<li>Print a character sheet, if desired.</li>\n<li>Select a gender and race.</li>\n<li>Choose a class.</li>\n<li>Name your character.</li>\n<li>Identify the main attributes of your character.</li>\n<li>Roll for ability scores.</li>\n<li>Assign the six recorded numbers to the six main attributes.</li>\n<li>Use the “Point Buy” system, alternatively.</li>\n<li>Generate random ability scores online.</li>\n<li>Record the modifier for each ability.</li>\n<li>Select skills for your character.</li>\n<li>List your character’s feats.</li>\n<li>Roll for your starting gold.</li>\n<li>Equip your character with items.</li>\n<li>Fill in armor class and combat bonuses.</li>\n<li>Paint a picture of your character.</li>\n<li>Determine the alignment of your character.</li>\n<li>Play your character in a campaign.</li>\n</ol>\n</div>\n<div class=\"col\">\n<p><b>Part 1: Establishing the Basics</b></p>\n<ol>\n<li>Settle on a version of D&amp;D.</li>\n<li>Print a character sheet, if desired.</li>\n<li>Select a gender and race.</li>\n<li>Choose a class.</li>\n<li>Name your character.</li>\n</ol>\n<p><b>Part 2: Calculating Ability Scores</b></p>\n<ol>\n<li>Identify the main attributes of your character.</li>\n<li>Roll for ability scores.</li>\n<li>Assign the six recorded numbers to the six main attributes.</li>\n<li>Use the “Point Buy” system, alternatively.</li>\n<li>Generate random ability scores online.</li>\n<li>Record the modifier for each ability.</li>\n</ol>\n<p><b>Part 3: Equipping Skills, Feats, Weapons, and Armor</b></p>\n<ol>\n<li>Select skills for your character.</li>\n<li>List your character’s feats.</li>\n<li>Roll for your starting gold.</li>\n<li>Equip your character with items.</li>\n<li>Fill in armor class and combat bonuses.</li>\n</ol>\n<p><b>Part 4: Finishing Your Character</b></p>\n<ol>\n<li>Paint a picture of your character.</li>\n<li>Determine the alignment of your character.</li>\n<li>Play your character in a campaign.</li>\n</ol>\n<p>(Source: <a href=\"https://www.wikihow.com/Create-a-Dungeons-and-Dragons-Character\">wikiHow: How to Create a Dungeons and Dragons Character</a>.)</p>\n</div>\n</div>\n\n<p>If you chose the second list, that is probably because the writers relied on a widely used organizational technique: <i>grouping</i>.</p>\n\n<p>Grouping is the process of identifying meaningful categories of information and putting information within those categories to aid reader comprehension. Grouping is especially helpful when you have a long, seemingly random list of information that could benefit from an extra layer of logical order. An added benefit of grouping is that it may reveal where you have gaps in your content or where you have mingled types of content that don’t really belong together.</p>\n\n<p>To group information effectively, first analyze your content and identify the discrete chunks of information you need to convey. Then tease out which chunks fall within similar conceptual buckets, and determine what intuitive headings or labels you can assign to those buckets. Writers do this when creating major and minor sections within a book or printed document. For online content, grouping is typically done at the level of articles or topics within a web-based system, such as a wiki or knowledge base. The <a href=\"https://support.google.com/mail/?hl=en#topic=3394150\">Gmail Help Center</a>, for example, groups topics within categories like “Popular articles,” “Read &amp; organize emails,” and “Send emails.” </p>\n\n<p>It’s possible to go overboard here. Too many headings in a short document or too many topics in a small help system can add unnecessary complexity. I once faced the latter scenario when I reviewed a help system written by one of my colleagues. At least five of the topics were so short that it made more sense to merge them together on a single page rather than forcing the end user to click through to separate pages. I’ve also encountered plenty of documents that contain major section headings with only one or two sentences under them. Sometimes this is fine; you may need to keep those sections for the sake of consistency. But it’s worth assessing whether such sections can simply be merged together (or conversely, whether they should be expanded to include more details).</p>\n\n<p>Because of scenarios like these, Carolyn Rude recommends keeping the number of groupings to around seven, give or take a few—though, as always, striking the right balance ultimately depends on your audience and purpose, as well as the amount of information you have to manage.</p>\n\n<h2>Use parallel structure for parallel sections</h2>\n\n<p>One of the reasons <a href=\"https://en.wikipedia.org/wiki/Veni,_vidi,_vici\">Julius Caesar’s phrase</a> “I came, I saw, I conquered” still sticks in our memory after thousands of years is the simple fact of parallelism. Each part of the saying follows a distinct, repetitive grammatical form that is easy to recall.</p>\n\n<p>Parallelism works in a similar manner with organization. By using a consistent and repetitive structure across types of information that fit in the same category, you make it easier for your readers to navigate and digest your content.</p>\n\n<p>Imagine you’re writing a troubleshooting guide in which all the topics follow the same basic breakdown: Problem Title, Problem, Cause, Solution, and See Also. In this case, you should make sure that each topic includes those same headings, in the exact same hierarchy and sequence, and using the exact same style and formatting. This kind of parallelism delivers a symmetry that reduces the reader’s cognitive load and clarifies the relationships of each part of your content. Deviations from the pattern not only cause confusion but can undermine the credibility of the content.</p>\n\n<div class=\"row\">\n<div class=\"col\">\n<p><b>Do This</b></p>\n\n<p><i>ABC Troubleshooting Guide</i></p>\n\n<ul>\n<li>Introduction</li>\n<li>Problem 1 Title\n<ul>\n<li>Problem</li>\n<li>Cause</li>\n<li>Solution</li>\n<li>See Also</li>\n</ul>\n</li>\n<li>\n<p>Problem 2 Title</p>\n<ul>\n<li>Problem</li>\n<li>Cause</li>\n<li>Solution</li>\n<li>See Also</li>\n</ul>\n</li>\n<li>\n<p>Problem 3 Title</p>\n<ul>\n<li>...</li>\n</ul>\n</li>\n\n</ul>\n</div>\n<div class=\"col\">\n<p><b>Don’t Do This</b></p>\n\n<p><i>ABC Troubleshooting Guide</i></p>\n\n<ul>\n<li>Introduction</li>\n<li>Problem 1 Title\n<ul>\n<li>Problem</li>\n<li>Root causes</li>\n<li>How to Fix it</li>\n<li>Advanced Tips and tricks</li>\n<li>Related</li>\n</ul>\n</li>\n<li>\n<p>Problem 2 title</p>\n<ul>\n<li>Issue</li>\n<li>Steps to Fix</li>\n<li>Why did this happen, and how can I avoid it next time?</li>\n<li>See also</li>\n</ul>\n</li>\n<li>\n<p>Problem 3 title</p>\n<ul>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n\n<p>This last principle is probably the easiest to grasp but may be the most difficult to enforce, especially if you are managing contributions from multiple authors. Templates and style guides are useful here because they invite authors to provide standard inputs, but you will still need to watch the content like a hawk to squash the inconsistencies that inevitably emerge.</p>\n\n<h2>Conclusion</h2>\n\n<p>In one sense, my response to my former boss was accurate. Given the endless variety of writing situations, there is no such thing as a single organization solution. But saying that “advice varies widely depending on the situation” doesn’t tell the whole story. There are flexible patterns and principles that can guide you in finding, customizing, and creating structures for your goals. </p>\n\n<p>The key thing to remember is that structure affects meaning. The sequence of information, the categories you use, the emphasis you imply through your hierarchy—all of these decisions impact how well your audience understands what you write. Your ideal structure should therefore reinforce what you mean to say.</p>\n<h3>Footnotes</h3>\n<ul class=\"the-footnotes\"><li>1. The principles in this article are based on the same ones that Carolyn Rude outlines in chapter 17, pp. 289–296, of the third edition of her book. I highly recommend it for anyone who’s interested in gaining an in-depth understanding of editing. The book is now in its fifth edition and includes an additional author, Angela Eaton. See <a href=\"https://www.amazon.com/Technical-Editing-Allyn-Seriesin-Communication/dp/0205786715\"><i>Technical Editing (Fifth Edition)</i></a> for details. The examples and illustrations used in this article are derived from a variety of other sources, including my own work.</li></ul>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/2iOHftq7asw\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Content, Writing"],"color":"tan","category":"A List Apart:","date":"2018-07-05 13:18:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Your Emails (and Recipients) Deserve Better Context","pubDate":"2018-06-28 13:05:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/6J7I7cSm4i0/your-emails-and-recipients-deserve-better-context","guid":"http://alistapart.com/article/your-emails-and-recipients-deserve-better-context","author":"by","thumbnail":"https://alistapart.com/d/your-emails-deserve-better/fig1.png","description":"\n<p>Email communication is an integral part of the user experience for nearly every web application that requires a login. It’s also one of the first interactions the user has after signing up. Yet too often both the content and context of these emails is treated as an afterthought (at best), with the critical parts that users see first—sender name and email, subject, and preheader—largely overlooked. Your users, and the great application you’ve just launched, deserve better.</p>\n\n<h2>A focus on recipient experience</h2>\n\n<p>Designing and implementing a great email recipient experience is difficult. And by the time it comes to the all-important context elements (name, subject, and so on), it’s commonly left up to the developer to simply fill something in and move on. That’s a shame, because these elements play an outsized role in the email experience, being not only the first elements seen but also the bits recipients use to identify emails when searching through their archives. Given the frequency with which they touch users, it really is time we started spending a little more effort to fine-tune them.</p>\n\n<p>The great news is that despite the constraints imposed on these elements, they’re relatively easy to improve, and they can have a huge impact on engagement, open rates, and recipient satisfaction. When they all work together, sender name and email, subject, and preheader provide a better experience for your recipients.</p>\n\n<p>So whether you’re a developer stuck fixing such oversights and winging it, or on the design or marketing team responsible for making the decisions, use the following guide to improve your recipient’s experience. And, if possible, bring it up with your whole team so it’s always a specific requirement in the future. </p>\n\n<h2>Details that matter</h2>\n\n<p>As they say, the devil is in the details, and these details matter. Let’s start with a quick example that highlights a few common mistakes. </p>\n\n<p>In the image below, the sender is unnecessarily repeated within the subject, wasting key initial subject characters, while the subjects themselves are all exactly the same. This makes it difficult to tell one email from the next, and the preview content doesn’t help much either since the only unique information it provides is the date (which is redundant alongside the email’s time stamp). The subject copy could be more concise as well—“Payment Successfully Processed” is helpful, but it’s a bit verbose. </p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig1.png\" alt=\"Screenshot of five nearly-identical emails sitting in an emailbox\"><figcaption>Avoid redundancy and make your sender name, subject, and preheaders work together. Periscope repeats the sender name, and doesn’t provide unique or relevant information in the subject or preheader.</figcaption></figure><p>Outside of the sender and the dates on the emails, there’s not much useful information until you open the email itself. Fortunately, none of these things are particularly difficult to fix. Weather Underground provides a great example of carefully crafted emails. The subject conveys the most useful information without even requiring the recipient to open the email. In addition, their strategic use of emojis helps complement that information with a very rich, yet judicious, use of subject-line space.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig2.png\" alt=\"Screenshot of an emails the information the user is looking for in the preview\"><figcaption>Weather Underground does a great job with the sender and even front-loads the subject with the most valuable bit of information. The date is included, but it’s at the end of the subject.</figcaption></figure><p>Weather Underground also makes use of <a href=\"https://postmarkapp.com/guides/improve-your-transactional-emails-with-gmail-inbox-actions\">Gmail Inbox Actions</a> to provide a direct link to the key information online without needing a recipient to open the email to follow a link. Gmail Inbox Actions require some extra work to set up and only work in Gmail, but they can be great if you’re sending high volumes of email.</p>\n\n<p>Both scenarios involve recurring emails with similar content from one to the next, but the difference is stark. With just a little effort and fine-tuning, the resulting emails are much more useful to the recipients. Let’s explore how this is done.</p>\n\n<h2>Emphasizing unique content for recurring emails</h2>\n\n<p>With the earlier examples, both organizations are sending recurring emails, but by focusing on unique subject lines, Weather Underground’s emails are much more helpful. Recurring emails like invoices may not contain the most glamorous content, but you still have an opportunity to make each one unique and informative.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig3.png\" alt=\"Screenshot of two invoice emails with the same subject line: 'You've got a new invoice'\"><figcaption>Instead of a generic “You have a new invoice” notification, you can surface important or unique information like the invoice total, the most expensive products or services, or the due date.</figcaption></figure><p>By surfacing the most important or unique information from the content of the email, there’s additional context to help the recipient know whether they need to act or not. It also makes it easier to find a specific invoice when searching through emails in the future.</p>\n\n<h2>Clarifying the sender</h2>\n\n<p>Who (or what) is sending this email? Is it a person? Is it automated? Do I want to hear from them? Do I trust them? Is this spam? These questions and more automatically run through our heads whenever we see an email, and the sender information provides the first clue when we start processing our inbox. Just as for caller ID on incoming phone calls, recognition and trust both play a role. As <a href=\"https://litmus.com/blog/how-to-write-captivating-email-subject-lines\">Joanna Wiebe said in an interview with Litmus</a>, “If the from name doesn’t sound like it’s from someone you want to hear from, it doesn’t matter what the subject line is.” This can be even more critical on mobile devices where the sender name is the most prominent element.</p>\n\n<p>The first and most important step is to explicitly specify a name. You don’t want the recipient’s email client choosing what to display based on the email address alone. For instance, if you send emails from “alerts@example.com” (with no name specified), some clients will display “alerts” as the name, and others will display “alerts@example.com.” With the latter, it just feels rough around the edges. In either case, the experience is less than ideal for the sender.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig4.png\" alt=\"Screenshot of an email with an email address instead of a name\"><figcaption>Without a name specified, email clients may use the username portion of an email address or truncate longer email addresses, making the name portion incomplete or less helpful to recipients.</figcaption></figure><p>The technical implementation may vary depending on your stack, but at the simplest level, correct implementation is all in the string formatting. Let’s look at “Jane Doe &lt;email@example.com&gt;” as an example. “Jane Doe” is the name, and the email is included after the name and surrounded by angle brackets. It’s a small technical detail, but it makes a world of difference to recipients.</p>\n\n<p>But what name should we show? This depends on the type of email, so you’ll want to consider the sender for each email independently. For example, with a receipt or invoice you may want to use “Acme Billing.” But with a comment notification, it may be more informative for recipients if you use the commenter’s name, such as “Jane Doe via AcmeApp.” Depending on the context, you could use “with” or “from” as well, but those have an extra character, so I’ve found “via” to be the shortest and most semantically accurate option.</p>\n\n<p>Similarly, if your business entity or organization name is different from your product name, you should use the name that will be most familiar to your recipients. </p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig5.png\" alt=\"Screenshot of an email Corporate Holdings, Inc.\"><figcaption>Recipients aren’t always familiar with the names of corporate holding companies, so make sure to use the company or product name that will be most familiar to the recipient.</figcaption></figure><figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig6.png\" alt=\"Screenshot of a corporate email from Jane Doe\"><figcaption>In the above cases, while “Jane Doe” may have made the comment, the email isn’t directly from her, so it’s best to add something lik “via Acme Todos” to make it clear that it was sent on Jane’s behalf. In the case of “Support,” content doesn’t clarify which product it refers to. Since users could have a variety of emails from “Support” for different products, it fails to provide important context.</figcaption></figure><h2>Avoiding contact confusion</h2>\n\n<p>In the case where you use someone’s name—like with the “Jane Doe via AcmeApp” example above—it’s important to add a reference to the app name. Since the email isn’t actually from Jane, it’s inaccurate to represent that it’s from Jane Doe directly. This can be confusing for users, but it can also create problems with address books. If you use just “Jane Doe,” your sending email address can be accidentally added to the recipient’s address book in association with Jane’s entry. Then, when they go to email Jane later, they may unwittingly send an email to “notifications@acme.com” instead of Jane. That could lead to some painful missed emails and miscommunication. The other reason is that it’s simply helpful for the recipient to know the source of the email. It’s not just from Jane, it’s from Jane via your application.</p>\n\n<p>You’ll also want to put yourself in your recipient’s shoes and carefully consider whether a name is recognizable to your recipient. For example, if your corporate entity name and product name aren’t the same, recipients will be much less likely to recognize the sender if you use the name of your corporate entity. So make sure to use the product name that will be most familiar to the recipient. Similarly, you’ll want to avoid using generic names that could be from any company. For example, use “Acme Billing” instead of just “Billing,” so the recipient can quickly and easily identify your product.</p>\n\n<p>Finally, while names are great, the underlying sending address can be just as important. In many ways, it’s the best attribute for recipients to use when filtering and organizing their inbox, and using unique email addresses or aliases for different categories of emails makes this much easier. There’s a fine line, but the simplest way to do this is to group emails into three categories: billing, support, and activity/actions. You may be able to use more, like notifications, alerts, or legal, but remember that the more you create, the more you’ll have to keep track of. </p>\n\n<p>Also, keep the use of subdomains to a minimum. By consistently only sending transactional email like password resets, receipts, order updates, and other similar emails from your primary domain, users learn to view any emails from other domains as suspicious. It may seem like a minor detail, but these bits of information add up to create important signals for recipients. It is worth noting, however, that you should use a different address, and ideally a separate subdomain, for your bulk marketing emails. This helps Gmail and other inbox providers understand the type of email coming from each source, which in turn helps ensure the domain reputation for your bulk marketing emails—which is traditionally lower—doesn’t affect delivery of your more critical transactional email.</p>\n\n<h2>Subject line utility</h2>\n\n<p>Now that recipients have clearly identifiable and recognizable sender information, it’s time to think about the subjects of your emails. Since we’ve focused on transactional emails in the examples used so far, we’ll similarly focus on the utility of your subject line content rather than the copywriting. You can always use copywriting to improve the subject, but with transactional emails, utility comes first. </p>\n\n<p>The team at MailChimp has studied <a href=\"https://mailchimp.com/resources/research/subject-line-comparison/\">data about subject lines</a> extensively, and there are a few key things to know about subjects. First, the presence of even a single word can have a meaningful impact on open rates. A <a href=\"https://www.adestra.com/resources/2015-subject-line-analysis-report/\">2015 report by Adestra</a> had similar findings. Words and phrases like “thank you,” “monthly,” and “thanks” see higher engagement than words like “subscription,” “industry,” and “report,” though different words will have different impacts depending on your industry, so you’ll still need to test and monitor the results. Personalization can also have an impact, but remember, personalization isn’t just about using a person’s name. It can be information like location, previous purchases, or other personal data. Just remember that it’s important to be tasteful, judicious, and relevant. </p>\n\n<p>The next major point from MailChimp is that <a href=\"https://blog.mailchimp.com/this-just-in-subject-line-length-means-absolutelynothing/\">subject line length doesn’t matter</a>. Or, rather, it doesn’t matter directly. After studying 6 billion emails, they found “little or no correlation between performance and subject length.” That said, when line length is considered as one aspect of your overall subject content, it can be used to help an email stand out. Clarity and utility are more important than brevity, but when used as a component to support clarity and utility, brevity can help.</p>\n\n<p>One final point from the Adestra report is that open rates aren’t everything. Regardless of whether someone opens an email, the words and content of your subject line leaves an impression. So even if a certain change doesn’t affect your open rates, it can still have a far-reaching impact.</p>\n\n<h2>Clearing out redundancy</h2>\n\n<p>The most common mistake with subjects is including redundant information. If you’ve carefully chosen the sender name and email address, there’s no need to repeat the sender name in the subject, and the characters could be better applied to telling the recipient additional useful information. Dates are a bit of a gray area, but in many cases, the email’s time stamp can suffice for handling any time-based information. On the other hand, when the key dates don’t correlate to when the email was sent, it can be helpful to include the relevant date information in the subject.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig7.png\" alt=\"Screenshot of two emails where the subject line and preview repeat the name of the company (which is also in the To field)\"><figcaption>With these examples, after the sender, there’s no new or useful information displayed, and some form of the company name is repeated several times. Even the preheader is neglected leaving the email client to use alternate text from the logo.</figcaption></figure><p>With the subject of your application emails, you’ll also want to front-load the most important content to prevent it from being cut off. For instance, instead of “Your Invoice for May 2018,” you could rewrite that as “May 2018 Invoice.” Since your sender is likely “Acme Billing,” the recipient already knows it’s about billing, so the month and year is the most important part of the subject. However, “May 2018 Invoice” is a bit terse, so you may want to add something at the end to make it more friendly.</p>\n\n<p>Next, in situations where time stamps are relevant, avoid relying on relative dates or times. Phrases like “yesterday,” “last week,” or “two hours ago” don’t age well with email since you never know when someone will receive or read it. Similarly, when someone goes to search their email archives, relative dates aren’t helpful. If you must use relative dates, look for opportunities to add explicit dates or time stamps to add clarity. </p>\n\n<p>With regularly occurring emails like reports or invoices, strive to give each message a unique subject. If every report has the subject “Your Monthly Status Report,” they can run together in a list of emails that all have the same subject. It can also make them more difficult to search later on. The same goes for invoices and receipts. Yes, invoice numbers and order numbers are technically unique, but they aren’t particularly helpful. Make sure to include useful content to help identify each email individually. Whether that’s the date, total value, listing the most expensive items, or all three, it’s easier on recipients when they can identify the contents of an email without having to open it. While open rates are central to measuring marketing emails, transactional emails are all about usefulness. So open rates aren’t as purely correlated with successful transactional emails. </p>\n\n<p>There’s a case to be made that in some contexts a great transactional email doesn’t need to be opened at all for it to be useful. The earlier Weather Underground example does an excellent job communicating the key information without requiring recipients to open it. And while the subject is the best place for key content, some useful content can also be displayed using a preheader. </p>\n\n<h2>Making the most of preheaders</h2>\n\n<p>If you’re not familiar with the preheader, you can think of it as a convenient name for the content at the beginning of an email. Campaign Monitor has a great write-up with in-depth advice on <a href=\"https://www.campaignmonitor.com/blog/email-marketing/2015/08/improve-email-open-rates-with-preheader-text/\">making the most of your preheaders</a>. It’s simply a way of acknowledging and explicitly suggesting the text that email clients should show in the preview pane for an email. While there’s no formal specification for preheaders, and different email clients will handle them differently, they’re still widely displayed. </p>\n\n<p>Most importantly, well-written and useful preheaders of 40–50 characters have been shown to increase overall engagement, particularly if delivering a concise call to action. <a href=\"https://www.yeslifecyclemarketing.com/campaign/benchmarks/vwo-subject-line-benchmarks\">A study by Yes Lifecycle Marketing</a> (signing up required) points out that preheader content is important, especially on mobile devices where subjects are truncated and it can act as a sort of extended subject.</p>\n\n<p>If the leading content in your email is a logo or other image, email clients will often use the alternate text for the image as the preview text. Since “Acme Logo” isn’t very helpful, it’s best to include a short summary of text at the beginning of your email. Sometimes this short summary text can interfere with the design of your email, so it’s not uncommon for the design to accommodate some visually muted—but still readable—text at the beginning. Or, as long as you’re judicious, in most cases you can safely hide preheader text entirely by using the display: none CSS declaration. Abusing this could get you caught in spam filters, but for the most part, inbox providers seem to focus on the content that is hidden rather than the fact that it’s hidden. </p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig8.png\" alt=\"Screenshots of two emails with useless information in the preview\"><figcaption>If you’re not explicitly specifying your preheader text, there’s a good chance email clients will use content that at best is less than useful and at worst makes a bad impression.</figcaption></figure><p>If your email can be designed and written such that the first content encountered is the useful content for previews, then you’re all set. In the case of receipts, invoices, or activity summaries, that’s not always easy. In those cases, a short text-based summary of the content makes a good preheader.</p>\n\n<h2>Context element interplay</h2>\n\n<p>The rules outlined above are great guidelines, but remember that rules are there to be broken (well, sometimes …). As long as you understand the big picture, sender, subject, and preheader can still work together effectively even if some of those rules are bent. A bit. For example, if you ensure that you have relevant and unique content in your preheader for the preview, you may be able to get away with using the same subject for each recurring email. Alternatively, there may be cases where you need to repeat the sender name in the subject. </p>\n\n<p>The key is that when you’re crafting these elements, make sure you’re looking at how they work together. Sometimes a subject can be shortened by moving some content into the preheader. Alternatively, you may be able to use a more specific sender to reduce the need for a word or two in the subject. The application of these guidelines isn’t black and white. Simply being aware of the recipient’s experience is the most important factor when crafting the elements they’ll see in preview panes.</p>\n\n<h2>Finally, a word on monitoring and testing</h2>\n\n<p>Simple changes to the sender, subject, and preheader can significantly impact open rates and recipient experience. One critical thing to remember, however, is that while some of these improvements are guaranteed winners, monitoring and testing things like open rates and click rates is critical to validate any changes made. And since these elements can either play against each other or work together, it’s best to test combinations and view all three elements holistically.</p>\n\n<p>The value of getting this right really is in the details, and despite their tendency to be overlooked, taking the time to craft helpful and useful sender names and addresses, subject lines, and preheaders can drastically improve the experience for your email recipients. It’s a small investment that’s definitely worth your time.</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/6J7I7cSm4i0\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Email communication is an integral part of the user experience for nearly every web application that requires a login. It’s also one of the first interactions the user has after signing up. Yet too often both the content and context of these emails is treated as an afterthought (at best), with the critical parts that users see first—sender name and email, subject, and preheader—largely overlooked. Your users, and the great application you’ve just launched, deserve better.</p>\n\n<h2>A focus on recipient experience</h2>\n\n<p>Designing and implementing a great email recipient experience is difficult. And by the time it comes to the all-important context elements (name, subject, and so on), it’s commonly left up to the developer to simply fill something in and move on. That’s a shame, because these elements play an outsized role in the email experience, being not only the first elements seen but also the bits recipients use to identify emails when searching through their archives. Given the frequency with which they touch users, it really is time we started spending a little more effort to fine-tune them.</p>\n\n<p>The great news is that despite the constraints imposed on these elements, they’re relatively easy to improve, and they can have a huge impact on engagement, open rates, and recipient satisfaction. When they all work together, sender name and email, subject, and preheader provide a better experience for your recipients.</p>\n\n<p>So whether you’re a developer stuck fixing such oversights and winging it, or on the design or marketing team responsible for making the decisions, use the following guide to improve your recipient’s experience. And, if possible, bring it up with your whole team so it’s always a specific requirement in the future. </p>\n\n<h2>Details that matter</h2>\n\n<p>As they say, the devil is in the details, and these details matter. Let’s start with a quick example that highlights a few common mistakes. </p>\n\n<p>In the image below, the sender is unnecessarily repeated within the subject, wasting key initial subject characters, while the subjects themselves are all exactly the same. This makes it difficult to tell one email from the next, and the preview content doesn’t help much either since the only unique information it provides is the date (which is redundant alongside the email’s time stamp). The subject copy could be more concise as well—“Payment Successfully Processed” is helpful, but it’s a bit verbose. </p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig1.png\" alt=\"Screenshot of five nearly-identical emails sitting in an emailbox\"><figcaption>Avoid redundancy and make your sender name, subject, and preheaders work together. Periscope repeats the sender name, and doesn’t provide unique or relevant information in the subject or preheader.</figcaption></figure><p>Outside of the sender and the dates on the emails, there’s not much useful information until you open the email itself. Fortunately, none of these things are particularly difficult to fix. Weather Underground provides a great example of carefully crafted emails. The subject conveys the most useful information without even requiring the recipient to open the email. In addition, their strategic use of emojis helps complement that information with a very rich, yet judicious, use of subject-line space.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig2.png\" alt=\"Screenshot of an emails the information the user is looking for in the preview\"><figcaption>Weather Underground does a great job with the sender and even front-loads the subject with the most valuable bit of information. The date is included, but it’s at the end of the subject.</figcaption></figure><p>Weather Underground also makes use of <a href=\"https://postmarkapp.com/guides/improve-your-transactional-emails-with-gmail-inbox-actions\">Gmail Inbox Actions</a> to provide a direct link to the key information online without needing a recipient to open the email to follow a link. Gmail Inbox Actions require some extra work to set up and only work in Gmail, but they can be great if you’re sending high volumes of email.</p>\n\n<p>Both scenarios involve recurring emails with similar content from one to the next, but the difference is stark. With just a little effort and fine-tuning, the resulting emails are much more useful to the recipients. Let’s explore how this is done.</p>\n\n<h2>Emphasizing unique content for recurring emails</h2>\n\n<p>With the earlier examples, both organizations are sending recurring emails, but by focusing on unique subject lines, Weather Underground’s emails are much more helpful. Recurring emails like invoices may not contain the most glamorous content, but you still have an opportunity to make each one unique and informative.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig3.png\" alt=\"Screenshot of two invoice emails with the same subject line: 'You've got a new invoice'\"><figcaption>Instead of a generic “You have a new invoice” notification, you can surface important or unique information like the invoice total, the most expensive products or services, or the due date.</figcaption></figure><p>By surfacing the most important or unique information from the content of the email, there’s additional context to help the recipient know whether they need to act or not. It also makes it easier to find a specific invoice when searching through emails in the future.</p>\n\n<h2>Clarifying the sender</h2>\n\n<p>Who (or what) is sending this email? Is it a person? Is it automated? Do I want to hear from them? Do I trust them? Is this spam? These questions and more automatically run through our heads whenever we see an email, and the sender information provides the first clue when we start processing our inbox. Just as for caller ID on incoming phone calls, recognition and trust both play a role. As <a href=\"https://litmus.com/blog/how-to-write-captivating-email-subject-lines\">Joanna Wiebe said in an interview with Litmus</a>, “If the from name doesn’t sound like it’s from someone you want to hear from, it doesn’t matter what the subject line is.” This can be even more critical on mobile devices where the sender name is the most prominent element.</p>\n\n<p>The first and most important step is to explicitly specify a name. You don’t want the recipient’s email client choosing what to display based on the email address alone. For instance, if you send emails from “alerts@example.com” (with no name specified), some clients will display “alerts” as the name, and others will display “alerts@example.com.” With the latter, it just feels rough around the edges. In either case, the experience is less than ideal for the sender.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig4.png\" alt=\"Screenshot of an email with an email address instead of a name\"><figcaption>Without a name specified, email clients may use the username portion of an email address or truncate longer email addresses, making the name portion incomplete or less helpful to recipients.</figcaption></figure><p>The technical implementation may vary depending on your stack, but at the simplest level, correct implementation is all in the string formatting. Let’s look at “Jane Doe &lt;email@example.com&gt;” as an example. “Jane Doe” is the name, and the email is included after the name and surrounded by angle brackets. It’s a small technical detail, but it makes a world of difference to recipients.</p>\n\n<p>But what name should we show? This depends on the type of email, so you’ll want to consider the sender for each email independently. For example, with a receipt or invoice you may want to use “Acme Billing.” But with a comment notification, it may be more informative for recipients if you use the commenter’s name, such as “Jane Doe via AcmeApp.” Depending on the context, you could use “with” or “from” as well, but those have an extra character, so I’ve found “via” to be the shortest and most semantically accurate option.</p>\n\n<p>Similarly, if your business entity or organization name is different from your product name, you should use the name that will be most familiar to your recipients. </p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig5.png\" alt=\"Screenshot of an email Corporate Holdings, Inc.\"><figcaption>Recipients aren’t always familiar with the names of corporate holding companies, so make sure to use the company or product name that will be most familiar to the recipient.</figcaption></figure><figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig6.png\" alt=\"Screenshot of a corporate email from Jane Doe\"><figcaption>In the above cases, while “Jane Doe” may have made the comment, the email isn’t directly from her, so it’s best to add something lik “via Acme Todos” to make it clear that it was sent on Jane’s behalf. In the case of “Support,” content doesn’t clarify which product it refers to. Since users could have a variety of emails from “Support” for different products, it fails to provide important context.</figcaption></figure><h2>Avoiding contact confusion</h2>\n\n<p>In the case where you use someone’s name—like with the “Jane Doe via AcmeApp” example above—it’s important to add a reference to the app name. Since the email isn’t actually from Jane, it’s inaccurate to represent that it’s from Jane Doe directly. This can be confusing for users, but it can also create problems with address books. If you use just “Jane Doe,” your sending email address can be accidentally added to the recipient’s address book in association with Jane’s entry. Then, when they go to email Jane later, they may unwittingly send an email to “notifications@acme.com” instead of Jane. That could lead to some painful missed emails and miscommunication. The other reason is that it’s simply helpful for the recipient to know the source of the email. It’s not just from Jane, it’s from Jane via your application.</p>\n\n<p>You’ll also want to put yourself in your recipient’s shoes and carefully consider whether a name is recognizable to your recipient. For example, if your corporate entity name and product name aren’t the same, recipients will be much less likely to recognize the sender if you use the name of your corporate entity. So make sure to use the product name that will be most familiar to the recipient. Similarly, you’ll want to avoid using generic names that could be from any company. For example, use “Acme Billing” instead of just “Billing,” so the recipient can quickly and easily identify your product.</p>\n\n<p>Finally, while names are great, the underlying sending address can be just as important. In many ways, it’s the best attribute for recipients to use when filtering and organizing their inbox, and using unique email addresses or aliases for different categories of emails makes this much easier. There’s a fine line, but the simplest way to do this is to group emails into three categories: billing, support, and activity/actions. You may be able to use more, like notifications, alerts, or legal, but remember that the more you create, the more you’ll have to keep track of. </p>\n\n<p>Also, keep the use of subdomains to a minimum. By consistently only sending transactional email like password resets, receipts, order updates, and other similar emails from your primary domain, users learn to view any emails from other domains as suspicious. It may seem like a minor detail, but these bits of information add up to create important signals for recipients. It is worth noting, however, that you should use a different address, and ideally a separate subdomain, for your bulk marketing emails. This helps Gmail and other inbox providers understand the type of email coming from each source, which in turn helps ensure the domain reputation for your bulk marketing emails—which is traditionally lower—doesn’t affect delivery of your more critical transactional email.</p>\n\n<h2>Subject line utility</h2>\n\n<p>Now that recipients have clearly identifiable and recognizable sender information, it’s time to think about the subjects of your emails. Since we’ve focused on transactional emails in the examples used so far, we’ll similarly focus on the utility of your subject line content rather than the copywriting. You can always use copywriting to improve the subject, but with transactional emails, utility comes first. </p>\n\n<p>The team at MailChimp has studied <a href=\"https://mailchimp.com/resources/research/subject-line-comparison/\">data about subject lines</a> extensively, and there are a few key things to know about subjects. First, the presence of even a single word can have a meaningful impact on open rates. A <a href=\"https://www.adestra.com/resources/2015-subject-line-analysis-report/\">2015 report by Adestra</a> had similar findings. Words and phrases like “thank you,” “monthly,” and “thanks” see higher engagement than words like “subscription,” “industry,” and “report,” though different words will have different impacts depending on your industry, so you’ll still need to test and monitor the results. Personalization can also have an impact, but remember, personalization isn’t just about using a person’s name. It can be information like location, previous purchases, or other personal data. Just remember that it’s important to be tasteful, judicious, and relevant. </p>\n\n<p>The next major point from MailChimp is that <a href=\"https://blog.mailchimp.com/this-just-in-subject-line-length-means-absolutelynothing/\">subject line length doesn’t matter</a>. Or, rather, it doesn’t matter directly. After studying 6 billion emails, they found “little or no correlation between performance and subject length.” That said, when line length is considered as one aspect of your overall subject content, it can be used to help an email stand out. Clarity and utility are more important than brevity, but when used as a component to support clarity and utility, brevity can help.</p>\n\n<p>One final point from the Adestra report is that open rates aren’t everything. Regardless of whether someone opens an email, the words and content of your subject line leaves an impression. So even if a certain change doesn’t affect your open rates, it can still have a far-reaching impact.</p>\n\n<h2>Clearing out redundancy</h2>\n\n<p>The most common mistake with subjects is including redundant information. If you’ve carefully chosen the sender name and email address, there’s no need to repeat the sender name in the subject, and the characters could be better applied to telling the recipient additional useful information. Dates are a bit of a gray area, but in many cases, the email’s time stamp can suffice for handling any time-based information. On the other hand, when the key dates don’t correlate to when the email was sent, it can be helpful to include the relevant date information in the subject.</p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig7.png\" alt=\"Screenshot of two emails where the subject line and preview repeat the name of the company (which is also in the To field)\"><figcaption>With these examples, after the sender, there’s no new or useful information displayed, and some form of the company name is repeated several times. Even the preheader is neglected leaving the email client to use alternate text from the logo.</figcaption></figure><p>With the subject of your application emails, you’ll also want to front-load the most important content to prevent it from being cut off. For instance, instead of “Your Invoice for May 2018,” you could rewrite that as “May 2018 Invoice.” Since your sender is likely “Acme Billing,” the recipient already knows it’s about billing, so the month and year is the most important part of the subject. However, “May 2018 Invoice” is a bit terse, so you may want to add something at the end to make it more friendly.</p>\n\n<p>Next, in situations where time stamps are relevant, avoid relying on relative dates or times. Phrases like “yesterday,” “last week,” or “two hours ago” don’t age well with email since you never know when someone will receive or read it. Similarly, when someone goes to search their email archives, relative dates aren’t helpful. If you must use relative dates, look for opportunities to add explicit dates or time stamps to add clarity. </p>\n\n<p>With regularly occurring emails like reports or invoices, strive to give each message a unique subject. If every report has the subject “Your Monthly Status Report,” they can run together in a list of emails that all have the same subject. It can also make them more difficult to search later on. The same goes for invoices and receipts. Yes, invoice numbers and order numbers are technically unique, but they aren’t particularly helpful. Make sure to include useful content to help identify each email individually. Whether that’s the date, total value, listing the most expensive items, or all three, it’s easier on recipients when they can identify the contents of an email without having to open it. While open rates are central to measuring marketing emails, transactional emails are all about usefulness. So open rates aren’t as purely correlated with successful transactional emails. </p>\n\n<p>There’s a case to be made that in some contexts a great transactional email doesn’t need to be opened at all for it to be useful. The earlier Weather Underground example does an excellent job communicating the key information without requiring recipients to open it. And while the subject is the best place for key content, some useful content can also be displayed using a preheader. </p>\n\n<h2>Making the most of preheaders</h2>\n\n<p>If you’re not familiar with the preheader, you can think of it as a convenient name for the content at the beginning of an email. Campaign Monitor has a great write-up with in-depth advice on <a href=\"https://www.campaignmonitor.com/blog/email-marketing/2015/08/improve-email-open-rates-with-preheader-text/\">making the most of your preheaders</a>. It’s simply a way of acknowledging and explicitly suggesting the text that email clients should show in the preview pane for an email. While there’s no formal specification for preheaders, and different email clients will handle them differently, they’re still widely displayed. </p>\n\n<p>Most importantly, well-written and useful preheaders of 40–50 characters have been shown to increase overall engagement, particularly if delivering a concise call to action. <a href=\"https://www.yeslifecyclemarketing.com/campaign/benchmarks/vwo-subject-line-benchmarks\">A study by Yes Lifecycle Marketing</a> (signing up required) points out that preheader content is important, especially on mobile devices where subjects are truncated and it can act as a sort of extended subject.</p>\n\n<p>If the leading content in your email is a logo or other image, email clients will often use the alternate text for the image as the preview text. Since “Acme Logo” isn’t very helpful, it’s best to include a short summary of text at the beginning of your email. Sometimes this short summary text can interfere with the design of your email, so it’s not uncommon for the design to accommodate some visually muted—but still readable—text at the beginning. Or, as long as you’re judicious, in most cases you can safely hide preheader text entirely by using the display: none CSS declaration. Abusing this could get you caught in spam filters, but for the most part, inbox providers seem to focus on the content that is hidden rather than the fact that it’s hidden. </p>\n\n<figure><img src=\"https://alistapart.com/d/your-emails-deserve-better/fig8.png\" alt=\"Screenshots of two emails with useless information in the preview\"><figcaption>If you’re not explicitly specifying your preheader text, there’s a good chance email clients will use content that at best is less than useful and at worst makes a bad impression.</figcaption></figure><p>If your email can be designed and written such that the first content encountered is the useful content for previews, then you’re all set. In the case of receipts, invoices, or activity summaries, that’s not always easy. In those cases, a short text-based summary of the content makes a good preheader.</p>\n\n<h2>Context element interplay</h2>\n\n<p>The rules outlined above are great guidelines, but remember that rules are there to be broken (well, sometimes …). As long as you understand the big picture, sender, subject, and preheader can still work together effectively even if some of those rules are bent. A bit. For example, if you ensure that you have relevant and unique content in your preheader for the preview, you may be able to get away with using the same subject for each recurring email. Alternatively, there may be cases where you need to repeat the sender name in the subject. </p>\n\n<p>The key is that when you’re crafting these elements, make sure you’re looking at how they work together. Sometimes a subject can be shortened by moving some content into the preheader. Alternatively, you may be able to use a more specific sender to reduce the need for a word or two in the subject. The application of these guidelines isn’t black and white. Simply being aware of the recipient’s experience is the most important factor when crafting the elements they’ll see in preview panes.</p>\n\n<h2>Finally, a word on monitoring and testing</h2>\n\n<p>Simple changes to the sender, subject, and preheader can significantly impact open rates and recipient experience. One critical thing to remember, however, is that while some of these improvements are guaranteed winners, monitoring and testing things like open rates and click rates is critical to validate any changes made. And since these elements can either play against each other or work together, it’s best to test combinations and view all three elements holistically.</p>\n\n<p>The value of getting this right really is in the details, and despite their tendency to be overlooked, taking the time to craft helpful and useful sender names and addresses, subject lines, and preheaders can drastically improve the experience for your email recipients. It’s a small investment that’s definitely worth your time.</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/6J7I7cSm4i0\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Content"],"color":"tan","category":"A List Apart:","date":"2018-06-28 13:05:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Discovery on a Budget: Part III","pubDate":"2018-06-21 12:59:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/CCJ3VVRhoAA/discovery-on-a-budget-part-iii","guid":"http://alistapart.com/article/discovery-on-a-budget-part-iii","author":"by","thumbnail":"http://feeds.feedburner.com/~r/alistapart/main/~4/CCJ3VVRhoAA","description":"\n<p>Sometimes we have the luxury of large budgets and deluxe research facilities, and sometimes we’ve got nothing but a research question and the determination to answer it. Throughout the “Discovery on a Budget” series we have discussed strategies for conducting discovery research with very few resources but lots of creativity. In <a href=\"http://alistapart.com/article/discovery-on-a-budget-part-i\">part 1</a> we discussed the importance of a clearly defined problem hypothesis and started our affordable research with user interviews. Then, in <a href=\"http://alistapart.com/article/discovery-on-a-budget-part-ii\">part 2</a>, we discussed competing hypotheses and “fake-door” A/B testing when you have little to no traffic. Today we’ll conclude the series by considering the pitfalls of the most tempting and <em>seemingly</em> affordable research method of all: surveys. We will also answer the question “when are you done with research and ready to build something?” </p>\n\n<h2>A quick recap on Candor Network</h2>\n\n<p>Throughout this series I’ve used a budget-conscious, and fictitious, startup called <a href=\"http://candor.network/\">Candor Network</a> as my example. Like most startups, Candor Network started simply as an idea:</p>\n\n<p>I bet end-users would be willing to pay directly for a really good social networking tool. But there are lots of big unknowns behind that idea. What exactly would “really good” mean? What are the critical features? And what would be the central motivation for users to try yet another social networking tool?  </p>\n\n<p>To kick off my discovery research, I created a hypothesis based on my own personal experience: that a better social network tool would be one designed with mental health in mind. But after conducting a series of interviews, I realized that people might be <em>more</em> interested in a social network that focused on data privacy as opposed to mental health. I captured this insight in a second, competing hypothesis. Then I launched two corresponding “fake door” landing pages for Candor Network so I could A/B test both ideas. </p>\n\n<p>For the past couple of months I’ve run an A/B test between the two landing pages where half the traffic goes to version A and half to version B. In both versions there is a short, two-question survey. To start our discussion today, we will take a more in-depth look at this seemingly simple survey, and analyze the results of the A/B test. </p>\n\n<h2>Surveys: Proceed with caution</h2>\n\n<p>Surveys are probably the most used, but least useful, research tool. It is <em>ever</em> so tempting to say, “lets run a quick survey” when you find yourself wondering about customer desires or user behavior. Modern web-based tools have made surveys incredibly quick, cheap, and simple to run. But as anyone who has ever tried running a “quick survey” can attest, they rarely, if ever, provide the insight you are looking for.</p>\n\n<p><a href=\"https://medium.com/research-things/on-surveys-5a73dda5e9a0\">In the words of Erika Hall</a>, surveys are “too easy.” They are too easy to create, too easy to disseminate, and too easy to tally. This inherent ease masks the survey’s biggest flaw as a research method: it is far, <em>far</em> too easy to create biased, useless survey questions. And when you run a survey littered with biased, useless questions, you either (1) realize that your results are not reliable and start all over again, or (2) proceed with the analysis and make decisions based on biased results. If you aren’t careful, a survey can be a complete waste of time, or worse, lead you in the wrong direction entirely. </p>\n\n<p>However, sometimes a survey is the only method at your immediate disposal. You might be targeting a user group that is difficult to reach through other convenience- or “guerilla”-style means (think of products that revolve around taboo or sensitive topics—it’s awfully hard to spring those conversations on random people you meet in a coffee shop!). Or you might work for a client that is reluctant to help locate research participants in any way beyond sending an email blast with a survey link. Whatever the case may be, there are times when a survey is the only step forward you can take. If you find yourself in that position, keep the following tips in mind. </p>\n\n<h3>Tip 1: Try to stick to questions about facts, not opinions</h3>\n\n<p>If you were building a website for ordering dog food and supplies, a question like “how many dogs do you own?” can provide key demographic information not available through standard analytics. It’s the sort of question that works great in a short survey. But if you need to ask “why did you decide to adopt a dog in the first place?” then you’re much better off with a user interview.<br><br>\nIf you try asking any kind of “why” question in a survey, you will usually end up with a lot of “I don’t know” and otherwise blank responses. This is because people are, in general, not willing to write an essay on why they’ve made a particular choice (such as choosing to adopt a dog) when they’re in the middle of doing something (like ordering pet food). However, when people schedule time for a phone call, they are more than willing to talk about the “whys” behind their decisions. In short, people like to <em>talk</em> about their opinions, but are generally too lazy or busy to <em>write</em> about their opinions. Save the why questions for later (and see Tip 5).</p>\n\n<h3>Tip 2: Avoid asking about the future</h3>\n\n<p>People live in the present, and only dream about the future. There are a lot of things outside of our control that affect what we will buy, eat, wear, and do in the future. Also, sometimes the future selves we imagine are more <em>aspirational</em> than factual. For example, if you were to ask a random group of people how many times they plan to go to the gym next month, you might be (not so) surprised to see that their prediction is significantly higher than the actual number. It is much better to ask “how many times did you go to the gym this week?” as an indicator of general gym attendance than to ask about any future plans. </p>\n\n<p>I asked a potentially problematic, future-looking question in the Candor Network landing page survey: </p>\n\n<p>How much would you be willing to pay, per year, for Candor Network?</p>\n\n<ul>\n<li>Would not pay anything</li>\n<li>$1</li>\n<li>$5</li>\n<li>$10</li>\n<li>$15</li>\n<li>$20</li>\n<li>$25</li>\n<li>$30</li>\n<li>Would pay more</li>\n</ul>\n<p>In this question, I’m asking participants to think about how much money they would like to spend in the future on a product that doesn’t exist yet. This question is problematic for a number of reasons, but the main issue is that people, in general, don’t know how they <em>really</em> feel about pricing until the exact moment they are poised to make a purchase. Relying on this question to, say, develop my income projections for an investor pitch would be unwise to say the least. (I’ll discuss what I <em>actually</em> plan to do with the answers to this question in the next tip.)</p>\n\n<h3>Tip 3: Know how you are going to analyze responses before you launch the survey</h3>\n\n<p>A lot of times, people will create and send out a survey without thinking through what they are going to do with the results once they are in hand. Depending on the length and type of survey, the analysis could take a significant amount of time. Also, if you were hoping to answer some specific questions with the survey data, you’ll want to make sure you’ve thought through how you’ll arrive at those answers. I recommend that while you are drafting survey questions, you also simultaneously draft an analysis plan.</p>\n\n<p>In your analysis plan, think about what you are ultimately trying to learn from each survey question. How will you know when you’ve arrived at the answer? If you are doing an A/B test like I am, what statistical analysis should you run to see if there is a significant difference between the versions? You should also think about what the numbers will look like and what kinds of graphs or tables you will need to build. Ultimately, you should try to visualize what the data will look like before you gather it, and plan accordingly.</p>\n\n<p>For example, when I created the two survey questions on the Candor Network landing pages, I created a short analysis plan for each. Here is what those plans looked like: </p>\n\n<h4>Analysis plan for question 1: “How much would you be willing to pay per year for Candor Network?”</h4>\n\n<p>Each response will go into one of two buckets:</p>\n\n<ul>\n<li>Bucket 1: said they would not pay any money;</li>\n<li>and Bucket 2: said they might pay some money.</li>\n</ul>\n<p>Everyone who answered “Would not pay anything” goes in Bucket 1. Everyone else goes in Bucket 2. I will interpret every response that falls into Bucket 2 as an indicator of general interest (and I’m <em>not</em> going to put any value on the specific answer selected). To see whether any difference in response between landing page A and B is statistically significant (i.e., attributable to more than just chance), I will use a <a href=\"https://en.wikipedia.org/wiki/Chi-squared_test\"><i>chi-square test</i></a>. (Side note: There are <a href=\"http://thestatsgeek.com/2013/07/22/ab-testing/\">a number of different statistical tests</a> we could use in this scenario, but I like chi-square because of its simplicity. It is a test that’s easy for non-statisticians to run and understand, and it errs on the conservative side.)</p>\n\n<h4>Analysis plan for question 2: “Would you like to be a beta tester or participate in future research?”</h4>\n\n<p>The question only has two possible responses: “yes” and “no.” I will interpret every “yes” response as an indicator of general interest in the idea. Again, a chi-square test will show if there is a significant difference between the two landing pages.  </p>\n\n<h3>Tip 4: Never rely on a survey by itself to make important decisions</h3>\n\n<p>Surveys are hard to get right, and even when they are well made, the results are often approximations of what you <em>really</em> want to measure. However, if you pair a survey with a series of user interviews or contextual inquiries, you will have a richer, more thorough set of data to analyze. In the social sciences, this is called <a href=\"https://alistapart.com/\"><i>triangulation</i></a>. If you use multiple methods to triangulate and study the same phenomenon, you will get a richer, more complete picture. This leads me to my final tip …</p>\n\n<h3>Tip 5: End every survey with an opportunity to participate in future research</h3>\n\n<p>There have been many times in my career when I have launched surveys with only one objective in mind: to gather the contact information of potential study participants. In cases like these, the survey questions themselves are not <em>entirely</em> superfluous, but they are certainly secondary to the main research objective. Shortly after the survey results have been collected, I will select and email a few respondents, inviting them to participate in a user interview or usability study. If I planned on continuing Candor Network, this is absolutely what I would do. </p>\n\n<h2>Finally, the results</h2>\n\n<p>According to Google Optimize, there were a total of 402 sessions in my experiment. Of those sessions, 222 saw version A and 180 saw version B. Within the experiment, I tracked how often the “submit” button on the survey was clicked, and Google Optimize tells me “no clear leader was found” on that measure of engagement. Roughly an equal number of people from each condition submitted the survey. </p>\n\n<p>Here is a breakdown of the number of sessions and survey responses each condition received:</p>\n\n<figure><table>\n<thead><tr>\n<th></th>\n<th>Version A:<br>\nbetter mental health</th>\n<th>Version B:<br>\nprivacy and data security</th>\n<th>Total</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>Sessions</td>\n<td>222</td>\n<td>180</td>\n<td>402</td>\n</tr>\n<tr>\n<td>Survey responses</td>\n<td>76</td>\n<td>68</td>\n<td>144</td>\n</tr>\n</tbody>\n</table></figure><p>When we look at the actual answers to the survey questions, we start to get some more interesting results.</p>\n\n<figure><table>\n<thead><tr>\n<th></th>\n<th>Bucket 1:<br>\nwould not pay any money</th>\n<th>Bucket 2:<br>\nmight pay some money</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>Version A</td>\n<td>25</td>\n<td>51</td>\n</tr>\n<tr>\n<td>Version B</td>\n<td>14</td>\n<td>54</td>\n</tr>\n</tbody>\n</table>\n<p><figcaption>Breakdown of question 1, “How much would you be willing to pay per year for Candor Network?”</figcaption></p>\n</figure><p>Plugging these figures into <a href=\"http://www.socscistatistics.com/tests/chisquare/\">my favorite chi-square calculator</a>, I get the following values: <i>chi-square</i> = 2.7523, p = 0.097113. In general, bigger chi-square values indicate greater differences between the groups. And the <i>p-value</i> is less than 0.1, which suggests that the result is marginally significant (i.e., the result is probably not due to random chance). This gives me a modest indicator that respondents in group B, who saw the “data secure” version of the landing page, are more likely to fall into the “might pay some money” bucket.</p>\n\n<p>And when we look at the breakdown and chi-square calculation of question two, we see similar results. </p>\n\n<figure><table>\n<thead><tr>\n<th></th>\n<th>No</th>\n<th>Yes</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>Version A</td>\n<td>24</td>\n<td>52</td>\n</tr>\n<tr>\n<td>Version B</td>\n<td>13</td>\n<td>55</td>\n</tr>\n</tbody>\n</table>\n<p><figcaption>Breakdown of question 2, “Would you like to be a beta tester or participate in future research?”</figcaption></p>\n</figure><p>The <i>chi-square</i> = 2.9189, and <i>p</i> = .087545. Again, I have a modest indicator that respondents in group B are more likely to say yes to participating in future research. (If you’d like to learn more about how to run and interpret chi-square tests, the Interaction Design department at the University of California, San Diego has provided a <a href=\"https://www.youtube.com/watch?v=w31VWtllBqE\">great video tutorial</a>.)</p>\n\n<h2>How do we know when it’s time to move on?</h2>\n\n<p>I wish I could provide you with a formula for calculating the exact moment when the research is done and it’s time to move on to prototyping, but I’m afraid no such formula exists. There is no definitive way to determine how much research is enough. Every round of research teaches you something new, but you are always left with more questions. As Albert Einstein said, “the more I learn, the more I realize how much I don’t know.”</p>\n\n<p>However, with experience you come to recognize certain hallmarks that indicate it’s time to move on. Erika Hall, in her book <a href=\"https://abookapart.com/products/just-enough-research\"><i>Just Enough Research</i></a>, described it as feeling a “satisfying click.” She says, “[O]ne way to know you’ve done enough research is to listen for the satisfying click. That’s the sound of the pieces falling into place when you have a clear idea of the problem you need to solve and enough information to start working on a solution.” (<i>Just Enough Research</i>, p. 36.)</p>\n\n<p>When it comes to building a product on a budget, you may also want to consider that research is relatively cheap compared to the cost of design and development. The rule I tend to follow is this: continue conducting discovery research until the questions you really want answered can only be answered by putting something in front of users. That is, wait to build something until you absolutely have to. Learn as much as you can about your target market and user base until the only way forward is to put some sketches on paper. </p>\n\n<p>With Candor Network, I’m not quite there yet. There is still plenty of runway to cover in the research cycle. Now that I know that data privacy is a more motivating reason to consider paying for a social networking tool, I need to work out what other features will be essential. In the next round of research, I could do <a href=\"https://www.nngroup.com/articles/thinking-aloud-the-1-usability-tool/\"><i>think-aloud studies</i></a> and ask participants to give me a tour of their Facebook and other social media pages. Or I could continue with more interviews, but recruit from a different source and reach a broader demographic of participants. Regardless of the exact path I choose to take from here, the key is to focus on what the requirements would be for the ultra-private, data-secure social network that users would value. </p>\n\n<h2>A few parting words</h2>\n\n<p>Discovery research helps us learn more about the users we want to help and the problems they need a solution for. It doesn’t have to be expensive either, and it definitely isn’t something that should be omitted from the development cycle. By starting with a problem hypothesis and conducting multiple rounds of research, we can ultimately save time and money. We can move from gut instincts and personal experiences to a tested hypothesis. And when it comes time to launch, we’ll know it’s from a solid foundation of research-backed understanding.</p>\n\n<h2>Recommended reading</h2>\n\n<p>If you’re testing the waters on a new idea and want to jump into some (budget-friendly) discovery research, here are some additional resources to help you along:</p>\n\n<p><b>Books</b></p>\n\n<ul>\n<li>\n<a href=\"https://abookapart.com/products/just-enough-research\"><i>Just Enough Research</i></a>, by Erika Hall</li>\n<li>\n<a href=\"https://rosenfeldmedia.com/books/lean-user-research/\"><i>Validating Product Ideas</i></a>, by Tomer Sharon</li>\n<li>\n<a href=\"https://measuringu.com/book/quantifying-the-user-experiencepractical-statistics-for-user-research/\"><i>Quantifying the User Experience: Practical Statistics for User Research</i></a>, by Jeff Sauro and James Lewis</li>\n</ul>\n<p><b>Articles</b></p>\n\n<ul>\n<li>\n<a href=\"https://usercenteredstartup.com/the-mve-minimum-viable-experiment/\">“The Minimum Viable Experiment,”</a> by Meg Dickey-Kurdziolek</li>\n<li>\n<a href=\"https://www.nngroup.com/articles/ux-research-cheat-sheet/\">“UX Research Cheat Sheet,”</a> by Susan Farrell</li>\n<li>\n<a href=\"https://medium.com/mule-design/on-surveys-5a73dda5e9a0\">“On Surveys,”</a> by Erika Hall</li>\n<li>\n<a href=\"https://measuringu.com/ab-testing/\">“10 Things to Know About A/B Testing,”</a> by Jeff Sauro</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/CCJ3VVRhoAA\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Sometimes we have the luxury of large budgets and deluxe research facilities, and sometimes we’ve got nothing but a research question and the determination to answer it. Throughout the “Discovery on a Budget” series we have discussed strategies for conducting discovery research with very few resources but lots of creativity. In <a href=\"http://alistapart.com/article/discovery-on-a-budget-part-i\">part 1</a> we discussed the importance of a clearly defined problem hypothesis and started our affordable research with user interviews. Then, in <a href=\"http://alistapart.com/article/discovery-on-a-budget-part-ii\">part 2</a>, we discussed competing hypotheses and “fake-door” A/B testing when you have little to no traffic. Today we’ll conclude the series by considering the pitfalls of the most tempting and <em>seemingly</em> affordable research method of all: surveys. We will also answer the question “when are you done with research and ready to build something?” </p>\n\n<h2>A quick recap on Candor Network</h2>\n\n<p>Throughout this series I’ve used a budget-conscious, and fictitious, startup called <a href=\"http://candor.network/\">Candor Network</a> as my example. Like most startups, Candor Network started simply as an idea:</p>\n\n<p>I bet end-users would be willing to pay directly for a really good social networking tool. But there are lots of big unknowns behind that idea. What exactly would “really good” mean? What are the critical features? And what would be the central motivation for users to try yet another social networking tool?  </p>\n\n<p>To kick off my discovery research, I created a hypothesis based on my own personal experience: that a better social network tool would be one designed with mental health in mind. But after conducting a series of interviews, I realized that people might be <em>more</em> interested in a social network that focused on data privacy as opposed to mental health. I captured this insight in a second, competing hypothesis. Then I launched two corresponding “fake door” landing pages for Candor Network so I could A/B test both ideas. </p>\n\n<p>For the past couple of months I’ve run an A/B test between the two landing pages where half the traffic goes to version A and half to version B. In both versions there is a short, two-question survey. To start our discussion today, we will take a more in-depth look at this seemingly simple survey, and analyze the results of the A/B test. </p>\n\n<h2>Surveys: Proceed with caution</h2>\n\n<p>Surveys are probably the most used, but least useful, research tool. It is <em>ever</em> so tempting to say, “lets run a quick survey” when you find yourself wondering about customer desires or user behavior. Modern web-based tools have made surveys incredibly quick, cheap, and simple to run. But as anyone who has ever tried running a “quick survey” can attest, they rarely, if ever, provide the insight you are looking for.</p>\n\n<p><a href=\"https://medium.com/research-things/on-surveys-5a73dda5e9a0\">In the words of Erika Hall</a>, surveys are “too easy.” They are too easy to create, too easy to disseminate, and too easy to tally. This inherent ease masks the survey’s biggest flaw as a research method: it is far, <em>far</em> too easy to create biased, useless survey questions. And when you run a survey littered with biased, useless questions, you either (1) realize that your results are not reliable and start all over again, or (2) proceed with the analysis and make decisions based on biased results. If you aren’t careful, a survey can be a complete waste of time, or worse, lead you in the wrong direction entirely. </p>\n\n<p>However, sometimes a survey is the only method at your immediate disposal. You might be targeting a user group that is difficult to reach through other convenience- or “guerilla”-style means (think of products that revolve around taboo or sensitive topics—it’s awfully hard to spring those conversations on random people you meet in a coffee shop!). Or you might work for a client that is reluctant to help locate research participants in any way beyond sending an email blast with a survey link. Whatever the case may be, there are times when a survey is the only step forward you can take. If you find yourself in that position, keep the following tips in mind. </p>\n\n<h3>Tip 1: Try to stick to questions about facts, not opinions</h3>\n\n<p>If you were building a website for ordering dog food and supplies, a question like “how many dogs do you own?” can provide key demographic information not available through standard analytics. It’s the sort of question that works great in a short survey. But if you need to ask “why did you decide to adopt a dog in the first place?” then you’re much better off with a user interview.<br><br>\nIf you try asking any kind of “why” question in a survey, you will usually end up with a lot of “I don’t know” and otherwise blank responses. This is because people are, in general, not willing to write an essay on why they’ve made a particular choice (such as choosing to adopt a dog) when they’re in the middle of doing something (like ordering pet food). However, when people schedule time for a phone call, they are more than willing to talk about the “whys” behind their decisions. In short, people like to <em>talk</em> about their opinions, but are generally too lazy or busy to <em>write</em> about their opinions. Save the why questions for later (and see Tip 5).</p>\n\n<h3>Tip 2: Avoid asking about the future</h3>\n\n<p>People live in the present, and only dream about the future. There are a lot of things outside of our control that affect what we will buy, eat, wear, and do in the future. Also, sometimes the future selves we imagine are more <em>aspirational</em> than factual. For example, if you were to ask a random group of people how many times they plan to go to the gym next month, you might be (not so) surprised to see that their prediction is significantly higher than the actual number. It is much better to ask “how many times did you go to the gym this week?” as an indicator of general gym attendance than to ask about any future plans. </p>\n\n<p>I asked a potentially problematic, future-looking question in the Candor Network landing page survey: </p>\n\n<p>How much would you be willing to pay, per year, for Candor Network?</p>\n\n<ul>\n<li>Would not pay anything</li>\n<li>$1</li>\n<li>$5</li>\n<li>$10</li>\n<li>$15</li>\n<li>$20</li>\n<li>$25</li>\n<li>$30</li>\n<li>Would pay more</li>\n</ul>\n<p>In this question, I’m asking participants to think about how much money they would like to spend in the future on a product that doesn’t exist yet. This question is problematic for a number of reasons, but the main issue is that people, in general, don’t know how they <em>really</em> feel about pricing until the exact moment they are poised to make a purchase. Relying on this question to, say, develop my income projections for an investor pitch would be unwise to say the least. (I’ll discuss what I <em>actually</em> plan to do with the answers to this question in the next tip.)</p>\n\n<h3>Tip 3: Know how you are going to analyze responses before you launch the survey</h3>\n\n<p>A lot of times, people will create and send out a survey without thinking through what they are going to do with the results once they are in hand. Depending on the length and type of survey, the analysis could take a significant amount of time. Also, if you were hoping to answer some specific questions with the survey data, you’ll want to make sure you’ve thought through how you’ll arrive at those answers. I recommend that while you are drafting survey questions, you also simultaneously draft an analysis plan.</p>\n\n<p>In your analysis plan, think about what you are ultimately trying to learn from each survey question. How will you know when you’ve arrived at the answer? If you are doing an A/B test like I am, what statistical analysis should you run to see if there is a significant difference between the versions? You should also think about what the numbers will look like and what kinds of graphs or tables you will need to build. Ultimately, you should try to visualize what the data will look like before you gather it, and plan accordingly.</p>\n\n<p>For example, when I created the two survey questions on the Candor Network landing pages, I created a short analysis plan for each. Here is what those plans looked like: </p>\n\n<h4>Analysis plan for question 1: “How much would you be willing to pay per year for Candor Network?”</h4>\n\n<p>Each response will go into one of two buckets:</p>\n\n<ul>\n<li>Bucket 1: said they would not pay any money;</li>\n<li>and Bucket 2: said they might pay some money.</li>\n</ul>\n<p>Everyone who answered “Would not pay anything” goes in Bucket 1. Everyone else goes in Bucket 2. I will interpret every response that falls into Bucket 2 as an indicator of general interest (and I’m <em>not</em> going to put any value on the specific answer selected). To see whether any difference in response between landing page A and B is statistically significant (i.e., attributable to more than just chance), I will use a <a href=\"https://en.wikipedia.org/wiki/Chi-squared_test\"><i>chi-square test</i></a>. (Side note: There are <a href=\"http://thestatsgeek.com/2013/07/22/ab-testing/\">a number of different statistical tests</a> we could use in this scenario, but I like chi-square because of its simplicity. It is a test that’s easy for non-statisticians to run and understand, and it errs on the conservative side.)</p>\n\n<h4>Analysis plan for question 2: “Would you like to be a beta tester or participate in future research?”</h4>\n\n<p>The question only has two possible responses: “yes” and “no.” I will interpret every “yes” response as an indicator of general interest in the idea. Again, a chi-square test will show if there is a significant difference between the two landing pages.  </p>\n\n<h3>Tip 4: Never rely on a survey by itself to make important decisions</h3>\n\n<p>Surveys are hard to get right, and even when they are well made, the results are often approximations of what you <em>really</em> want to measure. However, if you pair a survey with a series of user interviews or contextual inquiries, you will have a richer, more thorough set of data to analyze. In the social sciences, this is called <a href=\"https://alistapart.com/\"><i>triangulation</i></a>. If you use multiple methods to triangulate and study the same phenomenon, you will get a richer, more complete picture. This leads me to my final tip …</p>\n\n<h3>Tip 5: End every survey with an opportunity to participate in future research</h3>\n\n<p>There have been many times in my career when I have launched surveys with only one objective in mind: to gather the contact information of potential study participants. In cases like these, the survey questions themselves are not <em>entirely</em> superfluous, but they are certainly secondary to the main research objective. Shortly after the survey results have been collected, I will select and email a few respondents, inviting them to participate in a user interview or usability study. If I planned on continuing Candor Network, this is absolutely what I would do. </p>\n\n<h2>Finally, the results</h2>\n\n<p>According to Google Optimize, there were a total of 402 sessions in my experiment. Of those sessions, 222 saw version A and 180 saw version B. Within the experiment, I tracked how often the “submit” button on the survey was clicked, and Google Optimize tells me “no clear leader was found” on that measure of engagement. Roughly an equal number of people from each condition submitted the survey. </p>\n\n<p>Here is a breakdown of the number of sessions and survey responses each condition received:</p>\n\n<figure><table>\n<thead><tr>\n<th></th>\n<th>Version A:<br>\nbetter mental health</th>\n<th>Version B:<br>\nprivacy and data security</th>\n<th>Total</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>Sessions</td>\n<td>222</td>\n<td>180</td>\n<td>402</td>\n</tr>\n<tr>\n<td>Survey responses</td>\n<td>76</td>\n<td>68</td>\n<td>144</td>\n</tr>\n</tbody>\n</table></figure><p>When we look at the actual answers to the survey questions, we start to get some more interesting results.</p>\n\n<figure><table>\n<thead><tr>\n<th></th>\n<th>Bucket 1:<br>\nwould not pay any money</th>\n<th>Bucket 2:<br>\nmight pay some money</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>Version A</td>\n<td>25</td>\n<td>51</td>\n</tr>\n<tr>\n<td>Version B</td>\n<td>14</td>\n<td>54</td>\n</tr>\n</tbody>\n</table>\n<p><figcaption>Breakdown of question 1, “How much would you be willing to pay per year for Candor Network?”</figcaption></p>\n</figure><p>Plugging these figures into <a href=\"http://www.socscistatistics.com/tests/chisquare/\">my favorite chi-square calculator</a>, I get the following values: <i>chi-square</i> = 2.7523, p = 0.097113. In general, bigger chi-square values indicate greater differences between the groups. And the <i>p-value</i> is less than 0.1, which suggests that the result is marginally significant (i.e., the result is probably not due to random chance). This gives me a modest indicator that respondents in group B, who saw the “data secure” version of the landing page, are more likely to fall into the “might pay some money” bucket.</p>\n\n<p>And when we look at the breakdown and chi-square calculation of question two, we see similar results. </p>\n\n<figure><table>\n<thead><tr>\n<th></th>\n<th>No</th>\n<th>Yes</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>Version A</td>\n<td>24</td>\n<td>52</td>\n</tr>\n<tr>\n<td>Version B</td>\n<td>13</td>\n<td>55</td>\n</tr>\n</tbody>\n</table>\n<p><figcaption>Breakdown of question 2, “Would you like to be a beta tester or participate in future research?”</figcaption></p>\n</figure><p>The <i>chi-square</i> = 2.9189, and <i>p</i> = .087545. Again, I have a modest indicator that respondents in group B are more likely to say yes to participating in future research. (If you’d like to learn more about how to run and interpret chi-square tests, the Interaction Design department at the University of California, San Diego has provided a <a href=\"https://www.youtube.com/watch?v=w31VWtllBqE\">great video tutorial</a>.)</p>\n\n<h2>How do we know when it’s time to move on?</h2>\n\n<p>I wish I could provide you with a formula for calculating the exact moment when the research is done and it’s time to move on to prototyping, but I’m afraid no such formula exists. There is no definitive way to determine how much research is enough. Every round of research teaches you something new, but you are always left with more questions. As Albert Einstein said, “the more I learn, the more I realize how much I don’t know.”</p>\n\n<p>However, with experience you come to recognize certain hallmarks that indicate it’s time to move on. Erika Hall, in her book <a href=\"https://abookapart.com/products/just-enough-research\"><i>Just Enough Research</i></a>, described it as feeling a “satisfying click.” She says, “[O]ne way to know you’ve done enough research is to listen for the satisfying click. That’s the sound of the pieces falling into place when you have a clear idea of the problem you need to solve and enough information to start working on a solution.” (<i>Just Enough Research</i>, p. 36.)</p>\n\n<p>When it comes to building a product on a budget, you may also want to consider that research is relatively cheap compared to the cost of design and development. The rule I tend to follow is this: continue conducting discovery research until the questions you really want answered can only be answered by putting something in front of users. That is, wait to build something until you absolutely have to. Learn as much as you can about your target market and user base until the only way forward is to put some sketches on paper. </p>\n\n<p>With Candor Network, I’m not quite there yet. There is still plenty of runway to cover in the research cycle. Now that I know that data privacy is a more motivating reason to consider paying for a social networking tool, I need to work out what other features will be essential. In the next round of research, I could do <a href=\"https://www.nngroup.com/articles/thinking-aloud-the-1-usability-tool/\"><i>think-aloud studies</i></a> and ask participants to give me a tour of their Facebook and other social media pages. Or I could continue with more interviews, but recruit from a different source and reach a broader demographic of participants. Regardless of the exact path I choose to take from here, the key is to focus on what the requirements would be for the ultra-private, data-secure social network that users would value. </p>\n\n<h2>A few parting words</h2>\n\n<p>Discovery research helps us learn more about the users we want to help and the problems they need a solution for. It doesn’t have to be expensive either, and it definitely isn’t something that should be omitted from the development cycle. By starting with a problem hypothesis and conducting multiple rounds of research, we can ultimately save time and money. We can move from gut instincts and personal experiences to a tested hypothesis. And when it comes time to launch, we’ll know it’s from a solid foundation of research-backed understanding.</p>\n\n<h2>Recommended reading</h2>\n\n<p>If you’re testing the waters on a new idea and want to jump into some (budget-friendly) discovery research, here are some additional resources to help you along:</p>\n\n<p><b>Books</b></p>\n\n<ul>\n<li>\n<a href=\"https://abookapart.com/products/just-enough-research\"><i>Just Enough Research</i></a>, by Erika Hall</li>\n<li>\n<a href=\"https://rosenfeldmedia.com/books/lean-user-research/\"><i>Validating Product Ideas</i></a>, by Tomer Sharon</li>\n<li>\n<a href=\"https://measuringu.com/book/quantifying-the-user-experiencepractical-statistics-for-user-research/\"><i>Quantifying the User Experience: Practical Statistics for User Research</i></a>, by Jeff Sauro and James Lewis</li>\n</ul>\n<p><b>Articles</b></p>\n\n<ul>\n<li>\n<a href=\"https://usercenteredstartup.com/the-mve-minimum-viable-experiment/\">“The Minimum Viable Experiment,”</a> by Meg Dickey-Kurdziolek</li>\n<li>\n<a href=\"https://www.nngroup.com/articles/ux-research-cheat-sheet/\">“UX Research Cheat Sheet,”</a> by Susan Farrell</li>\n<li>\n<a href=\"https://medium.com/mule-design/on-surveys-5a73dda5e9a0\">“On Surveys,”</a> by Erika Hall</li>\n<li>\n<a href=\"https://measuringu.com/ab-testing/\">“10 Things to Know About A/B Testing,”</a> by Jeff Sauro</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/CCJ3VVRhoAA\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["User Experience, User Research"],"color":"tan","category":"A List Apart:","date":"2018-06-21 12:59:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Getting Started With Machine Learning","pubDate":"2018-09-07 12:00:26","link":"https://www.smashingmagazine.com/2018/09/getting-started-with-machine-learning/","guid":"https://www.smashingmagazine.com/2018/09/getting-started-with-machine-learning/","author":"Alvin Wan","thumbnail":"https://www.smashingmagazine.com/images/books/design-systems--large-opt.png","description":"The goal of machine learning is to find patterns in data and use those patterns to make predictions. It can also give us a framework to discuss machine learning problems and solutions — as you’ll see in this article.\nFirst, we will start with definitions and applications for machine learning. Then, we will discuss abstractions in machine learning and use that to frame our discussion: data, models, optimization models, and optimization algorithms.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/09/getting-started-with-machine-learning/\">\n<title>Getting Started With Machine Learning</title>\n<article><header><h1>Getting Started With Machine Learning</h1>\n                  \n                    \n                    <address>Alvin Wan</address>\n                  \n                  <time datetime=\"2018-09-07T14:00:26+02:00\" class=\"op-published\">2018-09-07T14:00:26+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>The goal of machine learning is to find patterns in data and use those patterns to make predictions. It can also give us a framework to discuss machine learning problems and solutions — as you’ll see in this article.</p>\n\n<p>First, we will start with definitions and applications for machine learning. Then, we will discuss abstractions in machine learning and use that to frame our discussion: data, models, optimization models, and optimization algorithms. Later on in the article, we will discuss fundamental topics that underlie all machine learning methods and conclude with practical guidance for getting started with using machine learning. By the end, you should have an understanding of how to advance your practice and study of machine learning.</p>\n\n<p>Let’s begin.</p>\n\n<h3>So, What Exactly Is Machine Learning?</h3>\n\n<p>Machine learning is generically a set of techniques to find patterns in data. Applications range from self-driving cars to personal AI assistants, from translating between French and Taiwanese to translating between voice and text. There are a few common applications of machine learning that already or could potentially permeate your day-to-day.</p>\n\n<ol>\n<li>\n<strong>Detecting anomalies</strong><br>\nRecognize spikes in website traffic or highlight abnormal bank activity.</li>\n<li>\n<strong>Recommend similar content</strong><br>\nFind products you may be looking for or even Smashing Magazine articles that are relevant.</li>\n<li>\n<strong>Predict the future</strong><br>\nPlan the path of neighboring vehicles or identify and extrapolate market trends for stocks.</li>\n</ol>\n<p>The above are few of many applications of machine learning, but most applications tie back to learning the underlying <em>distribution</em> of data. A distribution specifies events and probability of each event. For example:</p>\n\n<ul>\n<li>With 50% probability, you buy an item $5 or less.</li>\n<li>With 25% probability, you buy an item $5-$10.</li>\n<li>With 24% probability, you buy an item $10-100.</li>\n<li>With 1% probability, you buy an item &gt; $100.</li>\n</ul>\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\" data-remove=\"true\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n        <p>\n          Is your pattern library up to date today? <em>Alla Kholmatova</em> has just finished a fully fledged book on <strong>Design Systems</strong> and how to get them right. With common traps, gotchas and the lessons she learned. Hardcover, eBook. <em>Just sayin'.</em>\n        </p>\n        <a href=\"https://smashed.by/uxpaneldsbook\">\n          <button class=\"btn btn--green btn--large\">\n            Table of Contents →\n          </button>\n        </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/uxpaneldsbook\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://www.smashingmagazine.com/images/books/design-systems--large-opt.png\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><p>Using this distribution, we can accomplish all of our tasks above:</p>\n\n<ol>\n<li>\n<strong>Detecting anomalies</strong><br>\nWith a $100 purchase, we can confidently call this an anomaly.</li>\n<li>\n<strong>Recommend similar content</strong><br>\nA purchase of $3 means we should recommend more items $5 or less.</li>\n<li>\n<strong>Predict the future</strong><br>\nWithout any prior information, we can predict that the next purchase will be $5 or less.</li>\n</ol>\n<p>With a distribution of data, we can accomplish a myriad of tasks. In sum, one goal in machine learning is to learn this distribution.</p>\n\n<p>Even more generically, our goal is to learn a specific function with particular inputs and outputs. We call this function our <em>model</em>. Our input is denoted <code>x</code>. Say our model, which accepts input <code>x</code>, is</p>\n\n<pre><code class=\"language-javascript\">f(x) = ax\n</code></pre>\n\n<p>Here, <code>a</code> is a <em>parameter</em> of our model. Each parameter corresponds to a different instance of our model. In other words, the model where <code>a=2</code> is different from the model where <code>a=3</code>. In machine learning, our goal is to learn this parameter, changing it until we do “well.” How do we determine which values of <code>a</code> do “well”?</p>\n\n<p>We need to define a way to evaluate our model, for each parameter <code>a</code>. To start, the output of <code>f(x)</code> is our <em>prediction</em>. We will refer to <code>y</code> as our <em>label</em>, meaning the true and desired output. With our predictions and our labels, we can define a <em>loss</em> function. One such loss function is simply the difference between our prediction and our label, <code>|f(x) - y|</code>. Using this loss function, we can then evaluate different parameters for our model. Picking the best parameter for our model is known as <em>training</em>. If we have a few possible parameters, we can simply try each parameter and pick the one with the smallest loss!</p>\n\n<p>However, most problems are not as simple. <strong>What happens if there are an infinite number of different parameters?</strong> Let’s say all decimal values between 0 and 1? Between 0 and infinity? This brings us to our next topic: abstractions in machine learning. We will discuss different facets of machine learning, to compartmentalize your knowledge into data, models, objectives, and methods of solving objectives. Beyond learning the right parameter, there are plenty of other challenges: how do we break down a problem as complex as controlling a robot? How do we control a self-driving car? What does it mean to train a model that identifies faces? The section below will help you organize answers to these questions.</p>\n\n<h3>Abstractions</h3>\n\n<p>There are countless topics in machine learning — at various levels of specificity. To better understand where each piece fits in the larger picture, consider the following abstractions for machine learning. These abstractions compartmentalize our discussion of machine learning topics, and knowing them will make it easier for you to frame topics. The following classifications are taken from Professor Jonathan Shewchuck at UC Berkeley:</p>\n\n<ol>\n<li>\n<strong>Application and Data</strong><br>Consider the possible inputs and the desired output for the problem.<br><blockquote>\n<strong>Questions</strong>: What is your goal? How is your data structured? Are there labels? Is it reasonable for us to extract output from the provided inputs?<br><br><strong>Example</strong>: The goal is to classify pictures of handwritten digits. The input is an image of a handwritten number. The output is a number.</blockquote>\n<br>\n</li>\n    <li>\n<strong>Model</strong><br>Determine the class of functions under consideration.<br><blockquote>\n<strong>Questions</strong>: Are linear functions sufficient? Quadratic functions? Polynomials? What types of patterns are we interested in? Are neural networks appropriate? Logistic regression?<br><br><strong>Example</strong>: Linear regression</blockquote>\n<br>\n</li>\n    <li>\n<strong>Optimization Problem</strong><br>Formulate a concrete objective in mathematics.<br><blockquote>\n<strong>Questions</strong>: How do we define loss? How do we define success? Should we apply additionally penalties to bias our algorithm? Are there imbalances in the data our objective needs to consider?<br><br><strong>Example</strong>: Find `x` that minimizes <code>|Ax-b|^2</code>\n</blockquote>\n<br>\n</li>\n    <li>\n<strong>Optimization Algorithm</strong><br>Determine how you will solve the optimization problem.<br><blockquote>\n<strong>Questions</strong>: Can we compute a solution by hand? Do we need an iterative algorithm? Can we convert this problem to an equivalent but easier-to-solve objective, and solve that one?<br><br><strong>Example</strong>: Take derivative of the function. Set it to zero. Solve for our optimal parameter.</blockquote>\n<br>\n</li>\n</ol>\n<h4>Abstraction 1: Data</h4>\n\n<p>In practice, collecting, managing, and packaging data is 90% of the battle. The data contains <em>samples</em> in which each sample is a specific realization of our input. For example, our <em>input</em> may generically be images of dogs. The first <em>sample</em> is specifically a picture of Maxie, my Bernese Mountain dog-chow chow mix at home. The second sample is specifically a picture of Charlie, a young corgi.</p>\n\n<p>While training your model, it is important to handle your data properly. This means separating our data accordingly and not peeking prematurely at any set of data. In general, our data is split into three portions:</p>\n\n<ol>\n<li>\n<strong>Training set</strong><br>\nThis is the dataset you train your model on. The model may see this set hundreds of times.</li>\n<li>\n<strong>Validation set</strong><br>\nThis is the dataset you evaluate your model on, to assess accuracy and tune your model or method accordingly.</li>\n<li>\n<strong>Test set</strong><br>\nThis is the dataset you evaluate on to assess accuracy, once at the very end. Running on the test set prematurely could mean your model overfits to the test set as well, so run only once. We will discuss the notion of “overfitting” in more detail below.</li>\n</ol>\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h4>Abstraction 2: Models</h4>\n\n<p>Machine learning methods are split into the following two:</p>\n\n<h5>Supervised Learning</h5>\n\n<p>In supervised learning, our algorithm has access to labeled data. Still, we explore the following two classes of problems:</p>\n\n<ul>\n<li>\n<strong>Classification</strong><br>Determine which of <code>k</code> classes <code>{C_1, C_2, ... C_k}</code> to which each sample belongs, e.g. “Which breed of dog is this?” The dog could be one of <code>{\"corgi\", \"bernese mountain dog\", \"chow chow\"...}</code>\n</li>\n  <li>\n<strong>Regression</strong><br>Determine a real-valued output (which are often probabilities), e.g. “What is the probability this patient has neuroblastoma (eye cancer)?”</li>\n</ul>\n<h5>Unsupervised Learning</h5>\n\n<p>In unsupervised learning, our algorithm does not have access to labels, and we explore the following classes of problems:</p>\n\n<ul>\n<li>\n<strong>Clustering</strong><br>Cluster samples into <code>k</code> clusters. We do not have a label for the resulting clusters. “Which DNA sequences are most similar?”</li>\n  <li>\n<strong>Dimensionality reduction</strong><br>Reduce the number of “unique” (linearly independent) features we consider. “What are common features of faces?”</li>\n</ul>\n<h4>Abstraction 3: Optimization Objective</h4>\n\n<p>Before discussing optimization objectives and algorithms, we’ll need an example to discuss. Least squares are the canonical example. We will restrict our attention to a specific form of least squares: Let us return to our grade-school problem of fitting a line to some points.</p>\n\n<p>Let’s recall the equation of a line:</p>\n\n<pre><code class=\"language-javascript\">y = m * x + b\n</code></pre>\n\n<p>Assume we have such a line. This is the true underlying model.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png\" sizes=\"100vw\" alt=\" true model\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tTrue model. The line that generates our data. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6680e9a9-e6f1-4853-bb47-7bf384f6e366/1-getting-started-with-ml.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Now, sample points from this line.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png\" sizes=\"100vw\" alt=\"true data\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tTrue data. Data that is sampled from the true model. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c15add57-28c5-4e12-9b9a-24c254f0ff0e/2-getting-started-with-ml.png\">Large preview</a>)\n\t\t</figcaption></figure><p>For each point, jiggle it a little bit. In other words, add <em>noise</em>, which is random perturbations. This noise is due to real-world processes.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png\" sizes=\"100vw\" alt=\"noise\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tNoise. Real-world perturbations that affect our data. This may be due to imprecision in measurements, lossy compression, and so on. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48c8c95-f505-4300-bd27-89ae9f087078/3-getting-started-with-ml.png\">Large preview</a>)\n\t\t</figcaption></figure><p>This gives us our <em>observed data</em>. We will call these points <code>(x_1, y_1), (x_2, y_2), (x_3, y_3)...</code>. This is the training data we are given to train a model on. We do not have access to the underlying line that generated this data (the original green line).</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png\" sizes=\"100vw\" alt=\"observations\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tObservations. Our true data with noise and ultimately what we will use to train a model. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b1e254b-93c3-4158-86ea-a5876de90992/4-getting-started-with-ml.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Say we have an estimate for the <em>parameters</em> of a line. In this case, the parameters are <code>m</code> and <code>b</code>. This gives us a predicted line, drawn in blue below.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png\" sizes=\"100vw\" alt=\"proposed model\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tProposed model. The result of training a model on our observations. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8499fa-ebeb-4c3b-b30b-c61c2a380aa6/5-getting-started-with-ml.png\">Large preview</a>)\n\t\t</figcaption></figure><p>We wish to evaluate our blue line, to see how accurate it is. To start, we use <code>m</code> and <code>b</code> to estimate <code>y</code>. We compute a set of <code>ŷ</code> values.</p>\n\n<pre><code class=\"language-javascript\">ŷ_i = m * x_i + b\n</code></pre>\n\n<p>The error for a single predicted <code>ŷ_i</code> and true <code>y_i</code> is simply</p>\n\n<pre><code class=\"language-javascript\">(ŷ_i−y_i)^2\n</code></pre>\n\n<p>Our total error is then the sum of squared differences, across all samples. This yields our loss.</p>\n\n<pre><code class=\"language-javascript\">∑(ŷ_i−y_i)^2\n</code></pre>\n\n<p>Presented visually, this is the vertical distance between our observed points and our predicted line.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png\" sizes=\"100vw\" alt=\"observed error\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tObserved error. The distance between our observed data and our proposed model. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2ba7e3c-e380-48d0-96a9-117d8886eab4/6-getting-started-with-ml.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Plugging in <code>ŷ_i</code> from above, we then have the total error in terms of <code>m</code> and <code>b</code>.</p>\n\n<pre><code class=\"language-javascript\">∑(m * x_i + b − y_i)^2\n</code></pre>\n\n<p>Finally, we want to minimize this quantity. This yields our <strong>objective function</strong>, abstraction 3 from our list of abstractions above.</p>\n\n<pre><code class=\"language-javascript\">min_{m, b} ∑(m * x_i + b−y_i)^2\n</code></pre>\n\n<p>The above states in mathematics that the goal is to minimize the loss by changing values of <code>m</code> and <code>b</code>. The purpose of this section was to motivate fitting a line of best of fit, a special case of <em>least squares</em>. Additionally, we showed examined the <em>least squares objective</em>. Next, we need to solve this objective.</p>\n\n<h4>Abstraction 4: Optimization Algorithm</h4>\n\n<p>How do we minimize this? We take the derivative with respect to <code>m</code>`, set to 0 and solve. After solving, we obtain the analytical solution. Solving for an analytical solution was our <strong>optimization algorithm</strong>, the fourth and final abstraction in our list of abstractions.</p>\n\n<p><strong>Note</strong>: <em>The important portion of this section is to inform you that least squares have a closed form solution, meaning that the optimal solution for our problem can be computed, explicitly. To understand why this is significant, we need to examine a problem without a closed-form solution. For example, we could never solve <code>x=logx</code> for a standard base-10 logarithm. Try graphing these two lines, and we see that they never intersect. In which case, we have no closed-form solution. On the other hand, ordinary least squares have a closed-form — which is good news. For any problem reduced to least squares, we can then compute the optimal solution, given our data and assumptions.</em></p>\n\n<h3>Fundamental Topics</h3>\n\n<p>Before studying more methods, it is necessary to understand the undercurrents of machine learning. These will govern the initial study of machine learning:</p>\n\n<h4>Bias-Variance Tradeoffs</h4>\n\n<p>One of machine learning’s most dreaded evils is <em>overfitting</em> in which a model is too closely tailored to the training data. In the limit, the most overfit model will memorize the data. This might mean that if one does well on exam A, one repeats every detail for exam B — down to the duration of an inter-exam restroom trip and whether or not one used the urinal.</p>\n\n<p>A related but less common evil is <em>underfitting</em>, where the model is not sufficiently expressive to capture important information in the data. This could mean that one looks only at homework scores to predict exam scores, ignoring the effects of reading notes, completing practice exams, and more. Our goal is to build a model that generalizes to new examples while making the appropriate distinctions.</p>\n\n<p>Given these two evils, there are a variety of approaches to fighting both. One is modifying your optimization objective to include a term that penalizes model complexity. Another is tuning <em>hyperparameters</em> that govern either your objective or your algorithm, which may correspond to notions such as “training speed” or “momentum.” The bias-variance tradeoff gives us a precise way of defining and handling both overfitting and underfitting.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h4>Maximum Likelihood Estimation (MLE) + Maximum A Posteriori (MAP)</h4>\n\n<p>Say we have ice cream flavors A, B, and C. We observe different recipes. Our goal is to predict which flavor each recipe produces.</p>\n\n<p>One way to predict flavors based on recipes is to first estimate the following probability:</p>\n\n<pre><code class=\"language-javascript\">P(flavor|recipe)\n</code></pre>\n\n<p>Given this probability and a new recipe, how can we predict the flavor? Given a recipe, simply consider the probability of each of the flavors A, B, C.</p>\n\n<pre><code class=\"language-javascript\">P(flavor=A|recipe) = 0.4\nP(flavor=B|recipe) = 0.5\nP(flavor=C|recipe) = 0.1\n</code></pre>\n\n<p>Then, pick the flavor that has the highest probability. Above, flavor B has the highest probability, given our recipe. Thus, we predict flavor B. Restating the above rule in mathematics, we have:</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">argmax_{flavor} P(flavor|recipe)  # argmax means take the flavor that corresponds to the max value\n</code></pre>\n\n<p>However, the only information at our disposal is the reverse: the probability of some recipe given the flavor.</p>\n\n<pre><code class=\"language-javascript\">P(recipe|flavor)\n</code></pre>\n\n<p>For Maximum Likelihood Estimates, we make assumptions and find that the two values are proportional.</p>\n\n<pre><code class=\"language-javascript\">P(recipe|flavor) ~ P(flavor|recipe)\n</code></pre>\n\n<p>Since we’re only interested in the class with maximum probability <code>P(flavor|recipe)</code>, we can simply find the class with maximum probability, for a proportional value <code>P(recipe|flavor)</code>.</p>\n\n<pre><code class=\"language-javascript\">argmax_{flavor} P(recipe|flavor)\n</code></pre>\n\n<p>MLE offers the above objective as one way to predict, using the probability of data given the labels.</p>\n\n<p>However, allow me to convince you that it’s reasonable to assume we have <code>(x|y)</code>. We can estimate this from observed, real-world data. For example, say we wish to estimate the number of marbles each student in your class carries, based on the number of rubber ducks the student carries.</p>\n\n<p>Each student’s number of rubber ducks is the data <code>x</code>, and the number of marbles she or he has is y. We will use this sample data below.</p>\n\n<pre><code class=\"language-javascript\">| x | y |\n|---|---|\n| 1 | 2 |\n| 1 | 1 |\n| 1 | 2 |\n| 2 | 1 |\n| 2 | 2 |\n| 1 | 2 |\n</code></pre>\n\n<p>For every <code>y</code>, we can compute the number of <code>x</code>, given us <code>P(x|y)</code>. For the first one, <code>P(x=1|y=1)</code>, consider all of the rows where <code>y=1</code>. There are 2, and only one of them has <code>x=1</code>. Therefore, <code>P(x=1|y=1) = <sup>1</sup>⁄<sub>2</sub></code>. We can repeat this for all values of <code>x</code> and <code>y</code>.</p>\n\n<pre><code class=\"language-javascript\">P(x=1|y=1) = 1/2\nP(x=2|y=1) = 1/2\nP(x=1|y=2) = 3/4\nP(x=2|y=2) = 1/4\n</code></pre>\n\n<h4>Featurizations, Regularization</h4>\n\n<p>Least squares draw lines of best fit for us. Note that least squares can fit the model anytime the model is linear in its inputs <code>x</code> and outputs <code>y</code>.</p>\n\n<p>Say <code>m=1</code>. We have the following equation:</p>\n\n<pre><code class=\"language-javascript\">y = x + b\n</code></pre>\n\n<p>However, what if we had data that doesn’t generally follow a line? Specifically, consider a set of data sampled along a circle. Recall that the equation for a circle is:</p>\n\n<pre><code class=\"language-javascript\">x^2 + y^2 = r^2\n</code></pre>\n\n<p>Can least squares fit this well? As it stands, no. The model is <em>not</em> linear in its inputs <code>x</code> and outputs <code>y</code>. Instead, the model above is <em>quadratic</em> in <code>x</code> and <code>y</code>. However, it turns out that we can use <em>still</em> use least squares, just with a modification. To accomplish this, <strong>we featurize our samples</strong>.</p>\n\n<p>Consider the following: what if the input to our model was <code>x_ = x^2</code> and <code>y_ = y^2</code>? Then, our model is trying to learn the following model.</p>\n\n<pre><code class=\"language-javascript\">x_ + y_ = r^2\n</code></pre>\n\n<p>Is this linear in the model’s input <code>x_</code> and output <code>y_</code>? Yes. Note the subtlety. The current model is still quadratic in <code>x</code>,<code>y</code> but it is linear in <code>x_</code>,<code>y_</code>. This means that least squares can fit the data if we square <code>x^2</code> and <code>y^2</code> before training least squares.</p>\n\n<p>More generally, we can take any non-linear featurization to apply least squares to labels that are non-linear in the features. This is a fairly powerful tool, known as <em>featurization</em>.</p>\n\n<p>However, featurizations lead to more complex models. Regularization allows us to penalize model complexity, ensuring that we do not overfit the training data.</p>\n\n<h3>Conclusion</h3>\n\n<p>In this article, you’ve touched on major topics in the fundamentals of machine learning. Using the abstractions above, you now have a framework to discuss machine learning problems and solutions. Using the fundamental topics above, you now also have quintessential concepts to learn more about, giving you the necessary tools to evaluate risk and other concerns in a machine learning application.</p>\n\n<h4>Further Reading</h4>\n\n<p>We will continue to explore these topics in depth, both the undercurrents of machine learning and specific methods. In the interim, here are resources to further your study and exploration of machine learning:</p>\n\n<ul>\n<li>“<a href=\"http://eecs189.org/\">Introduction to Machine Learning</a>,” Machine Learning course CS189, UC Berkeley</li>\n<li>\n<a href=\"http://numpy.org/\">NumPy</a> (for efficient linear algebra utilities)</li>\n<li>\n<a href=\"http://scikit-learn.org/\">scikit-learn</a> (for out-of-the-box machine learning methods)</li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-09-07 12:00:26","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Designing A Textbox, Unabridged","pubDate":"2018-09-06 11:30:16","link":"https://www.smashingmagazine.com/2018/09/designing-a-textbox-unabridged/","guid":"https://www.smashingmagazine.com/2018/09/designing-a-textbox-unabridged/","author":"Shane Hudson","thumbnail":"https://www.smashingmagazine.com/images/smashing-cat/smashing-tv-box-cat.svg","description":"Ever spent an hour (or even a day) working on something just to throw the whole lot away and redo it in five minutes? That isn’t just a beginner’s code mistake; it is a real-world situation that you can easily find yourself in especially if the problem you’re trying to solve isn’t well understood to begin with.\nThis is why I’m such a big proponent of upfront design, user research, and creating often multiple prototypes — also known as the old adage of “You don’t know what you don’t know.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/09/designing-a-textbox-unabridged/\">\n<title>Designing A Textbox, Unabridged</title>\n<article><header><h1>Designing A Textbox, Unabridged</h1>\n                  \n                    \n                    <address>Shane Hudson</address>\n                  \n                  <time datetime=\"2018-09-06T13:30:16+02:00\" class=\"op-published\">2018-09-06T13:30:16+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>Ever spent an hour (or even a day) working on something just to throw the whole lot away and redo it in five minutes? That isn’t just a beginner’s code mistake; it is a real-world situation that you can easily find yourself in especially if the problem you’re trying to solve isn’t well understood to begin with.</p>\n\n<p>This is why I’m such a big proponent of upfront design, user research, and creating often multiple prototypes — also known as the old adage of “You don’t know what you don’t know.” At the same time, it is very easy to look at something someone else has made, which may have taken them quite a lot of time, and think it is extremely easy because you have the benefit of hindsight by seeing a finished product.</p>\n\n<p>This idea that simple is easy was summed up nicely by <a href=\"https://youtu.be/5Z7lSSMwRgo?t=1334\">Jen Simmons</a> while speaking about CSS Grid and Piet Mondrian’s paintings:</p>\n\n<blockquote>“I feel like these paintings, you know, if you look at them with the sense of like ‘Why’s that important? I could have done that.’ It's like, well yeah, you could paint that today because we’re so used to this kind of thinking, but would you have painted this when everything around you was Victorian — when everything around you was this other style?”</blockquote>\n\n<p>I feel this sums up the feeling I have about seeing websites and design systems that make complete sense; it’s almost as if the fact they make sense means they were easy to make. Of course, it is usually the opposite; writing the code is the simple bit, but it’s the thinking and process that goes into it that takes the most effort.</p>\n\n<p>With that in mind, I’m going to explore building a text box, in an exaggeration of situations many of us often find ourselves in. Hopefully, by the end of this article, we can all feel more emphatic to how the journey from start to finish is rarely linear.</p>\n\n<div class=\"c-felix-the-cat\">\n<h4>A Comprehensive Guide To User Testing</h4>\n<p>So you think you’ve designed something that’s perfect, but your test tells you otherwise. Let’s explore the importance of user testing.  <a href=\"https://www.smashingmagazine.com/2018/03/guide-user-testing/?_ga=2.22142075.1123486022.1535966002-483803985.1535754514\" class=\"btn btn--small btn--white btn--white--bordered\">Read more →</a></p>\n</div>\n\n\n\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n    <p>Getting workflow <em>just</em> right ain’t an easy task. So are proper estimates. Or alignment among different departments. That’s why we’ve set up <strong>“this-is-how-I-work”-sessions</strong> — with smart cookies sharing what works well for them. A part of the <a href=\"https://smashed.by/workflowpanelmembership\">Smashing Membership</a>, of course.</p>\n      <a href=\"https://smashed.by/workflowpanelmembership\" class=\"btn btn--green btn--large\">\n        Explore features →\n      </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/workflowpanelmembership\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://www.smashingmagazine.com/images/smashing-cat/smashing-tv-box-cat.svg\" alt=\"Smashing TV, with live sessions for professional designers and developers.\" width=\"310\" height=\"400\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><h3>Brief</h3>\n\n<p>We all know that careful planning and understanding of the user need is important to a successful project of any size. We also all know that all too often we feel to need to rush to quickly design and develop new features. That can often mean our common sense and best practices are forgotten as we slog away to quickly get onto the next task on the everlasting to-do list. Rinse and repeat.</p>\n\n<p>Today our task is to build a text box. Simple enough, it needs to allow a user to type in some text. In fact, it is so simple that we leave the task to last because there is so much other important stuff to do. Then, just before we pack up to go home, we smirk and write:</p>\n\n<pre><code class=\"language-html\">&lt;input type=\"text\"&gt;\n</code></pre>\n\n<p>There we go!</p>\n\n<p>Oh wait, we probably need to hook that up to send data to the backend when the form is submitted, like so:</p>\n\n<pre><code class=\"language-html\">&lt;input type=\"text\" name=\"our_textbox\"&gt;\n</code></pre>\n\n<p>That’s better. Done. Time to go home.</p>\n\n<h3>How Do You Add A New Line?</h3>\n\n<p>The issue with using a simple text box is it is pretty useless if you want to type a lot of text. For a name or title it works fine, but quite often a user will type more text than you expect. Trust me when I say if you leave a textbox for long enough without strict validation, someone will paste the entire of War and Peace. In many cases, this can be prevented by having a maximum amount of characters.</p>\n\n<p>In this situation though, we have found out that our laziness (or bad prioritization) of leaving it to the last minute meant we didn’t consider the real requirements. We just wanted to do another task on that everlasting to-do list and get home. This text box needs to be reusable; examples of its usage include as a content entry box, a Twitter-style note box, and a user feedback box. In all of those cases, the user is likely to type a lot of text, and a basic text box would just scroll sideways. Sometimes that may be okay, but generally, that’s an awful experience.</p>\n\n<p>Thankfully for us, that simple mistake doesn’t take long to fix:</p>\n\n<pre><code class=\"language-html\">&lt;textarea name=\"our_textbox\"&gt;&lt;/textarea&gt;\n</code></pre>\n\n<p>Now, let’s take a moment to consider that line. A <code>&lt;textarea&gt;</code>: as simple as it can get without removing the name. Isn’t it interesting, or is it just my pedantic mind that we need to use a completely different element to add a new line? It isn’t a type of input, or an attribute used to add multi-line to an input. Also, the <code>&lt;textarea&gt;</code> element is not self-closing but an input is? Strange.</p>\n\n<p>This “moment to consider” sent me time traveling back to October 1993, trawling through the depths of the <a href=\"http://1997.webhistory.org/www.lists/www-talk.1993q4/0182.html\">www-talk</a> mailing list. There was clearly much discussion about the future of the web and what “HTML+” should contain. This was 1993 and they were <a href=\"http://1997.webhistory.org/www.lists/www-talk.1993q4/0182.html\">discussing ideas</a> such as <code>&lt;input type=\"range\"&gt;</code> which wasn’t available until HTML5, and <a href=\"http://1997.webhistory.org/www.lists/www-talk.1993q4/0184.html\">Jim Davis</a> said:</p>\n\n<blockquote>“Well, it's far-fetched I suppose, but you might use HTML forms as part of a game playing interface.”</blockquote>\n\n<p>This really does show that the web wasn’t just intended to be about documents as is widely believed. Marc Andreessen <a href=\"http://1997.webhistory.org/www.lists/www-talk.1993q4/0158.html\">suggested</a> to have <code>&lt;input type=\"textarea\"&gt;</code> instead of allowing new lines in the single-line <code>text</code> type, [saying]: (<a href=\"http://1997.webhistory.org/www.lists/www-talk.1993q4/0200.html\">http://1997.webhistory.org/www.lists/www-talk.1993q4/0200.html</a>)</p>\n\n<blockquote>“Makes the browser code cleaner — they have to be handled differently internally.”</blockquote>\n\n<p>That’s a fair reason to have <code>&lt;textarea&gt;</code> separate to text, but that’s still not what we ended up with. So why is <code>&lt;textarea&gt;</code> its own element?</p>\n\n<p>I didn’t find any decision in the mailing list archives, but by the following month, the <a href=\"https://www.w3.org/MarkUp/HTMLPlus/htmlplus_41.html\">HTML+ Discussion Document</a> had the <code>&lt;textarea&gt;</code> element and a note saying:</p>\n\n<blockquote>“In the initial design for forms, multi-line text fields were supported by the INPUT element with TYPE=TEXT. Unfortunately, this causes problems for fields with long text values as SGML limits the length of attributea literals. The HTML+ DTD allows for up to 1024 characters (the SGML default is only 240 characters!)”</blockquote>\n\n<p>Ah, so that’s why the text goes within the element and cannot be self-closing; they were not able to use an attribute for long text. In 1994, the <code>&lt;textarea&gt;</code> element was included, along with many others from HTML+ such as <code>&lt;option&gt;</code> in the HTML 2 spec.</p>\n\n<p>Okay, that’s enough. I could easily explore the archives further but back to the task.</p>\n\n<h3>Styling A <code>&lt;textarea&gt;</code>\n</h3>\n\n<p>So we’ve got a default <code>&lt;textarea&gt;</code>. If you rarely use them or haven’t seen the browser defaults in a long time, then you may be surprised. A <code>&lt;textarea&gt;</code> (made almost purely for multi-line text) looks very similar to a normal text input except most browser defaults style the border darker, the box slightly larger, and there are lines in the bottom right. Those lines are the resize handle; they aren’t actually part of the spec so browsers all handle (pun absolutely intended) it in their own way. That generally means that the resize handle cannot be restyled, though you can disable resizing by setting <code>resize: none</code> to the <code>&lt;textarea&gt;</code>. It is possible to create a custom handle or use browser specific pseudo elements such as <code>::-webkit-resizer</code>.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png\" sizes=\"100vw\" alt=\"The default &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; looks very small with a grey border and three lines as a resize handle.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tA default textarea with no styling (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f354a41-76e5-457e-8a08-41e4a201d7ad/textbox-unabridged-default-textarea.png\">Large preview</a>)\n\t\t</figcaption></figure><p>It’s important to understand the defaults, especially because of the resizing ability. It’s a very unique behavior; the user is able to drag to change the size of the element by default. If you don’t override the minimum and maximum sizes then the size could be as small as 9px × 9px (when I checked Chrome) or as large as they have patience to drag it. That’s something that could cause mayhem with the rest of the site’s layout if it’s not considered. Imagine a grid where <code>&lt;textarea&gt;</code> is in one column and a blue box is in another; the size of the blue box is purely decided by the size of the <code>&lt;textarea&gt;</code>.</p>\n\n<p>Other than that, we can approach styling a <code>&lt;textarea&gt;</code> much the same as any other input. Want to change the grey around the edge into thick green dashes? Sure here you go: <code>border: 5px dashed green;</code>. Want to restyle the focus in which a lot of browsers have a slightly blurred box shadow? Change the outline — responsibly though, you know, that’s important for accessibility. You can even add a background image to your <code>&lt;textarea&gt;</code> if that interests you (I can think of a few ideas that would have been popular when skeuomorphic design was more celebrated).</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h3>Scope Creep</h3>\n\n<p>We’ve all experienced scope creep in our work, whether it is a client that doesn’t think the final version matches their idea or you just try to squeeze in a tiny tweak and end up taking forever to finish it. So I ( enjoying creating the persona of an exaggerated project manager telling us what we need to build) have decided that our <code>&lt;textarea&gt;</code> just is not good enough. Yes, it is now multi-line, and that’s great, and yes it even ‘pops’ a bit more with its new styling. Yet, it just doesn’t fit the very vague user need that I’ve pretty much just thought of now after we thought we were almost done.</p>\n\n<p>What happens if the user puts in thousands of words? Or drags the resize handle so far it breaks the layout? It needs to be reusable, as we have already mentioned, but in some of the situations (such as a ‘Twittereqsue’ note taking box), we will need a limit. So the next task is to add a character limit. The user needs to be able to see how many characters they have left.</p>\n\n<p>In the same way we started with <code>&lt;input&gt;</code> instead of <code>&lt;textarea&gt;</code>, it is very easy to think that adding the <code>maxlength</code> attribute would solve our issue. That is one way to limit the amount of characters the user types, it uses the browser’s built-in validation, but it is not able to display how many characters are left.</p>\n\n<p>We started with the HTML, then added the CSS, now it is time for some JavaScript. As we’ve seen, charging along like a bull in a china shop without stopping to consider the right approaches can really slow us down in the long run. Especially in situations where there is a large refactor required to change it. So let’s think about this counter; it needs to update as the user types, so we need to trigger an event when the user types. It then needs to check if the amount of text is already at the maximum length.</p>\n\n<p>So which event handler should we choose?</p>\n\n<ul>\n<li>\n<strong><code>change</code></strong><br>\nIntuitively, it may make sense to choose the change event. It works on <code>&lt;textarea&gt;</code> and does what it says on the tin. Except, it only triggers when the element loses focus so it wouldn’t update while typing.</li>\n<li>\n<strong><code>keypress</code></strong><br>\nThe keypress event is triggered when typing any character, which is a good start. But it does not trigger when characters are deleted, so the counter wouldn’t update after pressing backspace. It also doesn’t trigger after a copy/paste.</li>\n<li>\n<strong><code>keyup</code></strong><br>\nThis one gets quite close, it is triggered whenever a key has been pressed (including the backspace button). So it does trigger when deleting characters, but still not after a copy/paste.</li>\n<li>\n<strong><code>input</code></strong><br>\nThis is the one we want. This triggers whenever a character is added, deleted or pasted.</li>\n</ul>\n<p>This is another good example of how using our intuition just isn’t enough sometimes. There are so many quirks (especially in JavaScript!) that are all important to consider before getting started. So the code to add a counter that updates needs to update a counter (which we’ve done with a span that has a class called <code>counter</code>) by adding an <code>input</code> event handler to the <code>&lt;textarea&gt;</code>. The maximum amount of characters is set in a variable called <code>maxLength</code> and added to the HTML, so if the value is changed it is changed in only one place.</p>\n\n<pre><code class=\"language-javascript\">var textEl = document.querySelector('textarea')\nvar counterEl = document.querySelector('.counter')\nvar maxLength = 200\n    \ntextEl.setAttribute('maxlength', maxLength)\ntextEl.addEventListener('input', (val) =&gt; {\nvar count = textEl.value.length\ncounterEl.innerHTML = ${count}/${maxLength}\n})\n</code></pre>\n\n<h3>Browser Compatibility And Progressive Enhancement</h3>\n\n<p>Progressive enhancement is a mindset in which we understand that we have no control over what the user exactly sees on their screen, and instead, we try to guide the browser. Responsive Web Design is a good example, where we build a website that adjusts to suit the content on the particular size viewport without manually setting what each size would look like. It means that on the one hand, we strongly care that a website works across all browsers and devices, but on the other hand, we don’t care that they look exactly the same.</p>\n\n<p>Currently, we are missing a trick. We haven’t set a sensible default for the counter. The default is currently “0/200” if 200 were the maximum length; this kind of makes sense but has two downsides. The first, it doesn’t really make sense at first glance. You need to start typing before it is obvious the 0 updates as you type. The other downside is that the 0 updates as you type, meaning if the JavaScript event doesn’t trigger properly (maybe the script did not download correctly or uses JavaScript that an old browser doesn’t support such as the double arrow in the code above) then it won’t do anything. A better way would be to think carefully beforehand. How would we go about making it useful when it is both working and when it isn’t?</p>\n\n<p>In this case, we could make the default text be “200 character limit.” This would mean that without any JavaScript at all, the user would always see the character limit but it just wouldn’t feedback about how close they are to the limit. However, when the JavaScript is working, it would update as they type and could say “200 characters remaining” instead. It is a very subtle change but means that although two users could get different experiences, neither are getting an experience that feels broken.</p>\n\n<p>Another default that we could set is the <code>maxlength</code> on the element itself rather than afterwards with JavaScript. Without doing this, the baseline version (the one without JS) would be able to type past the limit.</p>\n\n<h3>User Testing</h3>\n\n<p>It’s all very well testing on various browsers and thinking about the various permutations of how devices could serve the website in a different way, but are users able to use it?</p>\n\n<p>Generally speaking, no. I’m consistently shocked by user testing; <strong>people never use a site how you expect them to</strong>. This means that user testing is crucial.</p>\n\n<p>It’s quite hard to simulate a user test session in an article, so for the purposes of this article, I’m going to just focus on one point that I’ve seen users struggle with on various projects.</p>\n\n<p>The user is happily writing away, gets to 0 characters remaining, and then gets stuck. They forget what they were writing, or they don’t notice that it had stopped typing.</p>\n\n<p>This happens because there is nothing telling the user that something has changed; if they are typing away without paying much attention, then they can hit the maximum length without noticing. This is a frustrating experience.</p>\n\n<p>One way to solve this issue is to allow overtyping, so the maximum length still counts for it to be valid when submitted but it allows the user to type as much as they want and then edit it before submission. This is a good solution as it gives the control back to the user.</p>\n\n<p>Okay, so how do we implement overtyping? Instead of jumping into the code, let’s step through in theory. <code>maxlength</code> doesn’t allow overtyping, it just stops allowing input once it hits the limit. So we need to remove <code>maxlength</code> and write a JS equivalent. We can use the input event handler as we did before, as we know that works on paste, etc. So in that event, the handler would check if the user has typed more than the limit, and if so, the counter text could change to say “10 characters too many.” The baseline version (without the JS) would no longer have a limit at all, so a useful middle ground could be to add the <code>maxlength</code> to the element in the HTML and remove the attribute using JavaScript.</p>\n\n<p>That way, the user would see that they are over the limit without being cut off while typing. There would still need to be validation to make sure it isn’t submitted, but that is worth the extra small bit of work to make the user experience far better.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png\" sizes=\"100vw\" alt=\"An example showing “17 characters too many” in red text next to a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAllowing the user to overtype (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bd74a36-054c-4c61-8c1f-01bfde7ebb3e/textbox-unabridged-overtype.png\">Large preview</a>)\n\t\t</figcaption></figure><h3>Designing The Overtype</h3>\n\n<p>This gets us to quite a solid position: the user is now able to use any device and get a decent experience. If they type too much it is not going to cut them off; instead, it will just allow it and encourage them to edit it down.</p>\n\n<p>There’s a variety of ways this could be designed differently, so let’s look at how Twitter handles it:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png\" sizes=\"100vw\" alt=\"A screenshot from Twitter showing their textarea with overtyped text with a red background.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tTwitter's <code>&lt;textarea&gt;</code> (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35a0665c-7809-492a-b90d-a8b975d02680/textbox-unabridged-twitter-overtype.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Twitter has been iterating its main tweet <code>&lt;textarea&gt;</code> since they started the company. The current version uses a lot of techniques that we could consider using.</p>\n\n<p>As you type on Twitter, there is a circle that completes once you get to the character limit of 280. Interestingly, it doesn’t say how many characters are available until you are 20 characters away from the limit. At that point, the incomplete circle turns orange. Once you have 0 characters remaining, it turns red. After the 0 characters, the countdown goes negative; it doesn’t appear to have a limit on how far you can overtype (I tried as far as 4,000 characters remaining) but the tweet button is disabled while overtyping.</p>\n\n<p>So this works the same way as our <code>&lt;textarea&gt;</code> does, with the main difference being the characters represented by a circle that updates and shows the number of characters remaining after 260 characters. We could implement this by removing the text and replacing it with an SVG circle.</p>\n\n<p>The other thing that Twitter does is add a red background behind the overtyped text. This makes it completely obvious that the user is going to need to edit or remove some of the text to publish the tweet. It is a really nice part of the design. So how would we implement that? We would start again from the beginning.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<p>You remember the part where we realized that a basic input text box would not give us multiline? And that a <code>maxlength</code> attribute would not give us the ability to overtype? This is one of those cases. As far as I know, there is nothing in CSS that gives us the ability to style parts of the text inside a <code>&lt;textarea&gt;</code>. This is the point where some people would suggest web components, as what we would need is a pretend <code>&lt;textarea&gt;</code>. We would need some kind of element — probably a div — with <code>contenteditable</code> on it and in JS we would need to wrap the overtyped text in a span that is styled with CSS.</p>\n\n<p>What would the baseline non-JS version look like then? Well, it wouldn’t work at all because while <code>contenteditable</code> will work without JS, we would have no way to actually do anything with it. So we would need to have a <code>&lt;textarea&gt;</code> by default and remove that if JS is available. We would also need to do a lot of accessibility testing because while we can trust a <code>&lt;textarea&gt;</code> to be accessible relying on browser features is a much safer bet than building your own components. How does Twitter handle it? You may have seen it; if you are on a train and your JavaScript doesn’t load while going into a tunnel then you get chucked into a decade-old legacy version of Twitter where there is no character limit at all.</p>\n\n<p>What happens then if you tweet over the character limit? Twitter reloads the page with an error message saying “Your Tweet was over the character limit. You’ll have to be more clever.” No, Twitter. <em>You</em> need to be more clever.</p>\n\n<h3>Retro</h3>\n\n<p>The only way to conclude this dramatization is a retrospective. What went well? What did we learn? What would we do differently next time or what would we change completely?</p>\n\n<p>We started very simple with a basic textbox; in some ways, this is good because it can be all too easy to overcomplicate things from the beginning and an MVP approach is good. However, as time went on, we realized how important it is to have some critical thinking and to consider what we are doing. We should have known a basic textbox wouldn’t be enough and that a way of setting a maximum length would be useful. It is even possible that if we have conducted or sat in on user research sessions in the past that we could have anticipated the need to allow overtyping. As for the browser compatibility and user experiences across devices, considering progressive enhancement from the beginning would have caught most of those potential issues.</p>\n\n<p>So one change we could make is to be much more proactive about the thinking process instead of jumping straight into the task, thinking that the code is easy when actually the code is the least important part.</p>\n\n<p>On a similar vein to that, we had the “scope creep” of <code>maxlength</code>, and while we could possibly have anticipated that, we would rather not have any scope creep at all. So everybody involved from the beginning would be very useful, as a diverse multidisciplinary approach to even small tasks like this can seriously reduce the time it takes to figure out and fix all the unexpected tweaks.</p>\n\n<h3>Back To The Real World</h3>\n\n<p>Okay, so I can get quite deep into this made-up project, but I think it demonstrates well how complicated the most seemingly simple tasks can be. Being user-focussed, having a progressive enhancement mindset, and thinking things through from the beginning can have a real impact on both the speed and quality of delivery. And I didn’t even mention testing!</p>\n\n<p>I went into some detail about the history of the <code>&lt;textarea&gt;</code> and which event listeners to use, some of this can seem overkill, but I find it fascinating to gain a real understanding of the subtleties of the web, and it can often help demystify issues we will face in the future.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-09-06 11:30:16","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Preparing Your App For iOS 12 Notifications","pubDate":"2018-09-05 11:30:35","link":"https://www.smashingmagazine.com/2018/09/preparing-your-app-for-ios-12-notifications/","guid":"https://www.smashingmagazine.com/2018/09/preparing-your-app-for-ios-12-notifications/","author":"Kaya Thomas","thumbnail":"https://www.smashingmagazine.com/images/smashing-cat/cat-scubadiving-panel.svg","description":"In 2016, Apple announced a new extension that will allow developers to better customize their push and local notifications called the UNNotificationContentExtension. The extension gets triggered when a user long presses or 3D touches on a notification whenever it is delivered to the phone or from the lock/home screen. In the content extension, developers can use a view controller to structure the UI of their notification, but there was no user interaction enabled within the view controller — until now.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/09/preparing-your-app-for-ios-12-notifications/\">\n<title>Preparing Your App For iOS 12 Notifications</title>\n<article><header><h1>Preparing Your App For iOS 12 Notifications</h1>\n                  \n                    \n                    <address>Kaya Thomas</address>\n                  \n                  <time datetime=\"2018-09-05T13:30:35+02:00\" class=\"op-published\">2018-09-05T13:30:35+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>In 2016, Apple announced a new extension that will allow developers to better customize their push and local notifications called the <code>UNNotificationContentExtension</code>. The extension gets triggered when a user long presses or 3D touches on a notification whenever it is delivered to the phone or from the lock/home screen. In the content extension, developers can use a view controller to structure the UI of their notification, but there was no user interaction enabled within the view controller — until now. With the release of iOS 12 and XCode 10, <strong>the view controller in the content extension now enables user interaction</strong> which means notifications will become even more powerful and customizable.</p>\n\n<p>At WWDC 2018, Apple also announced several changes to notification settings and how they appear on the home screen. In an effort to make users more aware of how they are using apps and allowing more user control of their app usage, there is a new notification setting called “Deliver Quietly.” Users can set your app to <em>Delivery Quietly</em> from the Notification Center, which means they will not receive banners or sound notifications from your app, but they will appear in the Notification Center. Apple using an in-house algorithm, which presumably tracks often you interact with notifications, will also <strong>ask users if they still want to receive notifications from particular apps</strong> and encourage you to turn on <em>Deliver Quietly</em> or turn them off completely.</p>\n\n<p>Notifications are getting a big refresh in iOS 12, and I’ve only scratched the surface. In the rest of this article, we’ll go over the rest of the new notification features coming to iOS 12 and how you can implement them in your own app.</p>\n\n<p><strong>Recommended reading</strong>: <em><a href=\"https://www.smashingmagazine.com/2018/06/wwdc-2018-diary-ios-developer/\">WWDC 2018 Diary Of An iOS Developer</a></em></p>\n\n<h3>Remote vs Local Notifications</h3>\n\n<p>There are two ways to send push notifications to a device: remotely or locally. To send notifications remotely, you need a server that can send JSON payloads to Apple’s Push Notification Service. Along with a payload, you also need to send the device token and any other authentication certificate or tokens that verify your server is allowed to send the push notification through Apple. For this article, we focus on local notifications which do not need a separate server. Local notifications are requested and sent through the <code>UNUserNotificationCenter</code>. We’ll go over later how specifically to make the request for a local notification.</p>\n\n<p>In order to send a notification, you first need to get permission from the user on <strong>whether or not they want you to send them notifications</strong>. With the release of iOS 12, there are a lot of changes to notification settings and permissions so let’s break it down. To test out any of the code yourself, make sure you have the Xcode 10 beta installed.</p>\n\n\n\n  <aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n    <p>Getting the process <em>just</em> right ain't an easy task. That's why we've set up <strong>'this-is-how-I-work'-sessions</strong> — with smart cookies sharing what works really well for them. A part of the <a href=\"https://smashed.by/casestudypanelmembership\">Smashing Membership</a>, of course.</p>\n      <a href=\"https://smashed.by/casestudypanelmembership\" class=\"btn btn--green btn--large\">\n        Explore features →\n      </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/casestudypanelmembership\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://www.smashingmagazine.com/images/smashing-cat/cat-scubadiving-panel.svg\" alt=\"Smashing TV, with live sessions for professional designers and developers.\" width=\"310\" height=\"400\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><h3>Notification Settings And Permissions</h3>\n\n<h4>Deliver Quietly</h4>\n\n<p><em>Delivery Quietly</em> is Apple’s attempt to allow users more control over the noise they may receive from notifications. Instead of going into the settings app and looking for the app whose notification settings you want to change, you can now change the setting directly from the notification. This means that a lot more users may turn off notifications for your app or just delivery them quietly which means the app will get badged and notifications only show up in the Notification Center. If your app has its own custom notification settings, Apple is allowing you to link directly to that screen from the settings management view pictured below.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015ae8de-f1c1-460e-82c4-303f9339246a/deliverquietly.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/983fa66d-c378-48b6-a2e1-4aab6c720733/app-ios-12-notifications-deliverquietly.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/983fa66d-c378-48b6-a2e1-4aab6c720733/app-ios-12-notifications-deliverquietly.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/983fa66d-c378-48b6-a2e1-4aab6c720733/app-ios-12-notifications-deliverquietly.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/983fa66d-c378-48b6-a2e1-4aab6c720733/app-ios-12-notifications-deliverquietly.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/983fa66d-c378-48b6-a2e1-4aab6c720733/app-ios-12-notifications-deliverquietly.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/983fa66d-c378-48b6-a2e1-4aab6c720733/app-ios-12-notifications-deliverquietly.png\" sizes=\"100vw\" alt=\"iPhone 8 Plus shown with Manage selected from notification which brings up the Deliver Quietly and Turn Off options.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tDelivery quietly feature. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015ae8de-f1c1-460e-82c4-303f9339246a/deliverquietly.png\">Large preview</a>)\n\t\t</figcaption></figure><p>In order to link to your custom notification setting screen, you must set <code>providesAppNotificationSettings</code> as a <code>UNAuthorizationOption</code> when you are requesting notification permissions in the app delegate.</p>\n\n<p>In <code>didFinishLaunchingWithOptions</code>, add the following code:</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound, .providesAppNotificationSettings]) { ... }\n</code></pre>\n\n<p>When you do this, you’ll now see your custom notification settings in two places:</p>\n\n<ul>\n<li>If the user selects <code>Turn Off</code> when they go to manage settings directly from the notification;</li>\n<li>In the notification settings within the system’s Settings app.</li>\n</ul>\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6fba0db-8684-420c-8d3d-414aaf80ce07/turnoffnotifications.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4ee20c1-ca99-419b-bfa4-4f5ebbffabf3/app-ios-12-notifications-turnoffnotifications.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4ee20c1-ca99-419b-bfa4-4f5ebbffabf3/app-ios-12-notifications-turnoffnotifications.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4ee20c1-ca99-419b-bfa4-4f5ebbffabf3/app-ios-12-notifications-turnoffnotifications.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4ee20c1-ca99-419b-bfa4-4f5ebbffabf3/app-ios-12-notifications-turnoffnotifications.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4ee20c1-ca99-419b-bfa4-4f5ebbffabf3/app-ios-12-notifications-turnoffnotifications.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4ee20c1-ca99-419b-bfa4-4f5ebbffabf3/app-ios-12-notifications-turnoffnotifications.png\" sizes=\"100vw\" alt=\"iPhone 8 Plus shown with Turn Off selected from notification which brings up the Turn Off All Notifications and Configure in NotificationTester options.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tDeep link to to custom notification settings for NotificationTester from notification in the Notification Center. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6fba0db-8684-420c-8d3d-414aaf80ce07/turnoffnotifications.png\">Large preview</a>)\n\t\t</figcaption></figure><figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/658ab8e1-d0f1-46b2-b092-7f8ed643f4e0/systemnotificationsettings.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45e51038-8365-4064-ab03-feee8cc56eef/app-ios-12-notifications-systemnotificationsettings.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45e51038-8365-4064-ab03-feee8cc56eef/app-ios-12-notifications-systemnotificationsettings.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45e51038-8365-4064-ab03-feee8cc56eef/app-ios-12-notifications-systemnotificationsettings.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45e51038-8365-4064-ab03-feee8cc56eef/app-ios-12-notifications-systemnotificationsettings.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45e51038-8365-4064-ab03-feee8cc56eef/app-ios-12-notifications-systemnotificationsettings.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45e51038-8365-4064-ab03-feee8cc56eef/app-ios-12-notifications-systemnotificationsettings.png\" sizes=\"100vw\" alt=\"iPhone 8 Plus shown with system Settings app open with Notifications screen for NotificationTester app.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tDeep link to custom notification settings for NotificationTester from system’s Settings app. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/658ab8e1-d0f1-46b2-b092-7f8ed643f4e0/systemnotificationsettings.png\">Large preview</a>)\n\t\t</figcaption></figure><p>You also have to make sure to handle the callback for when the user selects on either way to get to your notification settings. Your app delegate or an extension of your app delegate has to conform to the protocol <code>UNUserNotificationCenterDelegate</code> so you can then implement the following callback method:</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">func userNotificationCenter(_ center: UNUserNotificationCenter, openSettingsFor notification: UNNotification?) {\n    let navController = self.window?.rootViewController as! UINavigationController\n    let notificationSettingsVC = NotificationSettingsViewController()\n    navController.pushViewController(notificationSettingsVC, animated: true)\n}</code></pre>\n\n<p>Another new <code>UNAuthorizationOption</code> is provisional authorization. If you don’t mind your notifications being delivered quietly, you can set add <code>.provisional</code> to your authorization options as shown below. This means that you don’t have to prompt the user to allow notifications — the notifications will still show up in the Notification Center.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .provisional]) { ... }\n</code></pre>\n\n<p>So now that you’ve determined how to request permission from the user to deliver notifications and how to navigate users to your own customized settings view, let’s go more into more detail about the actual notifications.</p>\n\n<h3>Sending Grouped Notifications</h3>\n\n<p>Before we get into the customization of the UI of a notification, let’s go over how to make the request for a local notification. First, you have to register any <code>UNNotificationCategory</code>, which are like templates for the notifications you want to send. Any notification set to a particular category will inherit any actions or options that were registered with that category. After you’ve requested permission to send notifications in <code>didFinishLaunchingWithOptions</code>, you can register your categories in the same method.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">let hiddenPreviewsPlaceholder = \"%u new podcast episodes available\"\nlet summaryFormat = \"%u more episodes of %@\"\nlet podcastCategory = UNNotificationCategory(identifier: \"podcast\", actions: [], intentIdentifiers: [], hiddenPreviewsBodyPlaceholder: hiddenPreviewsPlaceholder, categorySummaryFormat: summaryFormat, options: [])\nUNUserNotificationCenter.current().setNotificationCategories([podcastCategory])\n</code></pre>\n\n<p>In the above code, I start by initiating two variables:</p>\n\n<ul>\n<li>\n<code>hiddenPreviewsPlaceholder</code><br>\nThis placeholder is used in case the user has “Show Previews” off for your app; if we don’t have a placeholder there, your notification will show with only “Notification” also the text.</li>\n<li>\n<code>summaryFormat</code><br>\nThis string is new for iOS 12 and coincides with the new feature called “Group Notifications” that will help the Notification Center look a lot cleaner. All notifications will show up in stacks which will be either representing all notifications from the app or specific groups that the developer has set for there app.</li>\n</ul>\n<p>The code below shows how we associate a notification with a group.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">@objc func sendPodcastNotification(for podcastName: String) {\nlet content = UNMutableNotificationContent()\ncontent.body = \"Introducing Season 7\"\ncontent.title = \"New episode of \\(podcastName):\"\ncontent.threadIdentifier = podcastName.lowercased()\ncontent.summaryArgument = podcastName\ncontent.categoryIdentifier = NotificationCategoryType.podcast.rawValue\nsendNotification(with: content)\n}\n</code></pre>\n\n<p>For now, I’ve hardcoded the text of the notification just for the example. The <code>threadIdentifier</code> is what creates the groups that we show as stacks in the Notification Center. In this example, I want the notifications grouped by podcast so each notification you get is separated by what podcast it’s associated with. The <code>summaryArgument</code> matches back to our <code>categorySummaryFormat</code> we set in the app delegate. In this case, we want the string for the format: <code>\"%u more episodes of %@\"</code> to be the podcast name. Lastly, we have to set the category identifier to ensure the notification has the template we set in the app delegate.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">func sendNotification(for category: String, with content: UNNotificationContent) {\nlet uuid = UUID().uuidString\nlet trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\nlet request = UNNotificationRequest(identifier: uuid, content: content, trigger: trigger)\nUNUserNotificationCenter.current().add(request, withCompletionHandler: nil)\n}\n</code></pre>\n\n<p>The above method is how we request the notification to be sent to the device. The identifier for the request is just a random unique string; the content is passed in and we create the content in our <code>sendPodcastNotification</code> method, and lastly, the trigger is when you want the notification to send. If you want the notification to send immediately, you can set that parameter to nil.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a4289cd7-c8c7-4699-be0c-099dfe26963d/groupednotifications.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caa0866c-c0d0-4d65-b121-ef64a001eb3f/app-ios-12-notifications-groupednotifications.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caa0866c-c0d0-4d65-b121-ef64a001eb3f/app-ios-12-notifications-groupednotifications.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caa0866c-c0d0-4d65-b121-ef64a001eb3f/app-ios-12-notifications-groupednotifications.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caa0866c-c0d0-4d65-b121-ef64a001eb3f/app-ios-12-notifications-groupednotifications.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caa0866c-c0d0-4d65-b121-ef64a001eb3f/app-ios-12-notifications-groupednotifications.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caa0866c-c0d0-4d65-b121-ef64a001eb3f/app-ios-12-notifications-groupednotifications.png\" sizes=\"100vw\" alt=\"iPhone 8 Plus lock screen shown with a grouped notification stack from Notification Tester app.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tGrouped notifications for NotificationTester. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a4289cd7-c8c7-4699-be0c-099dfe26963d/groupednotifications.png\">Large preview</a>)\n\t\t</figcaption></figure><figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/081cfe45-005b-4c63-8a4d-fcae440b96ad/hiddenpreviewgroup.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9cc3d6eb-5da6-4067-b091-1071009a9670/app-ios-12-notifications-hiddenpreviewgroup.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9cc3d6eb-5da6-4067-b091-1071009a9670/app-ios-12-notifications-hiddenpreviewgroup.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9cc3d6eb-5da6-4067-b091-1071009a9670/app-ios-12-notifications-hiddenpreviewgroup.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9cc3d6eb-5da6-4067-b091-1071009a9670/app-ios-12-notifications-hiddenpreviewgroup.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9cc3d6eb-5da6-4067-b091-1071009a9670/app-ios-12-notifications-hiddenpreviewgroup.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9cc3d6eb-5da6-4067-b091-1071009a9670/app-ios-12-notifications-hiddenpreviewgroup.png\" sizes=\"100vw\" alt=\"iPhone 8 Plus lock screen shown with a grouped notification stack from Notification Tester app that has hidden content.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tNotification grouped with previews turned off. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/081cfe45-005b-4c63-8a4d-fcae440b96ad/hiddenpreviewgroup.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Using the methods we’ve described above, here’s the result on the simulator. I have a button that has the <code>sendPodcastNotification</code> method as a target. I tapped the button three times to have the notifications sent to the device. In the first photo, I have “Show Previews” set to “Always” so I see the podcast and the name of the new episodes along with the summary that shows I have two more new episodes to check out. When “Show Previews” is set to “Never,” the result is the second image above. The user won’t see which podcast it is to respect the “No Preview” setting, but they can still see that I have three new episodes to check out.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h3>Notification Content Extension</h3>\n\n<p>Now that we understand how to set our notification categories and make the request for them to be sent, we can go over how to customize the look of the notification using the Notification Service and Notification Content extensions. The Notification Service extension allows you to edit the notification content and download any attachments in your notification like images, audio or video files. The Notification Content extension contains a view controller and storyboard that allows you to customize the look of your notification as well as handle any user interaction within the view controller or taps on notification actions.</p>\n\n<p>To add these extensions to your app go File →  New →  Target.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png\" sizes=\"100vw\" alt=\"Xcode shown after selecting from menu to add a new target, Notification Content Extension is highlighted.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAdding new target to app for the Notification Content Extension. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e944c138-1386-4050-99e1-e240d1e1cba9/template-new-target.png\">Large preview</a>)\n\t\t</figcaption></figure><p>You can only add them one at a time, so name your extension and repeat the process to add the other. If a pop-up appears asking you to activate your new scheme, click the “Activate” button to set it up for debugging.</p>\n\n<p>For the purpose of this tutorial, we will be focusing on the Notification Content Extension. For local notifications, we can include the attachments in the request, which we’ll go over later.</p>\n\n<p>First, go to the <em>Info.plist</em> file in the Notification Content Extension target.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png\" sizes=\"100vw\" alt=\"Info.plist file for Notification Content Extension shown in Xcode.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tInfo.plist for the Notification Content Extension. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d26c3dca-2733-4e91-941c-b6e4f1bff676/plistfile.png\">Large preview</a>)\n\t\t</figcaption></figure><p>The following attributes are required:</p>\n\n<ul>\n<li>\n<code>UNNotificationExtensionCategory</code><br>\nA string value equal to the notification category which we created and set in the app delegate. This will let the content extension know which notification you want to have custom UI for.</li>\n<li>\n<code>UNNotificationExtensionInitialContentSizeRatio</code><br>\nA number between 0 and 1 which determines the aspect ratio of your UI. The default value is 1 which will allow your interface to have its total height equal to its width.</li>\n</ul>\n<p>I’ve also set <code>UNNotificationExtensionDefaultContentHidden</code> to “YES” so that the default notification does not show when the content extension is running.</p>\n\n<p>You can use the storyboard to set up your view or create the UI programmatically in the view controller. For this example I’ve set up my storyboard with an image view which will show the podcast logo, two labels for the title and body of the notification content, and a “Like” button which will show a heart image.</p>\n\n<p>Now, in order to get the image showing for the podcast logo and the button, we need to go back to our notification request:</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">guard let pathUrlForPodcastImg = Bundle.main.url(forResource: \"startup\", withExtension: \"jpg\") else { return }\nlet imgAttachment = try! UNNotificationAttachment(identifier: \"image\", url: pathUrlForPodcastImg, options: nil)\n\nguard let pathUrlForButtonNormal = Bundle.main.url(forResource: \"heart-outline\", withExtension: \"png\") else { return }\nlet buttonNormalStateImgAtt = try! UNNotificationAttachment(identifier: \"button-normal-image\", url: pathUrlForButtonNormal, options: nil)\n\nguard let pathUrlForButtonHighlighted = Bundle.main.url(forResource: \"heart-filled\", withExtension: \"png\") else { return }\nlet buttonHighlightStateImgAtt = try! UNNotificationAttachment(identifier: \"button-highlight-image\", url: pathUrlForButtonHighlighted, options: nil)\n\ncontent.attachments = [imgAttachment, buttonNormalStateImgAtt, buttonHighlightStateImgAtt]\n</code></pre>\n\n<p>I added a folder in my project that contains all the images we need for the notification so we can access them through the main bundle.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png\" sizes=\"100vw\" alt=\"Project navigator shown in Xcode.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tXcode project navigator. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0cdf5dd-3c0e-4ae1-a963-23d6da6ac464/files.png\">Large preview</a>)\n\t\t</figcaption></figure><p>For each image, we get the file path and use that to create a <code>UNNotificationAttachment</code>. Added that to our notification content allows us to access the images in the Notification Content Extension in the <code>didReceive</code> method shown below.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">func didReceive(_ notification: UNNotification) {\nself.newEpisodeLabel.text = notification.request.content.title\nself.episodeNameLabel.text = notification.request.content.body\n\nlet imgAttachment = notification.request.content.attachments[0]\nlet buttonNormalStateAtt = notification.request.content.attachments[1]\nlet buttonHighlightStateAtt = notification.request.content.attachments[2]\n\nguard let imageData = NSData(contentsOf: imgAttachment.url), let buttonNormalStateImgData = NSData(contentsOf: buttonNormalStateAtt.url), let buttonHighlightStateImgData = NSData(contentsOf: buttonHighlightStateAtt.url) else { return }\n\nlet image = UIImage(data: imageData as Data)\nlet buttonNormalStateImg = UIImage(data: buttonNormalStateImgData as Data)?.withRenderingMode(.alwaysOriginal)\nlet buttonHighlightStateImg = UIImage(data: buttonHighlightStateImgData as Data)?.withRenderingMode(.alwaysOriginal)\n\nimageView.image = image\nlikeButton.setImage(buttonNormalStateImg, for: .normal)\nlikeButton.setImage(buttonHighlightStateImg, for: .selected)\n}\n</code></pre>\n\n<p>Now we can use the file path URLs we set in the request to grab the data for the URL and turn them into images. Notice that I have two different images for the different button states which will allow us to update the UI for user interaction. When I run the app and send the request, here’s what the notification looks like:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4bd578f0-2a67-4b47-96ce-d2091ce585dc/customizednotification.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/038aa952-9159-4d4f-af52-b007190a918f/app-ios-12-notifications-customizednotification.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/038aa952-9159-4d4f-af52-b007190a918f/app-ios-12-notifications-customizednotification.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/038aa952-9159-4d4f-af52-b007190a918f/app-ios-12-notifications-customizednotification.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/038aa952-9159-4d4f-af52-b007190a918f/app-ios-12-notifications-customizednotification.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/038aa952-9159-4d4f-af52-b007190a918f/app-ios-12-notifications-customizednotification.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/038aa952-9159-4d4f-af52-b007190a918f/app-ios-12-notifications-customizednotification.png\" sizes=\"100vw\" alt=\"iPhone 8 Plus shown with custom notification loaded after force touching the notification.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tContent extension loaded for NotificationTester app. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4bd578f0-2a67-4b47-96ce-d2091ce585dc/customizednotification.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Everything I’ve mentioned so far in relation to the content extension isn’t new in iOS 12, so let’s dig into the two new features: <strong>User Interaction</strong> and <strong>Dynamic Actions</strong>. When the content extension was first added in iOS 10, there was no ability to capture user touch within a notification, but now we can register UIControl events and respond when the user interacts with a UI element.</p>\n\n<p>For this example, we want to show the user that the “Like” button has been selected or unselected. We already set the images for the <code>.normal</code> and <code>.selected</code> states, so now we just need to add a target for the UIButton so we can update the selected state.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">override func viewDidLoad() {\nsuper.viewDidLoad()\n// Do any required interface initialization here.\nlikeButton.addTarget(self, action: #selector(likeButtonTapped(sender:)), for: .touchUpInside)\n}</code></pre>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">@objc func likeButtonTapped(sender: UIButton) {\nlikeButton.isSelected = !sender.isSelected\n}</code></pre>\n\n<p>Now with the above code we get the following behavior:</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d0a37400-3087-4433-a835-f3fcc9457e15/userinteraction.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d0310354-e7e0-4fc8-b643-b5cef4a5c75c/userinteraction-800w.gif\" width='“800\"' height=\"800\" alt=\"GIF of iPhone 8 Plus with custom notification loaded and like button being selected and unselected.\"></a><figcaption>Selecting like button within notification. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d0a37400-3087-4433-a835-f3fcc9457e15/userinteraction.gif\">Large preview</a>)</figcaption></figure><p>In the selector method <code>likeButtonTapped</code>, we could also add any logic for saving the liked state in User Defaults or the Keychain, so we have access to it in our main application.</p>\n\n<p>Notification actions have existed since iOS 10, but once you click on them, usually the user will be rerouted to the main application or the content extension is dismissed. Now in iOS 12, we can update the list of notification actions that are shown in response to which action the user selects.</p>\n\n<p>First, let’s go back to our app delegate where we create our notification categories so we can add some actions to our podcast category.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">let playAction = UNNotificationAction(identifier: \"play-action\", title: \"Play\", options: [])\nlet queueAction = UNNotificationAction(identifier: \"queue-action\", title: \"Queue Next\", options: [])\nlet podcastCategory = UNNotificationCategory(identifier: \"podcast\", actions: [playAction, queueAction], intentIdentifiers: [], hiddenPreviewsBodyPlaceholder: hiddenPreviewsPlaceholder, categorySummaryFormat: summaryFormat, options: [])\n</code></pre>\n\n<p>Now when we run the app and send a notification, we see the following actions shown below:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png\" sizes=\"100vw\" alt=\"iPhone 8 Plus with custom notification loaded with an options to Play or Add to Queue.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tNotification quick actions. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf7a6884-20f0-4a22-b934-56bf2bb4d3cf/quickactions.png\">Large preview</a>)\n\t\t</figcaption></figure><p>When the user selects “Play,” we want the action to be updated to “Pause.” If they select “Queue Next,” we want that action to be updated to “Remove from Queue.” We can do this in our <code>didReceive</code> method in the Notification Content Extension’s view controller.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">func didReceive(_ response: UNNotificationResponse, completionHandler completion:\n(UNNotificationContentExtensionResponseOption) -&gt; Void) {\nguard let currentActions = extensionContext?.notificationActions else { return }\n\nif response.actionIdentifier == \"play-action\" {\nlet pauseAction = UNNotificationAction(identifier: \"pause-action\", title: \"Pause\", options: [])\nlet otherAction = currentActions[1]\nlet newActions = [pauseAction, otherAction]\nextensionContext?.notificationActions = newActions\n\n} else if response.actionIdentifier == \"queue-action\" {\nlet removeAction = UNNotificationAction(identifier: \"remove-action\", title: \"Remove from Queue\", options: [])\nlet otherAction = currentActions[0]\nlet newActions = [otherAction, removeAction]\nextensionContext?.notificationActions = newActions\n\n}  else if response.actionIdentifier == \"pause-action\" {\nlet playAction = UNNotificationAction(identifier: \"play-action\", title: \"Play\", options: [])\nlet otherAction = currentActions[1]\nlet newActions = [playAction, otherAction]\nextensionContext?.notificationActions = newActions\n\n} else if response.actionIdentifier == \"remove-action\" {\nlet queueAction = UNNotificationAction(identifier: \"queue-action\", title: \"Queue Next\", options: [])\nlet otherAction = currentActions[0]\nlet newActions = [otherAction, queueAction]\nextensionContext?.notificationActions = newActions\n}\ncompletion(.doNotDismiss)\n}</code></pre>\n\n<p>By resetting the <code>extensionContext?.notificationActions</code> list to contain the updated actions, it allows us to change the actions every time the user selects one. The behavior is shown below:</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9e235af4-d403-4dbc-aefd-ad17da4558cc/dynamicactions.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a84f5abd-1223-47fb-978e-80486331e21b/dynamicactions-800w.gif\" width='“800\"' height=\"800\" alt=\"GIF of iPhone 8 Plus with custom notification loaded and the quick actions being changed from Play to Pause and Add to Queue to Remove from Queue.\"></a><figcaption>Dynamic notification quick actions. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9e235af4-d403-4dbc-aefd-ad17da4558cc/dynamicactions.gif\">Large preview</a>)</figcaption></figure><h3>Summary</h3>\n\n<p>There’s a lot to do before iOS 12 launches to make sure your notifications are ready. The steps vary in complexity and you don’t have to implement them all. Make sure to first download XCode 10 beta so you can try out the features we’ve gone over. If you want to play around with the demo app I’ve referenced throughout the article, check it out on <a href=\"https://github.com/kmt901/Notifications-iOS12\">Github</a>.</p>\n\n<h4>For Your Notification Permissions Request And Settings, You’ll Need To:</h4>\n\n<ul>\n<li>Determine whether or not you want to enable provisional authorization and add it to your authorization options.</li>\n<li>If you have already have a customized notification settings view in your app, add <code>providesAppNotificationSettings</code> to your authorization options as well as implement the call back in your app delegate or whichever class conforms to <code>UNUserNotificationCenterDelegate</code>.</li>\n</ul>\n<h4>For Notification Grouping:</h4>\n\n<ul>\n<li>Add a thread identifier to your remote and local notifications so your notifications are correctly grouped in the Notification Center.</li>\n<li>When registering your notification categories, add the category summary parameter if you want your grouped notification to be more descriptive than “more notifications.”</li>\n<li>If you want to customize the summary text even more, then add a summary identifier to match whichever formatting you added for the category summary.</li>\n</ul>\n<h4>For Customized Rich Notifications:</h4>\n\n<ul>\n<li>Add the Notification Content extension target to your app to create rich notifications.</li>\n<li>Design and implement the view controller to contain whichever elements you want in your notification.</li>\n<li>Consider which interactive elements would be useful to you, i.e. buttons, table view, switches, etc.</li>\n<li>Update the <code>didReceive</code> method in the view controller to respond to selected actions and update the list of actions if necessary.</li>\n</ul>\n<h3>Further Reading</h3>\n\n<ul>\n<li>“<a href=\"https://developer.apple.com/notifications/\">Notifications</a>,” Apple’s list of various documentation regarding user notifications</li>\n<li>“<a href=\"https://developer.apple.com/videos/play/wwdc2018/710\">What’s New in User Notifications</a>,” WWDC 2018 Apple</li>\n<li>“<a href=\"https://developer.apple.com/documentation/usernotificationsui/customizing_the_appearance_of_notifications\">Customizing the Appearance of Notifications</a>,” Apple’s documentation on the Notification Content Extension</li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, yk, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-09-05 11:30:35","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Take A New Look At CSS Shapes","pubDate":"2018-09-04 11:30:57","link":"https://www.smashingmagazine.com/2018/09/css-shapes/","guid":"https://www.smashingmagazine.com/2018/09/css-shapes/","author":"Rachel Andrew","thumbnail":"https://www.smashingmagazine.com/images/smashing-cat/cat-wizard.svg","description":"CSS Shapes Level 1 has been available in Chrome and Safari for a number of years, however, this week it ships in a production version of Firefox with the release of Firefox 62 — along with a very nice addition to the Firefox DevTools to help us work with Shapes. In this article, I’ll take a look at some of the things you can do with CSS Shapes. Perhaps it’s time to consider adding some curves to your designs?","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/09/css-shapes/\">\n<title>Take A New Look At CSS Shapes</title>\n<article><header><h1>Take A New Look At CSS Shapes</h1>\n                  \n                    \n                    <address>Rachel Andrew</address>\n                  \n                  <time datetime=\"2018-09-04T13:30:57+02:00\" class=\"op-published\">2018-09-04T13:30:57+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>CSS Shapes Level 1 has been available in Chrome and Safari for a number of years, however, this week it ships in a production version of Firefox with the release of Firefox 62 — along with a very nice addition to the Firefox DevTools to help us work with Shapes. In this article, I’ll take a look at some of the things you can do with CSS Shapes. Perhaps it’s time to consider adding some curves to your designs?</p>\n\n<h3>What Are CSS Shapes?</h3>\n\n<p>The CSS Shapes specification Level 1 defines three new properties:</p>\n\n<ul>\n<li><code>shape-outside</code></li>\n<li><code>shape-image-threshold</code></li>\n<li><code>shape-margin</code></li>\n</ul>\n<p>The purpose of this specification is to allow content to flow around a non-rectangular shape, something which is quite unusual on our boxy web. There are a few different ways to create shapes, which we will have a look at in this tutorial. We will also have a look at the Shape Path Editor, available in Firefox, as it can help you to easily understand the shapes on your page and work with them.</p>\n\n<p>In the current specification, shapes can only be applied to a float, so any shapes example needs to start with a floated element. In the example below, I have a PNG image with a transparent background in which I have floated the image left. The text that follows the image now flows around the right and bottom of my image.</p>\n\n<p>What I would like to happen is for my content to follow the shape of the opaque part of the image, rather than follow the line of the physical image file. To do this, I use the <code>shape-outside</code> property, with the value being the URL of my image. I’m using the actual image file to create a path for the content to flow around.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"KxaZXw\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/KxaZXw\">Smashing Shapes: image</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<p>Note that your image needs to be CORS compatible, so hosted on the same server as the rest of your content or sending the correct headers if hosted on a CDN. Browser DevTools will usually tell you if your image is being blocked due to CORS.</p>\n\n<p>This method of creating shapes uses the alpha channel of the image to create the shape, as we have a shape with a fully transparent area, then all we need do is pass the URL of the image to <code>shape-outside</code> and the shape path follows the line of the fully opaque area.</p>\n\n\n\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n    <p>Nope, we can't do any magic tricks, but we have articles, <a href=\"https://smashed.by/perfpanelbooks\">books</a> and <a href=\"https://smashed.by/perfpaneltv\">webinars</a> featuring techniques we all can use to improve our work. <a href=\"https://smashed.by/perfpanelmembership\">Smashing Members</a> get a seasoned selection of magic front-end tricks — e.g. <strong>live designing sessions</strong> and perf audits, too. <em>Just sayin'</em>! ;-)</p>\n\n      <a href=\"https://smashed.by/perfpanelmembership\" class=\"btn btn--green btn--large\">\n        Explore Smashing Wizardry →\n      </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/perfpanelmembership\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://www.smashingmagazine.com/images/smashing-cat/cat-wizard.svg\" alt=\"Smashing Cat, just preparing to do some magic stuff.\" width=\"310\" height=\"400\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><h3>Creating A Margin</h3>\n\n<p>To push the line of the text away from the image we can use the <code>shape-margin</code> property. This creates a margin between the line of the shape and the content running alongside it.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"vzgdXw\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/vzgdXw\">Smashing Shapes: shape-margin</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<h3>Using Generated Content For Our Shape</h3>\n\n<p>In the case above, we have the image displayed on the page and then the text curved around it. However, you could also use an image as the path for the shape in order to create a curved text effect without also including the image on the page. You still need something to float, however, and so for this, we can use Generated Content.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"bxgLBp\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/bxgLBp\">Smashing Shapes: generated content</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<p>In this example, we have inserted some generated content, floated it left, given it a width and a height and then used <code>shape-outside</code> with our image just as before. We then get a curved line against the whitespace, but no visible image.</p>\n\n<h3>Using A Gradient For Our Shape</h3>\n\n<p>A CSS gradient is just like an image, which means we can use a gradient to create a shape, which can make for some interesting effects. In this next example, I have created a gradient which goes from blue to transparent; your gradient will need to have a transparent or semi-transparent area in order to use shapes. Once again, I have used generated content to add the gradient and am then using the gradient in the value for <code>shape-outside</code>.</p>\n\n<p>Once the gradient becomes fully transparent, then the shape comes into play, and the content runs along the edge of the gradient.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"zJNRpL\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/zJNRpL\">Smashing Shapes: gradients</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<h3>Using <code>shape-image-threshold</code> To Position Text Over A Semi-Opaque Image</h3>\n\n<p>So far we have looked at using a completely transparent part of an image or of a gradient in order to create our shape, however, the third property defined in the CSS Shapes specification means that we can use images or gradients with semi-opaque areas by setting a threshold. A value for <code>shape-image-threshold</code> of <code>1</code> means fully opaque while <code>0</code> means fully transparent.</p>\n\n<p>A gradient like our example above is a great way to see this in action as we can change the <code>shape-image-threshold</code> value and move the line along which the text falls to more opaque areas or more transparent areas. This property works in exactly the same way with an image that has an alpha channel yet is not fully transparent.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"JaEpMw\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/JaEpMw\">Smashing Shapes: shape-image-threshold</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<p>This method of creating shapes from images and gradients is — I think — the most straightforward way of creating a shape. You can create a shape as complex as you need it to be, in the comfort of a graphics application and then use that to define the shape on your page. That said, there is another way to create our shapes, and that’s by using <em>Basic Shapes</em>.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h3>CSS Shapes With Basic Shapes</h3>\n\n<p>The Basic Shapes are a set of predefined shapes which cover a lot of different types of shapes you might want to create. To use a basic shape, you use the basic shape <em>type</em> as a value for <code>shape-outside</code>. This type uses functional notation, so we have the name of the shape followed by brackets (inside which are some values for our shape).</p>\n\n<p>The options that you have are the following:</p>\n\n<ul>\n<li><code>inset()</code></li>\n<li><code>circle()</code></li>\n<li><code>ellipse()</code></li>\n<li><code>polygon()</code></li>\n</ul>\n<p>We will take a look at the <code>circle()</code> type first as we can use this to understand some useful things which apply to all shapes which use the basic shape type. We will also have a look at the new tools in Firefox for inspecting these shapes.</p>\n\n<p>In the example below, I am creating the most simple of shapes: a circle using <code>shape-outside: circle(50%)</code>. I’m using generated content again, and I have given the box a background color, and also added a margin, border, and padding to help highlight some of the concepts of using CSS Shapes. You can see in the example that the circle is created centered on the box; this is because I have given the circle a value of 50%. That value is the <code>&lt;shape-radius&gt;</code> which can be a length or a percentage. I’ve used a percentage so that the radius is half of the size of my box.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"dqNmvM\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/dqNmvM\">Smashing Shapes: shape-outside: circle()</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<p>This is a really good to time have a look at the shape that has been created using the Firefox Shape Path Editor. You can inspect the shape by clicking on the generated content and then clicking the little shape icon next to the property <code>shape-outside</code>; your shape will now highlight.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png\" sizes=\"100vw\" alt=\"The shape highlighted with a line\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe Shape Path Editor highlights the circle shape (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ada6850-25be-4c76-b403-4a0c7e367bc4/circle.png\">Large preview</a>)\n\t\t</figcaption></figure><p>You can see how the circle extends to the edge of the margin on our box. This is because the initial <em>reference box</em> used by our shape is <code>margin-box</code>. You already know something of reference boxes if you have ever added <code>box-sizing: border-box</code> to your CSS. When you do this, you are asking CSS to use the <code>border-box</code> and not the default <code>content-box</code> as the size of elements. In Shapes, we can also change which reference box is used. After any basic shape, add <code>border-box</code> to use the border to define the shape or <code>content-box</code> to use the edge of the content (inside the padding). For example:</p>\n\n<pre class=\"break-out\"><code class=\"language-css\">.content::before {\n    content: \"\";\n    width: 150px;\n    height: 150px;\n    margin: 20px;\n    padding: 20px;\n    border: 10px solid #FC466B;\n    background: linear-gradient(90deg, #FC466B 0%, #3F5EFB 100%);\n    float: left;\n    circle(50%) content-box;\n}\n</code></pre>\n\n<p>You will see the circle appear to become much smaller. It is now using the width of the content — in this case the width of the box at 150px — rather than the margin box which includes the padding, border, and margin.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png\" sizes=\"100vw\" alt=\"A smaller circle is highlighted\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe content-box is the edge of the content of the square we created with our generated content (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3cd0eefa-4cc2-4721-873b-6933a9643770/content-box.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Inspecting your element in Firefox DevTools will also show you the reference boxes so you can choose which might give you the best result with your particular shape.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png\" sizes=\"100vw\" alt=\"Highlights showing the margin, border and padding\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tReference boxes highlighted in Firefox (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89137819-2571-4164-8133-48e42f55f153/reference-boxes.png\">Large preview</a>)\n\t\t</figcaption></figure><h5>The Position Value</h5>\n\n<p>A second value can be passed to <code>circle()</code> which is a position; if you do not pass this value, it defaults to <code>center</code>. However, you can use this value to pull your circle around. In the next example, I have positioned the circle by using <code>shape-outside(50% at 30%)</code>; this changes where the center of the circle is positioned.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"rZjvJW\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/rZjvJW\">Smashing Shapes: circle() with position</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<h5><code>clip-path</code></h5>\n\n<p>Something useful to know is that the same <code>&lt;basic-shape&gt;</code> values can be used as a value for <code>clip-path</code>. This means that after creating a shape, you can clip away the image or background color that extends outside of the shape. In the example below, I am going to do this with our example gradient background, so that we end up with a circle that has text curved around from our square box.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"dqNeJm\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/dqNeJm\">Smashing SHapes: circle() with clip-path</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<p>All of the above concepts can be applied to our other basic shapes. Now let’s have a quick look at how they work.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h4>inset()</h4>\n\n<p>The <code>inset()</code> value defines a rectangle. This might not seem very useful as a float is a rectangle, however, this value means that you can inset the content wrapping your shape. It takes four values for top, right, bottom, and left plus a final value which defines a border radius.</p>\n\n<p>In the example below, I am using the values to inset the content on the right and bottom of the floated image, plus adding a border radius around which my content will wrap using <code>shape-outside: inset(0 30px 100px 0 round 40px)</code>. You can see how the content is now over the background color of the box:</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"PdWaPY\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/PdWaPY\">Smashing Shapes: inset()</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<h4>ellipse()</h4>\n\n<p>An ellipse is a squashed circle and as such needs two radii for x and y (in that order). You can then push the ellipse around just as with circle using the position value. In the example below, I am creating an ellipse and then using clip-path with the same values to remove the content outside of my shape.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"bxgKwE\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/bxgKwE\">Smashing Shapes: ellipse()</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<p>In the above example, I also used <code>shape-margin</code> to demonstrate how we can use this property as with our image generated shapes to push the content away.</p>\n\n<h4>polygon()</h4>\n\n<p>Creating polygon shapes gives us the most flexibility, as our shapes can be created with three or more points. The value passed to the polygon needs to be three or more pairs of values which represent coordinates.</p>\n\n<p>It is here where the Firefox tools become really useful as we can use them to help create our polygon. In the below example, I have created a polygon with four points. In the Firefox DevTools, you can double-click on any line to create a new point, and double-click again to remove it. Once you have created a polygon that you are happy with, you can then copy the value out of DevTools for your CSS.</p>\n\n<p data-height=\"500\" data-theme-id=\"light\" data-slug-hash=\"BOpVVL\" data-user=\"rachelandrew\" data-default-tab=\"result\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/rachelandrew/pen/BOpVVL\">Smashing Shapes: polygon()</a> by Rachel Andrew (<a href=\"https://codepen.io/rachelandrew\">@rachelandrew</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n\n\n<h4>Fallbacks</h4>\n\n<p>As CSS Shapes are applied to a float, in many cases the fallback is that instead of seeing the content wrap around a shape, the content will wrap around a floated element (in the way that content has always wrapped around floats). Browsers ignore properties they do not understand, so if they don’t understand Shapes, it doesn’t matter that the <code>shape-outside</code> property is there.</p>\n\n<p>Where you should take care would be in any situation where not having shapes could mean that content overlaid an area which made it difficult to read. Perhaps you are using Shapes to push content away from a busy area of a background image, for example. In that case, you should first make sure that your content is usable for the non-Shapes people, then use Feature Queries to check for support of <code>shape-outside</code> and overwrite that CSS and apply the shape. For example, you could use a margin to push the content away for non-Shapes visitors and remove the margin inside your feature query.</p>\n\n<pre><code class=\"language-css\">.content {\n    margin-left: 120px;\n}\n\n@supports (shape-outside: circle()) {\n    .content {\n        margin-left: 0;\n        /* add the rest of your shapes CSS here */\n    }\n\n}\n</code></pre>\n\n<p>With Firefox releasing their support we now only have one main browser without support for Shapes — Edge. If you want to see Shapes support across the board you could go and <a href=\"https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6263716-shapes\">vote for the feature here</a>, and see if we can encourage the implementation of the feature in Edge.</p>\n\n<h4>Find Out More About CSS Shapes</h4>\n\n<p>In this article, I’ve tried to give a quick overview of some of the interesting things that are possible with CSS Shapes. For a more in-depth look at each feature, check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes\">Guides to CSS Shapes</a> over at MDN. You can also read a <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_CSS_shapes\">guide to the Shape Path Editor in Firefox</a>.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-09-04 11:30:57","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Get Your Mobile Site Ready For The 2018 Holiday Season","pubDate":"2018-09-03 12:30:43","link":"https://www.smashingmagazine.com/2018/09/get-your-mobile-site-ready-for-the-2018-holiday-season/","guid":"https://www.smashingmagazine.com/2018/09/get-your-mobile-site-ready-for-the-2018-holiday-season/","author":"Suzanne Scacca","thumbnail":"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png","description":"After reading the title of this article, it might seem like it’s jumping the gun, but with retailers turning on holiday music and putting out holiday-related displays earlier and earlier every year, your consumers are primed to start thinking about the holidays earlier, too. In fact, a study done by the Tampa Bay Times revealed that in-store shoppers were exposed to holiday music as early as October 22 in 2017.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/09/get-your-mobile-site-ready-for-the-2018-holiday-season/\">\n<title>Get Your Mobile Site Ready For The 2018 Holiday Season</title>\n<article><header><h1>Get Your Mobile Site Ready For The 2018 Holiday Season</h1>\n                  \n                    \n                    <address>Suzanne Scacca</address>\n                  \n                  <time datetime=\"2018-09-03T14:30:43+02:00\" class=\"op-published\">2018-09-03T14:30:43+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>After reading the title of this article, it might seem like it’s jumping the gun, but with retailers turning on holiday music and putting out holiday-related displays earlier and earlier every year, your consumers are primed to start thinking about the holidays earlier, too. In fact, <a href=\"http://www.tampabay.com/news/business/retail/When-should-stores-start-Christmas-music-Some-have-already-started_162373272\">a study done by the Tampa Bay Times</a> revealed that in-store shoppers were exposed to holiday music as early as October 22 in 2017.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png\" sizes=\"100vw\" alt=\"Holiday music in retail\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tResults from TBT’s survey on when holiday music starts (Source: <a href=\"http://www.tampabay.com/news/business/retail/When-should-stores-start-Christmas-music-Some-have-already-started_162373272\">Tampa Bay Times</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc0ac40c-3b5e-4115-926d-5b4ceb82723c/tampabaytimes-holiday-music-study.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Of course, e-commerce handles the holiday season a bit differently than brick-and-mortar. It’s not really necessary to announce promotions or run sales in late October or early November. However, that doesn’t mean you should wait until the <em>last</em> minute to prepare your mobile website for the holidays.</p>\n\n<p>In this article, I’m going to give you a quick rundown of what happened during the 2017 holiday sales season and, in particular, what role mobile played in it. Then, we’re going to dig into holiday design and marketing tactics you can use to boost sales through your mobile website for the 2018 holiday season.</p>\n\n<p><strong>Recommended reading</strong>: <em><a href=\"https://www.smashingmagazine.com/2018/06/local-search-mobile-web-design/\">How Mobile Web Design Affects Local Search (And What To Do About It)</a></em></p>\n\n<h3>A Recap Of The 2017 Holiday Sales Season</h3>\n\n<p>Before we get started, I want to quickly add a disclaimer:</p>\n\n<p>This particular section focuses on e-commerce statistics because this kind of data is readily available. Something like the total number of page visits, subscribed readers, and leads generated... well, it’s not.</p>\n\n<p>So, although I only use data to express how important mobile was to <strong>2017 holiday sales</strong>, keep in mind that the tips that follow <strong>pertain to all websites</strong>. Even if your site doesn’t expressly sell goods or services, blogs and other content-driven sites can take advantage of this, too!</p>\n\n\n\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n    <p>Nope, we can't do any magic tricks, but we have articles, <a href=\"https://smashed.by/perfpanelbooks\">books</a> and <a href=\"https://smashed.by/perfpaneltv\">webinars</a> featuring techniques we all can use to improve our work. <a href=\"https://smashed.by/perfpanelmembership\">Smashing Members</a> get a seasoned selection of magic front-end tricks — e.g. <strong>live designing sessions</strong> and perf audits, too. <em>Just sayin'</em>! ;-)</p>\n\n      <a href=\"https://smashed.by/perfpanelmembership\" class=\"btn btn--green btn--large\">\n        Explore Smashing Wizardry →\n      </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/perfpanelmembership\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://www.smashingmagazine.com/images/smashing-cat/cat-wizard.svg\" alt=\"Smashing Cat, just preparing to do some magic stuff.\" width=\"310\" height=\"400\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><p>Now, let’s take a look at the numbers:</p>\n\n<h4>Total Retail Sales</h4>\n\n<p>The <a href=\"https://nrf.com/media/press-releases/holiday-retail-sales-increased-55-percent-2017-exceeding-nrf-forecast-and\">National Retail Federation</a> calculated the total amount of retail sales--online and in-store--to be $691.9 billion between November and December, a 5.5% bump from 2016.</p>\n\n<h4>Total e-Commerce Sales</h4>\n\n<p><a href=\"https://landing.adobe.com/en/na/solutions/digital-index/ctir-2840-holiday-predictions-2017/index.html\">Adobe</a> put the total amount of e-commerce sales during that same timeframe at $108.15 billion in 2017.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png\" sizes=\"100vw\" alt=\"2017 holiday e-commerce revenue\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAdobe’s stats on 2016 and 2017 holiday e-commerce revenue (Source: <a href=\"https://landing.adobe.com/en/na/solutions/digital-index/ctir-2840-holiday-predictions-2017/index.html\">Adobe</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/818dc82f-4527-46ad-a84c-90c1af77dd2e/adobe-2017-revenue.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>e-Commerce Sales By Device</h4>\n\n<p>Adobe takes it even further and breaks down the share of revenue by device:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png\" sizes=\"100vw\" alt=\"Device-specific sales during 2017 holidays\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tBreakdown of desktop, smartphone and tablet sales for 2017 holiday season (Source: <a href=\"https://landing.adobe.com/en/na/solutions/digital-index/ctir-2840-holiday-predictions-2017/index.html\">Adobe</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab89eec8-c8a5-42fd-a5dd-3a47971f0e1d/adobe-share-of-revenue.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>e-Commerce Sales vs. Traffic</h4>\n\n<p>While smartphone and tablet sales still trail those on desktop, there are a couple interesting things to note here. For starters, desktop revenue has mostly flatlined year-over-year whereas mobile continues to grow. In addition, there’s an interesting disparity between how much traffic comes from each device and what percentage of revenue it generates:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png\" sizes=\"100vw\" alt=\"Traffic vs. revenue breakdown\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tTraffic vs. revenue for desktop, smartphone, tablet (Source: <a href=\"https://landing.adobe.com/en/na/solutions/digital-index/ctir-2840-holiday-predictions-2017/index.html\">Adobe</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39ae229c-7ef5-4e34-b651-ec53e6293c44/adobe-traffic-v-revenue.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Pay close attention to desktop and smartphone. As you can see, more visits stem from smartphones than any other device and, yet, desktop leads the way in conversions:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png\" sizes=\"100vw\" alt=\"Conversion rates by device\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tStatista shows the breakdown between desktop, smartphone, and tablet conversions in Q1 2018 (Source: <a href=\"https://www.statista.com/statistics/234884/us-online-shopper-conversion-rate-by-device/\">Statista</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53e76822-f3e3-41fc-aeb7-04dc7e5cc8e1/get-your-mobile-site-ready-for-the-2018-holiday-season-01.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Is this indicative of a lack of trust in smart devices to handle purchases?</p>\n\n<p>In all likelihood, it probably isn’t. <a href=\"https://www.digitalcommerce360.com/2018/01/04/sales-and-traffic-data-point-to-a-strong-online-holiday-season/\">Data from other sources</a> indicates that on holidays, in particular, <strong>mobile reigns supreme in terms of visits and conversions</strong>:</p>\n\n<ul>\n<li>Thanksgiving Day: 62% of traffic / 46% of purchases.</li>\n<li>Christmas Day: 68% of traffic / 50% of purchases.</li>\n</ul>\n<p>Also, let’s not forget to take into account the strengths of mobile devices within the shopper’s experience. According to the four <a href=\"https://www.smashingmagazine.com/2018/08/designing-for-micro-moments/\">micro-moments</a> as defined by Google, a large number of mobile users commonly search for the following:</p>\n\n<ul>\n<li>“I want to know.”</li>\n<li>“I want to go.”</li>\n<li>“I want to do.”</li>\n<li>“I want to buy.”</li>\n</ul>\n<p>The second and third are clearly indicative of a searcher’s desire to find something outside their devices (and their homes) to spend money on. That might even be so for the fourth, though it could also be an indication that they want to do their research on mobile and complete the purchase on desktop.</p>\n\n<p>Either way, we know that smartphones tend to be a primary facilitator in the customer’s journey and not something that’s putting an end to the shopping experience as a whole.</p>\n\n<p><strong>Recommended reading</strong>: <em><a href=\"https://www.smashingmagazine.com/2018/08/designing-for-micro-moments/\">Designing For Micro-Moments</a></em></p>\n\n<h3>5 Tips To Prepare Your Mobile Site For The 2018 Holiday Season</h3>\n\n<p>While the overall numbers indicate that desktop is the leading platform for holiday sales, it’s not a universal rule that can be applied to each and every day in November and December. This is why your own data will have to play a big role in the design choices you make for your mobile site this season.</p>\n\n<p>You have to admit, no matter how stressed or unhappy you might feel around the holidays, there is something nice about encountering just the right hint of holiday “cheer”. And that’s one of the keys to doing this right: <strong>finding the right amount of holiday flavor to infuse into your website</strong>.</p>\n\n<p>Before we get into what you can do to spruce up your mobile web design, I want to remind you that security and speed are critical elements to check off your list before November gets here. These might not be in your realm of responsibilities, but that doesn’t mean you shouldn’t keep an eye on them.</p>\n\n<p>If you’re doing all this design work in anticipation of boosting conversions over the holidays, don’t let it all be for nothing by forgetting about performance and security essentials. To protect your site from potentially harmful traffic surges, start with this <a href=\"https://www.smashingmagazine.com/2018/01/front-end-performance-checklist-2018-pdf-pages/\">front-end performance checklist</a>. With regards to security, you can use these <a href=\"https://www.smashingmagazine.com/2017/10/improving-performance-security/\">security improvement tips</a>.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<p>Now, let’s talk about the five ways in which you can prepare your mobile website for the 2018 holiday season:</p>\n\n<h4>1. Study Last Year’s Data</h4>\n\n<p>If your website has been live and actively doing business for more than a year, you need to start with the data from 2017. Using <a href=\"https://analytics.google.com/\">Google Analytics</a> and your CRM platform, locate answers to the following questions:</p>\n\n<h5>What was the prominent device that generated traffic? Sales?</h5>\n\n<p>Google Analytics allows you to divvy up traffic based on technology in a number of ways:</p>\n\n<p>Under Browser &amp; OS, you can sort visitors by browser:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png\" sizes=\"100vw\" alt=\"Google Analytics browser data\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tGoogle Analytics shows which browsers users visited from (Source: <a href=\"https://analytics.google.com/\">Google Analytics</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e15624-e271-4832-8869-b4b49af0699d/google-analytics-tech.png\">Large preview</a>)\n\t\t</figcaption></figure><p>There is a small tab at the top of the table for “Operating System”. Click that to reveal which OS were used:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png\" sizes=\"100vw\" alt=\"Google Analytics operating system data\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tGoogle Analytics breaks down traffic by operating system (Source: <a href=\"https://analytics.google.com/\">Google Analytics</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48c2fde-7fcb-4bbe-b1af-98d9bafc32fa/google-analytics-operating-system.png\">Large preview</a>)\n\t\t</figcaption></figure><p>You can use the <em>Mobile</em> → <em>Overview</em> tab to look at the simple breakdown between desktop, mobile, and tablet users.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png\" sizes=\"100vw\" alt=\"Google Analytics device data\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tGoogle Analytics division between device traffic (Source: <a href=\"https://analytics.google.com/\">Google Analytics</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffcc4d9-7c4e-417d-917e-8ec885243660/google-analytics-mobile-overview.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Really, your goal here is to weed out desktop users so you can focus strictly on mobile traffic as you assess the following data points.</p>\n\n<h5>When did your site experience an increase in traffic in November or December?</h5>\n\n<p>Every website’s holiday traffic history will look a little different. Take mine, for example:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png\" sizes=\"100vw\" alt=\"A sample Google Analytics holiday traffic chart\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAn example of holiday traffic up and downs in Google Analytics (Source: <a href=\"https://analytics.google.com/\">Google Analytics</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e33f05-5264-4597-818f-b4b29f66ae78/google-analytics-holidays.png\">Large preview</a>)\n\t\t</figcaption></figure><p>My business really isn’t affected by the holidays at all... except that I know things are going to be super quiet on and around Thanksgiving and the major holidays in December. This is still important information for me to have.</p>\n\n<p>For businesses that directly sell products or services through their site or content-based sites that plan publication schedules based on traffic, you’ll likely see a different trajectory in terms of highs and lows.</p>\n\n<h5>When did sales start to increase (if they don’t coincide with traffic)?</h5>\n\n<p>Again, for some of you, the matter of sales is irrelevant if you don’t offer any through your site. For everyone else, however, use the Google Analytics Conversions tab along with sales logged through your payment gateway or CRM to check this number.</p>\n\n<p>Just remember that you have to activate the Conversions module in Google Analytics if you want it to track that data. If you didn’t remember last year, put it in place for this year.</p>\n\n<h5>Did the holiday uptick remain consistent until the end of the season or were there temporary dropoffs?</h5>\n\n<p>Much of this has to do with how you promote holiday-related events, promotional offers or content through your website. If you consistently market around the holidays from November 1 to the end of the year, you should see relatively steady traffic and sales.</p>\n\n<p>Some days, of course, may be slower than others (like during workdays or earlier in the season), so it’s good to get a sense for the ebb and flow of your site’s holiday traffic. On the other hand, your website might be a major draw only on special sales days and the holidays themselves, so you can use this data to harness your energy for a big push on the days when it’ll have the greatest impact.</p>\n\n<p>Try to identify patterns, so you can plan your design and marketing strategy accordingly.</p>\n\n<h5>When did traffic and sales return to their usual amount?</h5>\n\n<p>At some point, your site is going to see a dip in activity. There are some businesses that embrace this.</p>\n\n<p>Let’s use <a href=\"https://www.xfinity.com/\">Xfinity</a> as an example. Around mid-November of last year, this is the holiday-centric message the top of the home page was pushing:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG\" sizes=\"100vw\" alt=\"Xfinity holiday promotion\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tXfinity promotes ways to make your home holiday ready (Source: <a href=\"https://www.xfinity.com/\">Xfinity</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61111ba3-0ab2-4e7d-9ede-9d2eb91064ad/holiday-design-xfinity-november.PNG\">Large preview</a>)\n\t\t</figcaption></figure><p>A month later, on December 9, any mention of the holidays was gone and replaced by a promotion of the upcoming Olympic Winter Games.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png\" sizes=\"100vw\" alt=\"Xfinity December promotion\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tXfinity stops promoting holidays in December (Source: <a href=\"https://www.xfinity.com/\">Xfinity</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccbb062a-1163-4a3b-9986-41f6769a7ca5/holiday-design-xfinity-december.png\">Large preview</a>)\n\t\t</figcaption></figure><p>One can only assume that a major sporting event like the Olympics helps Xfinity sign more subscribers than trying to capture last-minute sales for the holidays.</p>\n\n<p>Logically, this makes sense. December is a busy time for families. They’re planning travel, purchasing gifts and running around town in preparation for the upcoming celebrations. Most people probably don’t have time to set up a new cable or Internet package and wait around for Xfinity to configure it then.</p>\n\n<p>Bottom line: it’s okay if your holiday-related traffic and sales drop off earlier than December 31. Study your data and let your user behavior guide you in your mobile design and promotion strategy.</p>\n\n<h5>What were the most popular sources for mobile traffic?</h5>\n\n<p>It’s actually not enough to identify the most popular sources of mobile traffic for your site. Sure, you want to know if organic SEO and social media promotional efforts worked to bring traffic to it… but it won’t really matter if those visitors abandoned the site without taking action.</p>\n\n<p>When you start digging through the ways in which you acquired mobile visitors, make sure to review the sources and keywords used against other telling metrics, like:</p>\n\n<ul>\n<li>Bounce rate</li>\n<li>Time on site</li>\n<li>Pages visited</li>\n</ul>\n<p>This will give you a good sense for what sources — e.g. keywords, PPC ads, social media content, promotional backlinks from other sites — that attracted <strong>high-quality leads</strong> to it during the holiday season.</p>\n\n<h5>What were the most/least successful promotions?</h5>\n\n<p>One more thing to look at is what exactly performed the best between November and December with mobile visitors.</p>\n\n<p>Did you run a pop-up promoting free shipping that was dismissed by most mobile visitors, but greatly taken advantage of by those on desktop? Did your custom home page banner touting an upcoming Black Friday sale get more clicks than the home page banner otherwise does at other times of the year? And what pathway resulted in the most conversions?</p>\n\n<p>Dig into what exactly it was that appealed to your mobile visitors. Then, as you work on this year’s plan, focus on reproducing that success.</p>\n\n<h4>2. Assess The Navigation</h4>\n\n<p>The navigation plays two important roles on a website:</p>\n\n<ol>\n<li>High-level tabs inform visitors on what they’ll find on the site; essentially answering the question, “Is this of relevance to me?”</li>\n<li>The navigation itself provides visitors with shortcuts to parts of the site that matter most to them, simplifying their pathway to conversion.</li>\n</ol>\n<p>When reviewing your navigation in the context of holiday traffic, you must ensure that it fulfills both of these roles.</p>\n\n<p>Let’s look at two websites that provide relevant links during the holidays while also streamlining the visitors’ journey from entry to holiday-related pages.</p>\n\n<p><a href=\"https://food52.com/\">Food52</a> is an online hub for people who enjoy cooking. You can buy kitchen gadgets from the site and peruse a whole bunch of content related to food and cooking.</p>\n\n<p>I want to call out a number of things Food52 does especially well in terms of navigation:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG\" sizes=\"100vw\" alt=\"Thanksgiving categories on Food52\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe Food52 home page includes Thanksgiving-related categories (Source: <a href=\"https://food52.com/\">Food52</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/562d4881-830f-4b15-831a-74f7b144fb5d/holiday-design-food52-thanksgiving-categories.PNG\">Large preview</a>)\n\t\t</figcaption></figure><ol>\n<li>\n<strong>The hamburger menu</strong> is prominently displayed in the top-left, which is exactly where visitors’ eyes will go as they follow the <a href=\"https://uxplanet.org/z-shaped-pattern-for-reading-web-content-ce1135f92f1c\">Z-shaped pattern</a> for reading.</li>\n<li>The <strong>shopping cart, search bar shortcut</strong> and <strong>profile link</strong> are also displayed in the top header, making it easy to navigate to elements that support the shopping experience.</li>\n<li>If you scroll down on the home page (as I’ve done in the screenshot above), Food52 includes a good mix of Thanksgiving-related content along with its standard fare. In addition, it includes <strong>categories</strong> that help users filter through content that’s most relevant to them.</li>\n</ol>\n<p>One other thing I’d like to point out is the navigation itself:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png\" sizes=\"100vw\" alt=\"Simplified mobile navigation from Food52\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tSimplified and customized navigation from Food52 for Thanksgiving (Source: <a href=\"https://food52.com/\">Food52</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b047a9f-f8f3-43b3-b921-672b4363ffe4/holiday-design-food52-thanksgiving-navigation.png\">Large preview</a>)\n\t\t</figcaption></figure><p>There are a number of things you’ll notice:</p>\n\n<ul>\n<li>The mobile navigation is quite simplified. Despite how many categories and types of pages the site has, the navigation keeps this from being an overwhelming choice.</li>\n<li>There are special tabs for Thanksgiving and Holiday. This will get users directly to content related to the holiday they’re cooking for.</li>\n<li>The Hotline — which is its customer service forum — is also featured in the mobile navigation. This element is especially important around the holidays when visitors have questions they need answered quickly.</li>\n</ul>\n<p><a href=\"https://www.llbean.com/\">L.L.Bean</a> is another website that handles mobile navigation well.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG\" sizes=\"100vw\" alt=\"L.L.Bean Navigation\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tL.L.Bean puts the essentials in the navigation (Source: <a href=\"https://www.llbean.com/\">L.L.Bean</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a27a48a-04e2-4aab-b3ae-4afac6cbfd1f/holiday-design-llbean-december.PNG\">Large preview</a>)\n\t\t</figcaption></figure><p>As you can see, there are four buttons located within the mobile header:</p>\n\n<ul>\n<li>Hamburger navigation icon: bolded and well-placed;</li>\n<li>L.L.Bean logo for easy backtracking to the home page;</li>\n<li>A shopping cart icon which will keep stored items top-of-mind with mobile users;</li>\n<li>An ever-present search bar to speed up navigation even further.</li>\n</ul>\n<p>Once a mobile user expands the hamburger navigation, they encounter this:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG\" sizes=\"100vw\" alt=\"L.L.Bean hamburger navigation\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tL.L.Bean prioritizes customer service and gifts around the holidays (Source: <a href=\"https://www.llbean.com/\">L.L.Bean</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/447c84c4-410f-4ce5-888b-7566552a6afd/holiday-design-llbean-navigation.PNG\">Large preview</a>)\n\t\t</figcaption></figure><p>As you can see, “Call Us” is the first option available within the mobile navigation. Again, with people in a rush and trying to get purchases done right over the holidays, having a direct line of communication to the company is important. The account link and “Ship To” personalization are also nice touches as these icons keep conversion top-of-mind.</p>\n\n<p>Now, looking down the navigation, you’ll see this is a pretty standard mega menu. However, take note that at the very top of this category (as is the case for all others) appears a page for “Gifts”. This is not something you see the rest of the year, so that’s another holiday-related touch meant to streamline searches and sales.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h4>3. Use Add-ons At Checkout</h4>\n\n<p>Here is everything you need to know to <a href=\"https://www.smashingmagazine.com/2018/04/increasing-mobile-checkout-conversions/\">optimize conversions at mobile checkout</a>. If I can add an additional two cents to this matter, though, I’d like to briefly talk about add-ons at checkout… <strong>but only around the holidays</strong>.</p>\n\n<p>Typically, I believe that a fully streamlined checkout process is essential to capturing as many conversions as possible on mobile devices. It’s hard enough typing out all that information (if it doesn’t auto-populate) and trusting that devices and websites will keep payment information secure.</p>\n\n<p><em>However…</em></p>\n\n<p>When it comes to designing the checkout for holiday shoppers, I think it’s at least worth experimenting with add-ons. For example:</p>\n\n<ul>\n<li>Promo codes</li>\n<li>Free delivery options</li>\n<li>Shorter, but more premium delivery or pick up in store options</li>\n<li>Gift wrapping.</li>\n</ul>\n<p><a href=\"https://shop.nordstrom.com/\">Nordstrom</a> doesn’t even wait for visitors to get to the checkout to promote this.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png\" sizes=\"100vw\" alt=\"Nordstrom free shipping\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tNordstrom promotes free shipping and returns right away (Source: <a href=\"https://shop.nordstrom.com/\">Nordstrom</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b885d4ff-e29f-4b71-b4fb-ef21fa2a2f0d/holiday-design-nordstrom-shipping.png\">Large preview</a>)\n\t\t</figcaption></figure><p>The very top of the site has a sticky bar promoting the free shipping and returns offer. This way, visitors are already in the mindset that they can get their Black Friday purchases or holiday gifts for even cheaper than planned.</p>\n\n<p><a href=\"https://www.fitbit.com/home\">Fitbit</a> has another example of this I really like:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png\" sizes=\"100vw\" alt=\"Fitbit holiday promotions\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tFitbit promotes sales and free expedited shipping (Source: <a href=\"https://www.fitbit.com/home\">Fitbit</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2d0b7a-28c8-4244-98c6-94957c8a922f/holiday-design-fitbit.png\">Large preview</a>)\n\t\t</figcaption></figure><p>The top-half of the Fitbit homepage gets visitors into the mindset that there are cost savings galore here. Not only are items on sale, but certain orders come with free <em>and</em> expedited shipping. And the site clearly states when the sale ends, which will keep customers from getting upset if gifts don’t arrive on time. (It will also probably motivate them to get their shopping done sooner if they want to cash in on the sale.)</p>\n\n<p>So all appropriate expectations regarding pricing and shipping are set right from the very get-go, making checkout go more smoothly.</p>\n\n<p>I know that <a href=\"https://medium.com/@gajus/the-biggest-ux-mistake-in-e-commerce-discount-code-input-on-the-checkout-page-e2458d894231\">some may argue these will be bad for UX</a> (and normally I’d join them), but I don’t see them as distractions during the holidays. This is an expensive and busy time of year.</p>\n\n<p>Anything you can add to checkout that says, “Hey, we’re thinking about you and want to make this holiday season go just a little more smoothly” would go over well with your users.</p>\n\n<h4>4. Give Images A Seasonal Touch</h4>\n\n<p>Images are a tricky thing this time of year. You want to use them to appeal to holiday-minded visitors, but you don’t want to overdo it because images add a lot of pressure to your server. You need your site running fast, so be smart about what you do with them.</p>\n\n<ol>\n<li>Resize them before you ever add them to your site. There’s no need to use oversized images if they’re going to appear smaller online.</li>\n<li>Optimize your images with compression tools before and after they’re added to the design. This will free up some space they would otherwise take.</li>\n<li>If your users’ journey starts above-the-fold, you might want to consider lazy-loading images.</li>\n</ol>\n<p>That said, images can go a long way in communicating to visitors that your site and business are ready to spread some holiday cheer without having to ever explicitly say it. This might be the ideal choice for those of you who design websites for global audiences. Perhaps you’d rather use an image that evokes a festive feeling because you don’t want to unintentionally offend anyone who doesn’t celebrate the holiday your copy calls express attention to.</p>\n\n<p>Here is a great example from <a href=\"https://www.uncommongoods.com/\">Uncommon Goods</a>:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png\" sizes=\"100vw\" alt=\"Uncommon Goods holiday home page\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tUncommon Goods holiday home page (Source: <a href=\"https://www.uncommongoods.com/\">Uncommon Goods</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d49868cf-70a0-47a6-9df3-1543bca7f9e1/holiday-design-uncommon-goods-december.png\">Large preview</a>)\n\t\t</figcaption></figure><p>I wouldn’t necessarily say the images used here are festive, but there are unique elements that evoke a certain association with the holidays. Like the color green used within the photos. Or the partial glances of what appear to be snow globes. They’re seasonal elements, but not necessarily relegated to Christmas, Hanukkah or Kwanzaa.</p>\n\n<p>Then, there’s the United States Postal Service (<a href=\"https://www.usps.com/\">USPS</a>) website. Granted, this website targets visitors within the United States, but it remains mindful of the differences in religions practiced and holidays celebrated.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png\" sizes=\"100vw\" alt=\"USPS festive image\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tUSPS uses a non-denominational image to promote the holidays (Source: <a href=\"https://www.usps.com/\">USPS</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/193dd3bd-e9ee-40ac-b691-9b18392c075a/holiday-design-usps.png\">Large preview</a>)\n\t\t</figcaption></figure><p>The message remains neutral as does the image itself. The USPS is simply trying to help people quickly and festively send holiday cards, gifts and other items to distant relatives and friends.</p>\n\n<h4>5. Review The Customer Journey</h4>\n\n<p>The factor of speed is a big one when it comes to designing the customer journey. While the navigation cuts down on any unnecessary steps that might be taken when visitors can afford a more leisurely pace, your design should expedite the rest.</p>\n\n<p>In other words:</p>\n\n<ul>\n<li>Start talking about holiday-related content, products, pages and links right on the home page.</li>\n<li>Make sure you have at least one mention above-the-fold, whether it’s in the navigation, in a blog link or in a seasonal promo.</li>\n<li>Use the data from last year to streamline the ideal pathway from the home page to conversion.</li>\n<li>Walk through that pathway as a visitor on both desktop and mobile. Is it as clear, concise and direct as possible?</li>\n<li>Check the responsiveness of the pathway. Your site, in general, needs to be responsive, but if you’re optimizing a certain journey for visitors and you want them to convert on mobile, then extra care needs to be taken.</li>\n</ul>\n<p>Below is another example from the Food52 website from the holidays. As you can see in this snippet, two kinds of holiday-related content are promoted. What’s cool about them, though, is that it’s not necessarily in-your-face.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG\" sizes=\"100vw\" alt=\"Food52’s festive home page design\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tFood52 adds a holiday touch to its home page design and copy (Source: <a href=\"https://food52.com/\">Food52</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/015cf47b-6d42-427c-aa3d-663ebad0e15b/holiday-design-food52-december.PNG\">Large preview</a>)\n\t\t</figcaption></figure><p>The relish recipe could easily be used any time of the year. However, because pomegranates are often considered a winter food, this falls into the category of holiday-related content. The second post is more blatant about attracting holiday readers.</p>\n\n<p>The final element in this screenshot is also worth taking note of. To start, it appears they’ve customized the copy specifically for this time of year. All it takes is one addition of the word “joyfully” to let visitors know that Food52 took time to make its site just a little more festive.</p>\n\n<p>I also want to give them kudos for including a newsletter subscription box here and in other key areas of the site.</p>\n\n<p>If the research from Adobe is right and only about half of mobile visitors convert, then this is a smart design choice. This way, Food52 can collect visitor information on mobile and contact them later. When interested visitors receive the reminder at a more convenient time and place, they can hop onto their desktop or other preferred device and finish the conversion process.</p>\n\n<p>Another site which I think handles the customer journey optimization well is <a href=\"https://crackerbarrel.com/\">Cracker Barrel</a>.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png\" sizes=\"100vw\" alt=\"Cracker Barrel home page design\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tCracker Barrel home page design (Source: <a href=\"https://crackerbarrel.com/\">Cracker Barrel</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d9babe-5f37-4806-8b5c-1bf9a12aa9d1/holiday-design-cracker-barrel.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Cracker Barrel doesn’t overdo it when it comes to designing for the holidays. Instead, it’s developed a series of calls-to-action that set certain types of visitors on the right path.</p>\n\n<p>The first one features an image of what looks like a holiday feast with the CTA “Order Heat N’ Serve”. That’s brilliant. If people are taking the time to visit this site right before Thanksgiving, it’s probably to see if they can get help preparing their major feast… which it appears they can.</p>\n\n<p>The second section sort of looks festive, though I’d still say they play it safe with choice of color, texture and gift card image. With a CTA of “Buy Gift Cards”, they’re now appealing to holiday shoppers. Not only can you get a whole feast conveniently prepared by Cracker Barrel, but you can buy gifts here, too.</p>\n\n<p>Sometimes designing for the holidays isn’t about the blatant use of snowflake imagery or promoting recipes for cooking a turkey. Sometimes it’s about understanding what your users’ particular needs are at that time and helping setting them on that exact journey right away.</p>\n\n<h3>Wrap-Up</h3>\n\n<p>I understand that there are ways to add a dancing Santa to a site or to spruce up pop-ups with animated text and images, but I think subtler is better.</p>\n\n<p>It’s kind of like the whole holiday music and decorations thing. How many times have you gone to your local drug store at the end of October for the purposes of getting Halloween candy, only to be met by an entire aisle full of holiday decorations? Or maybe you entered a department store like Macy’s in November, thinking you’ll beat the crazy holiday crowds. And, yet, holiday music is already playing. <strong>It’s overkill</strong>.</p>\n\n<p>If you want to impress mobile visitors with your website around the holidays, focus on making this a worthwhile experience. Optimize your server for high volumes of traffic, put extra security in place, reorganize the navigation and add some small festive touches to your design that call attention to the most relevant parts of your site at this time of year.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, yk, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-09-03 12:30:43","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Come Rain Or Come Shine: Inspiring Wallpapers For September 2018","pubDate":"2018-08-31 10:45:54","link":"https://www.smashingmagazine.com/2018/08/desktop-wallpaper-calendars-september-2018/","guid":"https://www.smashingmagazine.com/2018/08/desktop-wallpaper-calendars-september-2018/","author":"Cosima Mielke","thumbnail":"https://res.cloudinary.com/indysigner/image/upload/v1528877747/smashing-book-6-opt-wo-shadow_kbbopt.png","description":"September is a time of transition. While some are trying to conserve the summer feeling just a bit longer, others are eager for fall to come with its colorful leaves and rainy days. But no matter how you feel about September or what the new month might be bringing along, this wallpaper collection sure has something to inspire you.\nJust like every month since more than nine years already, artists and designers from across the globe once again challenged their creative skills and designed wallpapers to help you break out of your routine and give your desktop a fresh makeover.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/08/desktop-wallpaper-calendars-september-2018/\">\n<title>Come Rain Or Come Shine: Inspiring Wallpapers For September 2018</title>\n<article><header><h1>Come Rain Or Come Shine: Inspiring Wallpapers For September 2018</h1>\n                  \n                    \n                    <address>Cosima Mielke</address>\n                  \n                  <time datetime=\"2018-08-31T12:45:54+02:00\" class=\"op-published\">2018-08-31T12:45:54+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>September is a time of transition. While some are trying to conserve the summer feeling just a bit longer, others are eager for fall to come with its colorful leaves and rainy days. But no matter how you feel about September or what the new month might be bringing along, this wallpaper collection sure has something to inspire you.</p>\n\n<p>Just like every month since <a href=\"https://www.smashingmagazine.com/category/wallpapers\">more than nine years</a> already, artists and designers from across the globe once again challenged their creative skills and designed wallpapers to help you <strong>break out of your routine</strong> and give your desktop a fresh makeover. Each one of them comes in versions with and without a calendar for September 2018 and can be downloaded for free.</p>\n\n<p>As a little extra goodie, we also went through our archives on the look for some timeless September wallpaper treasures which you’ll find assembled at the end of this post. Please note that these oldies, thus, don’t come with a calendar. Happy September!</p>\n\n<p>Please note that: </p>\n\n<ul>\n<li>All <strong>images can be clicked on</strong> and lead to the preview of the wallpaper,</li>\n<li>You can <a href=\"https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/\">feature your work in our magazine</a> by taking part in our Desktop Wallpaper Calendar series. We are regularly looking for creative designers and artists to be featured on Smashing Magazine. Are you one of them?</li>\n</ul>\n<h4>\n<span class=\"rh\">Further Reading</span> on SmashingMag:</h4>\n\n<ul>\n<li><a title=\"Read 'Make Em Shine: How To Use Illustrations To Elicit Emotions'\" href=\"https://www.smashingmagazine.com/2017/05/emotional-design-illustrations/\" rel=\"bookmark\">Make 'Em Shine: How To Use Illustrations To Elicit Emotions</a></li>\n<li><a title=\"Read 'How To Create A Flat Vector Illustration In Affinity Designer'\" href=\"https://www.smashingmagazine.com/2018/07/flat-vector-illustration-affinity-designer/\" rel=\"bookmark\">How To Create A Flat Vector Illustration In Affinity Designer</a></li>\n<li><a title=\"Read 'How To Draw A Cartoon In Illustrator'\" href=\"https://www.smashingmagazine.com/2016/03/drawing-a-cartoon-in-illustrator/\" rel=\"bookmark\">How To Draw A Cartoon In Illustrator</a></li>\n<li><a title=\"Read 'How To Create Dramatic Vector Illustrations'\" href=\"https://www.smashingmagazine.com/2016/11/how-to-create-a-dramatic-vector-illustration/\" rel=\"bookmark\">How To Create Dramatic Vector Illustrations</a></li>\n</ul>\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\" data-remove=\"true\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n        <p>Meet <strong><a href=\"https://smashed.by/sb6panel\">Smashing Book 6</a></strong> with <em>everything</em> from design systems and accessible single-page apps to CSS Custom Properties, Grid, Service Workers, performance, AR/VR and <strong>responsive art direction</strong>. New frontiers in front-end and UX with Marcy Sutton, Harry Roberts, Laura Elizabeth and <a href=\"https://smashed.by/sb6paneltoc\">many others</a>.</p>\n        <a href=\"https://smashed.by/sb6panel\">\n          <button class=\"btn btn--green btn--large\">\n            Table of Contents →\n          </button>\n        </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/sb6panel\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://res.cloudinary.com/indysigner/image/upload/v1528877747/smashing-book-6-opt-wo-shadow_kbbopt.png\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><h3>Cacti Everywhere</h3>\n<p>Seasons come and go, but our brave cactuses still stand. Summer is almost over, and autumn is coming, but the beloved plants don’t care. — Designed by <a href=\"https://pathlove.com/\">Lívia Lénárt</a> from Hungary.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/sep-18-cacti-everywhere-full.jpg\" title=\"Cacti Everywhere\"><img width=\"800\" height=\"450\" alt=\"Cacti Everywhere\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2bd1397-42ee-4ce0-a6e4-3c8ce0297209/sep-18-cacti-everywhere-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/sep-18-cacti-everywhere-preview.jpg\" title=\"Cacti Everywhere - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-320x480.jpg\" title=\"Cacti Everywhere - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-800x480.jpg\" title=\"Cacti Everywhere - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-1024x768.jpg\" title=\"Cacti Everywhere - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-1024x1024.jpg\" title=\"Cacti Everywhere - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-1280x1024.jpg\" title=\"Cacti Everywhere - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-1400x1050.jpg\" title=\"Cacti Everywhere - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-1920x1080.jpg\" title=\"Cacti Everywhere - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-1920x1200.jpg\" title=\"Cacti Everywhere - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-1920x1440.jpg\" title=\"Cacti Everywhere - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/cal/sep-18-cacti-everywhere-cal-2560x1440.jpg\" title=\"Cacti Everywhere - 2560x1440\">2560x1440</a>    </li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-320x480.jpg\" title=\"Cacti Everywhere - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-800x480.jpg\" title=\"Cacti Everywhere - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1024x768.jpg\" title=\"Cacti Everywhere - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1024x1024.jpg\" title=\"Cacti Everywhere - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1280x1024.jpg\" title=\"Cacti Everywhere - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1400x1050.jpg\" title=\"Cacti Everywhere - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1080.jpg\" title=\"Cacti Everywhere - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1200.jpg\" title=\"Cacti Everywhere - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1440.jpg\" title=\"Cacti Everywhere - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-2560x1440.jpg\" title=\"Cacti Everywhere - 2560x1440\">2560x1440</a>    </li>\n</ul>\n<h3>Batmom</h3>\n<p>Designed by <a href=\"https://www.ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p>\n<fgure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/sep-18-batmom-full.png\" title=\"Batmom\"><img width=\"800\" height=\"450\" alt=\"Batmom\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/090b5141-9637-49dc-9ef7-9230c5326bad/sep-18-batmom-preview-opt.png\"></a>\n<ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/sep-18-batmom-preview.png\" title=\"Batmom - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-320x480.png\" title=\"Batmom - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-640x480.png\" title=\"Batmom - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-800x480.png\" title=\"Batmom - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-800x600.png\" title=\"Batmom - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1024x768.png\" title=\"Batmom - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1024x1024.png\" title=\"Batmom - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1152x864.png\" title=\"Batmom - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1280x720.png\" title=\"Batmom - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1280x800.png\" title=\"Batmom - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1280x960.png\" title=\"Batmom - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1280x1024.png\" title=\"Batmom - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1366x768.png\" title=\"Batmom - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1400x1050.png\" title=\"Batmom - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1440x900.png\" title=\"Batmom - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1600x1200.png\" title=\"Batmom - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1680x1050.png\" title=\"Batmom - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1680x1200.png\" title=\"Batmom - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1920x1080.png\" title=\"Batmom - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1920x1200.png\" title=\"Batmom - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-1920x1440.png\" title=\"Batmom - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/cal/sep-18-batmom-cal-2560x1440.png\" title=\"Batmom - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-320x480.png\" title=\"Batmom - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-640x480.png\" title=\"Batmom - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-800x480.png\" title=\"Batmom - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-800x600.png\" title=\"Batmom - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1024x768.png\" title=\"Batmom - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1024x1024.png\" title=\"Batmom - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1152x864.png\" title=\"Batmom - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x720.png\" title=\"Batmom - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x800.png\" title=\"Batmom - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x960.png\" title=\"Batmom - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1280x1024.png\" title=\"Batmom - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1366x768.png\" title=\"Batmom - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1400x1050.png\" title=\"Batmom - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1440x900.png\" title=\"Batmom - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1600x1200.png\" title=\"Batmom - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1680x1050.png\" title=\"Batmom - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1680x1200.png\" title=\"Batmom - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1920x1080.png\" title=\"Batmom - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1920x1200.png\" title=\"Batmom - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-1920x1440.png\" title=\"Batmom - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/batmom/nocal/sep-18-batmom-nocal-2560x1440.png\" title=\"Batmom - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h3>Summer Is Not Over Yet</h3>\n<p>This is our way of asking the summer not to go away. We were inspired by travel and exotic islands. In fact, it seems that September was the seventh month in the Roman calendar, dedicated to Vulcan, a god of fire. The legend has it that he was the son of Jupiter and Juno, and being an ugly baby with a limp, his mother tried to push him off a cliff into a volcano. Not really a nice story, but that’s where the tale took us. Anyway, enjoy September — because summer’s not over yet! — Designed by <a href=\"https://www.popwebdesign.net/index_eng.html\">PopArt Studio</a> from Novi Sad, Serbia.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/sep-18-summer-is-not-over-yet-full.jpg\" title=\"Summer Is Not Over Yet\"><img width=\"800\" height=\"450\" alt=\"Summer Is Not Over Yet\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ffc7944b-5677-4466-80db-8c0caf85d6d4/sep-18-summer-is-not-over-yet-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/sep-18-summer-is-not-over-yet-preview.jpg\" title=\"Summer Is Not Over Yet - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-320x480.jpg\" title=\"Summer Is Not Over Yet - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-640x480.jpg\" title=\"Summer Is Not Over Yet - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-800x480.jpg\" title=\"Summer Is Not Over Yet - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-800x600.jpg\" title=\"Summer Is Not Over Yet - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1024x768.jpg\" title=\"Summer Is Not Over Yet - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1024x1024.jpg\" title=\"Summer Is Not Over Yet - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1152x864.jpg\" title=\"Summer Is Not Over Yet - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1280x720.jpg\" title=\"Summer Is Not Over Yet - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1280x800.jpg\" title=\"Summer Is Not Over Yet - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1280x960.jpg\" title=\"Summer Is Not Over Yet - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1280x1024.jpg\" title=\"Summer Is Not Over Yet - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1400x1050.jpg\" title=\"Summer Is Not Over Yet - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1440x900.jpg\" title=\"Summer Is Not Over Yet - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1600x1200.jpg\" title=\"Summer Is Not Over Yet - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1680x1050.jpg\" title=\"Summer Is Not Over Yet - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1680x1200.jpg\" title=\"Summer Is Not Over Yet - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1920x1080.jpg\" title=\"Summer Is Not Over Yet - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1920x1200.jpg\" title=\"Summer Is Not Over Yet - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-1920x1440.jpg\" title=\"Summer Is Not Over Yet - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/cal/sep-18-summer-is-not-over-yet-cal-2560x1440.jpg\" title=\"Summer Is Not Over Yet - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-320x480.jpg\" title=\"Summer Is Not Over Yet - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-640x480.jpg\" title=\"Summer Is Not Over Yet - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-800x480.jpg\" title=\"Summer Is Not Over Yet - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-800x600.jpg\" title=\"Summer Is Not Over Yet - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1024x768.jpg\" title=\"Summer Is Not Over Yet - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1024x1024.jpg\" title=\"Summer Is Not Over Yet - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1152x864.jpg\" title=\"Summer Is Not Over Yet - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1280x720.jpg\" title=\"Summer Is Not Over Yet - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1280x800.jpg\" title=\"Summer Is Not Over Yet - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1280x960.jpg\" title=\"Summer Is Not Over Yet - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1280x1024.jpg\" title=\"Summer Is Not Over Yet - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1400x1050.jpg\" title=\"Summer Is Not Over Yet - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1440x900.jpg\" title=\"Summer Is Not Over Yet - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1600x1200.jpg\" title=\"Summer Is Not Over Yet - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1680x1050.jpg\" title=\"Summer Is Not Over Yet - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1680x1200.jpg\" title=\"Summer Is Not Over Yet - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1920x1080.jpg\" title=\"Summer Is Not Over Yet - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1920x1200.jpg\" title=\"Summer Is Not Over Yet - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-1920x1440.jpg\" title=\"Summer Is Not Over Yet - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-is-not-over-yet/nocal/sep-18-summer-is-not-over-yet-nocal-2560x1440.jpg\" title=\"Summer Is Not Over Yet - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h3>Summer Collapsed Into Fall</h3>\n<p>The lands are painted gold lit with autumn blaze. And all at once the leaves of the trees started falling, but none of them are worried. Since, everyone falls in love with fall. — Designed by <a href=\"https://mindster.in/\">Mindster</a> from India.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/sep-18-summer-collapsed-into-fall-full.png\" title=\"Summer Collapsed Into Fall\"><img width=\"800\" height=\"450\" alt=\"Summer Collapsed Into Fall\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efb68935-a460-468c-92dd-895ba983010e/sep-18-summer-collapsed-into-fall-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/sep-18-summer-collapsed-into-fall-preview.png\" title=\"Summer Collapsed Into Fall - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-320x480.png\" title=\"Summer Collapsed Into Fall - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-640x480.png\" title=\"Summer Collapsed Into Fall - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-800x480.png\" title=\"Summer Collapsed Into Fall - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-800x600.png\" title=\"Summer Collapsed Into Fall - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1024x768.png\" title=\"Summer Collapsed Into Fall - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1024x1024.png\" title=\"Summer Collapsed Into Fall - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1152x864.png\" title=\"Summer Collapsed Into Fall - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1280x720.png\" title=\"Summer Collapsed Into Fall - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1280x800.png\" title=\"Summer Collapsed Into Fall - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1280x960.png\" title=\"Summer Collapsed Into Fall - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1280x1024.png\" title=\"Summer Collapsed Into Fall - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1366x768.png\" title=\"Summer Collapsed Into Fall - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1400x1050.png\" title=\"Summer Collapsed Into Fall - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1440x900.png\" title=\"Summer Collapsed Into Fall - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1600x1200.png\" title=\"Summer Collapsed Into Fall - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1680x1050.png\" title=\"Summer Collapsed Into Fall - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1680x1200.png\" title=\"Summer Collapsed Into Fall - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-1920x1440.png\" title=\"Summer Collapsed Into Fall - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/cal/sep-18-summer-collapsed-into-fall-cal-2560x1440.png\" title=\"Summer Collapsed Into Fall - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-320x480.png\" title=\"Summer Collapsed Into Fall - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-640x480.png\" title=\"Summer Collapsed Into Fall - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-800x480.png\" title=\"Summer Collapsed Into Fall - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-800x600.png\" title=\"Summer Collapsed Into Fall - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1024x768.png\" title=\"Summer Collapsed Into Fall - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1024x1024.png\" title=\"Summer Collapsed Into Fall - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1152x864.png\" title=\"Summer Collapsed Into Fall - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x720.png\" title=\"Summer Collapsed Into Fall - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x800.png\" title=\"Summer Collapsed Into Fall - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x960.png\" title=\"Summer Collapsed Into Fall - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x1024.png\" title=\"Summer Collapsed Into Fall - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1366x768.png\" title=\"Summer Collapsed Into Fall - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1400x1050.png\" title=\"Summer Collapsed Into Fall - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1440x900.png\" title=\"Summer Collapsed Into Fall - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1600x1200.png\" title=\"Summer Collapsed Into Fall - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1680x1050.png\" title=\"Summer Collapsed Into Fall - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1680x1200.png\" title=\"Summer Collapsed Into Fall - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1920x1440.png\" title=\"Summer Collapsed Into Fall - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-2560x1440.png\" title=\"Summer Collapsed Into Fall - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<!--<h3 id=\"fresh-breeze-09-2018\">Fresh Breeze</h3>\n<p>&#147;I’m already looking forward to the fresh breezes of autumn, summer’s too hot for me!&#148; &mdash; Designed by Bryan Van Mechelen from Belgium.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/sep-18-fresh-breeze-full.png\" title=\"Fresh Breeze\"><img width=\"800\" height=\"450\" alt=\"Fresh Breeze\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1ea405e5-4981-4482-994f-9acd090c207e/sep-18-fresh-breeze-preview-opt.png\" /></a></figure>\n<ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1ea405e5-4981-4482-994f-9acd090c207e/sep-18-fresh-breeze-preview-opt.png\" title=\"Fresh Breeze - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/cal/sep-18-fresh-breeze-cal-640x480.png\" title=\"Fresh Breeze - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/cal/sep-18-fresh-breeze-cal-960x560.png\" title=\"Fresh Breeze - 960x560\">960x560</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/cal/sep-18-fresh-breeze-cal-1024x768.png\" title=\"Fresh Breeze - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/cal/sep-18-fresh-breeze-cal-1920x1080.png\" title=\"Fresh Breeze - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/cal/sep-18-fresh-breeze-cal-2560x1600.png\" title=\"Fresh Breeze - 2560x1600\">2560x1600</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/nocal/sep-18-fresh-breeze-nocal-640x480.png\" title=\"Fresh Breeze - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/nocal/sep-18-fresh-breeze-nocal-960x560.png\" title=\"Fresh Breeze - 960x560\">960x560</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/nocal/sep-18-fresh-breeze-nocal-1024x768.png\" title=\"Fresh Breeze - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/nocal/sep-18-fresh-breeze-nocal-1920x1080.png\" title=\"Fresh Breeze - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/fresh-breeze/nocal/sep-18-fresh-breeze-nocal-2560x1600.png\" title=\"Fresh Breeze - 2560x1600\">2560x1600</a></li>\n</ul>--><h3>No More Inflatable Flamingos!</h3>\n<p>Summer is officially over and we will no longer need our inflatable flamingos. Now, we’ll need umbrellas. And some flamingos will need an umbrella too! — Designed by <a href=\"https://www.behance.net/marinabosn94ad\">Marina Bošnjak</a> from Croatia.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/sep-18-no-more-inflatable-flamingos-full.png\" title=\"No More Inflatable Flamingos!\"><img width=\"800\" height=\"450\" alt=\"No More Inflatable Flamingos!\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75082e5a-138c-4105-8588-41dd72e83776/sep-18-no-more-inflatable-flamingos-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/sep-18-no-more-inflatable-flamingos-preview.png\" title=\"No More Inflatable Flamingos! - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-320x480.png\" title=\"No More Inflatable Flamingos! - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-640x480.png\" title=\"No More Inflatable Flamingos! - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-800x480.png\" title=\"No More Inflatable Flamingos! - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-800x600.png\" title=\"No More Inflatable Flamingos! - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1024x768.png\" title=\"No More Inflatable Flamingos! - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1024x1024.png\" title=\"No More Inflatable Flamingos! - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1152x864.png\" title=\"No More Inflatable Flamingos! - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1280x720.png\" title=\"No More Inflatable Flamingos! - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1280x800.png\" title=\"No More Inflatable Flamingos! - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1280x960.png\" title=\"No More Inflatable Flamingos! - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1280x1024.png\" title=\"No More Inflatable Flamingos! - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1366x768.png\" title=\"No More Inflatable Flamingos! - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1400x1050.png\" title=\"No More Inflatable Flamingos! - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1440x900.png\" title=\"No More Inflatable Flamingos! - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1600x1200.png\" title=\"No More Inflatable Flamingos! - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1680x1050.png\" title=\"No More Inflatable Flamingos! - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1680x1200.png\" title=\"No More Inflatable Flamingos! - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1920x1080.png\" title=\"No More Inflatable Flamingos! - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1920x1200.png\" title=\"No More Inflatable Flamingos! - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-1920x1440.png\" title=\"No More Inflatable Flamingos! - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/cal/sep-18-no-more-inflatable-flamingos-cal-2560x1440.png\" title=\"No More Inflatable Flamingos! - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-320x480.png\" title=\"No More Inflatable Flamingos! - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-640x480.png\" title=\"No More Inflatable Flamingos! - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-800x480.png\" title=\"No More Inflatable Flamingos! - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-800x600.png\" title=\"No More Inflatable Flamingos! - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1024x768.png\" title=\"No More Inflatable Flamingos! - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1024x1024.png\" title=\"No More Inflatable Flamingos! - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1152x864.png\" title=\"No More Inflatable Flamingos! - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1280x720.png\" title=\"No More Inflatable Flamingos! - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1280x800.png\" title=\"No More Inflatable Flamingos! - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1280x960.png\" title=\"No More Inflatable Flamingos! - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1280x1024.png\" title=\"No More Inflatable Flamingos! - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1366x768.png\" title=\"No More Inflatable Flamingos! - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1400x1050.png\" title=\"No More Inflatable Flamingos! - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1440x900.png\" title=\"No More Inflatable Flamingos! - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1600x1200.png\" title=\"No More Inflatable Flamingos! - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1680x1050.png\" title=\"No More Inflatable Flamingos! - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1680x1200.png\" title=\"No More Inflatable Flamingos! - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1920x1080.png\" title=\"No More Inflatable Flamingos! - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1920x1200.png\" title=\"No More Inflatable Flamingos! - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-1920x1440.png\" title=\"No More Inflatable Flamingos! - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/no-more-inflatable-flamingos/nocal/sep-18-no-more-inflatable-flamingos-nocal-2560x1440.png\" title=\"No More Inflatable Flamingos! - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h3>New Beginnings</h3>\n<p>In September the kids and students go back to school. — Designed by <a href=\"http://melissa.bogemans.com/\">Melissa Bogemans</a> from Belgium.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/sep-18-new-beginnings-full.png\" title=\"New Beginnings\"><img width=\"800\" height=\"450\" alt=\"New Beginnings\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/86e81513-e8a9-4b56-9584-3480972a6743/sep-18-new-beginnings-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/sep-18-new-beginnings-preview.png\" title=\"New Beginnings - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-320x480.png\" title=\"New Beginnings - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-640x480.png\" title=\"New Beginnings - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-800x480.png\" title=\"New Beginnings - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-800x600.png\" title=\"New Beginnings - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1024x768.png\" title=\"New Beginnings - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1024x1024.png\" title=\"New Beginnings - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1152x864.png\" title=\"New Beginnings - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1280x720.png\" title=\"New Beginnings - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1280x800.png\" title=\"New Beginnings - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1280x960.png\" title=\"New Beginnings - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1280x1024.png\" title=\"New Beginnings - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1400x1050.png\" title=\"New Beginnings - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1440x900.png\" title=\"New Beginnings - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1600x1200.png\" title=\"New Beginnings - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1680x1050.png\" title=\"New Beginnings - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1680x1200.png\" title=\"New Beginnings - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1920x1080.png\" title=\"New Beginnings - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1920x1200.png\" title=\"New Beginnings - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-1920x1440.png\" title=\"New Beginnings - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/cal/sep-18-new-beginnings-cal-2560x1440.png\" title=\"New Beginnings - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-320x480.png\" title=\"New Beginnings - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-640x480.png\" title=\"New Beginnings - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-800x480.png\" title=\"New Beginnings - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-800x600.png\" title=\"New Beginnings - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1024x768.png\" title=\"New Beginnings - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1024x1024.png\" title=\"New Beginnings - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1152x864.png\" title=\"New Beginnings - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1280x720.png\" title=\"New Beginnings - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1280x800.png\" title=\"New Beginnings - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1280x960.png\" title=\"New Beginnings - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1280x1024.png\" title=\"New Beginnings - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1400x1050.png\" title=\"New Beginnings - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1440x900.png\" title=\"New Beginnings - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1600x1200.png\" title=\"New Beginnings - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1680x1050.png\" title=\"New Beginnings - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1680x1200.png\" title=\"New Beginnings - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1920x1080.png\" title=\"New Beginnings - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1920x1200.png\" title=\"New Beginnings - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-1920x1440.png\" title=\"New Beginnings - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-beginnings/nocal/sep-18-new-beginnings-nocal-2560x1440.png\" title=\"New Beginnings - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h3>New Destination</h3>\n<p>September is the beginning of the course. We see it as a never ending road because we are going to enjoy the journey. — Designed by <a href=\"https://www.silocreativo.com/en/\">Veronica Valenzuela</a> from Spain.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/sep-18-new-destination-full.jpg\" title=\"New Destination\"><img width=\"800\" height=\"450\" alt=\"New Destination\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af55a393-4007-4ea0-b1b2-26a7e5ff6589/sep-18-new-destination-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/sep-18-new-destination-preview.jpg\" title=\"New Destination - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-640x480.jpg\" title=\"New Destination - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-800x480.jpg\" title=\"New Destination - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-1024x768.jpg\" title=\"New Destination - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-1280x720.jpg\" title=\"New Destination - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-1280x800.jpg\" title=\"New Destination - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-1440x900.jpg\" title=\"New Destination - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-1600x1200.jpg\" title=\"New Destination - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-1920x1080.jpg\" title=\"New Destination - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-1920x1440.jpg\" title=\"New Destination - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/cal/sep-18-new-destination-cal-2560x1440.jpg\" title=\"New Destination - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-640x480.jpg\" title=\"New Destination - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-800x480.jpg\" title=\"New Destination - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-1024x768.jpg\" title=\"New Destination - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-1280x720.jpg\" title=\"New Destination - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-1280x800.jpg\" title=\"New Destination - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-1440x900.jpg\" title=\"New Destination - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-1600x1200.jpg\" title=\"New Destination - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-1920x1080.jpg\" title=\"New Destination - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-1920x1440.jpg\" title=\"New Destination - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/new-destination/nocal/sep-18-new-destination-nocal-2560x1440.jpg\" title=\"New Destination - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h3>Good Things Come To Those Who Wait</h3>\n<p>They say ‘patience is a virtue’, and so great opportunities and opulence in life come to those who are patient. Here we depicted a snail in the visual, one which longs to seize the shine that comes its way. It goes by the same watchword, shows no impulsiveness and waits for the right chances. — Designed by <a href=\"https://www.sweans.com/\">Sweans</a> from London.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/sep-18-good-things-come-to-those-who-wait-full.jpg\" title=\"Good Things Come To Those Who Wait\"><img width=\"800\" height=\"450\" alt=\"Good Things Come To Those Who Wait\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9b5eb324-3367-40bd-a3a6-f3c39e34dc1a/sep-18-good-things-come-to-those-who-wait-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/sep-18-good-things-come-to-those-who-wait-preview.jpg\" title=\"Good Things Come To Those Who Wait - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-320x480.jpg\" title=\"Good Things Come To Those Who Wait - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-640x480.jpg\" title=\"Good Things Come To Those Who Wait - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-800x480.jpg\" title=\"Good Things Come To Those Who Wait - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-800x600.jpg\" title=\"Good Things Come To Those Who Wait - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1024x768.jpg\" title=\"Good Things Come To Those Who Wait - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1024x1024.jpg\" title=\"Good Things Come To Those Who Wait - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1152x864.jpg\" title=\"Good Things Come To Those Who Wait - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1280x720.jpg\" title=\"Good Things Come To Those Who Wait - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1280x800.jpg\" title=\"Good Things Come To Those Who Wait - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1280x960.jpg\" title=\"Good Things Come To Those Who Wait - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1280x1024.jpg\" title=\"Good Things Come To Those Who Wait - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1366x768.jpg\" title=\"Good Things Come To Those Who Wait - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1400x1050.jpg\" title=\"Good Things Come To Those Who Wait - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1440x900.jpg\" title=\"Good Things Come To Those Who Wait - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1600x1200.jpg\" title=\"Good Things Come To Those Who Wait - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1680x1050.jpg\" title=\"Good Things Come To Those Who Wait - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1680x1200.jpg\" title=\"Good Things Come To Those Who Wait - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1920x1080.jpg\" title=\"Good Things Come To Those Who Wait - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1920x1200.jpg\" title=\"Good Things Come To Those Who Wait - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-1920x1440.jpg\" title=\"Good Things Come To Those Who Wait - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/cal/sep-18-good-things-come-to-those-who-wait-cal-2560x1440.jpg\" title=\"Good Things Come To Those Who Wait - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-320x480.jpg\" title=\"Good Things Come To Those Who Wait - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-640x480.jpg\" title=\"Good Things Come To Those Who Wait - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-800x480.jpg\" title=\"Good Things Come To Those Who Wait - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-800x600.jpg\" title=\"Good Things Come To Those Who Wait - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1024x768.jpg\" title=\"Good Things Come To Those Who Wait - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1024x1024.jpg\" title=\"Good Things Come To Those Who Wait - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1152x864.jpg\" title=\"Good Things Come To Those Who Wait - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1280x720.jpg\" title=\"Good Things Come To Those Who Wait - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1280x800.jpg\" title=\"Good Things Come To Those Who Wait - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1280x960.jpg\" title=\"Good Things Come To Those Who Wait - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1280x1024.jpg\" title=\"Good Things Come To Those Who Wait - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1366x768.jpg\" title=\"Good Things Come To Those Who Wait - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1400x1050.jpg\" title=\"Good Things Come To Those Who Wait - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1440x900.jpg\" title=\"Good Things Come To Those Who Wait - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1600x1200.jpg\" title=\"Good Things Come To Those Who Wait - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1680x1050.jpg\" title=\"Good Things Come To Those Who Wait - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1680x1200.jpg\" title=\"Good Things Come To Those Who Wait - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1920x1080.jpg\" title=\"Good Things Come To Those Who Wait - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1920x1200.jpg\" title=\"Good Things Come To Those Who Wait - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-1920x1440.jpg\" title=\"Good Things Come To Those Who Wait - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/good-things-come-to-those-who-wait/nocal/sep-18-good-things-come-to-those-who-wait-nocal-2560x1440.jpg\" title=\"Good Things Come To Those Who Wait - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h3>Back To School</h3>\n<p>Designed by <a href=\"https://www.behance.net/ilsevanden7f8f\">Ilse van den Boogaart</a> from The Netherlands.</p>\n<figure><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/sep-18-back-to-school-full.jpg\" title=\"Back To School\"><img width=\"800\" height=\"450\" alt=\"Back To School\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d75728b6-1626-47bf-842a-7b329cbccc0f/sep-18-back-to-school-preview-opt.png\"></a></figure><ul>\n<li><a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/sep-18-back-to-school-preview.jpg\" title=\"Back To School - Preview\">preview</a></li>\n<li>with calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1280x1024.jpg\" title=\"Back To School - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1366x768.jpg\" title=\"Back To School - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1400x1050.jpg\" title=\"Back To School - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1440x900.jpg\" title=\"Back To School - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1600x1200.jpg\" title=\"Back To School - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1680x1050.jpg\" title=\"Back To School - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1680x1200.jpg\" title=\"Back To School - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1920x1080.jpg\" title=\"Back To School - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1920x1200.jpg\" title=\"Back To School - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-1920x1440.jpg\" title=\"Back To School - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/cal/sep-18-back-to-school-cal-2560x1440.jpg\" title=\"Back To School - 2560x1440\">2560x1440</a>\n</li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1280x1024.jpg\" title=\"Back To School - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1366x768.jpg\" title=\"Back To School - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1400x1050.jpg\" title=\"Back To School - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1440x900.jpg\" title=\"Back To School - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1600x1200.jpg\" title=\"Back To School - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1680x1050.jpg\" title=\"Back To School - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1680x1200.jpg\" title=\"Back To School - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1920x1080.jpg\" title=\"Back To School - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1920x1200.jpg\" title=\"Back To School - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-1920x1440.jpg\" title=\"Back To School - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-18/back-to-school/nocal/sep-18-back-to-school-nocal-2560x1440.jpg\" title=\"Back To School - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h3>From The Archives</h3>\n\n<p>Some things are too good to be forgotten and our wallpaper archives are full of timeless treasures. So here’s a small selection of favorites from past September editions. Please note that these don’t come with a calendar.</p>\n\n<h4>Autumn Rains</h4>\n\n<p>“This autumn, we expect to see a lot of rainy days and blues, so we wanted to change the paradigm and wish a warm welcome to the new season. After all, if you come to think of it: rain is not so bad if you have an umbrella and a raincoat. Come autumn, we welcome you!” — Designed by <a href=\"https://www.popwebdesign.net/web-design-agency.html\">PopArt Studio</a> from Serbia.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57c3dabf-3ba5-4f62-9609-8127e859f78b/sept-17-autumn-rains-full-opt.jpg\" title=\"Autumn Rains\"><img width=\"800\" height=\"450\" alt=\"Autumn Rains\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a78401-b6a9-448c-911c-b8dd1de0d042/sept-17-autumn-rains-preview.jpg\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a78401-b6a9-448c-911c-b8dd1de0d042/sept-17-autumn-rains-preview.jpg\" title=\"Autumn Rains - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-320x480.jpg\" title=\"Autumn Rains - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-640x480.jpg\" title=\"Autumn Rains - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-800x480.jpg\" title=\"Autumn Rains - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-800x600.jpg\" title=\"Autumn Rains - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1024x768.jpg\" title=\"Autumn Rains - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1024x1024.jpg\" title=\"Autumn Rains - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1152x864.jpg\" title=\"Autumn Rains - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x720.jpg\" title=\"Autumn Rains - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x800.jpg\" title=\"Autumn Rains - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x960.jpg\" title=\"Autumn Rains - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x1024.jpg\" title=\"Autumn Rains - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1366x768.jpg\" title=\"Autumn Rains - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1400x1050.jpg\" title=\"Autumn Rains - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1440x900.jpg\" title=\"Autumn Rains - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1600x1200.jpg\" title=\"Autumn Rains - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1680x1050.jpg\" title=\"Autumn Rains - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1680x1200.jpg\" title=\"Autumn Rains - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1080.jpg\" title=\"Autumn Rains - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1200.jpg\" title=\"Autumn Rains - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1440.jpg\" title=\"Autumn Rains - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-2560x1440.jpg\" title=\"Autumn Rains - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h4>Maryland Pride</h4>\n\n<p>“As summer comes to a close, so does the end of blue crab season in Maryland. Blue crabs have been a regional delicacy since the 1700s and have become Maryland’s most valuable fishing industry, adding millions of dollars to the Maryland economy each year. With more than 455 million blue crabs swimming in the Chesapeake Bay, these tasty critters can be prepared in a variety of ways and have become a summer staple in many homes and restaurants across the state. The blue crab has contributed so much to the state’s regional culture and economy, in 1989 it was named the State Crustacean, cementing its importance in Maryland history.” — Designed by <a href=\"http://bit.ly/TheHannonGroup\">The Hannon Group</a> from Washington DC.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/890524ee-463c-4d9a-9e77-d1ce2514e48b/sept-17-marylandpride-full-opt.png\" title=\"Maryland Pride\"><img width=\"800\" height=\"450\" alt=\"Maryland Pride\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f29f91b2-38c6-466d-9a8a-6441c39e1fe2/sept-17-marylandpride-preview.png\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f29f91b2-38c6-466d-9a8a-6441c39e1fe2/sept-17-marylandpride-preview.png\" title=\"Maryland Pride - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-320x480.png\" title=\"Maryland Pride - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-640x480.png\" title=\"Maryland Pride - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-800x600.png\" title=\"Maryland Pride - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1024x768.png\" title=\"Maryland Pride - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1280x960.png\" title=\"Maryland Pride - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1440x900.png\" title=\"Maryland Pride - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1600x1200.png\" title=\"Maryland Pride - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1680x1050.png\" title=\"Maryland Pride - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1680x1200.png\" title=\"Maryland Pride - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1920x1080.png\" title=\"Maryland Pride - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-1920x1440.png\" title=\"Maryland Pride - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/marylandpride/nocal/sept-17-marylandpride-nocal-2560x1440.png\" title=\"Maryland Pride - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h4>Summer Is Leaving</h4>\n\n<p>“It is inevitable. Summer is leaving silently. Let us think of ways to make the most of what is left of the beloved season.” — Designed by <a href=\"https://www.bootstrapdash.com/\">Bootstrap Dashboards</a> from India.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/393a201f-49e1-4278-a863-7d71a472dc07/sept-17-summer-is-leaving-full-opt.png\" title=\"Summer Is Leaving\"><img width=\"800\" height=\"450\" alt=\"Summer Is Leaving\" src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228dcef7-00f3-4656-a914-83056db8a073/sept-17-summer-is-leaving-preview.png\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228dcef7-00f3-4656-a914-83056db8a073/sept-17-summer-is-leaving-preview.png\" title=\"Summer Is Leaving - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-360x640.png\" title=\"Summer Is Leaving - 360x640\">360x640</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1024x768.png\" title=\"Summer Is Leaving - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x720.png\" title=\"Summer Is Leaving - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x800.png\" title=\"Summer Is Leaving - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x960.png\" title=\"Summer Is Leaving - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x1024.png\" title=\"Summer Is Leaving - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1366x768.png\" title=\"Summer Is Leaving - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1400x1050.png\" title=\"Summer Is Leaving - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1440x900.png\" title=\"Summer Is Leaving - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1600x900.png\" title=\"Summer Is Leaving - 1600x900\">1600x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1680x1200.png\" title=\"Summer Is Leaving - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1920x1080.png\" title=\"Summer Is Leaving - 1920x1080\">1920x1080</a>\n</li>\n</ul>\n<h4>Early Autumn</h4>\n\n<p>“September is usually considered as early autumn so I decided to draw some trees and leaves. However, nobody likes that summer is coming to an end, that’s why I kept summerish colours and style.” — Designed by <a href=\"http://behance.net/katkatdesign\">Kat Gluszek</a> from Germany.</p>\n\n<figure><a title=\"Early Autumn\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/09cd38cd-bcb8-48df-a42c-281cfcb6c077/sept-15-early-autumn-full-opt.jpg\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0edc5dd-55b3-48f5-a960-20bb1b584d00/sept-15-early-autumn-preview.jpg\" alt=\"Early Autumn\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0edc5dd-55b3-48f5-a960-20bb1b584d00/sept-15-early-autumn-preview.jpg\" title=\"Early Autumn - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-800x480.jpg\" title=\"Early Autumn - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-1024x768.jpg\" title=\"Early Autumn - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-1152x864.jpg\" title=\"Early Autumn - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-1280x800.jpg\" title=\"Early Autumn - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-1280x960.jpg\" title=\"Early Autumn - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-1440x900.jpg\" title=\"Early Autumn - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-1680x1200.jpg\" title=\"Early Autumn - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-1920x1080.jpg\" title=\"Early Autumn - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/early-autumn/nocal/sept-15-early-autumn-nocal-2560x1440.jpg\" title=\"Early Autumn - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h4>Long Live Summer</h4>\n\n<p>“While September’s Autumnal Equinox technically signifies the end of the summer season, this wallpaper is for all those summer lovers, like me, who don’t want the sunshine, warm weather and lazy days to end.” — Designed by <a href=\"http://www.vickigrunewald.com/\">Vicki Grunewald</a> from Washington.</p>\n\n<figure><a title=\"Long Live Summer\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1431a5a8-a30f-4ab8-8875-0be50394f701/sept-15-long-live-summer-full-opt.png\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/266371d3-48a0-4692-b12b-c2a0162f0b95/sept-15-long-live-summer-preview.png\" alt=\"Long Live Summer\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/266371d3-48a0-4692-b12b-c2a0162f0b95/sept-15-long-live-summer-preview.png\" title=\"Long Live Summer - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-320x480.png\" title=\"Long Live Summer - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-640x480.png\" title=\"Long Live Summer - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-800x480.png\" title=\"Long Live Summer - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-800x600.png\" title=\"Long Live Summer - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1024x768.png\" title=\"Long Live Summer - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1024x1024.png\" title=\"Long Live Summer - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1152x864.png\" title=\"Long Live Summer - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x720.png\" title=\"Long Live Summer - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x800.png\" title=\"Long Live Summer - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x960.png\" title=\"Long Live Summer - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x1024.png\" title=\"Long Live Summer - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1366x768.png\" title=\"Long Live Summer - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1400x1050.png\" title=\"Long Live Summer - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1440x900.png\" title=\"Long Live Summer - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1600x1200.png\" title=\"Long Live Summer - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1680x1050.png\" title=\"Long Live Summer - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1680x1200.png\" title=\"Long Live Summer - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1080.png\" title=\"Long Live Summer - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1200.png\" title=\"Long Live Summer - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1440.png\" title=\"Long Live Summer - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-2560x1440.png\" title=\"Long Live Summer - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h4>Listen Closer… The Mushrooms Are Growing…</h4>\n\n<p>“It’s this time of the year when children go to school and grown-ups go to collect mushrooms.” — Designed by <a href=\"http://izhik.com/\">Igor Izhik</a> from Canada.</p>\n\n<figure><a title=\"Listen Closer… The Mushrooms Are Growing…\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c75ac886-b428-4c79-a0a9-8aad37a53738/sept-15-listen-closer-the-mushrooms-are-growing-full-opt.jpg\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7dc50250-9a0b-422d-8ca1-8510135147a7/sept-15-listen-closer-the-mushrooms-are-growing-preview.jpg\" alt=\"Listen Closer… The Mushrooms Are Growing…\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7dc50250-9a0b-422d-8ca1-8510135147a7/sept-15-listen-closer-the-mushrooms-are-growing-preview.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-640x480.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-800x480.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-800x600.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1024x768.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1024x1024.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1152x864.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x720.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x800.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x960.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x1024.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1400x1050.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1400x1050\">1400x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1440x900.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1600x1200.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1680x1050.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1680x1200.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1080.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1200.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1440.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-2560x1440.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 2560x1440\">2560x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-2560x1600.jpg\" title=\"Listen Closer… The Mushrooms Are Growing… - 2560x1600\">2560x1600</a>\n</li>\n</ul>\n<h4>Autumn Leaves</h4>\n\n<p>“Summer is coming to an end in the northern hemisphere, and that means Autumn is on the way!” — Designed by <a href=\"https://www.behance.net/jamesmitchell23\">James Mitchell</a> from the United Kingdom.</p>\n\n<figure><a title=\"Autumn Leaves\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/edbf3c38-adfa-46fe-9426-e896f20082fa/sept-16-autumn-leaves-full-opt.png\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4eff8d52-ce30-497c-a484-1465b09843ba/sept-16-autumn-leaves-preview.png\" alt=\"Autumn Leaves\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4eff8d52-ce30-497c-a484-1465b09843ba/sept-16-autumn-leaves-preview.png\" title=\"Autumn Leaves - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-1280x720.png\" title=\"Autumn Leaves - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-1280x800.png\" title=\"Autumn Leaves - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-1366x768.png\" title=\"Autumn Leaves - 1366x768\">1366x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-1440x900.png\" title=\"Autumn Leaves - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-1680x1050.png\" title=\"Autumn Leaves - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-1920x1080.png\" title=\"Autumn Leaves - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-1920x1200.png\" title=\"Autumn Leaves - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-2560x1440.png\" title=\"Autumn Leaves - 2560x1440\">2560x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/autumn-leaves/nocal/sept-16-autumn-leaves-nocal-2880x1800.png\" title=\"Autumn Leaves - 2880x1800\">2880x1800</a>\n</li>\n</ul>\n<h4>Festivities And Ganesh Puja</h4>\n\n<p>“The month of September starts with the arrival of festivals, mainly Ganesh Puja.” — Designed by <a href=\"https://www.behance.net/sayali_harde\">Sayali Sandeep Harde</a> from India.</p>\n\n<figure><a title=\"Festivities And Ganesh Puja\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36a349a9-db3e-4a44-8670-3de7f796ad27/sept-16-festivities-and-ganesh-puja-full-opt.jpg\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6591ceb7-cb1f-4f29-b33f-5dbd926be4cf/sept-16-festivities-and-ganesh-puja-preview.jpg\" alt=\"Festivities And Ganesh Puja\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6591ceb7-cb1f-4f29-b33f-5dbd926be4cf/sept-16-festivities-and-ganesh-puja-preview.jpg\" title=\"Festivities And Ganesh Puja - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-320x480.jpg\" title=\"Festivities And Ganesh Puja - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-800x480.jpg\" title=\"Festivities And Ganesh Puja - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-800x600.jpg\" title=\"Festivities And Ganesh Puja - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1280x720.jpg\" title=\"Festivities And Ganesh Puja - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1280x800.jpg\" title=\"Festivities And Ganesh Puja - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1280x1024.jpg\" title=\"Festivities And Ganesh Puja - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1440x900.jpg\" title=\"Festivities And Ganesh Puja - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1600x1050.jpg\" title=\"Festivities And Ganesh Puja - 1600x1050\">1600x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1600x1200.jpg\" title=\"Festivities And Ganesh Puja - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1920x1080.jpg\" title=\"Festivities And Ganesh Puja - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1920x1200.jpg\" title=\"Festivities And Ganesh Puja - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-1920x1440.jpg\" title=\"Festivities And Ganesh Puja - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/festivities-and-ganesh-puja/nocal/sept-16-festivities-and-ganesh-puja-nocal-2560x1440.jpg\" title=\"Festivities And Ganesh Puja - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h4>Hungry</h4>\n\n<p>Designed by <a href=\"http://www.doud.be/\">Elise Vanoorbeek</a> from Belgium.</p>\n\n<figure><a title=\"Hungry\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f0b9019c-0e62-4f2e-8b03-9502c1a85a00/sept-14-hungry-full-opt.jpg\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/388cd653-31f5-4e98-bd72-29cb1e8ed4bf/sept-14-hungry-preview.jpg\" alt=\"Hungry\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/388cd653-31f5-4e98-bd72-29cb1e8ed4bf/sept-14-hungry-preview.jpg\" title=\"Hungry - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-640x480.jpg\" title=\"Hungry - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-800x480.jpg\" title=\"Hungry - 800x480\">800x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-800x600.jpg\" title=\"Hungry - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1024x768.jpg\" title=\"Hungry - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1024x1024.jpg\" title=\"Hungry - 1024x1024\">1024x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1152x864.jpg\" title=\"Hungry - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x720.jpg\" title=\"Hungry - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x800.jpg\" title=\"Hungry - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x960.jpg\" title=\"Hungry - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x1024.jpg\" title=\"Hungry - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1440x1050.jpg\" title=\"Hungry - 1440x1050\">1440x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1440x900.jpg\" title=\"Hungry - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1600x1200.jpg\" title=\"Hungry - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1680x1050.jpg\" title=\"Hungry - 1680x1050\">1680x1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1680x1200.jpg\" title=\"Hungry - 1680x1200\">1680x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1920x1080.jpg\" title=\"Hungry - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1920x1200.jpg\" title=\"Hungry - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1920x1440.jpg\" title=\"Hungry - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-2560x1440.jpg\" title=\"Hungry - 2560x1440\">2560x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1366x768.jpg\" title=\"Hungry - 1366x768\">1366x768</a>\n</li>\n</ul>\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h4>Sugar Cube</h4>\n\n<p>Designed by <a href=\"http://www.lucversleijen.nl/\">Luc Versleijen</a> from the Netherlands.</p>\n\n<figure><a title=\"Sugarcube\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83d7fe92-9de0-4269-8ce0-1314356e93fd/sept-14-sugarcube-full-opt.png\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c315b17-8abb-40c5-872b-a55e856e3f3b/sept-14-sugarcube-preview.png\" alt=\"Sugarcube\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c315b17-8abb-40c5-872b-a55e856e3f3b/sept-14-sugarcube-preview.png\" title=\"Sugarcube - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-800x600.png\" title=\"Sugarcube - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1024x768.png\" title=\"Sugarcube - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1152x864.png\" title=\"Sugarcube - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1280x720.png\" title=\"Sugarcube - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1280x800.png\" title=\"Sugarcube - 1280x800\">1280x800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1280x960.png\" title=\"Sugarcube - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1280x1024.png\" title=\"Sugarcube - 1280x1024\">1280x1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1440x900.png\" title=\"Sugarcube - 1440x900\">1440x900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1920x1080.png\" title=\"Sugarcube - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-1920x1200.png\" title=\"Sugarcube - 1920x1200\">1920x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-14/sugarcube/nocal/sept-14-sugarcube-nocal-2560x1440.png\" title=\"Sugarcube - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h4>Miss, My Dragon Burnt My Homework!</h4>\n\n<p>“We all know the saying ‘Miss, my dog ate my homework!’ Well, not everyone has a dog, so here’s a wallpaper to inspire your next excuse at school ;)” — Designed by <a href=\"http://ricardogimenes.com/\">Ricardo Gimenes</a> from Sweden.</p>\n\n<figure><a title=\"My Dragon Burnt My Homework!\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e9f09e4c-7737-4ecd-8b99-d53edba945c1/sep-13-my-dragon-burnt-my-homework-full-opt.png\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/816cf0d0-42bc-4c62-9153-2529b910d5e3/sep-13-my-dragon-burnt-my-homework-preview.png\" alt=\"My Dragon Burnt My Homework!\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/816cf0d0-42bc-4c62-9153-2529b910d5e3/sep-13-my-dragon-burnt-my-homework-preview.png\" title=\"My Dragon Burnt My Homework! - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-320x480.png\" title=\"My Dragon Burnt My Homework! - 320x480\">320×480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1024x768.png\" title=\"My Dragon Burnt My Homework! - 1024x768\">1024×768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1024x1024.png\" title=\"My Dragon Burnt My Homework! - 1024x1024\">1024×1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1280x960.png\" title=\"My Dragon Burnt My Homework! - 1280x960\">1280×960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1280x1024.png\" title=\"My Dragon Burnt My Homework! - 1280x1024\">1280×1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1400x1050.png\" title=\"My Dragon Burnt My Homework! - 1400x1050\">1400×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1440x900.png\" title=\"My Dragon Burnt My Homework! - 1440x900\">1440×900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1600x1200.png\" title=\"My Dragon Burnt My Homework! - 1600x1200\">1600×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1680x1050.png\" title=\"My Dragon Burnt My Homework! - 1680x1050\">1680×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1680x1200.png\" title=\"My Dragon Burnt My Homework! - 1680x1200\">1680×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1920x1080.png\" title=\"My Dragon Burnt My Homework! - 1920x1080\">1920×1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1920x1200.png\" title=\"My Dragon Burnt My Homework! - 1920x1200\">1920×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1920x1440.png\" title=\"My Dragon Burnt My Homework! - 1920x1440\">1920×1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-2560x1440.png\" title=\"My Dragon Burnt My Homework! - 2560x1440\">2560×1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-640x960.png\" title=\"My Dragon Burnt My Homework! - 640x960\">640×960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1366x768.png\" title=\"My Dragon Burnt My Homework! - 1366x768\">1366×768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-1600x1050.png\" title=\"My Dragon Burnt My Homework! - 1600x1050\">1600×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/my-dragon-burnt-my-homework/nocal/sep-13-my-dragon-burnt-my-homework-nocal-2880x1800.png\" title=\"My Dragon Burnt My Homework! - 2880x1800\">2880×1800</a>\n</li>\n</ul>\n<h4>Meet The Bulbs!</h4>\n\n<p>“This summer we have seen lighting come to the forefront of design once again, with the light bulb front and center, no longer being hidden by lampshades or covers. Many different bulbs have been featured by interior designers including vintage bulbs, and oddly shaped energy-saving bulbs. We captured the personality of a variety of different bulbs in this wallpaper featuring the Bulb family.” — Designed by <a href=\"http://www.lights.com/\">Carla Genovesio</a> from the USA.</p>\n\n<figure><a title=\"Meet the Bulbs!\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e58b367b-9f13-4a5b-90e8-c9c8b265d32c/sep-13-meet-the-bulbs-full-opt.png\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56e3a482-3e64-4620-ab06-a223078c8d07/sep-13-meet-the-bulbs-preview.png\" alt=\"Meet the Bulbs!\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56e3a482-3e64-4620-ab06-a223078c8d07/sep-13-meet-the-bulbs-preview.png\" title=\"Meet the Bulbs! - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-320x480.png\" title=\"Meet the Bulbs! - 320x480\">320×480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-640x480.png\" title=\"Meet the Bulbs! - 640x480\">640×480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-800x480.png\" title=\"Meet the Bulbs! - 800x480\">800×480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-800x600.png\" title=\"Meet the Bulbs! - 800x600\">800×600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1024x768.png\" title=\"Meet the Bulbs! - 1024x768\">1024×768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1024x1024.png\" title=\"Meet the Bulbs! - 1024x1024\">1024×1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1152x864.png\" title=\"Meet the Bulbs! - 1152x864\">1152×864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1280x720.png\" title=\"Meet the Bulbs! - 1280x720\">1280×720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1280x800.png\" title=\"Meet the Bulbs! - 1280x800\">1280×800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1280x960.png\" title=\"Meet the Bulbs! - 1280x960\">1280×960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1280x1024.png\" title=\"Meet the Bulbs! - 1280x1024\">1280×1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1400x1050.png\" title=\"Meet the Bulbs! - 1400x1050\">1400×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1440x900.png\" title=\"Meet the Bulbs! - 1440x900\">1440×900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1600x1200.png\" title=\"Meet the Bulbs! - 1600x1200\">1600×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1680x1050.png\" title=\"Meet the Bulbs! - 1680x1050\">1680×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1680x1200.png\" title=\"Meet the Bulbs! - 1680x1200\">1680×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1920x1080.png\" title=\"Meet the Bulbs! - 1920x1080\">1920×1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1920x1200.png\" title=\"Meet the Bulbs! - 1920x1200\">1920×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-1920x1440.png\" title=\"Meet the Bulbs! - 1920x1440\">1920×1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/meet-the-bulbs/nocal/sep-13-meet-the-bulbs-nocal-2560x1440.png\" title=\"Meet the Bulbs! - 2560x1440\">2560×1440</a>\n</li>\n</ul>\n<h4>World Bat Night</h4>\n\n<p>“In the night from September 20th to 21st, the world has one of the most unusual environmental events — Night of the bats. Its main purpose: to draw public attention to the problems of bats and their protection, as well as to debunk the myths surrounding the animals, as many people experience unjustified superstitious fear, considering them vampires.” — Designed by <a href=\"http://www.cheloveche.ru/\">cheloveche.ru</a> from Russia.</p>\n\n<figure><a title=\"World Bat Night\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e8e5456a-dd59-4ccf-9458-af6e2c914a16/sep-13-world-bat-night-full-opt.png\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/803266a0-3f8c-4de6-9e4c-38b97c4819cd/sep-13-world-bat-night-preview-opt.png\" alt=\"World Bat Night\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/803266a0-3f8c-4de6-9e4c-38b97c4819cd/sep-13-world-bat-night-preview-opt.png\" title=\"World Bat Night - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/world-bat-night/nocal/sep-13-world-bat-night-nocal-1024x768.jpg\" title=\"World Bat Night - 1024x768\">1024×768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/world-bat-night/nocal/sep-13-world-bat-night-nocal-1280x800.jpg\" title=\"World Bat Night - 1280x800\">1280×800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/world-bat-night/nocal/sep-13-world-bat-night-nocal-1280x1024.jpg\" title=\"World Bat Night - 1280x1024\">1280×1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/world-bat-night/nocal/sep-13-world-bat-night-nocal-1440x900.jpg\" title=\"World Bat Night - 1440x900\">1440×900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/world-bat-night/nocal/sep-13-world-bat-night-nocal-1680x1050.jpg\" title=\"World Bat Night - 1680x1050\">1680×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sep-13/world-bat-night/nocal/sep-13-world-bat-night-nocal-1920x1200.jpg\" title=\"World Bat Night - 1920x1200\">1920×1200</a>\n</li>\n</ul>\n<h4>Autumn Invaders</h4>\n\n<p>“Invaders of autumn are already here. Make sure you are well prepared!” Designed by German Ljutaev from Ukraine.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/061f634b-fe9a-4fcb-918d-3e60d90ce5b5/september-12-space-invaders-full-opt.jpg\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0f41cba6-a3fa-4eb4-9fb1-732d8842a580/september-12-space-invaders-preview.jpg\" alt=\"Smashing Desktop Wallpaper - September 2012\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0f41cba6-a3fa-4eb4-9fb1-732d8842a580/september-12-space-invaders-preview.jpg\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-320x480.jpg\">320×480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-640x480.jpg\">640×480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-800x480.jpg\">800×480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-800x600.jpg\">800×600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1024x768.jpg\">1024×768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1152x864.jpg\">1152×864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1280x800.jpg\">1280×800</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1280x960.jpg\">1280×960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1280x1024.jpg\">1280×1024</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1400x1050.jpg\">1400×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1440x900.jpg\">1440×900</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1600x1200.jpg\">1600×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1680x1050.jpg\">1680×1050</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1680x1200.jpg\">1680×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1920x1080.jpg\">1920×1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1920x1200.jpg\">1920×1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-1920x1440.jpg\">1920×1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/september-12/september-12-autumn_invaders__97-nocal-2560x1440.jpg\">2560×1440</a>\n</li>\n</ul>\n<h4>Hello Spring</h4>\n\n<p>“September is the start of spring in Australia so this bright wallpaper could brighten your day and help you feel energized!” — Designed by <a href=\"http://www.tazi.com.au/\">Tazi Design</a> from Australia.</p>\n\n<figure><a title=\"Hello Spring\" href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ccc2efeb-a144-477a-bb7c-e0fd1407a1f1/sept-16-hello-spring-full-opt.png\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0f1d76e2-ef1b-40c1-8387-72b2e4f9c136/sept-16-hello-spring-preview.png\" alt=\"Hello Spring\" width=\"800\" height=\"450\"></a></figure><ul>\n<li><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0f1d76e2-ef1b-40c1-8387-72b2e4f9c136/sept-16-hello-spring-preview.png\" title=\"Hello Spring - Preview\">preview</a></li>\n<li>without calendar: <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-320x480.png\" title=\"Hello Spring - 320x480\">320x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-640x480.png\" title=\"Hello Spring - 640x480\">640x480</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-800x600.png\" title=\"Hello Spring - 800x600\">800x600</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-1024x768.png\" title=\"Hello Spring - 1024x768\">1024x768</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-1152x864.png\" title=\"Hello Spring - 1152x864\">1152x864</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-1280x720.png\" title=\"Hello Spring - 1280x720\">1280x720</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-1280x960.png\" title=\"Hello Spring - 1280x960\">1280x960</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-1600x1200.png\" title=\"Hello Spring - 1600x1200\">1600x1200</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-1920x1080.png\" title=\"Hello Spring - 1920x1080\">1920x1080</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-1920x1440.png\" title=\"Hello Spring - 1920x1440\">1920x1440</a>, <a href=\"http://files.smashingmagazine.com/wallpapers/sept-16/hello-spring/nocal/sept-16-hello-spring-nocal-2560x1440.png\" title=\"Hello Spring - 2560x1440\">2560x1440</a>\n</li>\n</ul>\n<h3>Join In Next Month!</h3>\n\n<p>Please note that we respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience throughout their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us, but rather designed from scratch by the artists themselves.</p>\n\n<p>Thank you to all designers for their participation. <a href=\"https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/\">Join in</a> next month!</p>\n\n              </fgure></article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-08-31 10:45:54","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"A Brief Guide About Competitive Analysis","pubDate":"2018-08-30 12:00:57","link":"https://www.smashingmagazine.com/2018/08/guide-competitive-analysis/","guid":"https://www.smashingmagazine.com/2018/08/guide-competitive-analysis/","author":"Mayur Kshirsagar","thumbnail":"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png","description":"In this article, I will introduce the subject of competitive analysis, which is basically a method to determine how well your competitors are performing. My aim is to introduce the subject to those of you who are new to the concept. It should be useful if you are new to product design, UX, interaction or digital design, or if you have experience in these fields but have not performed a competitive analysis before.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/08/guide-competitive-analysis/\">\n<title>A Brief Guide About Competitive Analysis</title>\n<article><header><h1>A Brief Guide About Competitive Analysis</h1>\n                  \n                    \n                    <address>Mayur Kshirsagar</address>\n                  \n                  <time datetime=\"2018-08-30T14:00:57+02:00\" class=\"op-published\">2018-08-30T14:00:57+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>In this article, I will introduce the subject of <a href=\"https://mattish.com/evidence/method/competitor-analysis\">competitive analysis</a>, which is basically a method to determine how well your competitors are performing. My aim is to introduce the subject to those of you who are new to the concept. It should be useful if you are new to product design, UX, interaction or digital design, or if you have experience in these fields but have not performed a competitive analysis before.</p>\n\n<p>No prior knowledge of the topic is needed because I’ll be explaining what the term means and how to perform a competitive analysis as we go. I am assuming some basic knowledge of the design process and UX research, but I’ll provide plenty of practical examples and reference links to help with any terms and concepts you might be unfamiliar with.</p>\n\n<p><strong>Note:</strong> <em>If you are a beginner in UX and interaction design, it would be good to know the basics of the design process and to know what is UX research (and the methods used for UX research) before diving into the article’s main topic. Please read the next section carefully because I’ve added reference links to help you get started.</em></p>\n\n<p><strong>Recommended reading</strong>: <em><a href=\"https://www.smashingmagazine.com/2017/12/improving-mobile-app-competitive-analysis/\">Standing Out From The Crowd: Improving Your Mobile App With Competitive Analysis</a></em></p>\n\n<h3>Competitive Analysis, Service Design Cycle, Five-Stages Design Process</h3>\n\n<p>If you are a UX designer, then you might be aware of the <strong>service design cycle</strong>. This cycle contains four stages: discover, explore, test and listen. Each one of these stages has multiple research methods, and competitive analysis is part of the exploration. Susan Farrell has very helpfully distinguished different UX research methods and activities that can be performed for your project. (You can check this detailed segregation in her “<a href=\"https://www.nngroup.com/articles/ux-research-cheat-sheet/\">UX Research Cheat Sheet</a>”.)</p>\n\n<p>The image below shows the four steps and the most commonly used methods in these steps.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a83560-fd65-4aed-a0df-3d8ffeed1897/02-a-brief-guide-about-competitive-analysis.png\">Large preview</a>)\n\t\t</figcaption></figure><p>If you are new to this concept, you might first ask, “What is <strong>service design</strong>?” <a href=\"https://medium.com/@shahrsays?source=post_header_lockup\">Shahrzad Samadzadeh</a> explains it very well in her article, “<a href=\"https://medium.com/@shahrsays/so-what-actually-is-service-design-e0ed602b77a9\">So, Like, What Is Service Design?</a>.”</p>\n\n<p><strong>Note</strong>: <em>You can also learn more about service design in Sarah Gibbons’s article, “<a href=\"https://www.nngroup.com/articles/service-design-101/\">Service Design 101</a>.”</em></p>\n\n\n\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n    <p>Getting workflow <em>just</em> right ain’t an easy task. So are proper estimates. Or alignment among different departments. That’s why we’ve set up <strong>“this-is-how-I-work”-sessions</strong> — with smart cookies sharing what works well for them. A part of the <a href=\"https://smashed.by/workflowpanelmembership\">Smashing Membership</a>, of course.</p>\n      <a href=\"https://smashed.by/workflowpanelmembership\" class=\"btn btn--green btn--large\">\n        Explore features →\n      </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/workflowpanelmembership\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://www.smashingmagazine.com/images/smashing-cat/smashing-tv-box-cat.svg\" alt=\"Smashing TV, with live sessions for professional designers and developers.\" width=\"310\" height=\"400\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><p>Often, UX designers follow the <a href=\"https://www.interaction-design.org/literature/article/5-stages-in-the-design-thinking-process\">five-stages design process</a> in their projects:</p>\n\n<ol>\n<li>empathize,</li>\n<li>define,</li>\n<li>ideate,</li>\n<li>prototype,</li>\n<li>test.</li>\n</ol>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png\" sizes=\"100vw\" alt=\"The five-stages design process.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe five-stages design process. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc356ecd-fb12-4467-891c-fe70cc9742d9/03-a-brief-guide-about-competitive-analysis.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Please don’t confuse the five-stages design process with the service design cycle. Basically, they serve the same purpose in the <a href=\"https://experience.sap.com/skillup/introduction-to-design-thinking/\">design thinking process</a>, but are explained in different styles. Here is a brief explanation of what these five stages contain:</p>\n\n<ul>\n<li>\n<strong>Empathize</strong><br>\nThis stage involves gaining a clear understanding of the problem you are trying to solve from the user’s point of view.</li>\n<li>\n<strong>Define</strong><br>\nThis stage involves defining the correct statement for the problem you are trying to solve, using the knowledge you gained in the first stage.</li>\n<li>\n<strong>Ideate</strong><br>\nIn this stage, you can generate different solution ideas for the problem.</li>\n<li>\n<strong>Prototype</strong><br>\nBasically, a prototype is an attempt to give your solution some form so that it can be explained to others. For digital products, a prototype could be a wireframe set created using pen and paper or using a tool such as <a href=\"https://balsamiq.com/\">Balsamiq</a> or Sketch, or it could be a visual design prototype created using a tool such as <a href=\"https://www.sketchapp.com/\">Sketch</a>, <a href=\"https://www.figma.com/\">Figma</a>, <a href=\"https://www.adobe.com/in/products/xd.html\">Adobe XD</a> or <a href=\"http://invisionapp.com/\">InVision</a>.</li>\n<li>\n<strong>Test</strong><br>\nTesting involves validating and evaluating all of your solutions with the users.</li>\n</ul>\n<p>You can perform UX research at any stage. Many articles and books are available for you to learn more about this design process. “<a href=\"https://www.interaction-design.org/literature/article/5-stages-in-the-design-thinking-process\">Five Stages in the Design Thinking Process</a>” by Rikke Dam and Teo Siang is one of my favorite articles on the topic.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png\" sizes=\"100vw\" alt=\"The most frequent methods used by UX professionals during the exploration stage of the design life cycle\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe most frequent methods used by UX professionals during the exploration stage of the design life cycle. (Nielsen Norman Group, “User Experience Careers” survey report) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c3cee13-c8fc-4bca-808b-3827d5c4d07f/04-a-brief-guide-about-competitive-analysis.png\">Large preview</a>)\n\t\t</figcaption></figure><p>According to Nielsen Norman Group’s “User Experience <a href=\"https://media.nngroup.com/media/reports/free/User_Experience_Careers.pdf\">Careers” survey report</a>, 61% of UX professionals prefer to do the competitive analysis for their projects. But what exactly is competitive analysis? In simple language, competitive analysis is nothing but a method to determine <strong>how your competitors are performing, what they are offering and how well they are doing it</strong>.</p>\n\n<p>Sometimes, competitive analysis is referred as competitive usability evaluation.</p>\n\n<h3>Why Should You Do A Competitive Analysis?</h3>\n\n<p>There are many reasons to do a competitive analysis, but I think the most important reason is that it helps us to understand the <strong>rights and wrongs</strong> of our own product or service.</p>\n\n<p>Using competitive analysis, you can make decisions based on knowledge of what is currently working well for your users, rather than based on guesses or intuition. In doing competitive analysis, you can also identify risks in your product or service and use those insights to add value to it.</p>\n\n<p>Recently, I was working on a project in which I did a competitive analysis of a feature (collaborative meeting note-taking) that a client wanted to introduce in their web app. Note-taking is not exactly a new or highly innovative thing, so the biggest challenge I was facing was to make this functionality simpler and easier to handle, because the product I was working on was in the very early stages of development. The feature, in a nutshell, was to create a simple text document where some interactive action items could be added.</p>\n\n<p>Because a ton of apps are out there that allow you to create simple text documents, I decided to do a competitive analysis for this functionality. (I’ll explain this process in more detail later in the section “Five Easy Steps to Do a Competitive Analysis”.)</p>\n\n<h3>How To Find The Right Competitors?</h3>\n\n<p>Basically, there are two types of competitors: <strong>direct and indirect</strong>. As a UX designer, your role is to study the designs of these competitors.</p>\n\n<p>Jaime Levy gives very good definitions of direct and indirect competitors in her book <a href=\"https://www.safaribooksonline.com/library/view/ux-strategy/9781449372972/\"><em>UX Strategy</em></a>. You can learn more about competitive analysis (and types of competitors) in chapter 4 of the book, “<a href=\"https://www.safaribooksonline.com/library/view/ux-strategy/9781449372972/ch04.html\">Conducting Competitive Research</a>”.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png\" sizes=\"100vw\" alt=\"Types of competitors\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tTypes of competitors. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6844d68-746d-4d29-81e1-de3114b29314/05-a-brief-guide-about-competitive-analysis.png\">Large preview</a>)\n\t\t</figcaption></figure><p><strong>Direct competitors</strong> are the ones who offer the same, or a very similar, set of features to your current or future customers, which means they are solving a similar problem to the one you are trying to solve, for a customer base that you are targeting as well.</p>\n\n<p><strong>Indirect competitors</strong> are the ones who offers a similar set of features but to a different customer segment; or, they target your exact customer base without offering the exact same set of features, which means indirect competitors are solving the same problem but for a different customer base, or are solving the same problem but offer a different solution.</p>\n\n<p>You can search for these types of competitors online (by doing a simple web search), or you can directly ask your current and potential customers what they are using already. You can also look for your direct and indirect competitors on websites such as <a href=\"https://www.crunchbase.com/\">Crunchbase</a> and <a href=\"https://www.producthunt.com/\">Product Hunt</a>, and you can search for them in the <a href=\"https://play.google.com/store\">Google Play </a> and the <a href=\"https://www.apple.com/ios/app-store/\">iOS App</a> Store.</p>\n\n<h3>Five Easy Steps To Do A Competitive Analysis</h3>\n\n<p>You can perform a competitive analysis for your existing or new product using the following five-step process.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png\" sizes=\"100vw\" alt=\"5 steps to do a competitive analysis\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t5 steps to do a competitive analysis. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8b648bd-da31-4c50-bb76-92d11ce4ebff/06-a-brief-guide-about-competitive-analysis.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>1. Define And Understand The Goals</h4>\n\n<p>Defining and understanding the goal is an integral part of any UX research process. You must define an accurate goal (or set of goals) for your research; otherwise, there is a chance you’ll get the wrong outcome.</p>\n\n<p>Draft all of your goals right before starting your process. When defining your goals, consider the following questions: Why are you doing this competitive analysis? What kind of outcome do you expect? Will this analysis affect UX decisions?</p>\n\n<p><strong>Remember</strong>: <em>When setting up goals for any kind of UX research, be as specific as possible.</em></p>\n\n<p>I mentioned earlier that I recently performed a competitive analysis for a collaborative meeting note-taking feature, to be introduced in the app that I was developing for a client. The goals for my research were very general because innumerable apps all provide this type of functionality, and the product I was working on was in the very early stages of development.</p>\n\n<p>Even though your research goals might be simple, make them as specific as possible, and write them all down. Writing down your goals will help you stay on the right track.</p>\n\n<p>The goals for my analysis were more like questions for which I was trying to find the answers. Here is the list of goals I set for this research:</p>\n\n<ul>\n<li>\n<strong>Which apps do users prefer for note-taking? And why do they prefer them?</strong><br>\nGoal: To find out the user’s behavior with these apps, their preferences and their comfort zone.</li>\n<li>\n<strong>What is the working mechanism of these apps?</strong><br>\nGoal: To find how out competitors’ apps work, so that we can identify their pros and cons.</li>\n<li>\n<strong>What are the “star” features of these apps?</strong><br>\nGoal: To identify functionalities that we were trying to introduce as well, to see whether they already exist and, if they exist, how exactly they were implemented.</li>\n<li>\n<strong>How comfortable does a user feel when using these apps?</strong><br>\nGoal: To identify user loyalty and engagement in the apps of our competitors.</li>\n<li>\n<strong>How does collaborative editing work in these competitive apps?</strong><br>\nGoal: To identify how collaborative-editing functionality works and to study its technical aspects.</li>\n<li>\n<strong>What is the visual structure and user interface of these apps?</strong><br>\nGoal: To check the visual look and feel of the apps (user interface and interaction).</li>\n</ul>\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h4>2. Find The Right Competitors</h4>\n\n<p>After setting the goals, go on a search and make a list of both direct and indirect competitors. It’s not necessary to analyze all of the competitors you find. The number is completely up to you. Some people suggest analyzing at least two to four competitors, while others suggest five to ten or more.</p>\n\n<p>Finding the right competitors for my research wasn’t a hard task because I already knew many apps that provided similar features, but I still did a quick search on Google, and the results were a bit surprising — surprising because most of the apps I knew turned out to be more like indirect competitors to the app I was working on; and later, after a bit more searching, I also found the apps that were our direct competitors.</p>\n\n<p>Putting each competitor in the right list is a very important part of competitive analysis because the features and functionality in your competitors’ apps are based on exactly what users of those apps want. Let’s assume you put one indirect competitor, XYZ, under the “direct competitors” list and start doing your analysis. While doing the research, you might find some impressive feature in XYZ’s app and decide to add a similar feature in your own app; then, later it turns out that the feature you added is not useful for the users you are targeting. You might end up wasting a lot of energy, time and money building something that is not at all useful. So, be careful when sorting your competitors.</p>\n\n<p>For my research, the competitors were as follows:</p>\n\n<ul>\n<li>\n<strong>Direct competitors</strong> br&gt;Quip, Cisco Spark Meeting Notes, Workboard, Lucid Meeting, Less Meeting, MeetingSense, Minute-it, etc.\n <ul><li>All of the apps above provide the same type of functionality, which we were trying to introduce for almost the same type of user base.</li></ul>\n</li>\n<li>\n<strong>Indirect competitors</strong> br&gt;Evernote, Google Keep, Google Docs, Microsoft Word, Microsoft OneNote and other traditional note-taking apps and pen-paper note-taking methods.\n<ul><li>The user base for all of the above is not exactly different from the user base we were targeting, but most of the users we were targeting were using these apps because they were unaware of the more convenient ways to take meeting notes.</li></ul>\n</li>\n</ul>\n<h4>3. Make A Competitive Analysis Matrix</h4>\n\n<p>A competitive analysis matrix is not complex, just a simple spreadsheet. You can use Microsoft Excel, Google Sheets, Apple Numbers or any other tool you are comfortable with.</p>\n\n<p>First, divide all competitors you’ve found into two groups (<strong>direct</strong> and <strong>indirect</strong>) and put them in a spreadsheet. Jamie Levy suggests making the following columns:</p>\n\n<ol>\n<li>competitor’s name,</li>\n<li>URL,</li>\n<li>login credentials,</li>\n<li>purpose,</li>\n<li>year founded.</li>\n</ol>\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png\" sizes=\"100vw\" alt=\"Example of competitive analysis matrix spreadsheet from UX Strategy, Jaime Levy’s book.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tExample of competitive analysis matrix spreadsheet from UX Strategy, Jaime Levy’s book. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e43e931e-8bfc-4137-adde-64f02f6178b8/07-a-brief-guide-about-competitive-analysis.png\">Large preview</a>)\n\t\t</figcaption></figure><p>I would recommend digging a bit deeper and adding a few more columns, such as for “unique features”, “pros and cons”, etc. It would help to summarize your analysis. It’s not necessary to set your columns exactly as mentioned above. You can modify the columns to your own research goals and needs.</p>\n\n<p>For my analysis, I created only four columns. My competitive analysis matrix looked as follows:</p>\n\n<ul>\n<li>\n<strong>Competitor name</strong> br&gt;In this column, I put the names of all of the competitors.</li>\n<li>\n<strong>URL</strong> br&gt;These are website links or app download links for these competitors.</li>\n<li>\n<strong>Features/comments</strong> br&gt;In this column, I put all of my comments, some ”star” features I needed to focus on, and the pros and cons of the competitor. I color-coded the cells so that later I (or anyone viewing the matrix) could easily identify the difference between them. For example, I used light yellow for features, light purple for comments, green for pros and red for cons.</li>\n<li>\n<strong>Screenshots/video links</strong> br&gt;In this column, I put all of the screenshots and videos related to the features and comments mentioned in the third column. This way, it became very easy and quick to understand what a particular comment or feature was all about.</li>\n</ul>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6295ffa4-3c5a-4d25-bbb4-9bd62b75063e/08-a-brief-guide-about-competitive-analysis.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>4. Write A Summary And An Analysis</h4>\n\n<p>Once you are done with the analysis matrix spreadsheet, move on and create a summary of your findings. Be as specific as possible, and try to answer all of your questions while setting up a goal or during the overall process.</p>\n\n<p>This will help you and your team members and stakeholders make the right design and UX decisions. This summary will also help you find new design and UX opportunities in the product you’re building.</p>\n\n<p>In writing the summary and the presentation for the competitive analysis that I did for this collaborative note-taking app, the competitive analysis matrix helped me a lot. I drafted a document with all of the high-level takeaways from this analysis and answered all of the questions that were set as goals. For the presentation, I shared the document with the client, which helped both the client and me to finalize the features, the flows and the end requirements for the product.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h4>5. Presentation</h4>\n\n<p>The last step of your competitive analysis is the presentation. It’s not a typical slideshow presentation — rather, just share all of the data and information you collected throughout the process with your teammates, stakeholders and/or clients.</p>\n\n<p>Getting feedback from everywhere you can and being open to this feedback is a very important part of the designer’s workflow. So, share all of your finding with your teammates, stakeholders and clients, and ask for their opinion. You might find some missing points in your analysis or discover something new and exciting from someone’s feedback.</p>\n\n<h3>Conclusion</h3>\n\n<p>We live in a data-driven world, and we should build products, services and apps based on data, rather than our intuition (or guesswork).</p>\n\n<p>As UX designers, we should go out there and collect as much data as possible before building a real product. This data will help us to create a solid product that users will want to use, rather than a product <em>we</em> want or imagine. These kinds of products are more likely to succeed in the market. Competitive analysis is one of the ways to get this data and to create a user-friendly product.</p>\n\n<p>Finally, no matter what kind of product you are building or research you are conducting, always try to put yourself in the users’ shoes every now and then. This way, you will be able to identify the users’ struggles and ultimately deliver a better solution.</p>\n\n<p>I hope this article has helped you plan and make your first competitive analysis for your next project!</p>\n\n<h4>Further Reading</h4>\n\n<p>If you want to become a better UX, interaction, visual (UI) or product designer, there are a lot of sources from which you can learn — articles, books, online courses. I often check the following few: <a href=\"https://www.smashingmagazine.com/\">Smashing Magazine</a>, <a href=\"https://www.invisionapp.com/blog\">InVision blog</a>, <a href=\"https://www.interaction-design.org/literature\">Interaction Design Foundation</a>, <a href=\"https://www.nngroup.com/articles/\">NN Group</a> and <a href=\"https://uxmastery.com/\">UX Mastery</a>. These websites have a very good collection of articles on the topics of UI and UX design and UX research.</p>\n\n<p>Here are some additional resources:</p>\n\n<ul>\n<li>“<a href=\"https://www.safaribooksonline.com/library/view/ux-strategy/9781449372972/ch04.html\">Chapter 4: Conducting Competitive Research</a>”, UX Strategy, Jaime Levy</li>\n<li>“<a href=\"https://www.nngroup.com/articles/ux-research-cheat-sheet/\">User Research Cheat Sheet</a>”, Susan Farrell, Nielsen Norman Group</li>\n<li>“<a href=\"https://www.nngroup.com/articles/competitive-usability-evaluations/\">Competitive Usability Evaluations: Learning from Your Competition</a>”, Amy Schade, Nielsen Norman Group</li>\n<li>“<a href=\"https://usabilitygeek.com/how-to-do-ux-competitor-analysis/\">How to Do a UX Competitor Analysis: A Step by Step Guide</a>”, Steven Douglas, Usability Geek</li>\n<li>“<a href=\"http://www.uxbooth.com/articles/how-to-check-out-the-competition/\">How to Check Out the Competition</a>”, Sarah Khan, UX Booth</li>\n<li>“<a href=\"https://medium.com/wayfair-design/a-designers-guide-to-competitor-research-914b0deee25a\">A Designer’s Guide to Competitor Research</a>”, Dan Lachapelle, Wayfair</li>\n<li>“<a href=\"https://www.toptal.com/designers/ux/product-designer-guide-to-competitive-analysis\">A Product Designer’s Guide to Competitive Analysis</a>”, Chandan Mishra, Toptal</li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(mb, ra, al, yk, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-08-30 12:00:57","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Building A Room Detector For IoT Devices On Mac OS","pubDate":"2018-08-29 12:20:53","link":"https://www.smashingmagazine.com/2018/08/building-room-detector-iot-devices-mac-os/","guid":"https://www.smashingmagazine.com/2018/08/building-room-detector-iot-devices-mac-os/","author":"Alvin Wan","thumbnail":"https://www.smashingmagazine.com/images/smashing-cat/cat-wizard.svg","description":"Knowing which room you’re in enables various IoT applications — from turning on the light to changing TV channels. So, how can we detect the moment you and your phone are in the kitchen, or bedroom, or living room? With today’s commodity hardware, there are a myriad of possibilities:\nOne solution is to equip each room with a bluetooth device. Once your phone is within range of a bluetooth device, your phone will know which room it is, based on the bluetooth device.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/08/building-room-detector-iot-devices-mac-os/\">\n<title>Building A Room Detector For IoT Devices On Mac OS</title>\n<article><header><h1>Building A Room Detector For IoT Devices On Mac OS</h1>\n                  \n                    \n                    <address>Alvin Wan</address>\n                  \n                  <time datetime=\"2018-08-29T14:20:53+02:00\" class=\"op-published\">2018-08-29T14:20:53+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>Knowing which room you’re in enables various IoT applications — from turning on the light to changing TV channels. So, how can we detect the moment you and your phone are in the kitchen, or bedroom, or living room? With today’s commodity hardware, there are a myriad of possibilities:</p>\n\n<p>One solution is to <strong>equip each room with a bluetooth device</strong>. Once your phone is within range of a bluetooth device, your phone will know which room it is, based on the bluetooth device. However, maintaining an array of Bluetooth devices is significant overhead — from replacing batteries to replacing dysfunctional devices. Additionally, proximity to the Bluetooth device is not always the answer: if you’re in the living room, by the wall shared with the kitchen, your kitchen appliances should not start churning out food.</p>\n\n<p>Another, albeit impractical, solution is to <strong>use GPS</strong>. However, keep in mind hat GPS works poorly indoors in which the multitude of walls, other signals, and other obstacles wreak havoc on GPS’s precision.</p>\n\n<p>Our approach instead is to <strong>leverage all in-range WiFi networks</strong> — even the ones your phone is not connected to. Here is how: consider the strength of WiFi A in the kitchen; say it is 5. Since there is a wall between the kitchen and the bedroom, we can reasonably expect the strength of WiFi A in the bedroom to differ; say it is 2. We can exploit this difference to predict which room we’re in. What’s more: WiFi network B from our neighbor can only be detected from the living room but is effectively invisible from the kitchen. That makes prediction even easier. In sum, the list of all in-range WiFi gives us plentiful information.</p>\n\n<p>This method has the distinct advantages of:</p>\n\n<ol>\n<li>not requiring more hardware;</li>\n<li>relying on more stable signals like WiFi;</li>\n<li>working well where other techniques such as GPS are weak.</li>\n</ol>\n<p>The more walls the better, as the more disparate the WiFi network strengths, the easier the rooms are to classify. You will build a simple desktop app that collects data, learns from the data, and predicts which room you’re in at any given time.</p>\n\n<h4>\n<span class=\"rh\">Further Reading</span> on SmashingMag:</h4>\n\n<ul>\n<li><a title=\"Read 'The Rise Of Intelligent Conversational UI'\" href=\"https://www.smashingmagazine.com/2018/04/rise-intelligent-conversational-ui/\" rel=\"bookmark\">The Rise Of Intelligent Conversational UI</a></li>\n<li><a title=\"Read 'Applications Of Machine Learning For Designers'\" href=\"https://www.smashingmagazine.com/2017/04/applications-machine-learning-designers/\" rel=\"bookmark\">Applications Of Machine Learning For Designers</a></li>\n<li><a title=\"Read 'How To Prototype IoT Experiences: Building The Hardware'\" href=\"https://www.smashingmagazine.com/2017/04/prototype-iot-experiences-building-hardware-part-1/\" rel=\"bookmark\">How To Prototype IoT Experiences: Building The Hardware</a></li>\n<li><a title=\"Read 'Designing For The Internet Of Emotional Things'\" href=\"https://www.smashingmagazine.com/2016/04/designing-for-the-internet-of-emotional-things/\" rel=\"bookmark\">Designing For The Internet Of Emotional Things</a></li>\n</ul>\n<h3>Prerequisites</h3>\n\n<p>For this tutorial, you will need a Mac OSX. Whereas the code can apply to any platform, we will only provide dependency installation instructions for Mac.</p>\n\n<ul>\n<li>Mac OSX</li>\n<li>Homebrew, a package manager for Mac OSX. To install, copy-and-paste the command at <a href=\"http://brew.sh/\">brew.sh</a>\n</li>\n<li>Installation of NodeJS 10.8.0+ and npm</li>\n<li>Installation of Python 3.6+ and pip. See the first 3 sections of <a href=\"https://www.digitalocean.com/community/tutorials/common-python-tools-using-virtualenv-installing-with-pip-and-managing-packages#python-and-packages\">“How To Install virtualenv, Installing With pip, and Managing Packages”</a>\n</li>\n</ul>\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n    <p>Nope, we can't do any magic tricks, but we have articles, <a href=\"https://smashed.by/perfpanelbooks\">books</a> and <a href=\"https://smashed.by/perfpaneltv\">webinars</a> featuring techniques we all can use to improve our work. <a href=\"https://smashed.by/perfpanelmembership\">Smashing Members</a> get a seasoned selection of magic front-end tricks — e.g. <strong>live designing sessions</strong> and perf audits, too. <em>Just sayin'</em>! ;-)</p>\n\n      <a href=\"https://smashed.by/perfpanelmembership\" class=\"btn btn--green btn--large\">\n        Explore Smashing Wizardry →\n      </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/perfpanelmembership\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://www.smashingmagazine.com/images/smashing-cat/cat-wizard.svg\" alt=\"Smashing Cat, just preparing to do some magic stuff.\" width=\"310\" height=\"400\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><h3>Step 0: Setup Work Environment</h3>\n\n<p>Your desktop app will be written in NodeJS. However, to leverage more efficient computational libraries like <code>numpy</code>, the training and prediction code will be written in Python. To start, we will setup your environments and install dependencies. Create a new directory to house your project.</p>\n\n<pre><code class=\"language-bash\">mkdir ~/riot\n</code></pre>\n\n<p>Navigate into the directory.</p>\n\n<pre><code class=\"language-bash\">cd ~/riot\n</code></pre>\n\n<p>Use pip to install Python’s default virtual environment manager.</p>\n\n<pre><code class=\"language-bash\">sudo pip install virtualenv\n</code></pre>\n\n<p>Create a Python3.6 virtual environment named <code>riot</code>.</p>\n\n<pre><code class=\"language-bash\">virtualenv riot --python=python3.6\n</code></pre>\n\n<p>Activate the virtual environment.</p>\n\n<pre><code class=\"language-bash\">source riot/bin/activate\n</code></pre>\n\n<p>Your prompt is now preceded by <code>(riot)</code>. This indicates we have successfully entered the virtual environment. Install the following packages using <code>pip</code>:</p>\n\n<ul>\n<li>\n<code>numpy</code>: An efficient, linear algebra library</li>\n<li>\n<code>scipy</code>: A scientific computing library that implements popular machine learning models</li>\n</ul>\n<pre><code class=\"language-bash\">pip install numpy==1.14.3 scipy\n==1.1.0\n</code></pre>\n\n<p>With the working directory setup, we will start with a desktop app that records all WiFi networks in-range. These recordings will constitute training data for your machine learning model. Once we have data on hand, you will write a least squares classifier, trained on the WiFi signals collected earlier. Finally, we will use the least squares model to predict the room you’re in, based on the WiFi networks in range.</p>\n\n<h3>Step 1: Initial Desktop Application</h3>\n\n<p>In this step, we will create a new desktop application using Electron JS. To begin, we will instead the Node package manager <code>npm</code> and a download utility <code>wget</code>.</p>\n\n<pre><code class=\"language-bash\">brew install npm wget\n</code></pre>\n\n<p>To begin, we will create a new Node project.</p>\n\n<pre><code class=\"language-bash\">npm init\n</code></pre>\n\n<p>This prompts you for the package name and then the version number. Hit <code>ENTER</code> to accept the default name of <code>riot</code> and default version of <code>1.0.0</code>.</p>\n\n<pre><code class=\"language-bash\">package name: (riot)\nversion: (1.0.0)\n</code></pre>\n\n<p>This prompts you for a project description. Add any non-empty description you would like. Below, the description is <code>room detector</code></p>\n\n<pre><code class=\"language-bash\">description: room detector\n</code></pre>\n\n<p>This prompts you for the entry point, or the main file to run the project from. Enter <code>app.js</code>.</p>\n\n<pre><code class=\"language-bash\">entry point: (index.js) app.js\n</code></pre>\n\n<p>This prompts you for the <code>test command</code> and <code>git repository</code>. Hit <code>ENTER</code> to skip these fields for now.</p>\n\n<pre><code class=\"language-bash\">test command:\ngit repository:\n</code></pre>\n\n<p>This prompts you for <code>keywords</code> and <code>author</code>. Fill in any values you would like. Below, we use <code>iot</code>, <code>wifi</code> for keywords and use <code>John Doe</code> for the author.</p>\n\n<pre><code class=\"language-bash\">keywords: iot,wifi\nauthor: John Doe\n</code></pre>\n\n<p>This prompts you for the license. Hit <code>ENTER</code> to accept the default value of <code>ISC</code>.</p>\n\n<pre><code class=\"language-bash\">license: (ISC)\n</code></pre>\n\n<p>At this point, <code>npm</code> will prompt you with a summary of information so far. Your output should be similar to the following.</p>\n\n<pre><code class=\"language-json\">{\n  \"name\": \"riot\",\n  \"version\": \"1.0.0\",\n  \"description\": \"room detector\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [\n    \"iot\",\n    \"wifi\"\n  ],\n  \"author\": \"John Doe\",\n  \"license\": \"ISC\"\n}\n</code></pre>\n\n<p>Hit <code>ENTER</code> to accept. <code>npm</code> then produces a <code>package.json</code>. List all files to double-check.</p>\n\n<pre><code class=\"language-bash\">ls\n</code></pre>\n\n<p>This will output the only file in this directory, along with the virtual environment folder.</p>\n\n<pre><code class=\"language-bash\">package.json\nriot\n</code></pre>\n\n<p>Install NodeJS dependencies for our project.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">npm install electron --global  # makes electron binary accessible globally\nnpm install node-wifi --save\n</code></pre>\n\n<p>Start with <a href=\"https://github.com/electron/electron-quick-start/blob/master/main.js\"><code>main.js</code> from Electron Quick Start</a>, by downloading the file, using the below. The following <code>-O</code> argument renames <code>main.js</code> to <code>app.js</code>.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">wget https://raw.githubusercontent.com/electron/electron-quick-start/master/main.js -O app.js\n</code></pre>\n\n<p>Open <code>app.js</code> in <code>nano</code> or your favorite text editor.</p>\n\n<pre><code class=\"language-bash\">nano app.js\n</code></pre>\n\n<p>On line 12, change <em>index.html</em> to <em>static/index.html</em>, as we will create a directory <code>static</code> to contain all HTML templates.</p>\n\n<pre><code class=\"language-bash\">function createWindow () {\n  // Create the browser window.\n  win = new BrowserWindow({width: 1200, height: 800})\n\n  // and load the index.html of the app.\n  win.loadFile('static/index.html')\n\n  // Open the DevTools.\n</code></pre>\n\n<p>Save your changes and exit the editor. Your file should match the <a href=\"https://github.com/alvinwan/riot/blob/master/app.js\">source code</a> of the <code>app.js</code> file. Now create a new directory to house our HTML templates.</p>\n\n<pre><code class=\"language-bash\">mkdir static\n</code></pre>\n\n<p>Download a stylesheet created for this project.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">wget https://raw.githubusercontent.com/alvinwan/riot/master/static/style.css?token=AB-ObfDtD46ANlqrObDanckTQJ2Q1Pyuks5bf79PwA%3D%3D -O static/style.css\n</code></pre>\n\n<p>Open <code>static/index.html</code> in <code>nano</code> or your favorite text editor. Start with the standard HTML structure.</p>\n\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Riot | Room Detector&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;main&gt;\n      &lt;/main&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>\n\n<p>Right after the title, link the Montserrat font linked by Google Fonts and stylesheet.</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;title&gt;Riot | Room Detector&lt;/title&gt;\n  &lt;!-- start new code --&gt;\n  &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:400,700\" rel=\"stylesheet\"&gt;\n  &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n  &lt;!-- end new code --&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>Between the <code>main</code> tags, add a slot for the predicted room name.</p>\n\n<pre><code class=\"language-html\">&lt;main&gt;\n  &lt;!-- start new code --&gt;\n  &lt;p class=\"text\"&gt;I believe you’re in the&lt;/p&gt;\n  &lt;h1 class=\"title\" id=\"predicted-room-name\"&gt;(I dunno)&lt;/h1&gt;\n  &lt;!-- end new code --&gt;\n&lt;/main&gt;\n</code></pre>\n\n<p>Your script should now match the following exactly. Exit the editor.</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Riot | Room Detector&lt;/title&gt;\n      &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:400,700\" rel=\"stylesheet\"&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;main&gt;\n        &lt;p class=\"text\"&gt;I believe you’re in the&lt;/p&gt;\n        &lt;h1 class=\"title\" id=\"predicted-room-name\"&gt;(I dunno)&lt;/h1&gt;\n      &lt;/main&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>\n\n<p>Now, amend the package file to contain a start command.</p>\n\n<pre><code class=\"language-bash\">nano package.json\n</code></pre>\n\n<p>Right after line 7, add a <code>start</code> command that’s aliased to <code>electron .</code>. Make sure to add a comma to the end of the previous line.</p>\n\n<pre><code class=\"language-bash\">\"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n  \"start\": \"electron .\"\n},\n</code></pre>\n\n<p>Save and exit. You are now ready to launch your desktop app in Electron JS. Use <code>npm</code> to launch your application.</p>\n\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n\n<p>Your desktop application should match the following.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"home page with button\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tHome page with “Add New Room” button available (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a91cdb8b-81d9-4e49-9abb-f05c8a9112bf/1-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>This completes your starting desktop app. To exit, navigate back to your terminal and CTRL+C. In the next step, we will record wifi networks, and make the recording utility accessible through the desktop application UI.</p>\n\n<h3>Step 2: Record WiFi Networks</h3>\n\n<p>In this step, you will write a NodeJS script that records the strength and frequency of all in-range wifi networks. Create a directory for your scripts.</p>\n\n<pre><code class=\"language-javascript\">mkdir scripts\n</code></pre>\n\n<p>Open <code>scripts/observe.js</code> in <code>nano</code> or your favorite text editor.</p>\n\n<pre><code class=\"language-javascript\">nano scripts/observe.js\n</code></pre>\n\n<p>Import a NodeJS wifi utility and the filesystem object.</p>\n\n<pre><code class=\"language-javascript\">var wifi = require('node-wifi');\nvar fs = require('fs');\n</code></pre>\n\n<p>Define a <code>record</code> function that accepts a completion handler.</p>\n\n<pre><code class=\"language-javascript\">/**\n * Uses a recursive function for repeated scans, since scans are asynchronous.\n */\nfunction record(n, completion, hook) {\n}\n</code></pre>\n\n<p>Inside the new function, initialize the wifi utility. Set <code>iface</code> to null to initialize to a random wifi interface, as this value is currently irrelevant.</p>\n\n<pre><code class=\"language-javascript\">function record(n, completion, hook) {\n    wifi.init({\n        iface : null\n    });\n}\n</code></pre>\n\n<p>Define an array to contain your samples. <em>Samples</em> are training data we will use for our model. The samples in this particular tutorial are lists of in-range wifi networks and their associated strengths, frequencies, names etc.</p>\n\n<pre><code class=\"language-javascript\">function record(n, completion, hook) {\n    ...\n    samples = []\n}\n</code></pre>\n\n<p>Define a recursive function <code>startScan</code>, which will asynchronously initiate wifi scans. Upon completion, the asynchronous wifi scan will then recursively invoke <code>startScan</code>.</p>\n\n<pre><code class=\"language-javascript\">function record(n, completion, hook) {\n  ...\n  function startScan(i) {\n    wifi.scan(function(err, networks) {\n    });\n  }\n  startScan(n);\n}\n</code></pre>\n\n<p>In the <code>wifi.scan</code> callback, check for errors or empty lists of networks and restart the scan if so.</p>\n\n<pre><code class=\"language-javascript\">wifi.scan(function(err, networks) {\n  if (err || networks.length == 0) {\n    startScan(i);\n    return\n  }\n});\n</code></pre>\n\n<p>Add the recursive function’s base case, which invokes the completion handler.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">wifi.scan(function(err, networks) {\n  ...\n  if (i </code></pre>\n\n<p>Output a progress update, append to the list of samples, and make the recursive call.</p>\n\n<pre><code class=\"language-javascript\">wifi.scan(function(err, networks) {\n  ...\n  hook(n-i+1, networks);\n  samples.push(networks);\n  startScan(i-1);\n});\n</code></pre>\n\n<p>At the end of your file, invoke the <code>record</code> function with a callback that saves samples to a file on disk.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function record(completion) {\n  ...\n}\n\nfunction cli() {\n  record(1, function(data) {\n    fs.writeFile('samples.json', JSON.stringify(data), 'utf8', function() {});\n  }, function(i, networks) {\n    console.log(\" * [INFO] Collected sample \" + (21-i) + \" with \" + networks.length + \" networks\");\n  })\n}\n\ncli();\n</code></pre>\n\n<p>Double check that your file matches the following:</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">var wifi = require('node-wifi');\nvar fs = require('fs');\n\n/**\n * Uses a recursive function for repeated scans, since scans are asynchronous.\n */\nfunction record(n, completion, hook) {\n  wifi.init({\n      iface : null // network interface, choose a random wifi interface if set to null\n  });\n\n  samples = []\n  function startScan(i) {\n    wifi.scan(function(err, networks) {\n        if (err || networks.length == 0) {\n          startScan(i);\n          return\n        }\n        if (i </code></pre>\n\n<p>Save and exit. Run the script.</p>\n\n<pre><code class=\"language-javascript\">node scripts/observe.js\n</code></pre>\n\n<p>Your output will match the following, with variable numbers of networks.</p>\n\n<pre><code class=\"language-javascript\"> * [INFO] Collected sample 1 with 39 networks\n</code></pre>\n\n<p>Examine the samples that were just collected. Pipe to <code>json_pp</code> to pretty print the JSON and pipe to head to view the first 16 lines.</p>\n\n<pre><code class=\"language-javascript\">cat samples.json | json_pp | head -16\n</code></pre>\n\n<p>The below is example output for a 2.4 GHz network.</p>\n\n<pre><code class=\"language-javascript\">{\n  \"samples\": [\n    [\n      {\n        \"mac\": \"64:0f:28:79:9a:29\",\n        \"bssid\": \"64:0f:28:79:9a:29\",\n        \"ssid\": \"SMASHINGMAGAZINEROCKS\",\n         \"channel\": 4,\n         \"frequency\": 2427,\n          \"signal_level\": \"-91\",\n          \"security\": \"WPA WPA2\",\n          \"security_flags\": [\n           \"(PSK/AES,TKIP/TKIP)\",\n          \"(PSK/AES,TKIP/TKIP)\"\n        ]\n      },\n</code></pre>\n\n<p>This concludes your NodeJS wifi-scanning script. This allows us to view all in-range WiFi networks. In the next step, you will make this script accessible from the desktop app.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h3>Step 3: Connect Scan Script To Desktop App</h3>\n\n<p>In this step, you will first add a button to the desktop app to trigger the script with. Then, you will update the desktop app UI with the script’s progress.</p>\n\n<p>Open <code>static/index.html</code>.</p>\n\n<pre><code class=\"language-html\">nano static/index.html\n</code></pre>\n\n<p>Insert the “Add” button, as shown below.</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;h1 class=\"title\" id=\"predicted-room-name\"&gt;(I dunno)&lt;/h1&gt;\n        &lt;!-- start new code --&gt;\n        &lt;div class=\"buttons\"&gt;\n            &lt;a href=\"add.html\" class=\"button\"&gt;Add new room&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;!-- end new code --&gt;\n    &lt;/main&gt;\n</code></pre>\n\n<p>Save and exit. Open <code>static/add.html</code>.</p>\n\n<pre><code class=\"language-html\">nano static/add.html\n</code></pre>\n\n<p>Paste the following content.</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Riot | Add New Room&lt;/title&gt;\n      &lt;link href=\"https://fonts.googleapis.com/css?family=Montserrat:400,700\" rel=\"stylesheet\"&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;main&gt;\n        &lt;h1 class=\"title\" id=\"add-title\"&gt;0&lt;/h1&gt;\n        &lt;p class=\"subtitle\"&gt;of &lt;span&gt;20&lt;/span&gt; samples needed. Feel free to move around the room.&lt;/p&gt;\n        &lt;input type=\"text\" id=\"add-room-name\" class=\"text-field\" placeholder=\"(room name)\"&gt;\n        &lt;div class=\"buttons\"&gt;\n          &lt;a href=\"#\" id=\"start-recording\" class=\"button\"&gt;Start recording&lt;/a&gt;\n          &lt;a href=\"index.html\" class=\"button light\"&gt;Cancel&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;p class=\"text\" id=\"add-status\" style=\"display:none\"&gt;&lt;/p&gt;\n      &lt;/main&gt;\n      &lt;script&gt;\n        require('../scripts/observe.js')\n      &lt;/script&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>\n\n<p>Save and exit. Reopen <code>scripts/observe.js</code>.</p>\n\n<pre><code class=\"language-javascript\">nano scripts/observe.js\n</code></pre>\n\n<p>Beneath the <code>cli</code> function, define a new <code>ui</code> function.</p>\n\n<pre><code class=\"language-javascript\">function cli() {\n    ...\n}\n\n// start new code\nfunction ui() {\n}\n// end new code\n\ncli();\n</code></pre>\n\n<p>Update the desktop app status to indicate the function has started running.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function ui() {\n  var room_name = document.querySelector('#add-room-name').value;\n  var status = document.querySelector('#add-status');\n  var number = document.querySelector('#add-title');\n  status.style.display = \"block\"\n  status.innerHTML = \"Listening for wifi...\"\n}\n</code></pre>\n\n<p>Partition the data into training and validation data sets.</p>\n\n<pre><code class=\"language-javascript\">function ui() {\n  ...\n  function completion(data) {\n    train_data = {samples: data['samples'].slice(0, 15)}\n    test_data = {samples: data['samples'].slice(15)}\n    var train_json = JSON.stringify(train_data);\n    var test_json = JSON.stringify(test_data);\n  }\n}\n</code></pre>\n\n<p>Still within the <code>completion</code> callback, write both datasets to disk.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function ui() {\n  ...\n  function completion(data) {\n    ...\n    fs.writeFile('data/' + room_name + '_train.json', train_json, 'utf8', function() {});\n    fs.writeFile('data/' + room_name + '_test.json', test_json, 'utf8', function() {});\n    console.log(\" * [INFO] Done\")\n    status.innerHTML = \"Done.\"\n  }\n}\n</code></pre>\n\n<p>Invoke <code>record</code> with the appropriate callbacks to record 20 samples and save the samples to disk.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function ui() {\n  ...\n  function completion(data) {\n    ...\n  }\n  record(20, completion, function(i, networks) {\n    number.innerHTML = i\n    console.log(\" * [INFO] Collected sample \" + i + \" with \" + networks.length + \" networks\")\n  })\n}\n</code></pre>\n\n<p>Finally, invoke the <code>cli</code> and <code>ui</code> functions where appropriate. Start by deleting the <code>cli();</code> call at the bottom of the file.</p>\n\n<pre><code class=\"language-javascript\">function ui() {\n    ...\n}\n\ncli();  // remove me\n</code></pre>\n\n<p>Check if the document object is globally accessible. If not, the script is being run from the command line. In this case, invoke the <code>cli</code> function. If it is, the script is loaded from within the desktop app. In this case, bind the click listener to the <code>ui</code> function.</p>\n\n<pre><code class=\"language-javascript\">if (typeof document == 'undefined') {\n    cli();\n} else {\n    document.querySelector('#start-recording').addEventListener('click', ui)\n}\n</code></pre>\n\n<p>Save and exit. Create a directory to hold our data.</p>\n\n<pre><code class=\"language-bash\">mkdir data\n</code></pre>\n\n<p>Launch the desktop app.</p>\n\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n\n<p>You will see the following homepage. Click on “Add room”.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>You will see the following form. Type in a name for the room. Remember this name, as we will use this later on. Our example will be <code>bedroom</code>.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"Add New Room page\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t“Add New Room” page on load (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Click “Start recording,” and you will see the following status “Listening for wifi…”.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"starting recording\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t“Add New Room” starting recording (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaf322d0-60e8-4b2a-9751-62be0c5cc7b6/4-building-room-detector-iot-devices.png\">Large Preview</a>)\n\t\t</figcaption></figure><p>Once all 20 samples are recorded, your app will match the following. The status will read “Done.”</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t“Add New Room” page after recording is complete (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c7b15151-2a24-4464-8540-64143f60d355/5-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Click on the misnamed “Cancel” to return to the homepage, which matches the following.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"finished recording\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t“Add New Room” page after recording is complete (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>We can now scan wifi networks from the desktop UI, which will save all recorded samples to files on disk. Next, we will train an out-of-box machine learning algorithm-least squares on the data you have collected.</p>\n\n<h3>Step 4: Write Python Training Script</h3>\n\n<p>In this step, we will write a training script in Python. Create a directory for your training utilities.</p>\n\n<pre><code class=\"language-bash\">mkdir model\n</code></pre>\n\n<p>Open <code>model/train.py</code></p>\n\n<pre><code class=\"language-bash\">nano model/train.py\n</code></pre>\n\n<p>At the top of your file, import the <code>numpy</code> computational library and <code>scipy</code> for its least squares model.</p>\n\n<pre><code class=\"language-bash\">import numpy as np\nfrom scipy.linalg import lstsq\nimport json\nimport sys\n</code></pre>\n\n<p>The next three utilities will handle loading and setting up data from the files on disk. Start by adding a utility function that flattens nested lists. You will use this to flatten a list of list of samples.</p>\n\n<pre><code class=\"language-bash\">import sys\n\ndef flatten(list_of_lists):\n    \"\"\"Flatten a list of lists to make a list.\n    &gt;&gt;&gt; flatten([[1], [2], [3, 4]])\n    [1, 2, 3, 4]\n    \"\"\"\n    return sum(list_of_lists, [])\n</code></pre>\n\n<p>Add a second utility that loads samples from the specified files. This method abstracts away the fact that samples are spread out across multiple files, returning just a single generator for all samples. For each of the samples, the label is the index of the file. e.g., If you call <code>get_all_samples('a.json', 'b.json')</code>, all samples in <code>a.json</code> will have label 0 and all samples in <code>b.json</code> will have label 1.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">def get_all_samples(paths):\n  \"\"\"Load all samples from JSON files.\"\"\"\n  for label, path in enumerate(paths):\n  with open(path) as f:\n    for sample in json.load(f)['samples']:\n      signal_levels = [\n        network['signal_level'].replace('RSSI', '') or 0\n        for network in sample]\n      yield [network['mac'] for network in sample], signal_levels, label\n</code></pre>\n\n<p>Next, add a utility that encodes the samples using a bag-of-words-esque model. Here is an example: Assume we collect two samples.</p>\n\n<ol>\n<li>wifi network A at strength 10 and wifi network B at strength 15</li>\n<li>wifi network B at strength 20 and wifi network C at strength 25.</li>\n</ol>\n<p>This function will produce a list of three numbers for each of the samples: the first value is the strength of wifi network A, the second for network B, and the third for C. In effect, the format is [A, B, C].</p>\n\n<ol>\n<li>[10, 15, 0]</li>\n<li>[0, 20, 25]</li>\n</ol>\n<pre class=\"break-out\"><code class=\"language-bash\">def bag_of_words(all_networks, all_strengths, ordering):\n  \"\"\"Apply bag-of-words encoding to categorical variables.\n\n  &gt;&gt;&gt; samples = bag_of_words(\n  ...     [['a', 'b'], ['b', 'c'], ['a', 'c']],\n  ...     [[1, 2], [2, 3], [1, 3]],\n  ...     ['a', 'b', 'c'])\n  &gt;&gt;&gt; next(samples)\n  [1, 2, 0]\n  &gt;&gt;&gt; next(samples)\n  [0, 2, 3]\n  \"\"\"\n  for networks, strengths in zip(all_networks, all_strengths):\n    yield [strengths[networks.index(network)]\n      if network in networks else 0\n      for network in ordering]\n</code></pre>\n\n<p>Using all three utilities above, we synthesize a collection of samples and their labels. Gather all samples and labels using <code>get_all_samples</code>. Define a consistent format <code>ordering</code> to one-hot encode all samples, then apply <code>one_hot</code> encoding to samples. Finally, construct the data and label matrices <code>X</code> and <code>Y</code> respectively.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">def create_dataset(classpaths, ordering=None):\n  \"\"\"Create dataset from a list of paths to JSON files.\"\"\"\n  networks, strengths, labels = zip(*get_all_samples(classpaths))\n  if ordering is None:\n    ordering = list(sorted(set(flatten(networks))))\n  X = np.array(list(bag_of_words(networks, strengths, ordering))).astype(np.float64)\n  Y = np.array(list(labels)).astype(np.int)\n  return X, Y, ordering\n</code></pre>\n\n<p>These functions complete the data pipeline. Next, we abstract away model prediction and evaluation. Start by defining the prediction method. The first function normalizes our model outputs, so that the sum of all values totals to 1 and that all values are non-negative; this ensures that the output is a valid probability distribution. The second evaluates the model.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">def softmax(x):\n  \"\"\"Convert one-hotted outputs into probability distribution\"\"\"\n  x = np.exp(x)\n  return x / np.sum(x)\n\n\ndef predict(X, w):\n  \"\"\"Predict using model parameters\"\"\"\n  return np.argmax(softmax(X.dot(w)), axis=1)\n</code></pre>\n\n<p>Next, evaluate the model’s accuracy. The first line runs prediction using the model. The second counts the numbers of times both predicted and true values agree, then normalizes by the total number of samples.</p>\n\n<pre><code class=\"language-bash\">def evaluate(X, Y, w):\n  \"\"\"Evaluate model w on samples X and labels Y.\"\"\"\n  Y_pred = predict(X, w)\n  accuracy = (Y == Y_pred).sum() / X.shape[0]\n  return accuracy\n</code></pre>\n\n<p>This concludes our prediction and evaluation utilities. After these utilities, define a <code>main</code> function that will collect the dataset, train, and evaluate. Start by reading the list of arguments from the command line <code>sys.argv</code>; these are the rooms to include in training. Then create a large dataset from all of the specified rooms.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">def main():\n  classes = sys.argv[1:]\n\n  train_paths = sorted(['data/{}_train.json'.format(name) for name in classes])\n  test_paths = sorted(['data/{}_test.json'.format(name) for name in classes])\n  X_train, Y_train, ordering = create_dataset(train_paths)\n  X_test, Y_test, _ = create_dataset(test_paths, ordering=ordering)\n</code></pre>\n\n<p>Apply one-hot encoding to the labels. A <em>one-hot encoding</em> is similar to the bag-of-words model above; we use this encoding to handle categorical variables. Say we have 3 possible labels. Instead of labelling 1, 2, or 3, we label the data with [1, 0, 0], [0, 1, 0], or [0, 0, 1]. For this tutorial, we will spare the explanation for why one-hot encoding is important. Train the model, and evaluate on both the train and validation sets.</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">def main():\n  ...\n  X_test, Y_test, _ = create_dataset(test_paths, ordering=ordering)\n\n  Y_train_oh = np.eye(len(classes))[Y_train]\n  w, _, _, _ = lstsq(X_train, Y_train_oh)\n  train_accuracy = evaluate(X_train, Y_train, w)\n  test_accuracy = evaluate(X_test, Y_test, w)\n</code></pre>\n\n<p>Print both accuracies, and save the model to disk.</p>\n\n<pre><code class=\"language-bash\">def main():\n  ...\n  print('Train accuracy ({}%), Validation accuracy ({}%)'.format(train_accuracy*100, test_accuracy*100))\n  np.save('w.npy', w)\n  np.save('ordering.npy', np.array(ordering))\n  sys.stdout.flush()\n</code></pre>\n\n<p>At the end of the file, run the <code>main</code> function.</p>\n\n<pre><code class=\"language-javascript\">if __name__ == '__main__':\n  main()\n</code></pre>\n\n<p>Save and exit. Double check that your file matches the following:</p>\n\n<pre class=\"break-out\"><code class=\"language-bash\">import numpy as np\nfrom scipy.linalg import lstsq\nimport json\nimport sys\n\n\ndef flatten(list_of_lists):\n    \"\"\"Flatten a list of lists to make a list.\n    &gt;&gt;&gt; flatten([[1], [2], [3, 4]])\n    [1, 2, 3, 4]\n    \"\"\"\n    return sum(list_of_lists, [])\n\n\ndef get_all_samples(paths):\n    \"\"\"Load all samples from JSON files.\"\"\"\n    for label, path in enumerate(paths):\n        with open(path) as f:\n            for sample in json.load(f)['samples']:\n                signal_levels = [\n                    network['signal_level'].replace('RSSI', '') or 0\n                    for network in sample]\n                yield [network['mac'] for network in sample], signal_levels, label\n\n\ndef bag_of_words(all_networks, all_strengths, ordering):\n    \"\"\"Apply bag-of-words encoding to categorical variables.\n    &gt;&gt;&gt; samples = bag_of_words(\n    ...     [['a', 'b'], ['b', 'c'], ['a', 'c']],\n    ...     [[1, 2], [2, 3], [1, 3]],\n    ...     ['a', 'b', 'c'])\n    &gt;&gt;&gt; next(samples)\n    [1, 2, 0]\n    &gt;&gt;&gt; next(samples)\n    [0, 2, 3]\n    \"\"\"\n    for networks, strengths in zip(all_networks, all_strengths):\n        yield [int(strengths[networks.index(network)])\n            if network in networks else 0\n            for network in ordering]\n\n\ndef create_dataset(classpaths, ordering=None):\n    \"\"\"Create dataset from a list of paths to JSON files.\"\"\"\n    networks, strengths, labels = zip(*get_all_samples(classpaths))\n    if ordering is None:\n        ordering = list(sorted(set(flatten(networks))))\n    X = np.array(list(bag_of_words(networks, strengths, ordering))).astype(np.float64)\n    Y = np.array(list(labels)).astype(np.int)\n    return X, Y, ordering\n\n\ndef softmax(x):\n    \"\"\"Convert one-hotted outputs into probability distribution\"\"\"\n    x = np.exp(x)\n    return x / np.sum(x)\n\n\ndef predict(X, w):\n    \"\"\"Predict using model parameters\"\"\"\n    return np.argmax(softmax(X.dot(w)), axis=1)\n\n\ndef evaluate(X, Y, w):\n    \"\"\"Evaluate model w on samples X and labels Y.\"\"\"\n    Y_pred = predict(X, w)\n    accuracy = (Y == Y_pred).sum() / X.shape[0]\n    return accuracy\n\n\ndef main():\n    classes = sys.argv[1:]\n\n    train_paths = sorted(['data/{}_train.json'.format(name) for name in classes])\n    test_paths = sorted(['data/{}_test.json'.format(name) for name in classes])\n    X_train, Y_train, ordering = create_dataset(train_paths)\n    X_test, Y_test, _ = create_dataset(test_paths, ordering=ordering)\n\n    Y_train_oh = np.eye(len(classes))[Y_train]\n    w, _, _, _ = lstsq(X_train, Y_train_oh)\n    train_accuracy = evaluate(X_train, Y_train, w)\n    validation_accuracy = evaluate(X_test, Y_test, w)\n\n    print('Train accuracy ({}%), Validation accuracy ({}%)'.format(train_accuracy*100, validation_accuracy*100))\n    np.save('w.npy', w)\n    np.save('ordering.npy', np.array(ordering))\n    sys.stdout.flush()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>Save and exit. Recall the room name used above when recording the 20 samples. Use that name instead of <code>bedroom</code> below. Our example is <code>bedroom</code>. We use <code>-W ignore</code> to ignore warnings from a LAPACK bug.</p>\n\n<pre><code class=\"language-bash\">python -W ignore model/train.py bedroom\n</code></pre>\n\n<p>Since we’ve only collected training samples for one room, you should see 100% training and validation accuracies.</p>\n\n<pre><code class=\"language-bash\">Train accuracy (100.0%), Validation accuracy (100.0%)\n</code></pre>\n\n<p>Next, we will link this training script to the desktop app.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<h3>Step 5: Link Train Script</h3>\n\n<p>In this step, we will automatically retrain the model whenever the user collects a new batch of samples. Open <code>scripts/observe.js</code>.</p>\n\n<pre><code class=\"language-bash\">nano scripts/observe.js\n</code></pre>\n\n<p>Right after the <code>fs</code> import, import the child process spawner and utilities.</p>\n\n<pre><code class=\"language-javascript\">var fs = require('fs');\n// start new code\nconst spawn = require(\"child_process\").spawn;\nvar utils = require('./utils.js');\n</code></pre>\n\n<p>In the <code>ui</code> function, add the following call to <code>retrain</code> at the end of the completion handler.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function ui() {\n  ...\n  function completion() {\n    ...\n    retrain((data) =&gt; {\n      var status = document.querySelector('#add-status');\n      accuracies = data.toString().split('\\n')[0];\n      status.innerHTML = \"Retraining succeeded: \" + accuracies\n    });\n  }\n    ...\n}\n</code></pre>\n\n<p>After the <code>ui</code> function, add the following <code>retrain</code> function. This spawns a child process that will run the python script. Upon completion, the process calls a completion handler. Upon failure, it will log the error message.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function ui() {\n  ..\n}\n\nfunction retrain(completion) {\n  var filenames = utils.get_filenames()\n  const pythonProcess = spawn('python', [\"./model/train.py\"].concat(filenames));\n  pythonProcess.stdout.on('data', completion);\n  pythonProcess.stderr.on('data', (data) =&gt; {\n    console.log(\" * [ERROR] \" + data.toString())\n  })\n}\n</code></pre>\n\n<p>Save and exit. Open <code>scripts/utils.js</code>.</p>\n\n<pre><code class=\"language-javascript\">nano scripts/utils.js\n</code></pre>\n\n<p>Add the following utility for fetching all datasets in <code>data/</code>.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">var fs = require('fs');\n\nmodule.exports = {\n  get_filenames: get_filenames\n}\n\nfunction get_filenames() {\n  filenames = new Set([]);\n  fs.readdirSync(\"data/\").forEach(function(filename) {\n      filenames.add(filename.replace('_train', '').replace('_test', '').replace('.json', '' ))\n  });\n  filenames = Array.from(filenames.values())\n  filenames.sort();\n  filenames.splice(filenames.indexOf('.DS_Store'), 1)\n  return filenames\n}\n</code></pre>\n\n<p>Save and exit. For the conclusion of this step, physically move to a new location. There ideally should be a wall between your original location and your new location. The more barriers, the better your desktop app will work.</p>\n\n<p>Once again, run your desktop app.</p>\n\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n\n<p>Just as before, run the training script. Click on “Add room”.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"home page with button\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tHome page with “Add New Room” button available (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33b7d71e-21c0-452e-9122-8ef76427c053/2-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Type in a room name that is different from your first room’s. We will use <code>living room</code>.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"Add New Room page\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t“Add New Room” page on load (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7dfbf49-0b2b-4203-9524-c9b84d64cc5d/3-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Click “Start recording,” and you will see the following status “Listening for wifi…”.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t“Add New Room” starting recording for second room (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc6909-e63b-461c-a01d-7a5b1f42b3de/6-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Once all 20 samples are recorded, your app will match the following. The status will read “Done. Retraining model…”</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png\" sizes=\"100vw\" alt=\"finished recording 2\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t“Add New Room” page after recording for second room complete (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4f30314-0743-4ed4-a7d9-e008e6cea4db/7-building-room-detector-iot-devices.png\">Large preview</a>)\n\t\t</figcaption></figure><p>In the next step, we will use this retrained model to predict the room you’re in, on the fly.</p>\n\n<h3>Step 6: Write Python Evaluation Script</h3>\n\n<p>In this step, we will load the pretrained model parameters, scan for wifi networks, and predict the room based on the scan.</p>\n\n<p>Open <code>model/eval.py</code>.</p>\n\n<pre><code class=\"language-bash\">nano model/eval.py\n</code></pre>\n\n<p>Import libraries used and defined in our last script.</p>\n\n<pre><code class=\"language-bash\">import numpy as np\nimport sys\nimport json\nimport os\nimport json\n\nfrom train import predict\nfrom train import softmax\nfrom train import create_dataset\nfrom train import evaluate\n</code></pre>\n\n<p>Define a utility to extract the names of all datasets. This function assumes that all datasets are stored in <code>data/</code> as <code>&lt;dataset&gt;_train.json</code> and <code>&lt;dataset&gt;_test.json</code>.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">from train import evaluate\n\ndef get_datasets():\n  \"\"\"Extract dataset names.\"\"\"\n  return sorted(list({path.split('_')[0] for path in os.listdir('./data')\n    if '.DS' not in path}))\n</code></pre>\n\n<p>Define the <code>main</code> function, and start by loading parameters saved from the training script.</p>\n\n<pre><code class=\"language-javascript\">def get_datasets():\n  ...\n\ndef main():\n  w = np.load('w.npy')\n  ordering = np.load('ordering.npy')\n</code></pre>\n\n<p>Create the dataset and predict.</p>\n\n<pre><code class=\"language-javascript\">def main():\n  ...\n  classpaths = [sys.argv[1]]\n  X, _, _ = create_dataset(classpaths, ordering)\n  y = np.asscalar(predict(X, w))\n</code></pre>\n\n<p>Compute a confidence score based on the difference between the top two probabilities.</p>\n\n<pre><code class=\"language-javascript\">def main():\n  ...\n  sorted_y = sorted(softmax(X.dot(w)).flatten())\n  confidence = 1\n  if len(sorted_y) &gt; 1:\n    confidence = round(sorted_y[-1] - sorted_y[-2], 2)\n</code></pre>\n\n<p>Finally, extract the category and print the result. To conclude the script, invoke the <code>main</code> function.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">def main()\n  ...\n  category = get_datasets()[y]\n  print(json.dumps({\"category\": category, \"confidence\": confidence}))\n\nif __name__ == '__main__':\n  main()\n</code></pre>\n\n<p>Save and exit. Double check your code matches the following (<a href=\"https://github.com/alvinwan/riot/blob/master/model/eval.py\">source code</a>):</p>\n\n<pre class=\"break-out\"><code class=\"language-python\">import numpy as np\nimport sys\nimport json\nimport os\nimport json\n\nfrom train import predict\nfrom train import softmax\nfrom train import create_dataset\nfrom train import evaluate\n\n\ndef get_datasets():\n    \"\"\"Extract dataset names.\"\"\"\n    return sorted(list({path.split('_')[0] for path in os.listdir('./data')\n        if '.DS' not in path}))\n\n\ndef main():\n    w = np.load('w.npy')\n    ordering = np.load('ordering.npy')\n\n    classpaths = [sys.argv[1]]\n    X, _, _ = create_dataset(classpaths, ordering)\n    y = np.asscalar(predict(X, w))\n\n    sorted_y = sorted(softmax(X.dot(w)).flatten())\n    confidence = 1\n    if len(sorted_y) &gt; 1:\n        confidence = round(sorted_y[-1] - sorted_y[-2], 2)\n\n    category = get_datasets()[y]\n    print(json.dumps({\"category\": category, \"confidence\": confidence}))\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>Next, we will connect this evaluation script to the desktop app. The desktop app will continuously run wifi scans and update the UI with the predicted room.</p>\n\n<h3>Step 7: Connect Evaluation To Desktop App</h3>\n\n<p>In this step, we will update the UI with a “confidence” display. Then, the associated NodeJS script will continuously run scans and predictions, updating the UI accordingly.</p>\n\n<p>Open <code>static/index.html</code>.</p>\n\n<pre><code class=\"language-bash\">nano static/index.html\n</code></pre>\n\n<p>Add a line for confidence right after the title and before the buttons.</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;h1 class=\"title\" id=\"predicted-room-name\"&gt;(I dunno)&lt;/h1&gt;\n&lt;!-- start new code --&gt;\n&lt;p class=\"subtitle\"&gt;with &lt;span id=\"predicted-confidence\"&gt;0%&lt;/span&gt; confidence&lt;/p&gt;\n&lt;!-- end new code --&gt;\n&lt;div class=\"buttons\"&gt;\n</code></pre>\n\n<p>Right after <code>main</code> but before the end of the <code>body</code>, add a new script <code>predict.js</code>.</p>\n\n<pre><code class=\"language-javascript\">&lt;/main&gt;\n  &lt;!-- start new code --&gt;\n  &lt;script&gt;\n  require('../scripts/predict.js')\n  &lt;/script&gt;\n  &lt;!-- end new code --&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Save and exit. Open <code>scripts/predict.js</code>.</p>\n\n<pre><code class=\"language-javascript\">nano scripts/predict.js\n</code></pre>\n\n<p>Import the needed NodeJS utilities for the filesystem, utilities, and child process spawner.</p>\n\n<pre><code class=\"language-javascript\">var fs = require('fs');\nvar utils = require('./utils');\nconst spawn = require(\"child_process\").spawn;\n</code></pre>\n\n<p>Define a <code>predict</code> function which invokes a separate node process to detect wifi networks and a separate Python process to predict the room.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function predict(completion) {\n  const nodeProcess = spawn('node', [\"scripts/observe.js\"]);\n  const pythonProcess = spawn('python', [\"-W\", \"ignore\", \"./model/eval.py\", \"samples.json\"]);\n}\n</code></pre>\n\n<p>After both processes have spawned, add callbacks to the Python process for both successes and errors. The success callback logs information, invokes the completion callback, and updates the UI with the prediction and confidence. The error callback logs the error.</p>\n\n<pre class=\"break-out\"><code class=\"language-javascript\">function predict(completion) {\n  ...\n  pythonProcess.stdout.on('data', (data) =&gt; {\n    information = JSON.parse(data.toString());\n    console.log(\" * [INFO] Room '\" + information.category + \"' with confidence '\" + information.confidence + \"'\")\n    completion()\n\n    if (typeof document != \"undefined\") {\n      document.querySelector('#predicted-room-name').innerHTML = information.category\n      document.querySelector('#predicted-confidence').innerHTML = information.confidence\n    }\n  });\n  pythonProcess.stderr.on('data', (data) =&gt; {\n    console.log(data.toString());\n  })\n}\n</code></pre>\n\n<p>Define a main function to invoke the <code>predict</code> function recursively, forever.</p>\n\n<pre><code class=\"language-javascript\">function main() {\n  f = function() { predict(f) }\n  predict(f)\n}\n\nmain();\n</code></pre>\n\n<p>One last time, open the desktop app to see the live prediction.</p>\n\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n\n<p>Approximately every second, a scan will be completed and the interface will be updated with the latest confidence and predicted room. Congratulations; you have completed a simple room detector based on all in-range WiFi networks.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8aa10fb-c91b-4dd5-833d-4179b57aed86/8-building-room-detector-iot-devices.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8aa10fb-c91b-4dd5-833d-4179b57aed86/8-building-room-detector-iot-devices.gif\" width=\"500\" alt=\"demo\"></a><figcaption>Recording 20 samples inside the room and another 20 out in the hallway. Upon walking back inside, the script correctly predicts “hallway” then “bedroom.” (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8aa10fb-c91b-4dd5-833d-4179b57aed86/8-building-room-detector-iot-devices.gif\">Large preview</a>)</figcaption></figure><h3>Conclusion</h3>\n\n<p>In this tutorial, we created a solution using only your desktop to detect your location within a building. We built a simple desktop app using Electron JS and applied a simple machine learning method on all in-range WiFi networks. This paves the way for Internet-of-things applications without the need for arrays of devices that are costly to maintain (cost not in terms of money but in terms of time and development).</p>\n\n<p><strong>Note</strong>: <em>You can see the source code in its entirety on <a href=\"https://github.com/alvinwan/riot\">Github</a>.</em></p>\n\n<p>With time, you may find that this least squares does not perform spectacularly in fact. Try finding two locations within a single room, or stand in doorways. Least squares will be large unable to distinguish between edge cases. Can we do better? It turns out that we can, and in future lessons, we will leverage other techniques and the fundamentals of machine learning to better performance. This tutorial serves as a quick test bed for experiments to come.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-08-29 12:20:53","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Best Practices For Mobile Form Design","pubDate":"2018-08-28 14:00:09","link":"https://www.smashingmagazine.com/2018/08/best-practices-for-mobile-form-design/","guid":"https://www.smashingmagazine.com/2018/08/best-practices-for-mobile-form-design/","author":"Nick Babich","thumbnail":"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg","description":"(This article is kindly sponsored by Adobe.) Forms are the linchpin of all mobile interactions; it stands between the person and what they're looking for. Every day, we use forms for essential online activities. Recall the last time you bought a ticket, booked a hotel room or made a purchase online — most probably those interactions contained a step with filling out a form.\nForms are just a means to an end.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/08/best-practices-for-mobile-form-design/\">\n<title>Best Practices For Mobile Form Design</title>\n<article><header><h1>Best Practices For Mobile Form Design</h1>\n                  \n                    \n                    <address>Nick Babich</address>\n                  \n                  <time datetime=\"2018-08-28T16:00:09+02:00\" class=\"op-published\">2018-08-28T16:00:09+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>(This article is kindly sponsored by Adobe.) Forms are the linchpin of all mobile interactions; it stands between the person and what they're looking for. Every day, we use forms for essential online activities. Recall the last time you bought a ticket, booked a hotel room or made a purchase online — most probably those interactions contained a step with filling out a form.</p>\n\n<p>Forms are just a means to an end. Users should be able to complete them quickly and without confusion. In this article, you’ll learn practical techniques that will help you design an effective form.</p>\n\n<h3>What Makes For An Effective Form</h3>\n\n<p>The primary goal with every form is completion. Two factors have a major impact on completion rate:</p>\n\n<ul>\n<li>\n<strong>Perception of complexity</strong><br>The first thing users do when they see a new form is estimate how much time is required to complete it. Users do this by scanning the form. Perception plays a crucial role in the process of estimation. The more complex a form looks, the more likely users will abandon the process.</li>\n<li>\n<strong>Interaction cost</strong><br>Interaction cost is the sum of efforts — both cognitive and physical — that the users put into interacting with an interface in order to reach their goal. Interaction cost has a direct connection with form usability. The more effort users have to make to complete a form, the less usable the form is. A high interaction cost could be the result of data that is difficult to input, an inability to understand the meaning of some questions, or confusion about error messages.</li>\n</ul>\n<h3>The Components Of Forms</h3>\n\n<p>A typical form has the following five components:</p>\n\n<ul>\n<li>\n<strong>Input fields</strong><br>These include text fields, password fields, checkboxes, radio buttons, sliders and any other fields designed for user input.</li>\n<li>\n<strong>Field labels</strong><br>These tell users what the corresponding input fields mean.</li>\n<li>\n<strong>Structure</strong><br>This includes the order of fields, the form’s appearance on the page, and the logical connections between different fields.</li>\n<li>\n<strong>Action buttons</strong><br>The form will have at least one call to action (the button that triggers data submission).</li>\n<li>\n<strong>Feedback</strong><br>Feedback notifies the user about the result of an operation. Feedback can be positive (for example, indicating that the form was submitted successfully) or negative (saying something like, “The number you’ve provided is incorrect”).</li>\n</ul>\n<p>This article covers many aspects related to structure, input fields, labels, action buttons and validation. Most points mentioned in this article have visual do and don’t examples; all such examples were created using <a href=\"https://adobe.ly/2rVwVsU\">Adobe XD</a>.</p>\n\n<h3>Input Fields</h3>\n\n<p>When it comes to form design, the most important thing a designer can do is to minimize the need for typing. Reducing input effort is essential. Designers can achieve this goal by focusing on form field design.</p>\n\n<h4>Minimize The Total Number Of Fields</h4>\n\n<p>Every field you ask users to fill out requires some effort. The more effort is needed to fill out a form, the less likely users will complete the form. That’s why the foundational rule of form design is <strong>shorter is better</strong> — get rid of all inessential fields.</p>\n\n<p>Baymard Institute analyzed checkout forms and found that a too <a href=\"https://baymard.com/blog/checkout-flow-average-form-fields\">long or too complicated checkout process</a> is one of the top reasons for abandonment during checkout. The study found that the average checkout contains almost 15 form fields. Most online services could reduce the number of fields displayed by default by 20 to 60%.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tTop reasons for abandonment during checkout. (Image: <a href=\"https://baymard.com/blog/checkout-flow-average-form-fields\">Baymard Institute</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e582680c-98c9-4a88-8c5c-38ea030077b0/1-best-practices-for-mobile-form-design.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>Many designers are familiar with the “less is more” rule; still, they ask additional questions in an attempt to gather more data about their users. It might be tempting to collect more data about your users during the initial signup, but resist that temptation. Think about it this way: With every additional field you add to your form, you increase the chance of losing a prospective user. Is the information you gain from a field worth losing new users? Remember that, as long as you’ve collected a user’s contact information, you can always follow up with a request for more data.</p>\n\n<h4>Clearly Distinguish All Optional Fields</h4>\n\n<p>Before optimizing optional fields, ask yourself whether you really need to include them in your form. Think about what information you really need, not what you want. Ideally, the number of optional fields in your form should be zero.</p>\n\n<p>If after a brainstorming session, you still want to include a few optional questions in your form, make it clear for users that those fields are optional:</p>\n\n<ul>\n<li>\n<strong>Mark optional fields instead of mandatory ones.</strong><br>If you ask as little as possible, then the vast majority of fields in your form will be mandatory. Therefore, mark only those fields in the minority. For instance, if five out of six fields are mandatory, then it makes sense to mark only one field as optional.</li>\n<li>\n<strong>Use the “Optional” label to denote optional fields.</strong><br>Avoid using the asterisk (<code>*</code>) to mean “optional.” Not all users will associate the asterisk with optional information, and some users will be confused by the meaning (an asterisk is often used to denote mandatory fields).</li>\n</ul>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"Clearly distinguish all optional fields.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tClearly distinguish all optional fields. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/328909f7-3c19-4b0c-99a1-7d20e2a339b4/2-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Size Fields Accordingly</h4>\n\n<p>When possible, use field length as an affordance. The length of an input field should be in proportion to the amount of information expected in the field. The size of the field will act as a visual constraint — the user will know how much text is expected to be entered just by looking at the field. Generally, fields such as ones for area codes and house numbers should be shorter than ones for street addresses.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"The size of a field is used as a visual constraint.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe size of a field is used as a visual constraint. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16b52630-9da6-4376-a4bb-b8725eb8be5d/3-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Offer Field Focus</h4>\n\n<p>Auto-focus the first input field in your form. Auto-focusing a field gives the user an indication and a starting point, so that they are able to quickly start filling out the form. By doing that, you reduce the interaction cost — saving the user one unnecessary tap.</p>\n\n<p>Make the active input field prominent and focused. The field focus itself should be crystal clear — users should be able to understand at a glance where the focus is. It could be an accented border color or a fade-in of the box.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"Amazon puts strong visual focus on the input field.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAmazon puts strong visual focus on the input field. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8acc2fd0-713c-4595-adc3-4d4cdfc44843/4-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Don’t Ask Users To Repeat Their Email Address</h4>\n\n<p>The reason why an extra field for the email address is so popular among product developers is apparent: Every company wants to minimize the risk of hard bounces (non-deliverables caused by invalid email addresses). Unfortunately, following this approach doesn’t guarantee that you’ll get a valid address. Users often copy and paste their address from one field to another.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"Avoid asking users to retype their email address.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAvoid asking users to retype their email address. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb8d8c0c-0168-4a89-805f-23fb808c0b71/5-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Provide “Show Password” Option</h4>\n\n<p>Duplicating the password input field is another common mistake among product designers. Designers follow this approach because they believe it will prevent users from mistyping a password. In reality, a second field for a password not only increases interaction cost, but also doesn't guarantee that users will proceed without mistakes. Because users don’t see what they’ve entered in the field, they can make the same mistake twice (in both fields) and will face a problem when they try to log in using a password. As <a href=\"https://www.nngroup.com/articles/stop-password-masking/\">Jakob Nielsen summarized:</a></p>\n\n<blockquote>Usability suffers when users type in passwords and the only feedback they get is a row of bullets. Typically, masking passwords doesn’t even increase security, but it does cost you business due to login failures.</blockquote>\n\n<p>Instead of duplicating the password field, provide an option that allows users to view the password they have chosen to create. Have an icon or checkbox that unmasks the password when clicked. A password preview can be an opportunity for users to check their data before sending.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"Show password' option\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tNot being able to see what you're typing is a huge issue. Providing a 'Show password' option next to the password field will help to solve this problem. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97655e3a-3767-4472-a941-9dc10e3ad003/6-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Don’t Slice Data Fields</h4>\n\n<p>Do not slice fields when asking for a full name, phone number or date of birth. Sliced fields force the user to make additional taps to move to the next field. For fields that require some formatting (such as phone numbers or a date of birth), it’s also better to have a single field paired with clear formatting rules as its placeholder.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"“Full name” field\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAvoid splitting input fields; don’t make people jump between fields. Instead of asking for a first name and last name in two separate fields, have a single 'Full name' field. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/080ce741-ea2c-4b49-91be-5253bc5cf9aa/7-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Avoid Dropdown Menus</h4>\n\n<p>Luke Wroblewski famously said that <a href=\"https://www.lukew.com/ff/entry.asp?1950\">dropdowns should be the UI of last resort</a>. Dropdowns are especially bad for mobile because collapsed elements make the process of data input harder on a small screen: Placing options in a dropdown requires two taps and hides the options.</p>\n\n<p>If you’re using a dropdown for selection of options, consider replacing it with radio buttons. They will make all options glanceable and also reduce the interaction cost — users can tap on the item and select at once.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e80b0e47-d91d-48f5-bf9e-52a6aeb8ab71/8-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Use Placeholders And Masked Input</h4>\n\n<p>Formatting uncertainty is one of the most significant problems of form design. This problem has a direct connection with form abandonment — when users are uncertain of the format in which they should provide data, they can quickly abandon the form. There are a few things you can do to make the format clear.</p>\n\n<h5>Placeholder Text</h5>\n\n<p>The text in an input field can tell users what content is expected. Placeholder text is not required for simple fields such as “Full name”, but it can be extremely valuable for fields that require data in a specific format. For example, if you design search functionality for tracking a parcel, it would be good to provide a sample tracking number as a placeholder for the tracking-number field.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c1adc2d-f4f5-4bad-95b9-fe13f3d44953/9-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><p>It’s vital that your form should have a clear visual distinction between the placeholder text and the actual value entered by the user. In other words, placeholder text shouldn’t look like a preset value. Without clear visual distinction, users might think that the fields with placeholders already have values.</p>\n\n<h5>Masked Input</h5>\n\n<p>Field masking is a technique that helps users format inputted text. Many designers confuse field masking with placeholder text — they are not the same thing. Unlike placeholders, which are basically static text, masks automatically format the data provided by the user. In the example below, the parentheses, spaces and dashes appear on the screen automatically as a phone number is entered.</p>\n\n<p>Masked input also makes it easy for users to validate information. When a phone number is displayed in chunks, it makes it easier to find and correct a typo.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b314057-c2b9-4f8f-b809-078642682533/10-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b314057-c2b9-4f8f-b809-078642682533/10-best-practices-for-mobile-form-design.gif\" width='“480\"' height=\"360\" alt=\"\"></a><figcaption>Masked input for a phone number. (Image: <a href=\"https://www.joshmorony.com/improve-mobile-form-ux-with-input-masks/input-mask/\">Josh Morony</a>)</figcaption></figure><h4>Provide Matching Keyboard</h4>\n\n<p>Mobile users appreciate apps and websites that provide an appropriate keyboard for the field. This feature prevents them from doing additional actions. For example, when users need to enter a credit card number, your app should only display the dialpad. It’s essential to implement keyboard matching consistently throughout the app (all forms in your app should have this feature).</p>\n\n<p>Set HTML input types to show the correct keypad. Seven input types are relevant to form design:</p>\n\n<ul>\n<li>\n<code>input type=\"text\"</code> displays the mobile device’s normal keyboard.</li>\n<li>\n<code>input type=\"email\"</code> displays the normal keyboard and '@' and '.com'.</li>\n<li>\n<code>input type=\"tel\"</code> displays the numeric 0 to 9 keypad.</li>\n<li>\n<code>input type=\"number\"</code> displays a keyboard with numbers and symbols.</li>\n<li>\n<code>input type=\"date\"</code> displays the mobile device’s date selector.</li>\n<li>\n<code>input type=\"datetime\"</code> displays the mobile device’s date and time selector.</li>\n<li>\n<code>input type=\"month\"</code> displays the mobile device’s month and year selector.</li>\n</ul>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tWhen users tap into a field with credit card number, they should see a numerical dialpad — all numbers, no letters. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71c053d5-9037-4357-9b65-59e7a9aaa39f/11-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Use A Slider When Asking For A Specific Range</h4>\n\n<p>Many forms ask users to provide a range of values (for example, a price range, distance range, etc.). Instead of using two separate fields, “from” and “to”, for that purpose, use a slider to allow users to specify the range with a thumb interaction.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"Sliders are good for touch interfaces because they allow users to specify a range without typing.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tSliders are good for touch interfaces because they allow users to specify a range without typing. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfc67b22-bd99-423a-8af1-3a709d2e737d/12-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Clearly Explain Why You’re Asking For Sensitive Information</h4>\n\n<p>People are increasingly concerned about privacy and information security. When users see a request for information they consider as private, they might think, “Hm, why do they need this?” If your form asks users for sensitive information, make sure to explain why you need it. You can do that by adding support text below relevant fields. As a rule of thumb, the explanation text shouldn’t exceed 100 characters.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"A request for a phone number in a booking form might confuse users. Explain why you are asking for it.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tA request for a phone number in a booking form might confuse users. Explain why you are asking for it. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/074980c9-0960-4044-81c0-3df357fdd341/13-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Be Careful With Static Defaults</h4>\n\n<p>Unlike smart defaults, which are calculated by the system based on the information the system has about users, static defaults are preset values in forms that are the same for all users. Avoid static defaults unless you believe a significant portion of your users (say, 95%) would select those values — particularly for required fields. Why? Because you’re likely to introduce errors — people scan forms quickly, and they won’t spend extra time parsing all of the questions; instead, they’ll simply skip the field, assuming it already has a value.</p>\n\n<h4>Protect User Data</h4>\n\n<p>Jef Raskin once said, “The system should treat all user input as sacred.” This is absolutely true for forms. It’s great when you start filling in a web form and then accidentally refresh the page but the data remains in the fields. Tools such as <a href=\"http://garlicjs.org/\">Garlic.js</a> help you to persist a form’s values locally until the form is submitted. This way, users won’t lose any precious data if they accidentally close the tab or browser.</p>\n\n<h4>Automate Actions</h4>\n\n<p>If you want to make the process of data input as smooth as possible, it's not enough to minimize the number of input fields — you should also pay attention to the user effort required for the data input. Typing has a high interaction cost — it’s error-prone and time-consuming, even with a physical keyboard. But when it comes to mobile screens, it becomes even more critical. More typing increases the user’s chance of making errors. Strive to prevent unnecessary typing, because it will improve user satisfaction and decrease error rates.</p>\n\n<p>Here are a few things you can do to achieve this goal:</p>\n\n<h5>Autocomplete</h5>\n\n<p>Most users experience autocompletion when typing a question in Google’s search box. Google provides users with a list of suggestions related to what the user has typed in the field. The same mechanism can be applied to form design. For example, a form could autocomplete an email address.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/82f7d60c-faf2-4115-95f1-523b25495ffe/14-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/82f7d60c-faf2-4115-95f1-523b25495ffe/14-best-practices-for-mobile-form-design.gif\" width='“600\"' height=\"203\" alt=\"\"></a><figcaption>This form suggests the email host and saves users from typing a complete address. (Image: <a href=\"https://github.com/10w042/email-autocomplete\">GitHub</a>)</figcaption></figure><h5>Autocapitalize</h5>\n\n<p>Autocapitalizing makes the first letter a capital automatically. This feature is excellent for fields like names and street addresses, but avoid it for password fields.</p>\n\n<h5>Autocorrect</h5>\n\n<p>Autocorrection modifies words that appear to be misspelled. Turn this feature off for unique fields, such as names, addresses, etc.</p>\n\n<h5>Auto-filling of personal details</h5>\n\n<p>Typing an address is often the most cumbersome part of any online signup form. Make this task easier by using the browser function to fill the field based on previously entered values. According to <a href=\"https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill?hl=en\">Google’s research</a>, auto-filling helps people fill out forms 30% faster.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/79c7ba57-d407-433e-874a-d3d063d6ca3a/15-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/79c7ba57-d407-433e-874a-d3d063d6ca3a/15-best-practices-for-mobile-form-design.gif\" width='“540\"' height=\"961\" alt=\"\"></a><figcaption>Address prefill. Image: <a href=\"https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\">Google</a></figcaption></figure><h4>Use The Mobile Device’s Native Features To Simplify Data Input</h4>\n\n<p>Modern mobile devices are sophisticated devices that have a ton of amazing capabilities. Designers can use a device’s native features (such as camera or geolocation) to streamline the task of inputting data.</p>\n\n<p>Below are just a few tips on how to make use of sensors and device hardware.</p>\n\n<h5>Location Services</h5>\n\n<p>It’s possible to preselect the user’s country based on their geolocation data. But sometimes prefilling a full address can be problematic due to accuracy issues. <a href=\"https://developers.google.com/places/web-service/intro\">Google’s Places API</a> can help solve this problem. It uses both geolocation and address prefilling to provide accurate suggestions based on the user’s exact location.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21f5df13-0819-4d76-8fe9-31aa4ae40c14/16-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a3eba517-86ad-4bcf-b273-39ffb7e9c5fe/16-best-practices-for-mobile-form-design-800w.gif\" width='“800\"' height=\"476\" alt=\"\"></a><figcaption>Address lookup using Google Places API. (Image: <a href=\"https://chromatichq.com/blog/implementing-google-places-autocomplete-es6-part-three\">Chromatic HQ</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21f5df13-0819-4d76-8fe9-31aa4ae40c14/16-best-practices-for-mobile-form-design.gif\">Large preview</a>)</figcaption></figure><p>Using location services, it’s also possible to provide smart defaults. For example, for a “Find a flight” form, it’s possible to prefill the “From” field with the nearest airport to the user based on the user’s geolocation.</p>\n\n<h5>Biometric Authorization</h5>\n\n<p>The biggest problem of using a text password today is that most people forget passwords. <a href=\"http://passwordresearch.com/stats/statistic97.html\">82% of people can’t remember their passwords</a>, and 5 to 10% of sessions require users to reset a password. Password recovery is a big deal in e-commerce. <a href=\"https://articles.uie.com/three_hund_million_button/\">75% of users wouldn't complete a purchase</a> if they had to attempt to recover their password while checking out.</p>\n\n<p>The future of passwords is no passwords. Even today, mobile developers can take advantage of biometric technologies. Users shouldn’t need to type a password; they should be able to use biometric readers for authentication — signing in using a fingerprint or face scanning.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"eBay took advantage of the biometrics functionality on smartphones. Users can use their thumbprint to login into their eBay account.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\teBay took advantage of the biometrics functionality on smartphones. Users can use their thumbprint to login into their eBay account. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd8f2b47-0177-410f-a5b5-ffb77be89f14/17-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h5>Camera</h5>\n\n<p>If your form asks users to provide credit card details or information from their driver’s license, it’s possible to simplify the process of data input by using the camera as a scanner. Provide an option to take a photo of the card and fill out all details automatically.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/afdd2fc6-cdcf-462f-b874-4b47fc14988a/18-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/afdd2fc6-cdcf-462f-b874-4b47fc14988a/18-best-practices-for-mobile-form-design.gif\" width='“360\"' height=\"670\" alt=\"\"></a><figcaption>Let users scan their identity card, instead of having to fill out their credit card information manually. (Image: <a href=\"https://microblink.com/products/blinkid\">blinkid</a>)</figcaption></figure><p>But remember that no matter how good your app fills out the fields, it’s essential to leave them available for editing. Users should be able to modify the fields whenever they want.</p>\n\n<h5>Voice</h5>\n\n<p>Voice-controlled devices, such as Apple HomePod, Google Home and Amazon Echo, are actively encroaching on the market. The number of people who prefer to use voice for common operations has grown significantly. According to ComScore, <a href=\"https://edit.co.uk/blog/voice-search/\">50% of all searches will be voice searches by 2020</a>.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tHow people in the US use smart speakers (according to <a href=\"https://www.comscore.com/Insights/Presentations-and-Whitepapers/2017/State-of-the-US-Online-Retail-Economy-in-Q1-2017\">comScore</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/873d6fc2-dbff-4e23-844d-3944963c58f6/19-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><p>As users get more comfortable and confident using voice commands, they will become an expected feature of mobile interactions. Voice input provides a lot of advantages for mobile users — it’s especially valuable in situations when users can’t focus on a screen, for example, while driving a car.</p>\n\n<p>When designing a form, you can provide voice input as an alternative method of data input.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tGoogle Translate provides an option to enter the text for translation using voice. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fd22df-6c88-472f-af88-60314af7cc81/20-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h3>Field Labels</h3>\n\n<h4>Write Clear And Concise Labels</h4>\n\n<p>The label is the text that tells users what data is expected from them in a particular input field. Writing clear labels is one of the best ways to make a form more accessible. Labels should help the user understand what information is required at a glance.</p>\n\n<p>Avoid using complete sentences to explain. A label is not help text. Write succinct and crisp labels (a word or two), so that users can quickly scan your form.</p>\n\n<h4>Place The Label And Input Close Together</h4>\n\n<p>Put each label close to the input field, because the eye will visually know they’re tied together.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"A label and its field should be visually grouped, so that users can understand which label belongs to which field.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tA label and its field should be visually grouped, so that users can understand which label belongs to which field. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4966559-5928-4aab-b6e5-fb34ae0e4691/21-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Don’t Use Disappearing Placeholder Text As Labels</h4>\n\n<p>While inline labels look good and save valuable screen estate, these benefits are far outweighed by the significant usability drawbacks, the most critical of which is the loss of context. When users start entering text in a field, the placeholder text disappears and forces people to recall this information. While it might not be a problem for simple two-field forms, it could be a big deal for forms that have a lot of fields (say, 7 to 10). It would be tough for users to recall all field labels after inputting data. Not surprisingly, user testing continually shows that <a href=\"https://www.nngroup.com/articles/form-design-placeholders/\">placeholders in form fields often hurt usability</a> more than help.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"Don’t use placeholder text that disappears when the user interacts with the field.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tDon’t use placeholder text that disappears when the user interacts with the field. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83382f56-8b99-4e7c-b992-1470df20bc03/22-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><p>There’s a simple solution to the problem of disappearing placeholders: the floating (or adaptive) label. After the user taps on the field with the label placeholder, the label doesn’t disappear, it moves up to the top of the field and makes room for the user to enter their data.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d3e42c2-0ec0-4274-977f-74f486c286c9/23-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d3e42c2-0ec0-4274-977f-74f486c286c9/23-best-practices-for-mobile-form-design.gif\" width='“800\"' height=\"600\" alt=\"\"></a><figcaption>Floating labels assure the user that they’ve filled out the fields correctly. (Image: <a href=\"https://dribbble.com/mds\">Matt D. Smith</a>)</figcaption></figure><h4>Top-Align Labels</h4>\n\n<p>Putting field labels above the fields in a form improves the way users scan the form. Using eye-tracking technology for this, Google showed that users need <a href=\"https://ai.googleblog.com/2014/07/simple-is-better-making-your-web-forms.html\">fewer fixations</a>, less fixation time and fewer saccades before submitting a form.</p>\n\n<p>Another important advantage of top-aligned labels is that they provide more space for labels. Long labels and localized versions will fit more easily in the layout. The latter is especially suitable for small mobile screens. You can have form fields extend the full width of the screen, making them large enough to display the user’s entire input.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d00e59-ec24-439d-abfa-c8523f74e09d/24-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Sentence Case Vs. Title Case</h4>\n\n<p>There are two general ways to capitalize words:</p>\n\n<ul>\n<li>Title case: Capitalize every word. “This Is Title Case.”</li>\n<li>Sentence case: Capitalize the first word. “This is sentence case.”</li>\n</ul>\n<p>Using sentence case for labels has one advantage over title case: It is slightly easier (and, thus, faster) to read. While the difference for short labels is negligible (there’s not much difference between “Full Name” and “Full name”), for longer labels, sentence case is better. Now You Know How Difficult It Is to Read Long Text in Title Case.</p>\n\n<h4>Avoid Using Caps For Labels</h4>\n\n<p>All-caps text  —  meaning text with all of the letters cap­i­tal­ized  —  is OK in contexts that don’t involve substantive reading (such as acronyms and logos), but avoid all caps otherwise. As mentioned by <a href=\"http://en.wikipedia.org/wiki/Miles_Tinker\">Miles Tinker</a> in his work <em>Legibility of Print</em>, all-capital print dramatically slows the speed of scanning and reading compared to lowercase type.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"All-capitalized letters\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAll-capitalized letters are hard to scan and read. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4db9e926-8318-4a23-a2d9-2243e49c8fbe/25-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h3>Layout</h3>\n\n<p>You know by now that <a href=\"https://www.nngroup.com/articles/how-users-read-on-the-web/\">users scan web pages, rather than read them</a>. The same goes for filling out forms. That’s why designers should design a form that is easy to scan. Allowing for efficient, effective scanning is crucial to making the process of the filling out a form as quick as possible.</p>\n\n<h4>Use A Single-Column Layout</h4>\n\n<p>A <a href=\"https://conversionxl.com/research-study/form-field-usability/\">study by CXL Institute</a> found that single-column forms are faster to complete than multi-column forms. In that study, test participants were able to complete a single-column form an average of 15.4 seconds faster than a multi-column form.</p>\n\n<p>Multiple columns disrupt a user’s vertical momentum; with multiple columns, the eyes start zigzagging. This dramatically increases the number of eye fixations and, as a result, the completion time. Moreover, multiple-column forms might raise unnecessary questions in the user, like “Where should I begin?” and “Are questions in the right column equal in importance to questions in the left one?”</p>\n\n<p>In a one-column design, the eyes move in a natural direction, from top to bottom, one line at a time. This helps to set a clear path for the user. One column is excellent for mobile because the screens are longer vertically, and vertical scrolling is <a href=\"https://uxmyths.com/post/654047943/myth-people-dont-scroll\">a natural motion for mobile users</a>.</p>\n\n<p>There are some exceptions to this rule. It’s possible to place short and logically related fields on the same row (such as for the city and area code).</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tIf a form has horizontally adjacent fields, the user has to scan the form following a Z pattern. When the eyes start zigzagging, it slows the speed of comprehension and increases completion time. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b46639c6-09c3-467f-a5da-8add29ff8661/26-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0c5b631-be70-45f6-9569-f6cef8a3ef53/27-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Create A Flow With Your Questions</h4>\n\n<p>The way you ask questions also matters. Questions should be asked logically from the user’s perspective, not according to the application or database’s logic, because it will help to create a sense of conversation with the user. For example, if you design a checkout form and asks for details such as full name, phone number and credit card, the first question should be for the full name. Changing the order (for example, starting with a phone number instead of a name) leads to discomfort. In real-world conversations, it would be unusual to ask for someone’s phone number before asking their name.</p>\n\n<h4>Defer In-Depth Questions To The End</h4>\n\n<p>When it comes to designing a flow for questions you want to ask, think about prioritization. Follow the rule “easy before difficult” and place in-depth or personal questions last. This eases users into the process; they will be more likely to answer complex and more intrusive questions once they’ve established a rapport. This has a scientific basis: <a href=\"https://www.influenceatwork.com/principles-of-persuasion/\">Robert Cialdini’s principle of consistency</a> stipulates that when someone takes a small action or step towards something, they feel more compelled to finish.</p>\n\n<h4>Group Related Fields Together</h4>\n\n<p>One of the principles of Gestalt psychology, the principle of proximity, states that related elements should be near each other. This principle can be applied to the order of questions in a form. The more related questions are, the closer they should be to each other.</p>\n\n<p>Designers can group related fields into sections. If your form has more than six questions, group related questions into logical sections. Don’t forget to provide a good amount of white space between sections to distinguish them visually.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tGenerally, if your form has more than six questions, it’s better to group related questions into logical sections. Put things together that make sense together. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf242705-2501-48ca-99c5-0c363b297923/28-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Make A Long Form Look Simpler</h4>\n\n<p>How do you design a form that asks users a lot of questions? Of course, you could put all of the questions on one screen. But this hinder your completion rate. If users don’t have enough motivation to complete a form, the form’s complexity could scare them away. The first impression plays a vital role. Generally, the longer or more complicated a form seems, the less likely users will be to start filling in the blanks.</p>\n\n<p>Minimize the number of fields visible at one time. This creates the perception that the form is shorter than it really is.</p>\n\n<p>There are two techniques to do this.</p>\n\n<h5>Progressive Disclosure</h5>\n\n<p>Progressive disclosure is all about giving users the right thing at the right time. The goal is to find the right stuff to put on the small screen at the right time:</p>\n\n<ul>\n<li>Initially, show users only a few of the most important options.</li>\n<li>Reveal parts of your form as the user interacts with it.</li>\n</ul>\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c820651b-3b63-4fbb-917d-60fb815d0d85/29-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c820651b-3b63-4fbb-917d-60fb815d0d85/29-best-practices-for-mobile-form-design.gif\" width='“800\"' height=\"600\" alt=\"\"></a><figcaption>Using progressive disclosure to reduce cognitive load and keep the user focused on a task. (Image: <a href=\"http://ramotion.com/\">Ramotion</a>)</figcaption></figure><h5>Chunking</h5>\n\n<p>Chunking entails breaking a long form into steps. It’s possible to increase the completion rate by splitting a form into a few steps. Chunking can also help users <a href=\"https://www.nngroup.com/articles/chunking/\">process, understand and remember information</a>. When designing multi-step forms, always inform users of their progress with a completeness meter.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tProgress tracker for e-commerce form. (Image: <a href=\"https://dribbble.com/shots/953454-Mobile-Checkout-Card-Payment-Screen\">Murat Mutlu</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7019860-b160-4a24-a198-5d0723009259/30-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><p>Designers can use either a progress tracker (as shown in the example above) or a “Step # out of #” indicator both to tell how many steps there are total and to show how far along the user is at the moment. The latter approach could be great for mobile forms because step indication doesn’t take up much space.</p>\n\n<h3>Action Buttons</h3>\n\n<p>A button is an interactive element that direct users to take an action.</p>\n\n<h4>Make Action Buttons Descriptive</h4>\n\n<p>A button’s label should explain what the button does; users should be able to understand what happens after a tap just by looking at the button. Avoid generic labels such as “Submit” and “Send”, using instead labels that describe the action.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tLabel should help users finish the sentence, 'I want to…' For example, if it’s a form to create an account, the call to action could be 'Create an account'. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/100aa67d-954a-4b63-ae18-aab02054b243/31-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Don’t Use Clear Or Reset Buttons</h4>\n\n<p>Clear or reset buttons allow users to erase their data in a form. These buttons almost never help users and often hurt them. The risk of deleting all of the information a user has entered outweighs the small benefit of having to start again. If a user fills in a form and accidentally hits the wrong button, there’s a good chance they won’t start over.</p>\n\n<h4>Use Different Styles For Primary And Secondary Buttons</h4>\n\n<p>Avoid secondary actions if possible. But if your form has two calls to action (for example, an e-commerce form that has “Apply discount” and “Submit order”) buttons, ensure a clear visual distinction between the primary and secondary actions. Visually prioritize the primary action by adding more visual weight to the button. This will prevent users from tapping on the wrong button.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tEnsure a clear visual distinction between primary and secondary buttons. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/84a5c33c-8be5-4f8b-8fc2-fa0ccfa77d42/32-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Design Finger-Friendly Touch Targets</h4>\n\n<p>Tiny touch targets create a horrible user experience because they make it challenging for users to interact with interactive objects. It’s vital to design finger-friendly touch targets: bigger input fields and buttons.</p>\n\n<p>The image below shows that the width of the average adult finger is about 11 mm.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tPeople often blame themselves for having “fat fingers”. But even baby fingers are wider than most touch targets. (Image: <a href=\"https://developer.microsoft.com/en-us/\">Microsoft</a>)  (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f347d699-dc38-480d-af4f-a9c489fb08ac/33-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><p>According to <a href=\"https://material.io/design/usability/accessibility.html#layout-typography\">material design guidelines</a>, touch targets should be at least 48 × 48 DP. A touch target of this size results in a physical size of about 9 mm, regardless of screen size. It might be appropriate to use larger touch targets to accommodate a wider spectrum of users.</p>\n\n<p>Not only is target size important, but sufficient space between touch targets matters, too. The main reason to maintain a safe distance between touch targets is to prevent users from touching the wrong button and invoking the wrong action. The distance between buttons becomes extremely important when binary choices such as “Agree” and “Disagree” are located right next to each other. Material design guidelines recommend separating touch targets with 8 DP of space or more, which will create balanced information density and usability.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\t(<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00ca89fa-e66f-41bf-9b06-0f6c9232f265/34-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Disable Buttons After Tap</h4>\n\n<p>Forms actions commonly require some time to be processed. For example, data calculation might be required after a submission. It’s essential not only to provide feedback when an action is in progress, but also to disable the submit button to prevent users from accidentally tapping the button again. This is especially important for e-commerce websites and apps. By disabling the button, you not only prevent duplicate submissions, which can happen by accident, but you also provide a valuable acknowledgment to users (users will know that the system has received their submission).</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad654a9c-8ee6-4ed1-8b43-7befef91bf7c/35-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad654a9c-8ee6-4ed1-8b43-7befef91bf7c/35-best-practices-for-mobile-form-design.gif\" width='“800\"' height=\"517\" alt=\"\"></a><figcaption>This form disables the button after submission. (Image: <a href=\"https://medium.com/@michaelvillar?source=post_header_lockup\">Michaël Villar</a>)</figcaption></figure><h3>Assistance And Support</h3>\n\n<h4>Provide Success State</h4>\n\n<p>Upon successful completion of a form, it’s critical to notify users about that. It’s possible to provide this information in the context of an existing form (for example, showing a green checkmark above the refreshed form) or to direct users to a new page that communicates that their submission has been successful.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77908343-a640-4b4d-9c3c-d57ae61ce6ed/37-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77908343-a640-4b4d-9c3c-d57ae61ce6ed/37-best-practices-for-mobile-form-design.gif\" width='“800\"' height=\"600\" alt=\"\"></a><figcaption>Example of success state. (Image: <a href=\"https://dribbble.com/oliveirasimoes\">João Oliveira Simões</a>)</figcaption></figure><h4>Errors And Validation</h4>\n\n<p>Users will make mistakes. It’s inevitable. It’s essential to design a user interface that supports users in those moments of failures.</p>\n\n<p>While the topic of errors and validation deserves its own article, it’s still worth mentioning a few things that should be done to improve the user experience of mobile forms.</p>\n\n<h5>Use Input Constraints for Each Field</h5>\n\n<p>Prevention is better than a cure. If you’re a seasoned designer, you should be familiar with the most common cases that can lead to an error state (error-prone conditions). For example, it’s usually hard to correctly fill out a form on the first attempt, or to properly sync data when the mobile device has a poor network connection. Take these cases into account to minimize the possibility of errors. In other words, it’s better to prevent users from making errors in the first place by utilizing constraints and offering suggestions.</p>\n\n<p>For instance, if you design a form that allows people to search for a hotel reservation, you should prevent users from selecting check-in dates that are in the past. As shown in the Booking.com example below, you can simply use a date selector that allows users only to choose today’s date or a date in the future. Such a selector would force users to pick a date range that fits.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tYou can significantly decrease the number of mistakes or incorrectly inputted data by putting constraints on what can be inputted in the field. The date picker in Booking.com’s app displays a full monthly calendar but makes past dates unavailable for selection. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91815aac-3175-42ad-9f0b-9747647c579b/38-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h5>Don’t Make Data Validation Rules Too Strict</h5>\n\n<p>While there might be cases where it’s essential to use strict validation rules, in most cases, strict validation is a sign of lazy programming. Showing errors on the screen when the user provides data in a slightly different format than expected creates unnecessary friction. And this would have a negative impact on conversions.</p>\n\n<p>It’s very common for a few variations of an answer to a question to be possible; for example, when a form asks users to provide information about their state, and a user responds by typing their state’s abbreviation instead of the full name (for example, CA instead of California). The form should accept both formats, and it’s the developer job to convert the data into a consistent format.</p>\n\n<h5>Clear Error Message</h5>\n\n<p>When you write error messages, focus on minimizing the frustration users feel when they face a problem in interacting with a form. Here are a few rules on writing effective error messages:</p>\n\n<ul>\n<li>\n<strong>Never blame the user.</strong><br>The way you deliver an error message can have a tremendous impact on how users perceive it. An error message like, “You’ve entered a wrong number” puts all of the blame on the user; as a result, the user might get frustrated and abandon the app. Write copy that sounds neutral or positive. A neutral message sounds like, “That number is incorrect.”</li>\n<li>\n<strong>Avoid vague or general error messages.</strong><br>Messages like “Something went wrong. Please, try again later” don’t say much to users. Users will wonder what <em>exactly</em> went wrong. Always try to explain the root cause of a problem. Make sure users know how to fix errors.</li>\n<li>\n<strong>Make error messages human-readable.</strong><br>Error messages like “User input error: 0x100999” are cryptic and scary. Write like a human, not like a robot. Use human language, and explain what exactly the user or system did wrong, and what exactly the user should do to fix the problem.</li>\n</ul>\n<h5>Display Errors Inline</h5>\n\n<p>When it comes to displaying error messages, designers opt for one of two locations: at the top of the form or inline. The first option can make for a bad experience. Javier Bargas-Avila and Glenn Oberholzer conducted research on online form validation and <a href=\"https://www.researchgate.net/publication/221054469_Online_Form_Validation_Don't_Show_Errors_Right_Away\">discovered</a> that displaying all error messages at the top of the form puts a high cognitive load on user memory. Users need to spend extra time matching error messages with the fields that require attention.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAvoid displaying errors at the top of the form. (Image: <a href=\"https://www.johnlewis.com/\">John Lewis</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/284b9888-ce82-4eba-a91e-0abfc2fbcfff/39-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><p>It’s much better to position error messages inline. First, this placement corresponds with the user’s natural top-to-bottom reading flow. Secondly, the errors will appear in the context of the user’s input.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"eBay uses inline validation.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\teBay uses inline validation. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c12b046d-468b-4556-9ac8-4122321e61b9/40-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h5>Use Dynamic Validation</h5>\n\n<p>The time at which you choose to display an error message is vital. Seeing an error message only after pressing the submit button might frustrate users. Don’t wait until users finish the form; provide feedback as data is being entered.</p>\n\n<p>Use inline validation with real-time feedback. This validation instantly tells people whether the information they’ve typed is compatible with the form’s requirements. In 2009, <a href=\"https://alistapart.com/article/inline-validation-in-web-forms\">Luke Wroblewski tested inline validation</a> against post-submission validation and found the following results for the inline version:</p>\n\n<ul>\n<li>22% increase in success rate,</li>\n<li>22% decrease in errors made,</li>\n<li>31% increase in satisfaction rating,</li>\n<li>42% decrease in completion times,</li>\n<li>47% decrease in the number of eye fixations.</li>\n</ul>\n<p>But inline validation should be implemented carefully:</p>\n\n<ul>\n<li>\n<strong>Avoid showing inline validation on focus.</strong><br>In this case, as soon as the user taps a field, they see an error message. The error appears even when the field is completely empty. When an error message is shown on focus, it might look like the form is yelling at the user before they’ve even started filling it out.</li>\n<li>\n<strong>Don’t validate after each character typed.</strong><br>This approach not only increases the number of unnecessary validation attempts, but it also frustrates users (because users will likely see error messages before they have completed the field). Ideally, inline validation messages should appear around <a href=\"https://ux.stackexchange.com/questions/38543/amount-of-time-to-determine-a-user-has-stopped-typing\">500 to 1000 milliseconds after the user has stopped typing</a> or after they’ve moved to the next field. This rule has a few exceptions: It’s helpful to validate inline as the user is typing when creating a password (to check whether the password meets complexity requirements), when creating a user name (to check whether a name is available) and when typing a message with a character limit.</li>\n</ul>\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023e03c-475c-4e04-8216-2bada9024d86/41-best-practices-for-mobile-form-design.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0023e03c-475c-4e04-8216-2bada9024d86/41-best-practices-for-mobile-form-design.gif\" width='“788\"' height=\"570\" alt=\"\"></a><figcaption>Reward early, punish late is a solid validation  approach. (Image: <a href=\"https://medium.com/wdstack/inline-validation-in-forms-designing-the-experience-123fb34088ce\">Mihael Konjević</a>)</figcaption></figure><h3>Accessibility</h3>\n\n<p>Users of all abilities should be able to access and enjoy digital products. Designers should strive to incorporate accessibility needs as much as they can when building a product. Here are a few things you can do to make your forms more accessible.</p>\n\n<h4>Ensure The Form Has Proper Contrast</h4>\n\n<p>Your users will likely interact with your form outdoors. Ensure that it is easy to use both in sun glare and in low-light environments. Check the contrast ratio of fields and labels in your form. The <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G18.html\">W3C recommends the following contrast ratios</a> for body text:</p>\n\n<ul>\n<li>Small text should have a contrast ratio of at least 4.5:1 against its background.</li>\n<li>Large text (at 14-point bold, 18-point regular and up) should have a contrast ratio of at least 3:1 against its background.</li>\n</ul>\n<p>Measuring color contrast can seem overwhelming. Fortunately, some tools make the process simple. One of them is <a href=\"https://webaim.org/resources/contrastchecker/\">Web AIM Color Contrast Checker</a>, which helps designers to measure contrast levels.</p>\n\n<h4>Do Not Rely On Color Alone To Communicate Status</h4>\n\n<p>Color blindness (or color vision deficiency) affects approximately 1 in 12 men (8%) and <a href=\"http://www.colourblindawareness.org/\">1 in 200 women</a> in the world. While there are many types of color blindness, the most common two are protanomaly, or reduced sensitivity to red light, and deuteranomaly, or reduced sensitivity to green light. When displaying validation errors or success messages, don’t rely on color alone to communicate the status (i.e. by making input fields green or red). As the <a href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-without-color.html\">W3C guidelines</a> state, color shouldn’t be used as the only visual means of conveying information, indicating an action, prompting a response or distinguishing a visual element. Designers should use color to highlight or complement what is already visible. Support colorblind people by providing additional visual cues that help them understand the user interface.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"Use icons and supportive text to show which fields are invalid. This will help colorblind people fix the problems.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tUse icons and supportive text to show which fields are invalid. This will help colorblind people fix the problems. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc399215-910e-48e7-87c9-0e87c5e13a64/42-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h4>Allow Users To Control Font Size</h4>\n\n<p>Allow users to increase font size to improve readability. Mobile devices and browsers include features to enable users to adjust the font size system-wide. Also, make sure that your form has allotted enough space for large font sizes.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png\" sizes=\"100vw\" alt=\"WhatsApp provides an option to change the font size in the app’s settings\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tWhatsApp provides an option to change the font size in the app’s settings. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04e5c614-79b5-4e6e-9358-4a1d69afc30f/43-best-practices-for-mobile-form-design.png\">Large preview</a>)\n\t\t</figcaption></figure><h3>Test Your Design Decisions</h3>\n\n<p>All points mentioned above can be considered as industry best practices. But just because something is called a “best practice” doesn’t mean it is always the optimal solution for your form. Apps and websites largely depend on the context in which they are used. Thus, it’s always essential to test your design decisions; make sure that the process of filling out a form is smooth, that the flow is not disrupted and that users can solve any problems they face along the way. Conduct usability testing sessions on a regular basis, collect all valuable data about user interactions, and learn from it.</p>\n\n<h3>Conclusion</h3>\n\n<p>Users can be hesitant to fill out forms. So, our goal as designers is to make the process of filling out a form as easy as possible. When designing a form, strive to create fast and frictionless interactions. Sometimes a minor change — such as properly writing an error message — can significantly increase the form’s usability.</p>\n\n<p><em>This article is part of the UX design series sponsored by Adobe. Adobe XD is made for a <a href=\"https://adobe.ly/2BVfX6J\">fast and fluid UX design process</a>, as it lets you go from idea to prototype faster. Design, prototype and share — all in one app. You can check out more inspiring projects created with <a href=\"https://www.behance.net/galleries/adobe/5/XD\">Adobe XD on Behance</a>, and also <a href=\"https://adobe.ly/2yKueO8\">sign up for the Adobe experience design newsletter</a> to stay updated and informed on the latest trends and insights for UX/UI design.</em></p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(al, yk, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-08-28 14:00:09","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"UX And HTML5: Let’s Help Users Fill In Your Mobile Form (Part 2)","pubDate":"2018-08-27 12:00:31","link":"https://www.smashingmagazine.com/2018/08/ux-html5-mobile-form-part-2/","guid":"https://www.smashingmagazine.com/2018/08/ux-html5-mobile-form-part-2/","author":"Stéphanie Walter","thumbnail":"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png","description":"In this second part, I want to focus more on mobile-specific capabilities. HTML5, for instance, has brought us a lot of really cool features to help users fill in mobile forms and format their data. We will see in detail how HTML5 attributes can help you with that. Then, we will go beyond “classic” form elements and see how to use mobile capabilities such as the camera, geolocation and fingerprint scanners to really take your mobile form experience to the next level on websites and in native applications.","content":"\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2018/08/ux-html5-mobile-form-part-2/\">\n<title>UX And HTML5: Let’s Help Users Fill In Your Mobile Form (Part 2)</title>\n<article><header><h1>UX And HTML5: Let’s Help Users Fill In Your Mobile Form (Part 2)</h1>\n                  \n                    \n                    <address>Stéphanie Walter</address>\n                  \n                  <time datetime=\"2018-08-27T14:00:31+02:00\" class=\"op-published\">2018-08-27T14:00:31+02:00</time><time datetime=\"2018-09-08T10:37:59+00:00\" class=\"op-modified\">2018-09-08T10:37:59+00:00</time></header><p>In this second part, I want to focus more on mobile-specific capabilities. HTML5, for instance, has brought us a lot of really cool <strong>features to help users fill in mobile forms and format their data. We will see in detail how HTML5 attributes can help</strong> you with that. Then, we will go beyond “classic” form elements and see how to use mobile capabilities such as the camera, geolocation and fingerprint scanners to really take your mobile form experience to the next level on websites and in native applications.</p>\n\n<h3>Helping The User Format Content With HTML5</h3>\n\n<p>In the first part of this series, we saw some general advice on how to display fields. Now it’s time to go a bit deeper and look at how a few well-crafted lines of HTML5 code can improve your mobile forms.</p>\n\n<h4>HTML5 Mobile-Optimized Goodness</h4>\n\n<p>HTML5 opens a whole world of possibilities for optimizing forms for mobile and touch devices. A lot of interesting new input types can trigger different keyboards to help users. We can also do some interesting things with capturing media directly in the browser.</p>\n\n<h5>Entering Numerical Data</h5>\n\n<p><strong><code>input type= number</code></strong></p>\n\n<p>The HTML5 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number\"><code>&lt;input type=number&gt;</code></a> attribute restricts an input field to numbers. It has a built-in validation system that rejects anything that is not a number.</p>\n\n<p>In some desktop browsers, this input is presented with little arrows on the right that the user can click to increment the number. On mobile, it <strong>opens a keyboard with numbers</strong>, which decreases typos and form-validation errors. The input’s look and feel depend on the operating system.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png\" sizes=\"100vw\" alt=\"On the left, Android’s keyboard, and on the right, the iOS keyboard with numbers.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tOn the left, Android’s keyboard, and on the right, the iOS keyboard with numbers. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9d0c6e-ce67-4e14-8c55-0cfcf8d8b880/making-mobile-form-experience-better-37-input-number.png\">Large preview</a>)\n\t\t</figcaption></figure><p>The input should allow for decimals and negative numbers (but few keyboards respect that). As explained in <a href=\"https://www.w3.org/TR/html5/forms.html#number-state-(type=number)\">the W3C’s specifications</a>, “a simple way of determining whether to use type=number is to consider whether it would make sense for the input control to have a spinbox interface (e.g. with ‘up’ and ‘down’ arrows)”. This means that the input is not supposed to be used for credit cards or area codes.</p>\n\n\n\n<aside class=\"product-panel product-panel__tilted product-panel--book\" data-audience=\"non-subscriber\"><div class=\"container product-panel--book__container\">\n      <div class=\"panel__description panel__description--book\">\n    <p>With so much happening on the web, what should we really pay attention to? At <a href=\"https://smashingconf.com/ny-2018/\">SmashingConf New York 2018</a> 🇺🇸 we’ll explore everything from PWAs, font loading best practices, web performance and eCommerce UX optimization, to refactoring CSS, design workflows and convincing your clients. With Sarah Drasner, Dan Mall, Sara Soueidan, Jason Grigsby, and <a href=\"https://smashed.by/confpanelspeakers\">many other speakers</a>. Oct <span class=\"small-caps\">23–24</span>.</p>\n      <a href=\"https://smashed.by/confpanelspeakers\" class=\"btn btn--green btn--large\">\n        Check the speakers →\n      </a>\n      </div>\n      <div class=\"panel__image panel__image--book\">\n        <a href=\"https://smashed.by/confpanelspeakers\" class=\"books__book__image\">\n        <div class=\"books__book__img\">\n          <img src=\"https://res.cloudinary.com/indysigner/image/upload/v1529498640/sarah-drasner-opt_kaxhos.png\" alt=\"SmashingConf New York 2018, with Dan Mall, Sara Soueidan, Sarah Drasner and many others.\" width=\"310\" height=\"400\">\n</div>\n      </a>\n      </div>\n    </div>\n  </aside><p><strong>The <code>pattern</code> And <code>inputmode</code> Attributes</strong></p>\n\n<p>To add some restrictions to your number inputs, you could use the <code>pattern</code> attribute to specify a regular expression against which you want to control values.</p>\n\n<p>This is what it looks like:</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;input type=\"number\" id=\"quantity\" name=\"quantity\" pattern=\"[0-9]*\" inputmode=\"numeric\" /&gt;</code></pre>\n\n<p>You can use this pattern to bring up the big-button numeric keyboard on the iPhone (but not the iPad). This keyboard does not have the minus sign or comma, so users lose the ability to use negative numbers and decimals. Also, they can’t switch back to another keyboard here, so be careful when using this.</p>\n\n<p>Also, note that patterns can be applied to any other type of inputs.</p>\n\n<p>Using only this pattern won’t work on most Android phones. You’ll still need a combination of <code>input type=number</code> and the attribute to make this work.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png\" sizes=\"100vw\" alt=\"Android and iOS demo with input type=number, pattern and inputmode.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tAndroid and iOS demo with <code>input type=number</code>, <code>pattern</code> and <code>inputmode</code>. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aab3d5e8-dbb3-42b4-b1e4-8e9c81077231/making-mobile-form-experience-better-38-input-numeric.png\">Large preview</a>)\n\t\t</figcaption></figure><p><strong><code>inputmode</code></strong></p>\n\n<p>If you only want to trigger the mobile numeric keyboard but don’t want to deal with the <code>type=number</code> and <code>pattern</code> mess, you could use a text input and apply the<a href=\"https://html.spec.whatwg.org/multipage/interaction.html#input-modalities%3A-the-inputmode-attribute\"> inputmode=numeric</a> attribute. It would look like this:</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;input type=\"text\" id=\"quantity\" name=\"quantity\" inputmode=\"numeric\" /&gt;</code></pre>\n\n<p>Unfortunately (at the time of writing), <a href=\"https://caniuse.com/#feat=input-inputmode\">only Chrome 67 mobile supports this</a>, but it should be arriving in Chrome desktop 66 without a flag.</p>\n\n<p>To learn more about how to enter numbers in a form, read “<a href=\"https://www.filamentgroup.com/lab/type-number.html\">I Wanted to Type a Number</a>”.</p>\n\n<p><strong><code>input type=tel</code></strong></p>\n\n<p>If you want users to enter a phone number, you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel\">input type=tel</a>. As you can see in the screenshot below, it triggers the same digits on iOS’ keyboard as the pattern attribute described above. Due to the complexity of phone numbers across the world, there is no automatic validation with this input type.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png\" sizes=\"100vw\" alt=\"input type=tel on Android and iOS\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\"><code>input type=tel</code> on Android and iOS (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b924751d-56d3-42c1-97f7-8a00a788e1e2/making-mobile-form-experience-better-39-input-tel.png\">Large preview</a>)\n\t\t</figcaption></figure><h5>Entering Dates</h5>\n\n<p>Even if they are technically numerical data, dates deserve their own section. There are a few HTML5 input types for entering dates. The most used is <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date\"><code>input type=date</code></a>. It will trigger a date-picker in supported browsers. The appearance of the date-picker depends on the browser and OS. To learn more on how browsers render <code>input type=\"date\"</code>, I recommend you read “<a href=\"https://medium.com/samsung-internet-dev/making-input-type-date-complicated-a544fd27c45a\">Making <code>input type=date</code> complicated</a>.”</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png\" sizes=\"100vw\" alt=\"A date-picker based on input type=date on Android and iOS\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tA date-picker based on <code>input type=date</code> on Android and iOS (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13460a5d-8a6a-4a62-b187-b6c643f8f5d5/making-mobile-form-experience-better-40-input-date.png\">Large preview</a>)\n\t\t</figcaption></figure><p>There’s also <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/week\"><code>type=week</code></a> to pick a week, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time\"><code>type=time</code></a> to enter a time (up to the hour and minute), and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local\"><code>type=datetime-local</code></a> to pick a date <em>and</em> a time (using the user’s local time). So many choices!</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg\" sizes=\"100vw\" alt=\"Example of date-picker with more options on Android\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tExample of date-picker with more options on Android (week, date and time, etc.) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14867d8-1d6e-4887-b692-487a52e1d1a7/making-mobile-form-experience-better-41-timeweek.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p><code>input type=date</code> works well for booking interfaces, for example. You might have some needs that require you to build your own date-picker, though (<a href=\"https://www.smashingmagazine.com/2018/08/ux-html5-mobile-form-part-1/#sensible-defaults\">as we’ve already seen in the section on sensible defaults</a>). But <code>input type=date</code> is always a nice option if you need a date-picker and don’t want to bring a whole JavaScript library into the website for the job.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<p>Yet, sometimes not using <code>type=date</code> for dates is better. Let’s take the example of a birth date. If I was born in 1960 (I’m not — this is just an example), it would take me many taps to pick my birth date if I was starting from 2018. On Android, I discovered recently that if I press on the year in the picker, I get a sort of dropdown wheel with all of the years. A bit better, but it still requires a fair amount of scrolling.</p>\n\n<p>A <a href=\"https://twitter.com/lenngren/status/976414846442000385\">user told me on Twitter</a>:</p>\n\n<blockquote>\"I’m born in 1977 and can confirm the annoyance. The more time it takes to scroll, the older you feel :-(\"</blockquote>\n\n<p>So, maybe birth dates are not the best candidate for date-pickers.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg\" sizes=\"100vw\" alt=\"With Android’s date-picker, even though you can press and hold the year to get a year-picker, picking a birth date is still tedious.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tWith Android’s date-picker, even though you can press and hold the year to get a year-picker, picking a birth date is still tedious. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1508c7f2-9e28-4f14-8925-523fa11534f3/making-mobile-form-experience-better-42-date-picker.jpg\">Large preview</a>)\n\t\t</figcaption></figure><h5>URL, Email, Tel And Search</h5>\n\n<p>Mobile phones hide some other keyboard and input-optimization goodness that enhance the user’s experience when filling in a form. The devil is in the details, as they say.</p>\n\n<p>Using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url\"><code>input type=url</code></a> field will bring up an optimized keyboard on mobile, with <kbd>/</kbd> (the slash key) directly accessible. Depending on the OS, you can also give quick access to commons top-level domains, like the <code>.fr</code> in the screenshot below. If you long-press this button, shortcuts to other top-level domains will appear. This also comes with automatic browser validation that checks that the URL’s format is valid.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png\" sizes=\"100vw\" alt=\"input type=url keyboard on Android and iOS\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\"><code>input type=url</code> keyboard on Android and iOS (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b638893-8768-4c94-9174-20d255e9035e/making-mobile-form-experience-better-43-input-url.png\">Large preview</a>)\n\t\t</figcaption></figure><p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email\">input type=email</a>field brings up an email-optimized keyboard giving quick access to the <code>@</code> symbol. This input requires the presence of <code>@</code> somewhere in the field in order to be valid. That’s the only verification it does.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png\" sizes=\"100vw\" alt=\"input type=email keyboard on Android and iOS\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\"><code>input type=email</code> keyboard on Android and iOS (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13fe0a6f-b8bc-4541-b624-30dfb6fbf85b/making-mobile-form-experience-better-44-input-email.png\">Large preview</a>)\n\t\t</figcaption></figure><p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search\">input type=search</a> field brings up a search-optimized keyboard. The user can directly launch the search from a button on the keyboard. There’s also a little cross to clear the field and type a new query.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png\" sizes=\"100vw\" alt=\"input type=search keyboard on Android and iOS\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\"><code>input type=search</code> keyboard on Android and iOS (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e56b3fb-4d44-47ed-bc21-c26461a8a182/making-mobile-form-experience-better-45-input-search.png\">Large preview</a>)\n\t\t</figcaption></figure><h5>Range And Color</h5>\n\n<p>The last two input types we looked at are not particularly optimized for mobile, but by using them, we can avoid having to load heavy custom JavaScript libraries, which is a good idea for mobile users.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\">input type=range</a> provides a visual UI slider to input a number. The UI for this control is browser-dependent.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color\">input type=color</a> provides an easy way for the user to enter a color value. In many browser implementations, this comes with a color-picker.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png\" sizes=\"100vw\" alt=\"input type=range and input type=color on Android and iOS\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\"><code>input type=range</code> and <code>input type=color</code> on Android and iOS (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feae3167-10e4-4508-b499-59c6931f8691/making-mobile-form-experience-better-46-input-c-range.png\">Large preview</a>)\n\t\t</figcaption></figure><h5>HTML Media Capture: Taking And Uploading Pictures And Recording Sound</h5>\n\n<p>I remember the time of the iPhone 3, when Apple would not even allow a simple <code>input type=file</code> to be used on a website, for security reasons. Those times are long gone. With the <a href=\"https://w3c.github.io/html-media-capture/\">HTML media capture API</a>, it’s now possible to access different sensors of a device. We can capture photos and videos, and we can even record voice directly in the browser.</p>\n\n<p>The <a href=\"https://www.wufoo.com/html5/attributes/07-accept.html\">accept attribute</a> lets you specify what kind of media to accept in the input: audio, image, video. The user can give the browser direct access to their camera, for example.</p>\n\n<p>The code looks like this:</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;input type=\"file\" id=\"take-picture\" accept=\"image/*\"&gt;</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg\" sizes=\"100vw\" alt=\"The accept attribute is set to image. The browser asks whether I want to access the camera directly or the files on the device.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe <code>accept</code> attribute is set to <code>image</code>. The browser asks whether I want to access the camera directly or the files on the device. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dff911a-9299-4951-95e3-03f90ecc0e7e/making-mobile-form-experience-better-48-capture.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>The <a href=\"https://w3c.github.io/html-media-capture/#the-capture-attribute\">capture attribute</a> lets you specify the preferred mode of capture. If you add the <code>capture</code> attribute on top of the <code>accept</code> attribute, you can make the browser open the camera or voice recorder directly.</p>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;input type=\"file\" accept=\"image/*\" capture&gt; // opens the camera&gt;\n</code></pre>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;input type=\"file\" accept=\"video/*\" capture&gt; // opens the camera in video mode\n</code></pre>\n\n<pre class=\"break-out\"><code class=\"language-html\">&lt;input type=\"file\" accept=\"audio/*\" capture&gt; // opens the voice recorder\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg\" sizes=\"100vw\" alt=\"The mobile browser directly opens the capture mechanism: on the left, the camera, on the right, the video recorder.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe mobile browser directly opens the capture mechanism: on the left, the camera, on the right, the video recorder. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1ee8822-cb93-43f3-9016-947566308416/making-mobile-form-experience-better-49-opening.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>For more details on how to use media directly in the browser, read the section “<a href=\"https://www.smashingmagazine.com/2016/12/the-not-so-secret-powers-of-the-mobile-browser/#part-1-accessing-and-handling-images-video-and-audio-directly-in-the-browser\">Accessing and Handling Images, Video and Audio Directly in the Browser</a>” in my article on the secret powers of mobile browsers.</p>\n\n<h5>HTML5 Autos: Autocorrect, Autocomplete, Autofill, Autocapitalize And Autofocus</h5>\n\n<p>HTML5 comes with a slew of automatic attributes. To enhance the mobile experience, you will want to be smart about what can be automated and what can’t. Here are some general rules of thumb:</p>\n\n<ul>\n<li>\n<strong>Disable autocorrect on things for which the dictionary is weak</strong>: email addresses, numbers, names, addresses, cities, regions, area codes, credit card numbers.</li>\n<li>\n<strong>Disable autocapitalize for email</strong> fields and other fields where appropriate (for example, website URLs). Note that <code>type=email</code> does the job for you in recents version of iOS and Android, but disable it anyway for older versions or if <code>type=email</code> is not supported.</li>\n<li>You can set the autocapitalize attribute to <code>words</code> to automatically <strong>uppercase the first letter of each word</strong> the user types. This can be useful for names, places and the like, but, again, be careful with it, and test it.</li>\n</ul>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg\" sizes=\"100vw\" alt=\"Use input type=email for email addresses. If you don’t, at least deactivate auto-capitalization. No email address starts with a capital letter.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tUse <code>input type=email</code> for email addresses. If you don’t, at least deactivate auto-capitalization. No email address starts with a capital letter. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/067eeb52-d66f-4f28-b859-e7269a7b50f4/making-mobile-form-experience-better-50-autos.jpg\">Large preview</a>)\n\t\t</figcaption></figure><ul>\n<li>For <code>input type=tel</code>, set <code>autocomplete=\"tel\"</code>.</li>\n<li>You could use <code>autofocus</code> to give the focus to a control element when the user loads the page. But just because the user opens the “contact” page, it does not mean they are ready to jump right to the first field of your form. So, again, use it wisely.</li>\n</ul>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg\" sizes=\"100vw\" alt=\"In this example, we could use autofocus to take the user directly to the first field once they’ve clicked on the button.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tIn this example, we could use <code>autofocus</code> to take the user directly to the first field once they’ve clicked on the button. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4d2154a-9fed-47e5-bb5b-d1cece87128c/making-mobile-form-experience-better-51-focus-loading.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>If you want <a href=\"https://wiki.whatwg.org/wiki/Autocomplete_Types#Extending_the_autocomplete_Attribute_for_Form_Fields\">more autocomplete options, a whole list is on the WhatWG Wiki</a>. Just make sure you use the right ones. Implement, test, and test again.</p>\n\n<h5>HTML5 Form Validation</h5>\n\n<p>I won’t get into the technical details here, but you should know that <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation\">HTML5 has a built-in form-validation API for many fields</a>. It’s nice if you don’t want to use a JavaScript library to display inline validation messages. Here are the main things you need to know as a UX designer about HTML5 form validation:</p>\n\n<ul>\n<li>The validation message is a browser control. You can’t style it in CSS, and it’s different for every browser.</li>\n<li>You can change the text of the message in JavaScript using <code>setCustomValidity</code>.</li>\n<li>\n<a href=\"https://www.sitepoint.com/css-pseudo-classes-styling-form-fields-based-on-their-input/\">CSS3 provides :invalid, :valid and :required and other pseudo-classes for HTML form validation</a>. These get triggered on blur, so are pretty much useless for now.</li>\n</ul>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg\" sizes=\"100vw\" alt=\"HTML native form validation in an Android browser\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tHTML native form validation in an Android browser (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/934a1c5f-deac-4988-bdd9-5d471e57b561/making-mobile-form-experience-better-52-validation.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>In “<a href=\"https://medium.com/samsung-internet-dev/native-form-validation-part-1-bf8e35099f1d\">Native Form Validation, Part 1</a>,” Peter-Paul Koch goes into detail on why HTML and CSS form validation doesn’t really make forms better at this time.</p>\n\n<h5>Offline Support To Save User Data</h5>\n\n<p>A lot of things can go wrong, especially on mobile. Mistakes happen. A user could mistap the back button in the browser and lose all of their data.</p>\n\n<p><strong>If the user comes back to the page, it would be nice to display their data again</strong>. The same goes for if the browser crashes or the user closes the tab. You can <strong>store the user’s data in local or session storage</strong> to ensure nothing gets lost if something goes wrong. Geoffrey Crofte has <a href=\"https://github.com/geoffreycrofte/form-saver\">written a JavaScript library to help you with that</a>.</p>\n\n<p>If the connection is lost as the user is submitting the form, they might also lose the data. To avoid this, you could use a combination of the** HTML5 offline API** and the <strong>Service Workers API</strong> to:</p>\n\n<ul>\n<li>store the data in the cache,</li>\n<li>try to automatically send it again when the connection comes back.</li>\n</ul>\n<p>To learn how to code this, check out the article on “<a href=\"https://mxb.at/blog/offline-forms/\">Offline-Friendly Forms</a>”.</p>\n\n<h3>Mobile Device Capabilities Can Take the Experience To The Next Level</h3>\n\n<p>In <a href=\"https://www.smashingmagazine.com/2018/08/ux-html5-mobile-form-part-1/\">part 1</a>, we stuck to the basic common HTML form elements and attributes for enhancing mobile forms. But mobile devices capabilities now go far beyond displaying HTML, CSS and JavaScript web pages. Those little devices come <strong>equipped with a lot of sensors</strong>. And we will be able to <strong>use many of those in native apps and on the web</strong> to make our users’ lives so much easier.</p>\n\n<h4>Detecting The User’s Location</h4>\n\n<p>In the previous section, I wrote about pre-filling information for places and addresses. That’s a good start. We can go one step further. <strong>Instead of asking users to type a location, we can detect it</strong>. Meet the <a href=\"https://www.w3.org/TR/geolocation-API/\">geolocation API</a> for the web. There are also native iOS, Android and Windows Phone geolocation APIs.</p>\n\n<p>Citymapper is a website and an app that helps users plan their travels. When the user goes into the first field, they see the “Use current location” option. If they select it, they are asked to allow the browser to access their geolocation data. This is the geolocation API. The browser then autocompletes the location it found and, the user can proceed to the destination field. The native app works pretty much the same way.</p>\n\n<figure class=\"video-container\"><br><em>Citymapper proposes the user’s current location as the starting point for the journey.</em></figure><h4>Be Smart When Asking For The User’s Permission</h4>\n\n<p>You might have noticed in the previous video that I had to agree to give access to my position to the Citymapper website. In the browser, the user handles permissions website by website, API by API.</p>\n\n<p>You also <strong>need to be careful how you ask for permission</strong>. The user might refuse access to the geolocation, notification or other API if you ask too soon. They also might refuse if they don’t understand why you need the permission. <strong>You get one chance; use it wisely</strong>. After that, it will be almost impossible to recover. I’m an Android power user, and even I have to search around for the options in my browser when I want to reset the permissions I’ve given to a website. Imagine the trouble your users will have.</p>\n\n<p>Here is some general advice on asking for permissions on the web:</p>\n\n<ul>\n<li>Don’t be the creepy geolocation or notification stalker: <strong>Don’t ask for permission as soon as the user arrives on your website</strong>. They might not know about you or your service yet.</li>\n<li>Let the user discover your website and service. Then, <strong>ask for permission in context</strong>. If you want to access their location, ask them only when you need it (Citymapper is a good example).</li>\n<li>Explain <strong>why you need permission and what you will do with it</strong>.</li>\n</ul>\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg\" sizes=\"100vw\" alt=\"Citymapper asks for access to the user’s location only when it needs it. Clearing permissions after the user refuses it can get really complicated because the user will need to search through their settings for that website.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tCitymapper asks for access to the user’s location only when it needs it. Clearing permissions after the user refuses it can get really complicated because the user will need to search through their settings for that website. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ed9222f-d200-4b5f-8b0a-f73fa24ba884/making-mobile-form-experience-better-53-permissions.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>If you want to go further, Luke Wroblewski (yes, him again) has created a <a href=\"https://www.youtube.com/watch?v=2u5qR3trwEY&amp;list=PLg-UKERBljNy2Yem3RJkYL1V70dpzkysC&amp;index=6\">nice video to help you with the permission</a><a href=\"https://www.youtube.com/watch?v=2u5qR3trwEY&amp;list=PLg-UKERBljNy2Yem3RJkYL1V70dpzkysC&amp;index=6\">-asking process</a>.</p>\n\n<h4>A Better Checkout Experience</h4>\n\n<p>A big area of improvement for forms is the whole checkout payment experience. Here again, sensors on the device can make this an almost painless experience. The only pain will be the amount of money the user spends.</p>\n\n<h5>iOS Credit Card Scanner</h5>\n\n<p>In the previous section, I wrote about autodetection of credit cards and autocompletion features based on the user’s previous input. This still means that the user has to type their credit card data at least once.</p>\n\n<p>Apple has taken this to the next level with its <strong>credit card scanner</strong>. Since iOS 8 in Safari, <strong>users can use their camera to scan and autocomplete</strong> their credit card information. To perform this magic, you will need to add the autocomplete <code>cc-number</code> attribute and some name to identify this as a credit card field. Apple doesn’t have much official information on it, but <a href=\"https://stackoverflow.com/questions/25163891/when-is-the-scan-credit-card-option-available-on-ios8-safari\">some people did some testing and put the results on </a><a href=\"https://stackoverflow.com/questions/25163891/when-is-the-scan-credit-card-option-available-on-ios8-safari\">Stack</a><a href=\"https://stackoverflow.com/questions/25163891/when-is-the-scan-credit-card-option-available-on-ios8-safari\">Overflow</a>.</p>\n\n<p>Safari also has <a href=\"https://9to5mac.com/2014/10/11/ios-8-how-to-use-camera-to-enter-in-credit-card-info/\">autofill options that users can use to add their credit card</a>, allowing them reuse it on multiple websites.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg\" sizes=\"100vw\" alt=\"The credit card scanning option appears when Safari detects a field that matches the credit card format. If the user already has a card registered on the phone, they can use the autofill option.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe credit card scanning option appears when Safari detects a field that matches the credit card format. If the user already has a card registered on the phone, they can use the autofill option. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4139e02-1864-47e1-abb0-910ad1aeff01/making-mobile-form-experience-better-54-ios-creditcard-scan.jpg\">Large preview</a>)\n\t\t</figcaption></figure><h5>Take Checkout One Step Further With Google Pay API</h5>\n\n<p>Google launched something similar: the <a href=\"https://developers.google.com/pay/api/web/setup\">Google Pay API</a>. When implemented on a website, the API <strong>eliminates the need to manually enter payment information</strong>. It goes one step further: It can store billing and shipping addresses as well.</p>\n\n<p>The user gets a dialog in Chrome that displays the various payment information they’ve stored. They can choose which one to use and can <strong>pay directly through the dialog</strong>.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg\" sizes=\"100vw\" alt=\"The Google Pay API pop-up triggered on an e-commerce website\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tThe Google Pay API pop-up triggered on an e-commerce website (<a href=\"https://developers.google.com/web/updates/2016/07/payment-request\">Source</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef94d52f-9476-49a7-a5f4-08983b057d01/making-mobile-form-experience-better-55-android-fast-checkout.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>A <a href=\"https://www.w3.org/TR/payment-request/\">standardized version of the Payment Request API is currently a W3C candidate recommendation</a>. If this gets implemented in browsers, it would allow users to check out with a single button, which would request the API. Every step thereafter would be handled by native browser dialogs.</p>\n\n<h4>Making Authentication Easier</h4>\n\n<p>Mobile phones are, in most cases, personal devices that people don’t usually share with others. This opens up some interesting opportunities for authentication.</p>\n\n<h5>Magic Link</h5>\n\n<p>I use a password manager. I don’t know 99% of my passwords. They are all randomly generated. In order to log into a new Slack workspace, I must:</p>\n\n<ol>\n<li>open my password manager,</li>\n<li>enter my master password,</li>\n<li>search for the workspace,</li>\n<li>copy and paste the password into the Slack app.</li>\n</ol>\n<p>It’s a tedious process, but Slack was smart enough to provide a better option.</p>\n\n<div class=\"sponsors__wide-place\"></div>\n\n\n\n\n<p>Many users have they mail synchronized on their phone. Slack understood that. When you add a new Slack workspace in the app, you can either log in using the password or ask for the “magic link” option. If you opt for the latter, <strong>Slack sends a magic link to your mailbox</strong>. Open the mail, click on the big green button, and — <em>ta-da!</em> — you’re logged in.</p>\n\n<p>Behind the scenes, this magic link contains an authentication token. The Slack app catches this and authenticates you without requiring the password.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg\" sizes=\"100vw\" alt=\"When using the magic link option, Slack sends you an email with a link that lets you connect to your slack without having to enter your password.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tWhen using the magic link option, Slack sends you an email with a link that lets you connect to your slack without having to enter your password. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee1eecc3-74a2-4375-8609-981e29c3db0e/55a-making-mobile-form-experience-better-slack.jpg\">Large preview</a>)\n\t\t</figcaption></figure><h5>Fingerprint For Smart Identification</h5>\n\n<p>I do almost all of my banking on my mobile device. And when it comes to logging into my bank accounts, there’s a world of difference between my French Societe General bank app and the German N26 app.</p>\n\n<p>With Société Générale, I have a login string and a passphrase. I can ask the app to remember the login string, which is 10 random digits. I’m not able to remember that one; I use a password manager for it. I must still remember and enter the six-digit passphrase on a custom-built keypad. Of course, the numbers’ positions change every time I log in. Security — yeah, I know. Also, I must change this passphrase every three months. The last time I was forced to change the passphrase, I did what most people do: choose almost the same passphrase, because I don’t want to have to remember yet another six-digit number. And of course, I was damn sure I would remember it, so I did not enter it in my password manager. Rookie mistake. Two weeks later, I tried to log in. Of course, I forgot it. I made three failed attempts, and then my account was blocked. Fortunately, I only use this account for savings. In the app, you can ask for a new passcode. It took almost one week for the bank to send me a new six-digit passphrase by paper mail to my home address in Luxembourg. Yeah.</p>\n\n<p>N26, on the other hand, uses my email address as the login string. I can remember that without a password manager. When I want to log in, I put my finger on the start button of my Xperia phone, and that’s it. In the background, my phone scans my fingerprint and authenticates me. If that does not work, I can fall back to a password.</p>\n\n<p>Same device, two apps, two totally different experiences.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg\" sizes=\"100vw\" alt=\"Dropbox has another example of fingerprint authentication.\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tDropbox has another example of fingerprint authentication. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0653d65d-f41c-40bf-8c3a-c44b8150b08c/making-mobile-form-experience-better-56-password-fingerprint.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p>More and more apps on both Android and iOS now offer user the possibility to <strong>authenticate with a fingerprint</strong>. No more passwords — it’s an interesting and elegant solution.</p>\n\n<p>Of course, people have expressed some security concerns about this. For the National Institute of Standards and Technology (NIST), <a href=\"https://csrc.nist.gov/csrc/media/publications/sp/800-63/3/draft/documents/sp800-63b-draft.pdf\">biometrics is not considered secure enough</a>. It advises combining biometrics with a second factor of authentication.</p>\n\n<p>Fingerprint sensors can also be tricked — yes, like in spy movies. Did you hear about the plane that was forced to land because a woman learned of her husband’s infidelity after <a href=\"https://www.theguardian.com/world/2017/nov/08/qatar-airways-plane-forced-to-land-after-wife-discovers-husbands-affair-midflight\">using his thumb to unlock his phone</a> while he was sleeping?</p>\n\n<h5>Facial Recognition And Face ID</h5>\n\n<p>In 2018, Apple launched the iPhone X with the brand new <a href=\"https://support.apple.com/en-ca/HT208108\">face ID</a>. Users can <strong>unlock their iPhone X using their face</strong>. Of course, some other Android phones and Windows tablets and computers had proposed this feature earlier. But when Apple launches something, it tends to become “a thing”. For the moment, this technology is mostly used as authentication to unlock phones and computer.</p>\n\n<p>There are some pretty big challenges with facial-recognition technology. First, some algorithms can be fooled by a picture of the person, which is easily hackable. Another bigger concern is diversity. Facial-recognition algorithms tend to have difficulty recognizing people of color. For instance, a <a href=\"https://www.recode.net/2017/1/18/14304964/data-facial-recognition-trouble-recognizing-black-white-faces-diversity\">black researcher had to wear a white mask</a> to test her own project. The researcher is <a href=\"https://www.ted.com/talks/joy_buolamwini_how_i_m_fighting_bias_in_algorithms#t-145078\">Joy Buolamwini, and she gave a T</a><a href=\"https://www.ted.com/talks/joy_buolamwini_how_i_m_fighting_bias_in_algorithms#t-145078\">ED</a><a href=\"https://www.ted.com/talks/joy_buolamwini_how_i_m_fighting_bias_in_algorithms#t-145078\"> talk</a> about the issue.</p>\n\n<p>Some facial-recognition software is also used by some customs services to speed up border processing. It is used in New Zealand and will be used in Canada.</p>\n\n<p>Most of us have seen enough science fiction to see the potential problems and consequences of systems that use facial recognition at scale. This kind of technology used outside of the private space of unlocking phones can get controversial and scary.</p>\n\n<h5>Google: One-Tap Sign-Up</h5>\n\n<p>If a user has a Google account, they can benefit from <a href=\"https://developers.google.com/identity/one-tap/web/\">Google’s </a><a href=\"https://developers.google.com/identity/one-tap/web/\">one-</a><a href=\"https://developers.google.com/identity/one-tap/web/\">tap </a><a href=\"https://developers.google.com/identity/one-tap/web/\">sign</a><a href=\"https://developers.google.com/identity/one-tap/web/\">-u</a><a href=\"https://developers.google.com/identity/one-tap/web/\">p</a>. When visiting a website and prompted to create an account in an inline dialog, the user doesn’t need to enter a password. Google provides a secure token-based password-less account, linked to the user’s Google account. When the user returns, they are automatically signed in. If they store their passwords in the <a href=\"https://get.google.com/smartlock/\">Smart Lock</a>, they get automatically signed in on other devices as well.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"article__image break-out\"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg\">\n\t\t<img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg\" sizes=\"100vw\" alt=\"Google’s one-tap sign-up dialog\"></a>\n\n\t\n\t\t<figcaption class=\"op-vertical-bottom\">\n\t\t\tGoogle’s one-tap sign-up dialog (<a href=\"https://developers.google.com/identity/one-tap/web/\">Source</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62f2d217-919c-47dc-ab6e-15d14641f0d7/making-mobile-form-experience-better-57-google-signin.jpg\">Large preview</a>)\n\t\t</figcaption></figure><p><strong>Note</strong>: <em>This is an interesting password-less solution. Of course, by using it, users are linked to Google, which not everyone will feel comfortable with</em>.</p>\n\n<h3>Conclusion</h3>\n\n<p>You can do a lot of really cool things when you start using mobile capabilities to help users fill in forms. We need a <strong>mobile-first mindset when building forms</strong>; otherwise, we’ll get stuck on the desktop capabilities we are familiar with.</p>\n\n<p>Again, be careful with the device’s capabilities: <strong>always have a fallback solution</strong> in case a sensor fails or the user refuses access. Avoid making those capabilities the only options for those functions (unless you are building a map app that relies on geolocation).</p>\n\n<p>This is the end of a series of two really long articles in which I’ve given you some general UX and usability advice and best practices. In the end, <strong>what matter are your form and your users</strong>. Some things described here might not even work specifically for your users — who knows? So, whatever you do, don’t take my (or Luke’s) word for it. Test it, with real users, on real devices. Measure it. And test again. <strong>Do some user research and usability testing</strong>. User experience is not only about best practices and magic recipes that you copy and paste. You need to adapt the recipe to make it work for you.</p>\n\n<p>So, in short: Test it. Test it on real devices. Test it with real users.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(lf, ra, al, il)</span>\n</div>\n\n\n              </article>\n","enclosure":{},"categories":[],"color":"#e95c33","category":"Articles on Smashing","date":"2018-08-27 12:00:31","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"“Killing the URL”","pubDate":"2018-09-07 23:05:37","link":"https://css-tricks.com/killing-the-url/","guid":"https://css-tricks.com/?p=276027","author":"Chris Coyier","thumbnail":"https://css-tricks.com/wp-content/uploads/2018/09/no-url-in-safari.png","description":"\n<p>It was Safari who first started hiding the complete URL. Here's what CSS-Tricks looks like even when you're on an article page by default in Safari:</p>\n<p>The full URL path is hidden.</p>\n<p>You can only fix it (YES, FIX IT) by checking \"Show full website address\" in settings.</p>\n\n<p>Preferences Advanced</p>\n<p>We've already damaged the sanctity of URLs in a way with URL shorteners. Thankfully, those are used less and less with social networks, like Twitter, not counting the URL toward …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/killing-the-url/\">“Killing the URL”</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>It was Safari who first started hiding the complete URL. Here's what CSS-Tricks looks like even when you're on an article page by default in Safari:</p>\n<figure class=\"align-none media-276028\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/09/no-url-in-safari.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1536258291/no-url-in-safari_nbmtgp.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_632,f_auto,q_auto/v1536258291/no-url-in-safari_nbmtgp.png 632w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1536258291/no-url-in-safari_nbmtgp.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"><figcaption>The full URL path is hidden.</figcaption></figure><p>You can only fix it (YES, FIX IT) by checking \"Show full website address\" in settings.</p>\n<p><span></span></p>\n<figure class=\"align-none media-276029\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/09/show-full-address.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1536258333/show-full-address_zel3lb.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_676,f_auto,q_auto/v1536258333/show-full-address_zel3lb.png 676w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1536258333/show-full-address_zel3lb.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"><figcaption>Preferences &gt; Advanced</figcaption></figure><p>We've already damaged the sanctity of URLs in a way with URL shorteners. Thankfully, those are used less and less with social networks, like Twitter, not counting the URL toward the total tweet character count anymore.</p>\n<p>Now, Lily Hay Newman <a href=\"https://www.wired.com/story/google-wants-to-kill-the-url\">reports</a> Chrome sees problems as well:</p>\n<blockquote><p>\"People have a really hard time understanding URLs,\" says Adrienne Porter Felt, Chrome's engineering manager. \"They’re hard to read, it’s hard to know which part of them is supposed to be trusted, and in general I don’t think URLs are working as a good way to convey site identity. So we want to move toward a place where web identity is understandable by everyone—they know who they’re talking to when they’re using a website and they can reason about whether they can trust them. But this will mean big changes in how and when Chrome displays URLs. We want to challenge how URLs should be displayed and question it as we’re figuring out the right way to convey identity.\"</p></blockquote>\n<p>I'm not seeing the same research they are. Anecdotally, I'm not sure I've met <em>anyone</em> who doesn't understand a URL. I wonder if there is something else weird afoot here. URLs are the single greatest feature of the web. I know nobody is arguing about removing them (just visually hiding them by default), but it doesn't feel like a step in the right direction. It also seems slightly at odds with the celebration of the web in <a href=\"https://blog.chromium.org/2018/09/the-capable-web-10-year-retrospective.html\">Chrome's 10-year anniversary post</a> by Paul Kinlan:</p>\n<blockquote><p>We can thank all the browser vendors for their continued work to create and iterate on specs, using streamlined processes like those defined by the WICG and based on the principles in the <a href=\"https://extensiblewebmanifesto.org/\">Extensible Web Manifesto</a>. We’ll continue our commitment to work with browser vendors and the developer ecosystem to prioritize features that users need, and to ensure that those capabilities arrive in a “webby” way.</p></blockquote>\n<p>I'd say seeing URL's is pretty \"webby.\"</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/killing-the-url/\">“Killing the URL”</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Article","URL"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-07 23:05:37","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Shadow DOM in Ionic","pubDate":"2018-09-07 23:05:09","link":"https://blog.ionicframework.com/shadow-dom-in-ionic-and-why-its-awesome/","guid":"https://css-tricks.com/?p=275922","author":"Chris Coyier","thumbnail":"","description":"\n<p>Mike Hartington glows about how good and useful the Shadow DOM is:</p>\n<p>[Shadow DOM is] actually built on two simple ideas, isolation and location. Need to create a bit of DOM that is isolated from the global scope? Shadow DOM is here to help. Need to specify the exact location of a piece of DOM? Shadow DOMs scope API is what you need!</p>\n<p>It can be helpful to think of components that use Shadow DOM as modules for HTML. Markup …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/shadow-dom-in-ionic/\">Shadow DOM in Ionic</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>Mike Hartington glows about how good and useful the Shadow DOM is:</p>\n<blockquote>\n<p>[Shadow DOM is] actually built on two simple ideas, isolation and location. Need to create a bit of DOM that is isolated from the global scope? Shadow DOM is here to help. Need to specify the exact location of a piece of DOM? Shadow DOMs scope API is what you need!</p>\n<p>It can be helpful to think of components that use Shadow DOM as modules for HTML. Markup and styles are isolated to their own DOM tree, and removed from the global context.</p>\n</blockquote>\n<p>Last time we <a href=\"https://css-tricks.com/playing-shadow-dom/\">talked about it around here</a>, I showed how Twitter is using it for embedded tweets — which is a pretty awesome use case — and how it can fall back to an iframe. Mike says they polyfill it in unsupported situations.</p>\n<p><span></span></p>\n<p>I suspect isolated styles is the primary selling point for any of the CSS-in-JS approaches, and having wide support for a native implementation of that will eventually take over. But... you <em>have</em> to make use of <a href=\"https://css-tricks.com/modular-future-web-components/\">web components</a> to use this, which means your framework-created components need to be web components. That's totally possible; I just don't see it that often.</p>\n<p><a href=\"https://blog.ionicframework.com/shadow-dom-in-ionic-and-why-its-awesome/\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/shadow-dom-in-ionic/\">Permalink</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/shadow-dom-in-ionic/\">Shadow DOM in Ionic</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Link","ionic","shadow dom","web components"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-07 23:05:09","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Working With Events in React","pubDate":"2018-09-07 14:01:20","link":"https://css-tricks.com/working-with-events-in-react/","guid":"https://css-tricks.com/?p=275424","author":"Kingsley Silas","thumbnail":"","description":"\n<p>Most of the behavior in an application revolves around events. User enters a value in the registration form? Event. User hits the submit button? Another event. Events are triggered a number of ways and we build applications to listen for them in order to do something else in response.</p>\n<p>You may already be super comfortable working with events based on your existing JavaScript experience. However, React has a distinct way of handling them. Rather than directly targeting DOM events, React …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/working-with-events-in-react/\">Working With Events in React</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>Most of the behavior in an application revolves around events. User enters a value in the registration form? Event. User hits the submit button? Another event. Events are triggered a number of ways and we build applications to listen for them in order to do something else in response.</p>\n<p>You may already be super comfortable working with events based on your existing JavaScript experience. However, React has a distinct way of handling them. Rather than directly targeting DOM events, React wraps them in their own event wrapper. But we’ll get into that.</p>\n<p>Let’s go over how to create, add and listen for events in React.</p>\n<p><span></span></p>\n<h3>Creating Events</h3>\n<p>We’ll start by creating a form that has an input and a button. An event will be triggered when a value is entered. The button is used to call a function which will reverse that value.</p>\n<p>Here’s how it'll work:</p>\n<ul>\n<li>An empty input field allows the user to enter text.</li>\n<li>An <code>onChange</code> event is triggered when values are entered in the input. This calls a function — <code>handleChange()</code> — that is used to set a new state for the input.</li>\n<li>When the \"Reverse Text\" button is clicked, another event is triggered. This calls a function — <code>handleReverse()</code> — to set a new state for <code>reversedText</code>.</li>\n</ul>\n<p>Here’s that translated into code:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class App extends React.Component {\n  state = {\n    /*  Initial State */\n    input: \"\",\n    reversedText: \"\"\n  };\n\n  /* handleChange() function to set a new state for input */\n  handleChange = event =&gt; {\n    const value = event.target.value;\n    this.setState({\n      input: value\n    });\n  };\n\n  /* handleReverse() function to reverse the input and set that as new state for reversedText */\n  handleReverse = event =&gt; {\n    event.preventDefault();\n    const text = this.state.input;\n    this.setState({\n      reversedText: text\n        .split(\"\")\n        .reverse()\n        .join(\"\")\n    });\n  };\n\n  render() {\n    return (\n      &lt;React.Fragment&gt;\n        { /* handleReverse() is called when the form is submitted */ }\n        &lt;form onSubmit={this.handleReverse}&gt;\n          &lt;div&gt;\n            { /* Render input entered */}\n            &lt;label&gt;Text: {this.state.input}&lt;/label&gt;\n          &lt;/div&gt;\n          &lt;div&gt;\n           { /* handleChange() is triggered when text is entered */ }\n            &lt;input\n              type=\"text\"\n              value={this.state.input}\n              onChange={this.handleChange}\n              placeholder=\"Enter a text\"\n            /&gt;\n          &lt;/div&gt;\n          &lt;div&gt;\n            &lt;button&gt;Reverse Text&lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n        { /* Render reversed text */}\n        &lt;p&gt;Reversed Text: {this.state.reversedText}&lt;/p&gt;\n      &lt;/React.Fragment&gt;\n    );\n  }\n}}</code></pre>\n<p data-height=\"350\" data-theme-id=\"1\" data-slug-hash=\"PdNpRW\" data-default-tab=\"result\" data-user=\"kinsomicrote\" data-pen-title=\"React Event Pen - form\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/kinsomicrote/pen/PdNpRW/\">React Event Pen - form</a> by Kingsley Silas Chijioke (<a href=\"https://codepen.io/kinsomicrote\">@kinsomicrote</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n<h3>Listening to component events</h3>\n<p>Let’s say you have a component like this;</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class IncrementButton extends React.Component{\n  render() {\n    return (\n      &lt;React.Fragment&gt;\n        &lt;button&gt;+&lt;/button&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n}</code></pre>\n<p>Will including it in your App component like this work?</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class App extends React.Component{\n  state = {\n    count: 0\n  }\n\n  handleIncrement = (event) =&gt; {\n    this.setState({ count: this.state.count + 1})\n  }\n\n  render() {\n    return(\n      &lt;React.Fragment&gt;\n        &lt;h1&gt;{this.state.count}&lt;/h1&gt;\n        &lt;IncrementButton onClick={this.handleIncrement} /&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n}</code></pre>\n<p>No, it won’t because you can only listen to events on DOM elements. We touched on this at the beginning of the post, but React components are wrappers for DOM elements. That means we essentially have a layer that we need to pass through to listen for the event.</p>\n<p>The way around this is to pass the event handler as a prop to the child component. Then the prop is passed down to the click event as an attribute like so:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class IncrementButton extends React.Component{\n  render() {\n    return (\n      &lt;React.Fragment&gt;\n        &lt;button onClick={this.props.increaseButton}&gt;+&lt;/button&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n}\n\nclass App extends React.Component{\n  state = {\n    count: 0\n  }\n\n  handleIncrement = (event) =&gt; {\n    this.setState({ count: this.state.count + 1})\n  }\n\n  render() {\n    return(\n      &lt;React.Fragment&gt;\n        &lt;h1&gt;{this.state.count}&lt;/h1&gt;\n        &lt;IncrementButton increaseButton={this.handleIncrement} /&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n}</code></pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"xJXjvz\" data-default-tab=\"js,result\" data-user=\"kinsomicrote\" data-pen-title=\"React Event Pen - Component Events\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/kinsomicrote/pen/xJXjvz/\">React Event Pen - Component Events</a> by Kingsley Silas Chijioke (<a href=\"https://codepen.io/kinsomicrote\">@kinsomicrote</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n<p>You could make use of a <a href=\"https://css-tricks.com/what-are-higher-order-components-in-react/#article-header-id-1\">stateless functional component</a> instead:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const IncrementButton = (props) =&gt; {\n  return (\n    &lt;React.Fragment&gt;\n      &lt;button onClick={props.increaseButton}&gt;+&lt;/button&gt;\n    &lt;/React.Fragment&gt;\n  )\n}</code></pre>\n<h3>Adding event listeners</h3>\n<p>There may be times when you want to make use of certain DOM events that are triggered when the component is mounted. Let’s see this using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/resize\">resize</a> event — we want to see the width of the window whenever it is resized.</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class App extends React.Component{\n  state = {\n    windowWith: window.innerWidth\n  }\n\n  handleResize = (event) =&gt; {\n    this.setState({ windowWith: window.innerWidth })\n  }\n\n  render() {\n    return(\n      &lt;React.Fragment&gt;\n        &lt;h1&gt;Window Width&lt;/h1&gt;\n        &lt;h1&gt;{this.state.windowWith}&lt;/h1&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n}</code></pre>\n<p>If we create a component and try it out like we have below, then the event will not be triggered. We’ll need to add the event listener (<code>handleResize()</code> in this case) and the event type like we have here:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class App extends React.Component{\n  state = {\n    windowWith: window.innerWidth\n  }\n\n  handleResize = (event) =&gt; {\n    this.setState({ windowWith: window.innerWidth })\n  }\n  \n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize)\n  }\n\n  componentDidUnmount() {\n    window.removeEventListener('resize', this.handleResize)\n  }\n\n  render() {\n    return(\n      &lt;React.Fragment&gt;\n        &lt;h1&gt;Window Width&lt;/h1&gt;\n        &lt;h1&gt;{this.state.windowWith}&lt;/h1&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n}</code></pre>\n<p data-height=\"300\" data-theme-id=\"1\" data-slug-hash=\"GBMdVV\" data-default-tab=\"js,result\" data-user=\"kinsomicrote\" data-pen-title=\"React Event Pen - addEventListener\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/kinsomicrote/pen/GBMdVV/\">React Event Pen - addEventListener</a> by Kingsley Silas Chijioke (<a href=\"https://codepen.io/kinsomicrote\">@kinsomicrote</a>) on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n<p>Now, the event listener will be added when the component mounts. That means our component is actively listening to the browser window and will display its width when it updates.</p>\n<h3>In summary</h3>\n<p>OK, so we covered quite a bit of ground in a very small amount of space. We learned that React does not connect directly to a DOM event, but rather <a href=\"https://reactjs.org/docs/events.html\">Synthetic Events</a> that are wrappers for DOM events. We dug into the process for creating event listeners so that they attach to Synthetic Events and, from there, made sure that a component will update when those events are triggered.</p>\n<h3>Additional resources</h3>\n<ul>\n<li>\n<a href=\"https://reactjs.org/docs/handling-events.html\">Handling Events</a> - React documentation</li>\n<li>\n<a href=\"https://reactjs.org/docs/events.html\">SyntheticEvent</a> - React documentation, including all event types</li>\n<li>\n<a href=\"https://scotch.io/courses/5-essential-react-concepts-to-know-before-learning-redux/event-handling-in-react\">5 Essential React Concepts to to Know Before Learning Redux</a> - <a href=\"https://css-tricks.com/author/chris92\">Chris Nwamba</a> provides a nice overview for event handling in React in the second part of this series</li>\n</ul>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/working-with-events-in-react/\">Working With Events in React</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Article","beginning react","react","react events"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-07 14:01:20","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"The Complete CSS Demo for OpenType Features","pubDate":"2018-09-06 18:47:47","link":"https://sparanoid.com/lab/opentype-features/","guid":"https://css-tricks.com/?p=275918","author":"Chris Coyier","thumbnail":"","description":"\n<p>I'm very glad a guide for these features exists because we already know there are so many <a href=\"https://css-tricks.com/weird-things-variable-fonts-can-do/\">weird things</a> that variable fonts can do — well done, Tunghsiao Liu! </p>\n<p>There are quite a few possible values for <a href=\"https://css-tricks.com/almanac/properties/f/font-feature-settings/\"><code>font-feature-settings</code></a>, like, ya know:</p>\n<p><code>aalt</code>, <code>swsh</code>, <code>cswh</code>, <code>calt</code>, <code>hist</code>, <code>hlig</code>, <code>locl</code>, <code>rand</code>, <code>nalt</code>, <code>cv01-cv99</code>, <code>salt</code>, <code>subs</code>, <code>sups</code>, <code>titl</code>, <code>rvrn</code>, <code>liga</code>, <code>dlig</code>, <code>size</code>, <code>ornm</code>, …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/the-complete-css-demo-for-opentype-features/\">The Complete CSS Demo for OpenType Features</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>I'm very glad a guide for these features exists because we already know there are so many <a href=\"https://css-tricks.com/weird-things-variable-fonts-can-do/\">weird things</a> that variable fonts can do — well done, Tunghsiao Liu! </p>\n<p>There are quite a few possible values for <a href=\"https://css-tricks.com/almanac/properties/f/font-feature-settings/\"><code>font-feature-settings</code></a>, like, ya know:</p>\n<p><code>aalt</code>, <code>swsh</code>, <code>cswh</code>, <code>calt</code>, <code>hist</code>, <code>hlig</code>, <code>locl</code>, <code>rand</code>, <code>nalt</code>, <code>cv01-cv99</code>, <code>salt</code>, <code>subs</code>, <code>sups</code>, <code>titl</code>, <code>rvrn</code>, <code>liga</code>, <code>dlig</code>, <code>size</code>, <code>ornm</code>, <code>ccmp</code>, <code>kern</code>, <code>mark</code>, <code>mkmk</code>, <code>smcp</code>, <code>c2sc</code>, <code>pcap</code>, <code>c2pc</code>, <code>unic</code>, <code>cpsp</code>, <code>case</code>, <code>ital</code>, <code>ordn</code>, <code>lnum</code>, <code>onum</code>, <code>pnum</code>, <code>tnum</code>, <code>frac</code>, <code>afrc</code>, <code>dnom</code>, <code>numr</code>, <code>sinf</code>, <code>zero</code>, <code>mgrk</code>, <code>flac</code>, <code>dtls</code>, <code>ssty</code>, <code>ss01-ss20</code>, <code>smpl</code>, <code>trad</code>, <code>tnam</code>, <code>expt</code>, <code>hojo</code>, <code>nlck</code>, <code>jp78</code>, <code>jp83</code>, <code>jp90</code>, <code>jp04</code>, <code>hngl</code>, <code>ljmo</code>, <code>tjmo</code>, <code>vjmo</code>, <code>fwid</code>, <code>hwid</code>, <code>halt</code>, <code>twid</code>, <code>qwid</code>, <code>pwid</code>, <code>palt</code>, <code>pkna</code>, <code>ruby</code>, <code>hkna</code>, <code>vkna</code>, <code>rlig</code>, <code>init</code>, <code>medi</code>, and <code>fina</code></p>\n<p>...to name a few.</p>\n<p><a href=\"https://sparanoid.com/lab/opentype-features/\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/the-complete-css-demo-for-opentype-features/\">Permalink</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/the-complete-css-demo-for-opentype-features/\">The Complete CSS Demo for OpenType Features</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Link","opentype","typography"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-06 18:47:47","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Helping a Beginner Understand Getting a Website Live","pubDate":"2018-09-06 14:01:32","link":"https://css-tricks.com/helping-a-beginner-understand-getting-a-website-live/","guid":"https://css-tricks.com/?p=274430","author":"Chris Coyier","thumbnail":"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg","description":"\n<p>I got a great email from a fellow named Josh Long the other day. He is, in his words, \"relatively new to web design\" and was a bit stuck on the concept of getting a site <em>live</em>. I should say that I'm happy to get emails like this an I always read them, but I typically can't offer tech support over email. If I can respond at all, I normally point people to <a href=\"https://spectrum.chat/codepen\">other community resources</a>. </p>\n<p>In this …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/helping-a-beginner-understand-getting-a-website-live/\">Helping a Beginner Understand Getting a Website Live</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>I got a great email from a fellow named Josh Long the other day. He is, in his words, \"relatively new to web design\" and was a bit stuck on the concept of getting a site <em>live</em>. I should say that I'm happy to get emails like this an I always read them, but I typically can't offer tech support over email. If I can respond at all, I normally point people to <a href=\"https://spectrum.chat/codepen\">other community resources</a>. </p>\n<p>In this case, it struck me what a perfect moment this is for Josh. He's a little confused, but he knows enough to be asking a lot of questions and sorting through all this stuff. I figured this was a wonderful opportunity to dig into his questions, hopefully helping him and just maybe helping others in a similar situation.</p>\n<p><span></span></p>\n<p>Here's one of the original paragraphs Josh sent me, completely unedited:</p>\n<blockquote><p>I’m relatively new to web design, but I’ve taken a few courses on HTML and CSS and I’ve done a Codecademy course on JavaScript. But, (jumping forward probably quite a while here!) after having fully designed and coded a HTML/CSS/JS website or webpage, I don’t fully understand the full process of going from a local site hosted with mamp/wamp to publishing a public site using wordpress(?) or some other host (is WordPress even a host?!) and also finding a server that’s suitable and some way of hosting images/videos or other content. (If that sounded like I didn’t know what half of those meant, it’s because unfortunately I don’t!.. but I’d really like to!)</p></blockquote>\n<p>Can you sense that enthusiasm? I love it. </p>\n<p>We worked together a bit to refine many of his questions for this post, but they are still Josh's words. Here we go!</p>\n<h3 class=\"josh-question\">\n<img src=\"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg\" width=\"60\" align=\"left\"><br>\nWhat is a <strong>Domain Registrar</strong>? I get they are for registering domain names, but what’s the difference between them? How do you know which one is right for you? A quick search for \"best domain hosts\" on Google gave me 5 ads for companies who are domain registrars/hosts and 9 \"Top 10\" style pages that look as though they have some sort of affiliation with at least one company they're suggesting. Am I just looking for the cheapest one?<br>\n</h3>\n<p>You're exactly right, domain registrants are for registering domain names. If you want <strong>joshlongisverycool.com</strong>, you're going to have to buy it, and domain registrants are companies that help you do that. </p>\n<figure class=\"align-none media-275348\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/godaddy-results.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534342816/godaddy-results_mxug5d.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_623,f_auto,q_auto/v1534342816/godaddy-results_mxug5d.png 623w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534342816/godaddy-results_mxug5d.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"><figcaption>Searching for a domain name</figcaption></figure><p>It's a bummer that web search results are so saturated by ads and affiliate-link-saturated SEO-jacked pages. You'll never get total honesty from that because those pages are full of links promoting whoever will pay them the most to send new customers. Heck, even Google themselves will sell you a domain name. </p>\n<p>The truth is that you can't go <em>too</em> wrong here. Domain names are a bit of a commodity and the hundreds of companies that will sell you one largely compete on marketing.</p>\n<p>Some things to watch out for:</p>\n<ul>\n<li>\n<strong>Some companies treat the domain as a loss leader.</strong> Like a grocery store selling cheap milk to hope you buy some more stuff while you are there. The check out process at any domain registrant will almost certainly try to sell you a bunch of extra stuff. For example, they might try to sell you additional domain names or email hosting you probably don't need. Just be careful.</li>\n<li>\n<strong>Web hosts (which we're getting to next) will often sell them to you along with hosting.</strong> That's fine I suppose, but I consider it a bit of a conflict of interest. Say you choose to move hosts one day. That hosting company is incentivized in the wrong direction to make that easy for you. If the domain is handled elsewhere, that domain registrant is incentivized the right direction to help you make changes.</li>\n</ul>\n<p>I hate to add to the noise for you, but here are some domain registrants that I've used personally and <em>aren't paying for sponsorship here nor are affiliate links</em>:</p>\n<ul>\n<li><a href=\"https://www.hover.com/\">Hover</a></li>\n<li><a href=\"https://www.godaddy.com/\">GoDaddy</a></li>\n<li><a href=\"https://domains.google/#/\">Google Domains</a></li>\n<li><a href=\"https://www.networksolutions.com/\">Network Solutions</a></li>\n<li><a href=\"https://aws.amazon.com/route53/\">Amazon Route 53</a></li>\n</ul>\n<p class=\"explanation\">Our own Sarah Drasner recommends looking at <a href=\"https://zeit.co/domains\">ZEIT domains</a>, which are super interesting in that you buy and manage them entirely over the command line.</p>\n<p>I might suggest, if you can see yourself owning several domain names in your life, keeping them <strong>consolidated to a single registrant</strong>. Managing domains isn't something you'll do very often, so it's easy to lose track of what domains you registered on what registrant, not to mention how/where to change all the settings across different registrants.</p>\n<p>I'd also suggest it's OK to experiment here. That's how all of us have learned. Pick one with a <abbr title=\"User Interface\">UI</abbr> that you don't hate and a trustable vibe. Maybe your friend also uses that one. Hopefully, it works out fine. If you hate it, it'll be a little work, but you can always switch.</p>\n<h3 class=\"josh-question\">\n<img src=\"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg\" width=\"60\" align=\"left\"><br>\nWhat is a <strong>web host</strong> and why do I need one? A Google search throws you a mountain of \"best web host\" articles and ads. These websites all seem to be full of jargon like \"shared hosting\" and \"managed hosting.\" I see things like \"suggested hosts\" on some sites. How do you find the right web host? I'm not even sure what my needs are. Should I just find the cheapest one?<br>\n</h3>\n<p>Just because you <em>own</em> a domain doesn't mean it will do anything. In fact, right after you buy it, it's likely that the domain registrant slaps up a \"coming soon\" page for you:</p>\n<figure class=\"align-none media-275347\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/coming-soon.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534342745/coming-soon_p34lwj.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_785,f_auto,q_auto/v1534342745/coming-soon_p34lwj.png 785w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534342745/coming-soon_p34lwj.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"><figcaption>A \"coming soon\" page you might see immediately after buying a domain name.</figcaption></figure><p>To host a website at your new domain, you'll need to configure the <abbr title=\"Domain Name System\">DNS</abbr> of your new domain to point at a server connected to the internet. Here's an interesting tidbit... you could do this right from your house if you wanted to. Your Internet Service Provider (ISP) at home probably gives you an IP address. It's all a bit nerdy, but you could point your domain name at that IP and set up your computer to be a web server that responds to incoming requests and serves up your website. Almost nobody does that though. You don't want your web server to stop working because you closed your laptop or your ISP changed your IP.</p>\n<p>Web hosting services give you that server. Like domain registrants, web hosts are almost a commodity. There are lots of them that provide a similar service, so the price is driven fairly low and they find other things to compete on. </p>\n<p>Buying web hosting is a little trickier than buying a domain though. You'll need to know a little bit about the website you intend to host when making that choice. Will it be a WordPress site? Or another PHP/MySQL-based <abbr title=\"Content Management System\">CMS</abbr> site (we'll get to those later)? That means your host will need to support those technologies. Most do, some don't. You might wanna look in their documentation or literally ask them before pulling the trigger if you are unsure. There are lots of technologies for running websites. Say the site will use Ruby on Rails — that's a different set of requirements that not all hosts offer. Or Node... Or Python... same story. </p>\n<p>If a web host says they specialize in a particular set of technologies, and that's what you need, that's probably a decent way to go, particularly in your early days. Let's take a very limited gander. Again, these are not affiliate or paid-for links and they are somewhat randomly selected web hosts that come to mind for me:</p>\n<ul>\n<li>\n<a href=\"https://wpengine.com/\">WP Engine</a> is a web host that focuses specifically on WordPress.</li>\n<li>Media Temple has <a href=\"https://mediatemple.net/webhosting/wordpress/\">WordPress-specific hosting</a>, but has <a href=\"https://mediatemple.net/webhosting/\">a wider range of services</a> from very small and budget friendly to huge and white-glove.</li>\n<li>BlueHost is <a href=\"https://www.bluehost.com/products\">has very inexpensive</a> hosting choices, but has essentially the same capabilities as those others.</li>\n</ul>\n<p>Now here some other web hosts that are a little less traditional. Forgive the techy terms here — if they don't mean anything to you, just ignore them.</p>\n<ul>\n<li>\n<a href=\"https://www.netlify.com/\">Netlify</a> does static site hosting, which is great for things like static site generators and JAMstack sites.</li>\n<li>\n<a href=\"https://zeit.co/\">Zeit</a> is a host where you interact with it only through the command line.</li>\n<li>Digital Ocean has their own way of talking about hosting. They call their servers <a href=\"https://www.digitalocean.com/products/droplets/\">Droplets</a>, which are kind of like virtual machines with extra features.</li>\n<li>\n<a href=\"https://www.heroku.com/\">Heroku</a> is great for hosting apps with a ready-to-use backend for things like Node, Ruby, Java, and Python.</li>\n<li>Amazon Web Services (AWS) is <a href=\"https://aws.amazon.com/products/\">a whole suite of products</a> with specialized hosting focuses, which are for pretty advanced users. <a href=\"https://azure.microsoft.com/en-us/\">Microsoft Azure</a> and <a href=\"https://cloud.google.com/\">Google Cloud</a> are similar.</li>\n</ul>\n<p>Again, I'd say it's OK to, in a sense, make some mistakes here. If you aren't hosting something particularly mission-critical, like your personal website, pick a host that seems to fit the bill and give it a go. Hopefully, it works out great — if not, you can move. Moving isn't always super fun, but everybody ends up doing it, and you'll learn as you go.</p>\n<p>When you buy web hosting, that host is going to tell you how to use it. One common way is that the host will give you <abbr title=\"SSH File Transfer Protocol\">SFTP</abbr> credentials. Then you'll use software that is built for connecting to servers over SFTP, and that will allow you to upload files to the web server.</p>\n<figure class=\"align-none media-275406\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/ftp-info.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534444006/ftp-info_rbmzuz.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_682,f_auto,q_auto/v1534444006/ftp-info_rbmzuz.png 682w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534444006/ftp-info_rbmzuz.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p>This is a magic moment!</p>\n<p>Say you've been working on a file that is a single <code>index.html</code> file, that loads a <code>style.css</code> file. Upload those files over SFTP into the folder your host tells you is correct <strong>public root directory</strong> for that site.</p>\n<p>That is the process for taking a site from local to live! There is nothing wrong with it, either. This is referred to as deployment, and this is about as basic and simple as it gets. Even fancier ways of doing deployment sometimes ultimately do just this behind the scenes. We'll get more into deployment later.</p>\n<h3 class=\"josh-question\">\n<img src=\"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg\" width=\"60\" align=\"left\"><br>\nShould you bundle your domain registrar and web host into one if a company offers both?<br>\n</h3>\n<p>I mentioned this above a little: I'm a fan of <em>not</em> doing that in general. On one hand, it's mighty handy. Things like shared billing and a single checkout flow. The host will also do things like configuring the DNS for you to be all set up for their hosting and you probably don't even have to think about it. </p>\n<p>But say the day comes where you just don't like that host anymore. You've found a better deal, outgrown them, were turned off by their support or service, or any other reason. You want to move hosts. The problem is that they aren't just your host, but your domain registrant, too. Do you leave the domain with them and just move hosts? Probably not, you're trying to leave them. Now you need to move two things. That makes that move all the more perilous, but worse, this company isn't exactly incentivized to respond quickly and helpfully to your requests since they know they're losing you as a customer. </p>\n<figure class=\"align-none media-275407\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/unbundle.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_967,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 967w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_977,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 977w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_818,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 818w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_828,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 828w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_814,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 814w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_690,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 690w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_604,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 604w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_498,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 498w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_392,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 392w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534444216/unbundle_k8taah.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><h3 class=\"josh-question\">\n<img src=\"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg\" width=\"60\" align=\"left\"><br>\nWhat really is a \"CMS\"? What's its purpose? WordPress, Joomla, and Drupal are the most popular names I’ve found for content management systems, and from their descriptions, all sound very similar. What are the kinds of features that set one apart from another? Is a CMS all you need to get your website from your local computer to the public internet?<br>\n</h3>\n<p>CMS (Content Management System) is a pretty generic term. It means literally anything that helps you manage content. There are, as you've seen, some big players like <a href=\"https://wordpress.org/\">WordPress</a> and <a href=\"https://craftcms.com/\">CraftCMS</a>. They don't really have anything directly to do with that connection between working locally on a site and getting that site live. But they do rather complicate it. </p>\n<p>The reason that you'd use a CMS at all is to make working on your site easier. Consider this site you're looking at right now. There are tens of thousands of pages on this site. It would be untenable for each of them to be a hand-authored <code>file.html</code> file. </p>\n<p>Instead, a CMS allows us to craft all those pages by combining <strong>data</strong> and <strong>templates</strong>. </p>\n<figure class=\"align-none media-275642\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/cms-setup-1.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_996,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 996w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_946,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 946w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_892,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 892w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_852,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 852w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_802,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 802w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_753,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 753w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_706,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 706w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_642,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 642w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_588,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 588w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_533,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 533w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_477,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 477w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_468,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 468w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_295,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 295w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_286,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 286w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1535039756/cms-setup-1_xgpmiz.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p>Let's consider the technology behind WordPress, a CMS that <a href=\"http://mediatemple.net/blog/news/css-tricks-is-a-poster-child-wordpress-site/\">works pretty good for CSS-Tricks</a>. In order for WordPress to run, it needs:</p>\n<ol>\n<li>PHP (the back-end language)</li>\n<li>MySQL (the database)</li>\n<li>Apache (the web server)</li>\n</ol>\n<p>You can do all that locally!</p>\n<p>I use <a href=\"https://css-tricks.com/local-by-flywheel/\">Local by Flywheel</a> for that (Mac and Windows), but there are a number of ways to get those technologies running: <a href=\"https://css-tricks.com/video-screencasts/86-mamp/\">MAMP</a>, <a href=\"https://hub.docker.com/_/wordpress/\">Docker</a>, <a href=\"https://github.com/Varying-Vagrant-Vagrants/VVV\">Vagrant</a>, etc. </p>\n<p>That'll get you up and running locally with your CMS. That's a beautiful thing. Having a good local development environment for your site is crucial. But it doesn't help you get that site live. </p>\n<p>We'll go over getting all this to a live site a bit later, but you should know this: the web server that you run will need to run these same technologies. Looking at the WordPress example from above, your web server will <em>also</em> need to run PHP, MySQL, and Apache. Then you'll need to set up a system for getting all your files from your local computer to your web server like you would for any other site, but also probably have a system for dealing with the database. The database is a bit tricky as it's not a \"flat file\" like most of the rest of your site.</p>\n<p>A CMS could be built from any set of technologies, not just the ones listed above. For example, see <a href=\"https://keystonejs.com/\">KeystoneJS</a>. Instead of PHP, Keystone is Node.js. Instead of MySQL for the database, it uses MongoDB. Instead of Apache, it uses Express. Just a different set of technologies. Both of which you can get running locally <em>and</em> on a live web server.</p>\n<p>A CMS could even have no database at all! <a href=\"https://www.staticgen.com/\">Static site generators</a> are like this. You get the site running locally, and they produce a set of flat files which you move to your live server. A different way to do things, but absolutely still a CMS. What I always say is that <a href=\"https://css-tricks.com/video-screencasts/121-the-right-cms-is-a-customized-one/\">the best CMS is one that is customized</a> to your needs. </p>\n<h3 class=\"josh-question\">\n<img src=\"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg\" width=\"60\" align=\"left\"><br>\nWhat is \"Asset Hosting\"? Are assets not content? What is the difference between a CMS and an asset hosting service? What does an asset host do?<br>\n</h3>\n<p>Let's define an asset: any \"flat\" file. As in, not dynamically generated like how a CMS might generate an HTML file. Images are a prime example of an \"asset.\" But it's also things like CSS and JavaScript files, as well as videos and PDFs. </p>\n<p>And before we get any further: you probably don't need to worry about this right away. Your web host can host assets and that's plenty fine for your early days on small sites.</p>\n<p>One major reason people go with an asset host (probably more commonly referred to as a CDN or Content Delivery Network) is for a speed boost. Asset hosts are also servers, just like your web host's web server, but they are designed for hosting those flat file assets super fast. So, not only do those assets get delivered to people looking at your site super fast, but your web server is relieved of that burden. </p>\n<p>You could even think of something like YouTube as an asset host. That 100 MB video of a butterfly in your garden is a heavy load for your little web server, and potentially a problem if your outgoing bandwidth is capped like it often is. Uploading that video to YouTube puts your video into that whole social universe, but a big reason to do it other than the social stuff is that it's hosting that video asset for you.</p>\n<h3 class=\"josh-question\">\n<img src=\"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg\" width=\"60\" align=\"left\"><br>\nI’ve heard of \"repositories\", but don’t really get what they are. I hear stuff like \"just upload it to my Git Repository.\" What the heck does that mean? I feel like a moron for asking this. What is Git? What is it for? Do I need to use it? Is it involved in the \"local to live\" process at all?<br>\n</h3>\n<p>Sorry you got hit with a <em>\"just\"</em> there. There is <a href=\"http://bradfrost.com/blog/post/just/\">an epidemic in technology conversations</a> where people slip that in to make it seem like what they are about to say is easy and obvious when it could be neither depending on who is reading.</p>\n<p>But let's get into talking about Git repositories. </p>\n<p class=\"explanation\">Git is a specific form of <strong>version control</strong>. There are others, but Git is so dominant in the web industry that it's hardly worth mentioning any others.</p>\n<p>Let's say you and me are working on a website <em>together</em>. We've purchased a domain and hosting and gotten the site live. We've shared the SFTP credentials so we both have access to change the files on the live site. <em>This could be quite dangerous!</em></p>\n<figure class=\"align-none media-275413\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/coda-1.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534445633/coda-1_jxcye8.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_748,f_auto,q_auto/v1534445633/coda-1_jxcye8.png 748w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_552,f_auto,q_auto/v1534445633/coda-1_jxcye8.png 552w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534445633/coda-1_jxcye8.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"><figcaption><a href=\"https://www.panic.com/coda/\">Coda</a> is a code editor that let's you edit files directly on a sever you've connected to over SFTP. Cool, but dangerous!</figcaption></figure><p>Say we both edit a file and upload it over SFTP... which change wins? It's whoever uploaded their file last. We have no idea who has done what. We're over-writing each other and have no way of staying in sync with each other's changes, changes immediately affect the live site which could break things and we have no way of undoing changes in case we break things. <em>That's a situation so unacceptable that it's really never done.</em></p>\n<p>Instead, we work with version control, like Git. With Git, when we make changes, we <strong>commit</strong> them to a <strong>repository</strong>. A repository can be hosted anywhere, even on your local machine. But to make them really useful, they are hosted on the internet somewhere everyone has access to. You've surely seen <a href=\"https://github.com/\">GitHub</a>, which hosts these repositories and adds a bunch of other features like issue tracking. Similar are <a href=\"https://about.gitlab.com/\">GitLab</a> and <a href=\"https://bitbucket.org/\">Bitbucket</a>.</p>\n<p>Now let's say you and me are working on that same site, but we've set up a Git repository for it. When I make a change, I commit it to the repository. If you want to make a change as well, you have to <strong>pull</strong> my changes down which <strong>merges</strong> them into your own copy of the code. Then you can push your changes up to the repository. Like anything, it gets more complicated, but that's the gist of it. </p>\n<p>But a Git repository <em>isn't the live website</em>. You're on your own for getting the files from a Git repository to a live site. Fortunately, that's a situation that everyone faces, so there are lots of options. Good thing your last question is about this!</p>\n<h3 class=\"josh-question\">\n<img src=\"https://css-tricks.com/wp-content/uploads/2018/08/question-josh.svg\" width=\"60\" align=\"left\"><br>\nOK. So now with all that straight... where do you start with going from local to live? Where do you \"upload\" your HTML, CSS and JavaScript files? How do you link your shiny new domain name to those files and see it out in the wild? Which service is in charge of adding new content to your site, or updating it? Does it get really confusing if you have different companies for each service?<br>\n</h3>\n<p>Let's start with a very simple website on what I'd consider typical web hosting. Say you have just <code>index.html</code>, <code>style.css</code>, and <code>script.js</code> files on your local computer which is your entire website. You've purchased a domain name and pointed the DNS settings at a web host. That host has given you SFTP credentials. You'll use those credentials in an app that allows SFTP connections to log in:</p>\n<figure class=\"align-none media-275350\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/sftp.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534343461/sftp_iksxxz.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_662,f_auto,q_auto/v1534343461/sftp_iksxxz.png 662w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534343461/sftp_iksxxz.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p>Your host will also tell you which folder is the \"public root\" of your website. The files there will be out on the public internet for the world to see!</p>\n<figure class=\"align-none media-275351\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/Screen-Shot-2018-08-15-at-7.31.55-AM.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534343526/Screen-Shot-2018-08-15-at-7.31.55-AM_gqqhuk.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_638,f_auto,q_auto/v1534343526/Screen-Shot-2018-08-15-at-7.31.55-AM_gqqhuk.png 638w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534343526/Screen-Shot-2018-08-15-at-7.31.55-AM_gqqhuk.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p class=\"explanation\">You might hear people refer to the \"live\" website as a \"production\" site. When someone asks something like, <em>Did that bug make it to production?\"</em> they mean whether the bug is on the live website. \"Development\" is your local computer. You might also have a \"Staging\" site, which is a clone of the live website on the same hardware/software of the live site for testing.</p>\n<p>Remember earlier when we talked about Git repositories? While the repositories themselves don't directly help you get the files in them to your web server, most systems that help you with the local-to-live process work with your repositories. </p>\n<p class=\"explanation\">The phrase \"local-to-live\" refers to <strong>deployment</strong>. When you have changes that you want to go out to your production website, you <em>deploy</em> them. That's the process of moving your work from \"development\" to \"production.\"</p>\n<p>One service that helps with this idea of deployment is <a href=\"https://beanstalkapp.com/\">Beanstalk</a>. Beanstalk hosts your Git repository, <em>plus you give it the SFTP credentials for your server</em> — that way it can move the files to your web server when you make commits. Cool right? Say you wanted to host that Git repo elsewhere though, like GitHub, Bitbucket, or Gitlab. Check out <a href=\"https://deploybot.com/\">DeployBoy</a>, which does the same thing, only it can connect to those sites as well. It probably comes as no surprise by now that there are lots of options here, ranging in price and complexity.</p>\n<p>Let's go back to our WordPress example. </p>\n<ol>\n<li>You've got it running locally (on your computer) just perfectly and now want to go live with it.</li>\n<li>You've bought a domain name from a registrar.</li>\n<li>You've purchased hosting that meets WordPress requirements.</li>\n<li>You've pointed the DNS of the domain name at the web host.</li>\n<li>You've verified it's all working (easy way: upload an <code>index.html</code> file in the public root via SFTP and verify that it loads when you type you type the domain name into a browser.)</li>\n</ol>\n<p>Now, you've still got some work to do:</p>\n<ol>\n<li>Set up a Git repository for the site.</li>\n<li>Set up a deployment service to move the files from the repository to the live site.</li>\n<li>Configure/Set up the live site as needed. For example, you'll need a database on the live site. You'll have to create that (your host will have instructions) and do things like run the <a href=\"https://codex.wordpress.org/Installing_WordPress#Finishing_installation\">WordPress installer</a> and update <a href=\"https://codex.wordpress.org/Editing_wp-config.php\">configuration files</a>.</li>\n<li>If you have things in your local database that you want to move to the live site, you might be exporting/importing things. That can happen at the raw MySQL level using WordPress' native import/export features, or a fancy plugin like <a href=\"https://deliciousbrains.com/wp-migrate-db-pro/\">WP DB Migrate Pro</a>.</li>\n</ol>\n<p>It's a non-trivial amount of work! Sorry. This process is pretty similar for any site though. It's a matter of configuring and setting up your production web server exactly how it should be, then deploying files to it. Every site is a bit different, but you'll get the hang of this whole dance.</p>\n<figure class=\"align-none media-275568\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/websites-dance.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534872950/websites-dance_j80qxi.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_786,f_auto,q_auto/v1534872950/websites-dance_j80qxi.png 786w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534872950/websites-dance_j80qxi.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p>It really is a big dance. I've only painted one picture for you here. I tried to pick one that was generic and broad enough that it shows the landscape of what needs to be done. But, at every step in this dance, there are different ways you can do things, different services you can pick, companies trying to help you at different pain points... it's an ever-changing world. </p>\n<p>Right now, Netlify is enjoying a lot of popularity because they are one of the only web hosts that actually helps you with deployment. They'll watch your Git repositories and <a href=\"https://www.netlify.com/docs/continuous-deployment/\">do deployment for you</a>! Netlify is for static sites only, but that can be <a href=\"https://thepowerofserverless.info/\">a whole world onto itself</a>. ZEIT also is massively innovative in how it helps with deploying and hosting web projects, including directly <a href=\"https://zeit.co/blog/now-for-github\">connecting with GitHub</a>. </p>\n<hr>\n<h3>Good luck!</h3>\n<p>I hope this was helpful. Remember, you aren't alone in all this. Zillions of other developers have done this before you and there is help to be found on the internet.</p>\n<p>Oh, and remember: the best way to learn anything at all is to...</p>\n<!--[if lt IE 9]><script>document.createElement('audio');</script><![endif]-->\n<audio class=\"wp-audio-shortcode\" preload=\"none\" controls=\"controls\"><source type=\"audio/mpeg\" src=\"https://css-tricks.com/wp-content/uploads/2018/08/jbw.mp3?_=1\"></source><a href=\"https://css-tricks.com/wp-content/uploads/2018/08/jbw.mp3\">https://css-tricks.com/wp-content/uploads/2018/08/jbw.mp3</a></audio><p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/helping-a-beginner-understand-getting-a-website-live/\">Helping a Beginner Understand Getting a Website Live</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Article","Beginner","deployment","domains","hosting"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-06 14:01:32","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Level up your hosting. Get started on DigitalOcean with $100.","pubDate":"2018-09-06 13:58:34","link":"https://synd.co/2NVHKWw","guid":"https://css-tricks.com/?p=275984","author":"Geoff Graham","thumbnail":"https://ad.doubleclick.net/ddm/ad/N562802.3091281BUYSELLADS/B21391822.224688392;sz=1x1;ord=%5Btimestamp%5D;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;tfua=?","description":"\n<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Tired of slow, unreliable web hosting? See how easy it is to self-host your next project on DigitalOcean's cloud platform. Build and manage ultra-fast websites, blogs, and other static web pages using our user-friendly control panel or simple API, all with a 99.99% uptime SLA. Save time using our One-Click install apps for WordPress, Ghost and Discourse. Never worry about running out of storage space again with Spaces — highly scalable, affordable object storage.…</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/level-up-your-hosting-get-started-on-digitalocean-with-100/\">Level up your hosting. Get started on DigitalOcean with $100.</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>(This is a <a href=\"https://css-tricks.com/advertising\">sponsored post</a>.)</p>\n<p>Tired of slow, unreliable web hosting? See how easy it is to self-host your next project on DigitalOcean's cloud platform. Build and manage ultra-fast websites, blogs, and other static web pages using our user-friendly control panel or simple API, all with a 99.99% uptime SLA. Save time using our One-Click install apps for WordPress, Ghost and Discourse. Never worry about running out of storage space again with Spaces — highly scalable, affordable object storage.</p>\n<p><a href=\"https://synd.co/2NVHKWw\">Sign up today</a> with a free $100 credit for CSS-Tricks readers.</p>\n<p><img src=\"https://ad.doubleclick.net/ddm/ad/N562802.3091281BUYSELLADS/B21391822.224688392;sz=1x1;ord=%5Btimestamp%5D;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;tfua=?\"></p>\n<p><a href=\"https://synd.co/2NVHKWw\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/level-up-your-hosting-get-started-on-digitalocean-with-100/\">Permalink</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/level-up-your-hosting-get-started-on-digitalocean-with-100/\">Level up your hosting. Get started on DigitalOcean with $100.</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Link","Sponsored"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-06 13:58:34","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"What do we call browser’s native development tools?","pubDate":"2018-09-05 22:03:51","link":"https://css-tricks.com/what-do-we-call-browsers-native-development-tools/","guid":"https://css-tricks.com/?p=275721","author":"Chris Coyier","thumbnail":"https://css-tricks.com/wp-content/uploads/2018/08/devtool-chrome-150x150.png","description":"\n<p>You know, that panel of tools that allows you to do stuff like inspect the DOM and see network requests. How do the companies that make them refer to them?</p>\n<ul>\n<li>Chrome calls them <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">DevTools</a>.</li>\n<li>Edge calls them <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide\">DevTools</a>.</li>\n<li>Firefox calls them <a href=\"https://developer.mozilla.org/en-US/docs/Tools\">Developer Tools</a>.</li>\n<li>Safari calls it the <a href=\"https://developer.apple.com/safari/tools/\">Web Inspector</a>.</li>\n</ul>\n<p>I think it's somewhat safe to generically refer to them as DevTools. Safari is the only browser that doesn't use that term, but I imagine even die-hard …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/what-do-we-call-browsers-native-development-tools/\">What do we call browser’s native development tools?</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>You know, that panel of tools that allows you to do stuff like inspect the DOM and see network requests. How do the companies that make them refer to them?</p>\n<ul>\n<li>Chrome calls them <a href=\"https://developers.google.com/web/tools/chrome-devtools/\">DevTools</a>.</li>\n<li>Edge calls them <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide\">DevTools</a>.</li>\n<li>Firefox calls them <a href=\"https://developer.mozilla.org/en-US/docs/Tools\">Developer Tools</a>.</li>\n<li>Safari calls it the <a href=\"https://developer.apple.com/safari/tools/\">Web Inspector</a>.</li>\n</ul>\n<p>I think it's somewhat safe to generically refer to them as DevTools. Safari is the only browser that doesn't use that term, but I imagine even die-hard Safari users will know what you mean.</p>\n<p><span></span></p>\n\n<a href=\"https://css-tricks.com/what-do-we-call-browsers-native-development-tools/devtool-chrome/\"><img width=\"150\" height=\"150\" src=\"https://css-tricks.com/wp-content/uploads/2018/08/devtool-chrome-150x150.png\" class=\"attachment-thumbnail size-thumbnail\" alt=\"\"></a>\n<a href=\"https://css-tricks.com/what-do-we-call-browsers-native-development-tools/devtools-safari/\"><img width=\"150\" height=\"150\" src=\"https://css-tricks.com/wp-content/uploads/2018/08/devtools-safari-150x150.png\" class=\"attachment-thumbnail size-thumbnail\" alt=\"\"></a>\n<a href=\"https://css-tricks.com/what-do-we-call-browsers-native-development-tools/devtools-firefox/\"><img width=\"150\" height=\"150\" src=\"https://css-tricks.com/wp-content/uploads/2018/08/devtools-firefox-150x150.png\" class=\"attachment-thumbnail size-thumbnail\" alt=\"\"></a>\n\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/what-do-we-call-browsers-native-development-tools/\">What do we call browser’s native development tools?</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Article","DevTools"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-05 22:03:51","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Designing With Code","pubDate":"2018-09-05 18:20:34","link":"https://matthewstrom.com/writing/designing-with-code.html","guid":"https://css-tricks.com/?p=275906","author":"Robin Rendle","thumbnail":"","description":"\n<p>Wall Street Journal design director Matthew Ström on <a href=\"https://css-tricks.com/tools-thinking-tools-systems/\">something near and dear to me</a>: the link between code and design tools:</p>\n<p>We’re in the middle of a design tool renaissance. In the 8 years since Sketch 1.0 was released, there’s been a wave of competition among traditional design tools. And as the number of tools available to designers grows exponentially, ideas that were once considered fringe are finding a broader audience.</p>\n<p>One of these ideas will significantly change the …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/designing-with-code/\">Designing With Code</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>Wall Street Journal design director Matthew Ström on <a href=\"https://css-tricks.com/tools-thinking-tools-systems/\">something near and dear to me</a>: the link between code and design tools:</p>\n<blockquote>\n<p>We’re in the middle of a design tool renaissance. In the 8 years since Sketch 1.0 was released, there’s been a wave of competition among traditional design tools. And as the number of tools available to designers grows exponentially, ideas that were once considered fringe are finding a broader audience.</p>\n<p>One of these ideas will significantly change the way digital products are designed: integrating design and code at a deep level. Figma can update a React code base in real time; InVision, Abstract, and Zeplin have done away with design-developer handoff documents; Framer’s new Framer X can render interactive React components directly into its workspace. These examples are just a hint of what’s to come.</p>\n</blockquote>\n<p><span></span></p>\n<p>Matthew then looks at how this combination of code and design has been improving his own design process, specifically on the “story cards” that appear on the homepage of the WSJ: </p>\n<blockquote><p>A tiny bit of NodeJS fills in the cards with live data from the WSJ.com home page. I can make small changes to parts of the component and see how the system reacts in a matter of seconds. This multiplicative process means that small changes have a huge output, making my designs much more comprehensive in the process.</p></blockquote>\n<p>I really can’t wait to see how our design tools are evolve. It’s a thoroughly exciting time to be a designer that’s interested in code.</p>\n<p><a href=\"https://matthewstrom.com/writing/designing-with-code.html\" title=\"Direct link to featured article\">Direct Link to Article</a> — <a href=\"https://css-tricks.com/designing-with-code/\">Permalink</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/designing-with-code/\">Designing With Code</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Link","abstract","design tools","figma","framer x","invision"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-05 18:20:34","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Flutter: Google’s take on cross platform","pubDate":"2018-09-05 14:01:21","link":"https://css-tricks.com/flutter-googles-take-on-cross-platform/","guid":"https://css-tricks.com/?p=275725","author":"Eric Windmill","thumbnail":"https://css-tricks.com/wp-content/uploads/2018/08/flutter-01.png","description":"\n<p><a href=\"https://flutter.io/\">Flutter</a> is a mobile <abbr title=\"Software Development Kit\">SDK</abbr> that, at its core, is about empowering everyone to build beautiful mobile apps. Whether you come from the world of web development or native mobile development, Flutter makes it easier to create mobile apps in a familiar, simplified way, without ever giving up control to the framework.</p>\n\n<p>As of this writing, Google AdWords and Alibaba are both using Flutter in production. <a href=\"https://flutter.io/showcase\">You can see more examples of who’s using Flutter</a> (including the app I’ve worked …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/flutter-googles-take-on-cross-platform/\">Flutter: Google’s take on cross platform</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p><a href=\"https://flutter.io/\">Flutter</a> is a mobile <abbr title=\"Software Development Kit\">SDK</abbr> that, at its core, is about empowering everyone to build beautiful mobile apps. Whether you come from the world of web development or native mobile development, Flutter makes it easier to create mobile apps in a familiar, simplified way, without ever giving up control to the framework.</p>\n<p><span></span></p>\n<p>As of this writing, Google AdWords and Alibaba are both using Flutter in production. <a href=\"https://flutter.io/showcase\">You can see more examples of who’s using Flutter</a> (including the app I’ve worked on) on Flutter’s website on the showcase page.</p>\n<p>Right now, there’s a lot of buzz about Flutter. The question I see most often is, <em>\"Flutter or React Native...which one should I use?\"</em> Like all things in programming, its all about the tradeoffs you’re willing to make.</p>\n<p>I’m going to try to convince you that Flutter is the best option for mobile app development. I believe it’s better than any other cross platform framework, and it’s possibly better than native development — but more on that in a bit.</p>\n<p>Before that though, let me walk (quickly) through what Flutter is, and what it is not, starting with the Dart programming language.</p>\n<h3>What’s Dart?</h3>\n<p>Dart is a programming language created by Google and was used to write Flutter. Dart was created, more or less, because Google wanted a language that was \"better\" than JavaScript to write server side and front-end code. From what I understand, the main issue they had with JavaScript is how slowly it updates with new features since it relies on a huge committee for approvals and several browser vendors to implement it.</p>\n<p>After a series of decisions about whether to take on JavaScript directly or not, Google decided to make a language that semantically fit inside of JavaScript. In other words, every single thing you write in Dart can compile to JavaScript. This is why they didn’t just use Java — it’s semantically huge.</p>\n<p class=\"explanation\"> <a href=\"https://gist.github.com/paulmillr/1208618\">Here’s a leaked email chain from Google from 2010.</a> It’s the \"coming to Jesus\" moment that they decided they needed to do something about JavaScript.</p>\n<p>The fundamentals of Dart are similar to all high-level languages. That said, programming languages are, as it turns out, hard to learn. </p>\n<p>There’s good news, though. Dart excels at being a \"safe\" language to learn. Google didn't set out to create anything innovative with Dart. They were seeking to make a language that was simple, productive and could be compiled into JavaScript.</p>\n<p>There is nothing particularly exciting about its syntax, and no special operators that will throw you through a loop. In Dart (unlike JavaScript), there is one way to say true: True. There is one way to say false: False.</p>\n<p>In JavaScript, this coerces to True:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">if (3) { ... }</code></pre>\n<p>In Dart, that would blow up your program. Dart is, at its core, a productive, predictable, and simple language.</p>\n<p>This is important, because writing an app in Flutter is simply writing Dart. Flutter is, underneath it all, a library of Dart classes. There is no markup language involved or JSX-style hybrid language. Every bit of front-end code is written in Dart. No HTML. No CSS. </p>\n<h3>Why does Flutter use Dart?</h3>\n<p>If you’re coming from literally any other background (and you’re like me), you’ve probably complained about the fact that Flutter uses Dart, and not JavaScript. (Developers are, believe it or not, opinionated.)</p>\n<p>And there are reasons to be skeptical of this choice. It's not one of the hot languages of today. It's not even one of the top 25 most used languages. What gives? Is Google just using it because it’s their language? I'd imagine that played a role, but there are practical reasons, too.</p>\n<ul>\n<li>Dart supports both Just In Time (JIT) compiling and Ahead of Time (AOT) compiling.\n<ul>\n<li>The AOT compiler changes Dart into efficient native code. This makes Flutter fast (a win for the user and the developer), but it also means that almost all of the framework is written in Dart. For you, the developer, that means you customize everything.</li>\n<li>Dart’s optional JIT compiling allows hot-reloading to exist. Fast development and iteration is a key to the joy of using Flutter. When you save code in your text editor, your app is updated in your simulator in less than a second.</li>\n</ul>\n</li>\n<p>Dart is Object Oriented. This makes it easy to write visual user-experiences exclusively with Dart, with no need for a markup language.\n</p>\n<li>Dart is a productive and predictable language. It’s easy to learn and it feels familiar. Whether you come from a dynamic language or a static language, you can get up and running with ease.</li>\n<li>And yes, I’d image that it is extremely appealing to use a language made by the same company, because the Flutter team could work closely with the Dart team to implement new needed features.</li>\n</ul>\n<h3>Flutter vs. React Native (and other options)</h3>\n<p>Before I offer up my unsolicited opinions on your other options, I want to make this crystal clear: Flutter is not the answer 100% of the time. It’s a tool and we should choose the right tool for the job at hand. That said, I’d only argue that it’s something you should strongly consider in the future. </p>\n<h4>Native development (iOS and Android)</h4>\n<p>Your first choice is to write native apps for iOS and Android. This gives you maximum control, debugging tools, and (potentially) a very performant app. At a company, this likely means you have to write everything twice; once for each platform. You likely need different developers on different teams with different skillsets that can’t easily help each other.</p>\n<h4>React Native, WebViews, and other cross-platform JavaScript options</h4>\n<p>Your second option: cross-platform, JavaScript-based tools such as WebViews and React Native. These aren’t bad options. The problems you experience with native development disappear. Every front-end web developer on your team can chip in and help — all they need are some modern JavaScript skills. This is precisely why large companies such as AirBnb, Facebook, and Twitter have used React Native on core products. (AirBnb recently <a href=\"https://medium.com/airbnb-engineering/sunsetting-react-native-1868ba28e30a\">announced</a> that it would stop using React Native, because of some of the issues I’ll describe below.)</p>\n<p>The first \"mobile apps\" to be built cross platform are simply WebViews that run on WebKit (a browser rendering engine). These are literally just embedded web pages. The problem with this is basically that manipulating the DOM is very expensive and doesn't perform well enough to make a great mobile experience. </p>\n<p>Some platforms have solved this problem by building the \"JavaScript bridge.\" This bridge lets JavaScript talk directly to native widgets.</p>\n<p>This is much more performant than WebViews, because you eliminate the DOM from the equation, but it's still not ideal. Every time your app needs to talk directly to the rendering engine, it has to be compiled to native code to \"cross the bridge.\" On a single interaction, the bridge must be crossed <em>twice</em>: once from platform to app, and then back from app to platform.</p>\n<figure class=\"align-left media-275728\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/flutter-01.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_788,f_auto,q_auto/v1535479762/flutter-01_hxjxzy.png 788w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1535479762/flutter-01_hxjxzy.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p>Flutter differs because it uses its own rendering engine, <a href=\"https://skia.org/\">Skia</a>, which is the same rendering engine used in Chrome. Skia can communicate with Flutter apps. As a result, Flutter accepts local events <em>directly</em>, rather than having to first compile them into JavaScript. This is essentially possible because <em>Flutter compiles to native ARM code.</em> This is the secret to its success. When your app is fired up on a user’s device, it’s entirely running in the language that the device’s operating system expects.</p>\n<figure class=\"align-left media-275729\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/flutter-02.png\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1535479810/flutter-02_yhpheq.png 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1535479810/flutter-02_yhpheq.png 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p>The JavaScript bridge is a marvel of modern programming, to be sure, but it presents three big problems.</p>\n<p>The first problem is that debugging is hard. When there’s an error in the runtime compiler, that error has to be traced back across the JavaScript bridge and found in the JavaScript code. It may be in markup or CSS-like syntax as well. The debugger itself may not work as well as we'd like it to.</p>\n<p>A second bigger issue, though, is performance. The JavaScript bridge is very expensive. Every time something in the app is tapped, that event must be sent across the bridge to your JavaScript app. The result, for lack of better term, is <em>jank</em>.</p>\n<p>The third big problem, <a href=\"https://medium.com/airbnb-engineering/sunsetting-react-native-1868ba28e30a\">according to AirBnb,</a> is that they found themselves having to dip down into the native code more often than they wanted to, which was a problem for their teams comprised mostly of JavaScript developers. (The jury is still out on this issue with Flutter, but I can say that I’ve never once had to try and write native code at my job. Some members of my team have created plugins in Objective-C and Java.)</p>\n<h3>The immediate benefits of Flutter</h3>\n<p>It’s likely, since you’re reading this article, that you’re interested in Flutter... but you might be skeptical. I admire how thorough you are in vetting technology.</p>\n<p>Your reasons for being skeptical are fair. It’s a new technology. That means breaking changes in the API. It means missing support for important features (such as Google Maps). It seems possible that Google could abandon it altogether one day.</p>\n<p>And, despite the fact that you believe Dart is great language, that doesn’t change the fact that Dart isn’t widely used, and many third-party libraries that you want may not exist.</p>\n<p>I would argue against all those points, though. The API unlikely to change, as the Google uses Flutter internally on major revenue-generating apps, including Google AdWords. Dart has recently moved into version 2, which means it will likely be a while until it changes much. It will likely be years until breaking changes are introduced which, in a computer world, is practically forever.</p>\n<p>Yes, there are indeed missing features, but Flutter gives you the complete control to add your own native plugins. In fact, many of the most important operating system plugins already exist, such as a map plugin, camera, location services, and device storage. The Dart and Flutter ecosystem and community already exists. It’s much smaller than the JavaScript community, of course, but I would argue that it’s concise. I see people every day contributing to existing packages, rather than creating new ones. </p>\n<p>Now, let’s talk about Flutter’s specific benefits.</p>\n<h4>No JavaScript bridge</h4>\n<p>This is a major bottleneck in development and in your application’s performance. Again, it leads to <em>jank</em>. Scrolling isn’t smooth, it’s not always performant, and it’s hard to debug.</p>\n<p>Flutter compiles to actual native code and is rendered using Skia. The app itself is running in native, so there's no reason to convert Dart to native. This means that it doesn’t lose any of the performance or productivity when it’s running on a user’s device.</p>\n<h4>Compile time</h4>\n<p>If you’re coming from native development, one of your major pains is the development cycle. iOS is infamous for its insane compile times. In Flutter, a full compile generally takes less than 30 seconds, and incremental compiles are sub-seconds, thanks to hot-reload. At my day job, we develop features for our mobile client first because Flutter’s development cycle allows us to move so quickly. Only when we’re sure of our implementation do we go write those features in the web client.</p>\n<h4>Write once, test once, deploy everywhere</h4>\n<p>Not only do you get to write your app one time and deploy to iOS and Android, you also only have to write your tests once. Dart unit testing is quite easy, and Flutter includes a library for testing Widgets.</p>\n<h4>Code sharing</h4>\n<p>I’m going to be fair here: I suppose this is technically possible in JavaScript as well. But, it’s certainly not possible in native development. With Flutter and Dart, your web and mobile apps can share all the code, except each client’s views. (Of course, only if you’re using Dart for your web apps.) You can quite easily use dependency injection to run an <a href=\"https://webdev.dartlang.org/angular\">AngularDart</a> app and Flutter app with the same models and controllers.</p>\n<p>And of course, even if you don’t want to share code between your web app and your mobile app, you’re sharing all your code between the iOS and Android apps.</p>\n<p>In practical terms, this means that you are super productive. I mentioned that we develop our mobile features first at my day job. Because we share business logic between web and mobile, once the mobile feature is implemented, we only have to write views that expect that same controller data.</p>\n<h4>Productivity and collaboration</h4>\n<p>Gone are the days of separate teams for iOS and Android. In fact, whether your use Dart or JavaScript in your web apps, Flutter development is familiar enough that all your teams will be unified. It’s not a stretch by any means to expect a JavaScript web developer to also effectively develop in Flutter and Dart. If you believe me here, then it follows that your new unified team will be three times more productive.</p>\n<h4>Code maintenance</h4>\n<p>Nothing is more satisfying then fixing a bug once and having it corrected on all your clients. Only in very specific cases is there a bug in a iOS app produced with Flutter that is not also in the Android version (and vice versa). In 100% of these cases, these bugs aren’t bugs, but cosmetic issues because Flutter follows the device OS design systems in it’s built-in widgets. Because these are issues like text sizing or alignment, they are trivial in the context of using engineering time to fix.</p>\n<h3>Flutter for JavaScript developers</h3>\n<p>Since you’re reading CSS-Tricks, I’d be willing to bet you’re a web developer. If you’ve used any of today’s hottest frameworks (e.g. React, Angular, Vue, etc.), then you’ll be happy to know that picking up Flutter is <em>easy</em>.</p>\n<p>Flutter is completely reactive, so the same mindset and paradigm that you’re used to with React carries over to Flutter. You’re essentially building a ton of small, reusable components (called Widgets in Flutter) just like React. These widgets are complete with lifecycle methods, and they’re written in classes. If you’ve used this syntax in React:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">const MyComponent extends React.Component {\n  //...\n  render(){}\n}</code></pre>\n<p>...then you’ll pick up Flutter with no problem. This is how you do the same in Flutter:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">class MyWidget extends StatelessWidget {\n  //...\n  build(){}\n}</code></pre>\n<p>And, just like React, Flutter favors composition over inheritance. For example, if you want to make a special <code>AddToCartButton</code> in React, you’d build a button with special functions and styles in JSX. That’s exactly how you do it in Flutter (minus the JSX).</p>\n<p>Finally, the layout system in Flutter is similar to CSS rules we’re familiar with, like flexbox and absolute positioning.</p>\n<p>This is also where a big difference in making views in Flutter comes in, though. In Flutter, literally <em>everything</em> is a Widget. There are some obvious, concrete Widgets, like <code>Text</code>, <code>Button</code>, and <code>AppBar</code>. But Animations and Layout declarations are also Widgets. To center text, you wrap a <code>Text</code> Widget in a <code>Center</code> Widget. To add padding, there’s a <code>Padding</code> Widget. </p>\n<p>Imagine breaking down a React app to the smallest possible reusable components you could make. For example, what if you made a higher-order React component that simply took a prop \"padding\" and all it did was add that amount of padding to whatever was nested within it. That’s how Flutter works, because there is no CSS or markup. </p>\n<p>In this sample picture, here are <em>a few</em> layout widgets that you might use, but you can’t ‘see’ as the user:</p>\n<figure class=\"align-left media-275730\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/flutter-03.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1535480598/flutter-03_zhlksp.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_810,f_auto,q_auto/v1535480598/flutter-03_zhlksp.jpg 810w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1535480598/flutter-03_zhlksp.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"></figure><p>That may seem like a ton of monotonous work, but Flutter comes with many, many Widgets built right in (such as <code>Padding</code> and <code>Center</code>) so you don’t have to waste time doing that yourself. </p>\n<p>These are some of the most common widgets:</p>\n<ul>\n<li>\n<a href=\"https://flutter.io/widgets/layout/)\">Layout</a> -  <code>Row</code>, <code>Column</code>, <code>Scaffold</code>, <code>Stack</code>\n</li>\n<li>\n<a href=\"https://flutter.io/widgets/material/#App%20structure%20and%20navigation\">Structures</a> - <code>Button</code>, <code>Toast</code>, <code>MenuDrawer</code>\n</li>\n<li>\n<a href=\"https://flutter.io/widgets/text/\">Text</a> - <code>TextStyle</code>, <code>Color</code>\n</li>\n<li>\n<a href=\"https://flutter.io/widgets/animation/\">Animations</a> - <code>FadeInPhoto</code>, transformations</li>\n<li>\n<a href=\"https://flutter.io/widgets/styling/\">Styling</a> - <code>Center</code>, <code>Padding</code>\n</li>\n</ul>\n<h3>Final note</h3>\n<p>TL;DR: should you try Flutter? </p>\n<p>If you want to make buttery smooth mobile apps in a familiar style, then yes! The performance and developer experience are both completely held in tact in Flutter.  Its animations tick at 60fps, and it has a bundle of built-in Cupertino-style and Material Design-style Widgets. Or, long story short: it’s <em>incredible</em> how quick you can be productive in Flutter, without sacrificing native performance.</p>\n<p>If you want to try Flutter today, here are a couple great places to start:</p>\n<ul>\n<li><a href=\"https://flutter.io/docs/\">Flutter Docs - Getting Started</a></li>\n<li><a href=\"https://flutter.io/web-analogs/\">Flutter for Web Developers (HTML/CSS equivalents)</a></li>\n<li><a href=\"http://flutterbyexample.com/\">Flutter by Example</a></li>\n</ul>\n<p>The Flutter docs are truly some of the best I’ve ever seen, and they’ll teach you everything you need to know.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/flutter-googles-take-on-cross-platform/\">Flutter: Google’s take on cross platform</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Article","flutter","google"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-05 14:01:21","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Render Caching for React","pubDate":"2018-09-04 13:51:03","link":"https://css-tricks.com/render-caching-for-react/","guid":"https://css-tricks.com/?p=275619","author":"Atishay Jain","thumbnail":"https://css-tricks.com/wp-content/uploads/2018/08/render-caching-01.jpg","description":"\n<p>Server Side Rendering (SSR) is a very useful technique that makes web apps appear faster. The initial HTML is displayed before the JavaScript is parsed and, while the user is deciding what to tap on, our handlers are ready.</p>\n<p>Server side rendering in React requires additional work to setup and has server costs. Furthermore, if your server team cannot have JavaScript running on your servers, you are stuck. It significantly complicates the <abbr title=\"Content Delivery Network\">CDN</abbr> setup especially if you have pages that …</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/render-caching-for-react/\">Render Caching for React</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","content":"\n<p>Server Side Rendering (SSR) is a very useful technique that makes web apps appear faster. The initial HTML is displayed before the JavaScript is parsed and, while the user is deciding what to tap on, our handlers are ready.</p>\n<p>Server side rendering in React requires additional work to setup and has server costs. Furthermore, if your server team cannot have JavaScript running on your servers, you are stuck. It significantly complicates the <abbr title=\"Content Delivery Network\">CDN</abbr> setup especially if you have pages that require login and where the user’s information is managed.</p>\n<p>I want to walk through a new concept called Render Caching. This is a cool trick that can give users an instant performance boost just like that of SSR without having to resort to writing code on the server.</p>\n<p><span></span></p>\n<h3>What is Render Caching?</h3>\n<p>The migration from static HTML pages to Single Page Apps (SPAs) has left a gaping hole in the entire concept of caching that the web has traditionally relied on. While browsers optimize delivery and rendering of the initial HTML, an SPA leaves them blank to be filled in later.</p>\n<p>Render Caching optimizes the SPA render and can significantly improve the perceptible load time of web pages. It does that by caching the rendered HTML in the browser for next load and can provide that display without the JavaScript parsing that eats up our display time.</p>\n<h3>Enabling Render Caching</h3>\n<p>We mentioned earlier that setting up SSR for React requires additional setup and server costs. Render Caching avoids those burdens.</p>\n<p>It takes a few steps to set it up. Let’s break it down into digestible pieces.</p>\n<h4>Step 1: Determine the correct caching state</h4>\n<p>Figure out the conditions for the current page where it would render the same when a user opens it on the next visit. </p>\n<p>For example, you could create a JSON object with the current build number or a user ID. The key is to ensures that the state is encapsulated in the URL, local storage or cookies and do not need a server call for.</p>\n<h4>Step 2: Setup API calls</h4>\n<p>Ensure all API calls happen before the render call to react. This makes sense in regular use cases as well where we want to prevent the page from changing under the user which causes flickers.</p>\n<h4>Step 3: Cache locally in the unload handler</h4>\n<p>Now add a unload event handler to the document. Store the current DOM in <code>localStorage</code>/<code>indexDB</code>.</p>\n<p>That looks something like this, using a build number and a user ID to determine the caching state covered in Step 1:</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">window.addEventListener('beforeunload', () =&gt; {\n  // Production code would also be considerate of localStorage size limitations\n  // and would do a LRU cache eviction to maintain sanity on storage.\n  // There should also be a way to clear this data when the user signs out\n  window.localStorage.setItem(`lastKnown_${window.location.href}`, JSON.stringify({\n    condition: {\n      userId: \"&lt;User ID&gt;\",\n      buildNo: \"&lt;Build No.&gt;\"\n    }\n    data: document.getElementById('content').innerHTML\n}));\n\n// If you want to store data per user, you can add user ID to the key instead of the condition.</code></pre>\n<h4>Step 4: Restore the last known state on load</h4>\n<p>Next up, we want to pull the last known state from the browser’s local storage so we can use it on future visits. We do this by adding the following to the HTML file (e.g. index.html below the document’s the body tag.</p>\n<pre rel=\"HTML\"><code class=\"language-html\">&lt;!-- ... --&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\n  const lastKnownState = window.localStorage.getItem(`lastKnown_${window.location.href}`);\n  \n  lastKnownState = lastKnownState &amp;&amp; JSON.parse(lastKnownState);\n  \n  if (lastKnownState &amp;&amp;\n    lastKnownState.conditions.userId === \"&lt;User ID&gt;\" &amp;&amp;\n    lastKnownState.conditions.buildNo === \"&lt;Build No.&gt;\") {\n    document.getElementById('content').innerHTML = lastKnownState.data;\n    window.hasRestoredState = true;\n  }\n&lt;/script&gt;</code></pre>\n<h4>Step 5: Render the last known state in React</h4>\n<p>This is where the rubber meets the road. Now that we have the user’s last known state visible in the DOM, we can fetch the full content and render our app in that state by updating the top level of React's render with <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\">hydrate</a> conditionally. Event handlers will become functional once this code hits but the DOM should not change.</p>\n<pre rel=\"JavaScript\"><code class=\"language-javascript\">import {render, hydrate} from \"react-dom\"\n\nif (window.hasRestoredState) {\n  hydrate(&lt;MyPage /&gt;, document.getElementById('content'));\n} else {\n  render(&lt;MyPage /&gt;, document.getElementById('content'));\n}</code></pre>\n<h4>Step 6: Go Async all the way</h4>\n<p>Turn your script tags from <code>sync</code> to <code>async</code>/<code>defer</code> for loading the JavaScript files. This is another key step to ensure a smooth loading and rendering experience on the front end.</p>\n<p>That's it! Reload the page to see the boost in performance.</p>\n<h3>Measuring improvement</h3>\n<p>OK, so you did all that work and now you want to know just how performant your site is. You’re going to want to benchmark the improvements.</p>\n<p>Render Caching shines in situations where you have multiple server calls before you know what to render. On script-heavy pages, JavaScript can actually take a lot of time to parse. </p>\n<p>You can measure the load performance in the Performance tab in Chrome’s DevTools.</p>\n<figure class=\"align-left media-275622\"><img src=\"https://css-tricks.com/wp-content/uploads/2018/08/render-caching-01.jpg\" srcset=\"https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1534971452/render-caching-01_bbgpt4.jpg 1000w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_847,f_auto,q_auto/v1534971452/render-caching-01_bbgpt4.jpg 847w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_563,f_auto,q_auto/v1534971452/render-caching-01_bbgpt4.jpg 563w, https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_200,f_auto,q_auto/v1534971452/render-caching-01_bbgpt4.jpg 200w\" sizes=\"(min-width: 1850px) calc( (100vw - 555px) / 3 )\n       (min-width: 1251px) calc( (100vw - 530px) / 2 )\n       (min-width: 1086px) calc(100vw - 480px)\n       (min-width: 626px)  calc(100vw - 335px)\n                           calc(100vw - 30px)\" alt=\"\"><figcaption>Measuring rendering in the Performance tab of Chrome’s DevTools</figcaption></figure><p>Ideally, you’d use a guest profile so that your browser extensions won’t interfere with the measurements. You should see a significant improvement on reload. In the screenshot above, we a sample app with an async <code>data.json</code> fetch call that is performed before calling <code>ReactDOM.hydrate</code>. With Render Caching, the render is complete even before the data is loaded!</p>\n<h3>Wrapping up</h3>\n<p>Render Caching is a clever technique to ensure that the perceived speed of re-fetches of the same web page is faster by adding a caching layer to the final HTML and showing them back to the user. Users who visit your site frequently are the ones who stand to benefit the most.</p>\n<p>As you can see, we accomplished this with very little code and the performance gains we get in return are huge. Do try this out on your website and post your comments. I’d love to hear whether your site performance sees the same significant boosts that I’ve experienced.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/render-caching-for-react/\">Render Caching for React</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com/\">CSS-Tricks</a>.</p>\n","enclosure":{},"categories":["Article","caching","react","server side rendering"],"color":"rgb(255, 152, 0)","category":"CSS-Tricks","date":"2018-09-04 13:51:03","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Manage Your Projects And Clients In One Place With Monday.com","pubDate":"2018-09-03 11:54:44","link":"http://feedproxy.google.com/~r/onextrapixel/~3/t665OBuff70/","guid":"https://onextrapixel.com/?p=41595","author":"Roshan Perera","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>[ This is a sponsored post on behalf of Monday ] Monday.com is a project management tool for teams and freelancers that allows you to manage your projects, team,...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/manage-your-projects-and-clients-in-one-place-with-monday-com/\">Manage Your Projects And Clients In One Place With Monday.com</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=t665OBuff70:pgH5fzv9RJE:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=t665OBuff70:pgH5fzv9RJE:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=t665OBuff70:pgH5fzv9RJE:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/t665OBuff70\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>[ This is a sponsored post on behalf of Monday ] Monday.com is a project management tool for teams and freelancers that allows you to manage your projects, team,...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/manage-your-projects-and-clients-in-one-place-with-monday-com/\">Manage Your Projects And Clients In One Place With Monday.com</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=t665OBuff70:pgH5fzv9RJE:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=t665OBuff70:pgH5fzv9RJE:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=t665OBuff70:pgH5fzv9RJE:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=t665OBuff70:pgH5fzv9RJE:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/t665OBuff70\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Sponsored"],"color":"lightblue","category":"Onextrapixel","date":"2018-09-03 11:54:44","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Designing A Usable Contact Page In WordPress: Tips &amp; Trends","pubDate":"2018-07-21 04:00:45","link":"http://feedproxy.google.com/~r/onextrapixel/~3/4OC-UeOxuyI/","guid":"https://onextrapixel.com/?p=40203","author":"Jake Rocheleau","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>Every great website needs a contact page. You can set this up on a static HTML site or a CMS like WordPress which offers a lot of flexibility &amp;...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/design-usable-contact-pages/\">Designing A Usable Contact Page In WordPress: Tips &amp; Trends</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=4OC-UeOxuyI:oNafGgSz1Uw:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=4OC-UeOxuyI:oNafGgSz1Uw:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=4OC-UeOxuyI:oNafGgSz1Uw:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/4OC-UeOxuyI\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Every great website needs a contact page. You can set this up on a static HTML site or a CMS like WordPress which offers a lot of flexibility &amp;...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/design-usable-contact-pages/\">Designing A Usable Contact Page In WordPress: Tips &amp; Trends</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=4OC-UeOxuyI:oNafGgSz1Uw:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=4OC-UeOxuyI:oNafGgSz1Uw:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=4OC-UeOxuyI:oNafGgSz1Uw:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=4OC-UeOxuyI:oNafGgSz1Uw:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/4OC-UeOxuyI\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Design","web form"],"color":"lightblue","category":"Onextrapixel","date":"2018-07-21 04:00:45","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"How to Start a Jekyll Blog on GitHub Pages for Free","pubDate":"2018-07-11 04:00:05","link":"http://feedproxy.google.com/~r/onextrapixel/~3/B_XIWU0JEr8/","guid":"https://onextrapixel.com/?p=41336","author":"Anna","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>Static website generators are increasingly popular these days. They make it possible to run a website without maintaining a database and a server. You also don’t have to worry...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/start-jekyll-blog-github-pages-free/\">How to Start a Jekyll Blog on GitHub Pages for Free</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=B_XIWU0JEr8:a5BVE1aZTVw:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=B_XIWU0JEr8:a5BVE1aZTVw:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=B_XIWU0JEr8:a5BVE1aZTVw:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/B_XIWU0JEr8\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Static website generators are increasingly popular these days. They make it possible to run a website without maintaining a database and a server. You also don’t have to worry...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/start-jekyll-blog-github-pages-free/\">How to Start a Jekyll Blog on GitHub Pages for Free</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=B_XIWU0JEr8:a5BVE1aZTVw:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=B_XIWU0JEr8:a5BVE1aZTVw:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=B_XIWU0JEr8:a5BVE1aZTVw:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=B_XIWU0JEr8:a5BVE1aZTVw:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/B_XIWU0JEr8\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Tutorials","Github","jekyll"],"color":"lightblue","category":"Onextrapixel","date":"2018-07-11 04:00:05","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"12 Best Visual Studio Code Extensions for Web Developers","pubDate":"2018-07-07 06:47:14","link":"http://feedproxy.google.com/~r/onextrapixel/~3/I1I814kqKVU/","guid":"https://onextrapixel.com/?p=41505","author":"Anna","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>Visual Studio Code is one of the most popular source code editors for web developers. It was released in 2015 by Microsoft and offers many awesome features you can...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/best-visual-studio-code-extensions/\">12 Best Visual Studio Code Extensions for Web Developers</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=I1I814kqKVU:G-pspIu9_8E:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=I1I814kqKVU:G-pspIu9_8E:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=I1I814kqKVU:G-pspIu9_8E:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/I1I814kqKVU\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Visual Studio Code is one of the most popular source code editors for web developers. It was released in 2015 by Microsoft and offers many awesome features you can...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/best-visual-studio-code-extensions/\">12 Best Visual Studio Code Extensions for Web Developers</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=I1I814kqKVU:G-pspIu9_8E:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=I1I814kqKVU:G-pspIu9_8E:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=I1I814kqKVU:G-pspIu9_8E:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=I1I814kqKVU:G-pspIu9_8E:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/I1I814kqKVU\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Development","code editors"],"color":"lightblue","category":"Onextrapixel","date":"2018-07-07 06:47:14","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"8 Best Atom Packages for Web Developers","pubDate":"2018-07-01 04:00:09","link":"http://feedproxy.google.com/~r/onextrapixel/~3/6fg-pOIKk1U/","guid":"https://onextrapixel.com/?p=41477","author":"Anna","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>Atom is one of the most popular and feature-rich source code editors for web developers. Originally, Atom was GitHub’s internal tool. Later, they decided to open-source it for the...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/best-atom-packages-web-developers/\">8 Best Atom Packages for Web Developers</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=6fg-pOIKk1U:-mrzo67KKUE:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=6fg-pOIKk1U:-mrzo67KKUE:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=6fg-pOIKk1U:-mrzo67KKUE:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/6fg-pOIKk1U\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Atom is one of the most popular and feature-rich source code editors for web developers. Originally, Atom was GitHub’s internal tool. Later, they decided to open-source it for the...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/best-atom-packages-web-developers/\">8 Best Atom Packages for Web Developers</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=6fg-pOIKk1U:-mrzo67KKUE:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=6fg-pOIKk1U:-mrzo67KKUE:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=6fg-pOIKk1U:-mrzo67KKUE:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=6fg-pOIKk1U:-mrzo67KKUE:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/6fg-pOIKk1U\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Development","atom","code editors"],"color":"lightblue","category":"Onextrapixel","date":"2018-07-01 04:00:09","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Review: Oxygen 2 Website Builder Lets You Design Code-Free Websites Like A Pro","pubDate":"2018-06-21 04:17:21","link":"http://feedproxy.google.com/~r/onextrapixel/~3/urAs3bg9kF8/","guid":"https://onextrapixel.com/?p=41546","author":"Roshan Perera","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>Popular WordPress website builder, Oxygen has a brand new version of the plugin in the works. In this review, we take a closer look at Oxygen 2.0 to see...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/review-oxygen-2-website-builder-lets-you-design-code-free-websites-like-a-pro/\">Review: Oxygen 2 Website Builder Lets You Design Code-Free Websites Like A Pro</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=urAs3bg9kF8:aDqpI51y2gY:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=urAs3bg9kF8:aDqpI51y2gY:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=urAs3bg9kF8:aDqpI51y2gY:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/urAs3bg9kF8\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Popular WordPress website builder, Oxygen has a brand new version of the plugin in the works. In this review, we take a closer look at Oxygen 2.0 to see...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/review-oxygen-2-website-builder-lets-you-design-code-free-websites-like-a-pro/\">Review: Oxygen 2 Website Builder Lets You Design Code-Free Websites Like A Pro</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=urAs3bg9kF8:aDqpI51y2gY:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=urAs3bg9kF8:aDqpI51y2gY:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=urAs3bg9kF8:aDqpI51y2gY:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=urAs3bg9kF8:aDqpI51y2gY:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/urAs3bg9kF8\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Sponsored"],"color":"lightblue","category":"Onextrapixel","date":"2018-06-21 04:17:21","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Most Important Git Commands for Web Developers","pubDate":"2018-06-15 05:22:32","link":"http://feedproxy.google.com/~r/onextrapixel/~3/CMolVG6X95o/","guid":"https://onextrapixel.com/?p=41495","author":"Anna","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>Currently, Git is one of the most popular version control systems among developers. You can use it to track changes in your projects and coordinate the work of multiple...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/best-git-commands-web-developers/\">Most Important Git Commands for Web Developers</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=CMolVG6X95o:eSFUhLourb8:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=CMolVG6X95o:eSFUhLourb8:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=CMolVG6X95o:eSFUhLourb8:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/CMolVG6X95o\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>Currently, Git is one of the most popular version control systems among developers. You can use it to track changes in your projects and coordinate the work of multiple...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/best-git-commands-web-developers/\">Most Important Git Commands for Web Developers</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=CMolVG6X95o:eSFUhLourb8:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=CMolVG6X95o:eSFUhLourb8:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=CMolVG6X95o:eSFUhLourb8:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=CMolVG6X95o:eSFUhLourb8:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/CMolVG6X95o\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Development","git","Github"],"color":"lightblue","category":"Onextrapixel","date":"2018-06-15 05:22:32","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"8 Best Social Sharing Plugins for WordPress","pubDate":"2018-06-06 04:55:33","link":"http://feedproxy.google.com/~r/onextrapixel/~3/eLsvLUtfxpU/","guid":"https://onextrapixel.com/?p=41383","author":"OXP Editorial","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>In 2018 it’s no longer enough to write some good content with relevant keywords and sit back and wait for the traffic to flood in. Websites, like people, are...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/8-best-social-sharing-plugins-for-wordpress/\">8 Best Social Sharing Plugins for WordPress</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=eLsvLUtfxpU:LfpxLgo7jkE:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=eLsvLUtfxpU:LfpxLgo7jkE:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=eLsvLUtfxpU:LfpxLgo7jkE:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/eLsvLUtfxpU\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>In 2018 it’s no longer enough to write some good content with relevant keywords and sit back and wait for the traffic to flood in. Websites, like people, are...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/8-best-social-sharing-plugins-for-wordpress/\">8 Best Social Sharing Plugins for WordPress</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=eLsvLUtfxpU:LfpxLgo7jkE:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=eLsvLUtfxpU:LfpxLgo7jkE:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=eLsvLUtfxpU:LfpxLgo7jkE:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=eLsvLUtfxpU:LfpxLgo7jkE:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/eLsvLUtfxpU\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["WordPress","best social sharing plugins","wordpress social plugins","wordpress social sharing plugins"],"color":"lightblue","category":"Onextrapixel","date":"2018-06-06 04:55:33","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"How Using White Space Improves Your Designs","pubDate":"2018-05-31 04:23:11","link":"http://feedproxy.google.com/~r/onextrapixel/~3/HzI04oZD-Ww/","guid":"https://onextrapixel.com/?p=41325","author":"Rafay","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>When hearing the term white space your mind might jump to white empty sidebars sandwiching the content in the center. However, white space, (or negative space) also refers to...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/how-using-white-space-improves-your-designs/\">How Using White Space Improves Your Designs</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=HzI04oZD-Ww:n-zW343wvwI:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=HzI04oZD-Ww:n-zW343wvwI:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=HzI04oZD-Ww:n-zW343wvwI:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/HzI04oZD-Ww\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>When hearing the term white space your mind might jump to white empty sidebars sandwiching the content in the center. However, white space, (or negative space) also refers to...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/how-using-white-space-improves-your-designs/\">How Using White Space Improves Your Designs</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=HzI04oZD-Ww:n-zW343wvwI:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=HzI04oZD-Ww:n-zW343wvwI:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=HzI04oZD-Ww:n-zW343wvwI:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=HzI04oZD-Ww:n-zW343wvwI:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/HzI04oZD-Ww\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Design"],"color":"lightblue","category":"Onextrapixel","date":"2018-05-31 04:23:11","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"10 UX Tips to Build a High Converting Landing Page","pubDate":"2018-05-28 04:00:23","link":"http://feedproxy.google.com/~r/onextrapixel/~3/E2Ol31FwU6g/","guid":"https://onextrapixel.com/?p=40670","author":"Anna","thumbnail":"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA","description":"\n<p>In the broader sense, a landing page is the web page through which a visitor “lands” a website. Homepages frequently serve as landing pages, however any other page can...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/10-ux-tips-to-build-a-high-converting-landing-page/\">10 UX Tips to Build a High Converting Landing Page</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=E2Ol31FwU6g:IQU-deDMkMY:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=E2Ol31FwU6g:IQU-deDMkMY:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=E2Ol31FwU6g:IQU-deDMkMY:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/E2Ol31FwU6g\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>In the broader sense, a landing page is the web page through which a visitor “lands” a website. Homepages frequently serve as landing pages, however any other page can...</p>\n<p>The post <a rel=\"nofollow\" href=\"https://onextrapixel.com/10-ux-tips-to-build-a-high-converting-landing-page/\">10 UX Tips to Build a High Converting Landing Page</a> appeared first on <a rel=\"nofollow\" href=\"https://onextrapixel.com/\">Onextrapixel</a>.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=E2Ol31FwU6g:IQU-deDMkMY:gIN9vFwOqvQ\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=qj6IDK7rITs\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=E2Ol31FwU6g:IQU-deDMkMY:V_sGLiPBpWU\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?i=E2Ol31FwU6g:IQU-deDMkMY:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/onextrapixel?a=E2Ol31FwU6g:IQU-deDMkMY:l6gmwiTKsz0\"><img src=\"http://feeds.feedburner.com/~ff/onextrapixel?d=l6gmwiTKsz0\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/onextrapixel/~4/E2Ol31FwU6g\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Design","landing page"],"color":"lightblue","category":"Onextrapixel","date":"2018-05-28 04:00:23","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"How to Increase Your Online Business Presence","pubDate":"2018-08-08 02:34:43","link":"http://feedproxy.google.com/~r/Devlounge/~3/SoGGt4WCWyc/how-to-increase-your-online-business-presence","guid":"http://www.devlounge.net/?p=11211","author":"Andy Clarke","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"In this digital age, making sure that your business has a noticeable online presence is key to thriving. The Internet is the number one way that people find out about new businesses, especially younger consumers, and you want to try to increase the number of people who know about your business in every possible way. […]","content":"\n<p>In this digital age, making sure that your business has a noticeable online presence is key to thriving. The Internet is the number one way that people find out about new businesses, especially younger consumers, and you want to try to increase the number of people who know about your business in every possible way. Here are a few ways you can enhance and augment your online presence in a way that only helps your business grow.<span></span></p>\n<h2>Mobile-Friendly Sites</h2>\n<p>Most of the site traffic that your business will get comes from visits to a <a href=\"http://www.devlounge.net/strategy/5-tech-tools-driving-modern-business-need\">mobile site</a>, so make sure that when you design your website, you invest in making sure that it has a similar-looking, mobile-friendly version that people can simply tap to view. Having a mobile-friendly site is the difference between getting a young client on board or turning that same young client away.</p>\n<p>This also makes it better for when people link to your website in other apps. For instance, if you have a social media presence with your company, often, you can add a website in your biography or somewhere at the top of your profile, so you can add the main website and it will open a mobile-friendly version just like that.</p>\n<h2>Active, On-Trend Social Media</h2>\n<p>Social media is the best way that you can increase your online presence, but it is also the easiest one to mess up. People spend their whole lives curating their social media feeds to be interesting to their followers and on-trend, and it’s even harder to do for a business.</p>\n<p>The first thing to do is to make sure that you are investing in the best forms of social media for your business. Facebook and LinkedIn are helpful if you want older clients, but the younger crowds take to Instagram or Twitter. Make sure that your business seems human without being too fake, and that you pay attention to the trends so that you don’t look like you’re stuck in the past.</p>\n<h2>AI-Chosen Features</h2>\n<p>Oone of the <a href=\"https://www.sas.com/en_us/insights/analytics/what-is-artificial-intelligence.html\">newest innovations</a> of Internet is the advent of AI, or artificial intelligence. There are now companies out there that exist to help your business with the assistance of AI.</p>\n<p>For years, people have wondered the subtle ways to increase site traffic or clicks in ads, but AI takes the human guessing game out of it. For instance, certain shades of red or pink are more likely to result in getting a click to purchase than others.</p>\n<p>If you think some of your site features could use an update or you just want to redesign your site so that it can gain more traffic, then buying the help of some of these AI-powered companies can help your presence gain more visual appeal, thus gaining you a few more clicks and a lot more dollars.</p>\n<h2>Investing in Virtual Assistant</h2>\n<p>Especially if you run a smaller business, sometimes it can feel like there just aren’t enough skilled hands to go around. One of the best ways to get that help without having to hire anyone else on and keeping your business small and intimate is by using the help of a virtual assistant. These are <a href=\"https://bloggerlocal.com/national/best-virtual-assistant-companies-va-services\">specialized people</a> who help by adding their own creative touches or by adding specialized coding knowledge and neither party has to leave the comfort of their own homes or offices because the help is virtual.</p>\n<p>In this cutthroat digital world, having everything to help your site stand out is one of the biggest advantages that you can have. AI, virtual assistants, and mobile-friendly web designs are just a few of the ways that you can make sure your online presence is as pronounced as it can possibly be. Go forth, have no fear, and conquer the e-jungle</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=SoGGt4WCWyc:knLicAUTeE8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=SoGGt4WCWyc:knLicAUTeE8:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=SoGGt4WCWyc:knLicAUTeE8:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=SoGGt4WCWyc:knLicAUTeE8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=SoGGt4WCWyc:knLicAUTeE8:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=SoGGt4WCWyc:knLicAUTeE8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=SoGGt4WCWyc:knLicAUTeE8:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/SoGGt4WCWyc\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["General"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-08-08 02:34:43","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"5 Top Reasons Content is Still King","pubDate":"2018-08-08 02:28:21","link":"http://feedproxy.google.com/~r/Devlounge/~3/eQGr5lVVh7I/5-top-reasons-content-is-still-king","guid":"http://www.devlounge.net/?p=11204","author":"Hermann Jay","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"Over and over year after year the “experts” will come out with predictions that tell us that content marketing is dead, blogging is a waste of time, and any smart business will abandon it right away. At the same time, businesses keep investing in content, and if they do things correctly, those businesses dominate their […]","content":"\n<p>Over and over year after year the “experts” will come out with predictions that tell us that content marketing is dead, blogging is a waste of time, and any smart business will abandon it right away. At the same time, businesses keep investing in content, and if they do things correctly, those businesses dominate their niche on Google.<span></span></p>\n<p>The thing those experts should tell us instead is that content and the type and demand for it change every year. The game changes from time to time, Google gets smarter, and users get pickier about what they want to see, hear, and read. But content is far from dead. In fact, content is still king and probably always will be.</p>\n<p>Any new business in almost any niche should <a href=\"http://shopify.com/domains\">get their own domain name</a>, get a host or self-host if possible, and once they have designed a site populate it with great, SEO optimized content. Here are the top five reasons why.</p>\n<h2>Google Wants Experts</h2>\n<p>The smarter Google gets, the smarter it wants websites to be. The same fluff articles that ranked five years ago won’t get the same attention today. Why? Because users also understand that fluff does not really answer their questions, and sometimes those questions can be really important to them.</p>\n<p>It has been a few years now since we got a full view of the Google site evaluator guidelines, and yet site after site ignores them. They offer the formula for ranking your site among the top ones on the web. The E.A.T. principle tells us Google wants Expertise, Authority, and Trustworthiness in a site. This means who wrote your content matters almost as much as what is in it</p>\n<p>However, the most important thing is that the sites they define as Your Money or Your Life sites (YMYL) are graded with an even harsher eye, and these are sites that deal with financial advice, medical advice, and any type of advice that could dramatically impact a user’s finances or health.</p>\n<p>Your company and you need to be seen as experts by Google and other search engines along with your potential customers. You show this expertise through content.</p>\n<h2>Links Still Matter</h2>\n<p>You also show your expertise through links. If relevant sites with good authority link to your site, Google still sees that as important. For instance, if you are a medical practice with an emphasis on certain medical research and the CDC links to your site as a reference in one of their articles, that link says a lot to Google.</p>\n<p>One link is not enough though. Google wants to see a pattern of links, and not just natural, organic content links. Those are important, but it is also important that you have paid links from advertising. <a href=\"http://www.devlounge.net/general/4-lessons-google-teaches-us-user-experience\">Google expects</a> you to pay for links in PPC ads, sponsored posts, and more. Any real business pays for marketing, and this is why even NOFOLLOW links matter: Google wants to rank real businesses, not just SEO savvy sites.</p>\n<p>As long as your backlink profile matters to your Google ranking, then content matters to. It is impossible to earn organic links unless you have some content that is worth linking too, and the best link building campaigns link to your blog as well as your home or product pages.</p>\n<p>Links matter, so content matters too. It is critical to the link building world.</p>\n<h2>Organic Traffic Comes from Search</h2>\n<p>Why does search ranking matter? Well, because organic traffic comes from search, and you can’t rank in all the categories you need to with simply a home page and a few product pages even if you are a large, national brand. Organic traffic follows search ranking, and search ranking is based on relevant content.</p>\n<p>Think of it this way. Google your favorite food dish. You will get several recipes on the front page, probably from big food sites like allrecipes.com or food.com. The traffic for that search goes to those sites. If people review the recipes poorly, they will drop in ranking. Note though that the traffic did not go to the allrecipes.com home page. Instead, it went to a specific page on that domain.</p>\n<p>While you might not have recipes, you might have a product, and on your blog, you may have a “how to” post about that product. Organic traffic will go to that post or the product page depending on how the user frames their search. Either way, they will buy your product, but it probably won’t be from a visit to your home page, and their choice will be influenced by your web content.</p>\n<h2>Social is the New Word of Mouth</h2>\n<p>It used to be that if you impressed a customer, they would tell one friend. If you ticked them off, they would tell ten. Now, either way they will tell thousands. The good news though is that if you have some great content, users will share that with their friends as well. The key is, you must have some kind of sharable content just like you need linkable content for link building.</p>\n<p>This means your content needs to follow the three E’s. It needs to be Entertaining, Engaging, and Educational. Those are the keys to content that gets shared and even goes viral. The more others spread the word for you, the better off you are, and the way they do that is through content.</p>\n<h2>The User is the Queen</h2>\n<p>If content is king, the user is the queen. And if the queen is not happy, no one is. Your website is all about user experience, and the user expects great content. They expect content that clearly answers their questions, helps them, or adds value to their lives in one way or another. No content? Many users will leave your site right away.</p>\n<p>Content is king still. Content matters to every aspect of your website development,<a href=\"https://moz.com/blog/google-removing-organic-traffic\"> organic traffic</a>, search ranking, link building, social shares and more. Anyone touting that content is dead is simply not paying attention or has an exceedingly rare situation. For most of us, content matters, content is king, and will be for the foreseeable future.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=eQGr5lVVh7I:WZ_iXgZ1YhQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=eQGr5lVVh7I:WZ_iXgZ1YhQ:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=eQGr5lVVh7I:WZ_iXgZ1YhQ:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=eQGr5lVVh7I:WZ_iXgZ1YhQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=eQGr5lVVh7I:WZ_iXgZ1YhQ:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=eQGr5lVVh7I:WZ_iXgZ1YhQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=eQGr5lVVh7I:WZ_iXgZ1YhQ:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/eQGr5lVVh7I\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Publishing","content is king"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-08-08 02:28:21","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"7 Strategies for Learning a New Programming Language Faster","pubDate":"2018-07-21 02:30:27","link":"http://feedproxy.google.com/~r/Devlounge/~3/Ct8VxY28O-M/7-strategies-for-learning-a-new-programming-language-faster","guid":"http://www.devlounge.net/?p=11200","author":"Hermann Jay","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"If you’ve spent the majority of your career as a programmer mastering a single coding language, you might be intimidated to learn a new one. Sure, all programming languages are rooted in similar logic, and learning a second language is much easier than starting from scratch, but you’ll still have to train your brain to […]","content":"\n<p>If you’ve spent the majority of your career as a programmer mastering a single coding language, you might be intimidated to learn a new one. Sure, all programming languages are rooted in similar logic, and learning a second language is much easier than starting from scratch, but you’ll still have to train your brain to think in different ways, breaking down complex problems using different methodologies. </p>\n<p>Still, learning a second (or third) language <a href=\"http://blog.thefirehoseproject.com/posts/2-1-learn-multiple-programming-languages/\">is valuable for your career</a>, giving you a bigger skillset you can use in different contexts, and granting you better problem-solving skills in the process.<span></span></p>\n<p>So what strategies can you use to learn that new language faster? </p>\n<h2>Learning a New Programming Language</h2>\n<p>Try using these strategies if you want to pick up those new skills as quickly as possible: </p>\n<ol>\n<li>Get plenty of sleep. Your lifestyle habits can have a significant impact on how fast and how efficiently you learn. Namely, getting enough sleep every night can help ensure that you’re working efficiently; in fact, professionals who get enough sleep are <a href=\"https://www.amerisleep.com/blog/sleep-impact-work-habits/\">1.5 times more likely to be satisfied with their performance</a>. On top of that, sleep plays a role in memory formation, so ample sleep could help you remember all those new syntax rules.</li>\n<li>Start playing with the code immediately. It’s tempting to brush up on as much theory as possible before getting your hands on the code and putting it to the test, but it’s better if you start playing with the code immediately, and throughout the learning process. Most of us <a href=\"https://en.wikipedia.org/wiki/Kinesthetic_learning\">learn best by doing</a>, and it’s the only way to make (and eventually correct) your own mistakes.</li>\n<li>Try coding by hand. It’s counterintuitive to code by hand, using pencil and paper. It takes more time and there’s no way to run your code to check whether it works or not. But writing code by hand will force you to pay closer attention to what you’re writing and will make you pay more attention to the details. Plus, you’ll have to think more critically about the code you’re writing, since you won’t have an easy way to check its functionality.</li>\n<li>Learn from different sources. If you can, try to get your knowledge from multiple sources. Going through an online tutorial is a good way to build your foundation, but other sources might draw your attention to other important fundamentals. If you draw on multiple sources, you’ll have a higher chance of making up for the weaknesses of your primary source, and you’ll get more exposure to the community.</li>\n<li>Talk to existing specialists. Speaking of exposure to the community, involve yourself in discussions related to your new programming language as often as possible. Forums like <a href=\"https://www.codeproject.com/\">CodeProject</a> and <a href=\"https://stackoverflow.com/\">Stack Overflow</a> are friendly to newcomers, but are also filled with experienced professionals who are more than willing to help you on your journey. Read old conversation threads, and don’t be afraid to ask questions.</li>\n<li>Take frequent breaks. Research shows that taking breaks when studying <a href=\"http://www.devlounge.net/ps%20impro\">helps improve your memory retention</a> and the total efficiency of your learning efforts. Though you may want to power through a tough challenge or the next chapter, it might be better to take 10 minutes to decompress before forging ahead.</li>\n<li>Stay on a consistent path. If you go more than a week between learning sessions, you’ll run the risk of losing some of the new knowledge and experience you’ve gained. If possible, stay on a daily or multiple-times-weekly schedule. The more consistent you are with learning new things and practicing your recently acquired skills, the better your retention will be.</li>\n</ol>\n<h2>Subsequent Languages</h2>\n<p>These strategies can be applied no matter how many programming languages you want to learn—and if you want to become a well-rounded coder, you should be <a href=\"https://www.fastcompany.com/3029274/whats-the-real-value-of-learning-more-than-one-programming-language\">at least fleetingly familiar with six</a> or more. Of course, the more languages you add to your skillset, the more time and effort it’s going to take to keep up with the latest developments in each of those fields. Make sure you’re prepared for the upkeep, as well as the initial learning process.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ct8VxY28O-M:P0cq11XwoAw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ct8VxY28O-M:P0cq11XwoAw:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ct8VxY28O-M:P0cq11XwoAw:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ct8VxY28O-M:P0cq11XwoAw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=Ct8VxY28O-M:P0cq11XwoAw:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ct8VxY28O-M:P0cq11XwoAw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=Ct8VxY28O-M:P0cq11XwoAw:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/Ct8VxY28O-M\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Languages","get sleep","how to learn programming language faster","learn from different sources","programming tips","start playing with code","talk to specialists"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-07-21 02:30:27","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"How has the evolution of web development benefited the health sector?","pubDate":"2018-07-20 12:57:09","link":"http://feedproxy.google.com/~r/Devlounge/~3/WaB6U5K3a_Y/how-has-the-evolution-of-web-development-benefited-the-health-sector","guid":"http://www.devlounge.net/?p=11196","author":"Hermann Jay","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"The health sector is one of the most crucial and important in all our lives. Wherever you are on the globe, from the US to Australia, you will be affected by it in some way. From visiting your local family doctor to attending hospital for more serious matters, health care is the industry that keeps […]","content":"\n<p>The health sector is one of the most crucial and important in all our lives. Wherever you are on the globe, from the US to Australia, you will be affected by it in some way. From visiting your local family doctor to attending hospital for more serious matters, health care is the industry that keeps us all in perfect shape. </p>\n<p>For anyone involved with the health sector on a professional level, it will be clear just what an impact technology has had on it over recent years. In truth, this is a sector that has always been at the cutting edge of developments by necessity, but the digital revolution of recent times has changed it greatly. It is no overstatement to say that the effects of internet and <a href=\"https://www.ncbi.nlm.nih.gov/books/NBK44714/\">web technology</a> have had a big influence on improving the way that treatments can be given and received. <span></span></p>\n<h2>What specific ways has web development improved health care?</h2>\n<p>When you look at how much web development has changed itself over the years, this is astounding enough. With fast applications able to handle more data and perform ever-more sophisticated functions, they have come a long way. This made them ideal partners for the health sector, where they have been able to improve how data on patients is stored and shared, among other things. </p>\n<p>Here are some key ways that the evolution of web development has benefited the health care sector: </p>\n<ul>\n<li>Better data storage – web development has allowed for ever-more powerful and efficient ways for patients’ records to be stored. Instead of old-fashioned paper records that could be lost or take weeks to arrive where needed, new web-based systems give doctors instant access to all your latest notes to help treat you safely. This kind of storage is also more secure due to the high level of cyber security around them.</li>\n<li>Improved diagnosis – one great advantage of web development evolving for medical professionals is how it helps them make a more accurate diagnosis. With the latest web and internet technology, they have access to experts and information from across the globe if they see a case that has them stumped. This sort of information sharing is fabulous for treating more and more illnesses across the globe.</li>\n<li>Greater access to health care – one problem for some people who live right out in the country is actually seeing a doctor in the first place. Even if you did have one nearby, what if you were too ill to travel and be seen? The continued evolution of web developments allows for you to access expert medical professionals via a video call on your PC or mobile device to solve this.</li>\n<li>Enhanced patient care – one superb advantage with the latest web-based medical systems is that they give a much better level of care to you as a patient. Very often, these systems can alert doctors to existing conditions automatically so that they aren’t missed or can be flagged up when a test level is dangerously low or high for immediate consideration.</li>\n<li>More space in the cloud – anyone who is involved with health care will know the huge amounts of data collected on patients as part of their treatment. The evolution of web-based cloud technology has proved invaluable here as it provides somewhere with the capacity for this data to be stored and analyzed. Trying to do all that on a PC’s hard drive would simply not be possible!</li>\n<h2>Why does the health sector need to be evolving in this way?</h2>\n<p>The simple answer is because the illnesses that it fights are evolving. If the health sector were to not take advantage of evolutions in web technology and other vital advances, then it would not be able to treat us in the most effective way. This can be seen in areas such as pharmaceutical drugs that are prescribed to patients. Pacira Pharmaceuticals, Inc. is a great example of innovation within health care to bring positive change. Vice-President Dr <a href=\"https://medium.com/@ErolOnel\">Erol Onel</a> helped the company develop and gain regulatory approval for a non-opioid pain drug that gives effective relief with none of the harmful side effects that opioids can have.</p>\n<h2>Web development is key to health care</h2>\n<p>As web development continues to push into new areas, the way that it can help the health sector will also grow. From web-based apps that can help scan or diagnose patients to others that give increased ways to analyze any data collected, the next-gen web applications within health are sure to prove an invaluable tool for any health professional to use. </p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=WaB6U5K3a_Y:UDWPtl7EgMI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=WaB6U5K3a_Y:UDWPtl7EgMI:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=WaB6U5K3a_Y:UDWPtl7EgMI:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=WaB6U5K3a_Y:UDWPtl7EgMI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=WaB6U5K3a_Y:UDWPtl7EgMI:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=WaB6U5K3a_Y:UDWPtl7EgMI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=WaB6U5K3a_Y:UDWPtl7EgMI:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/WaB6U5K3a_Y\" height=\"1\" width=\"1\" alt=\"\">\n</ul>\n","enclosure":{},"categories":["General","Webapps","better storage data","improved diagnosis","technology in health care","web technology"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-07-20 12:57:09","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Tips For Making Your BuddyPress Website Run Smoother","pubDate":"2018-07-11 13:38:03","link":"http://feedproxy.google.com/~r/Devlounge/~3/Ba79-Fkwd4Y/tips-for-making-your-buddypress-website-run-smoother","guid":"http://www.devlounge.net/?p=11192","author":"Hermann Jay","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"If you’ve been exploring different ways to launch a social network platform, you may have come across the name “BuddyPress.” BuddyPress is a WordPress plugin that its extends WordPress’ core functionality to incorporate social components. It allows users to do the following: Create profiles Monitor activity streams for social groups Receive notifications from groups and […]","content":"\n<p>If you’ve been exploring different ways to launch a social network platform, you may have come across the name “BuddyPress.” BuddyPress is a WordPress plugin that its extends WordPress’ core functionality to incorporate social components. It allows users to do the following: </p>\n<ul><il>Create profiles\n<li>Monitor activity streams for social groups</li>\n<li>Receive notifications from groups and friends</li>\n<li>Private message one another</li>\n<li>Interact via discussion forums</li>\n</il></ul>\n<p><span></span><br>\nDevelopers who want to build social networking sites can do so much easier with BuddyPress, as it eliminates many pf the bottlenecks associated with developing a site of this nature. Many people consider BuddyPress to be “social network in a box,” and it certain is much less expensive and comes with a lower learning curve than launching your own social network site from scratch. </p>\n<p>However, to make the most of your Buddypress site, you’ve got to ensure you’re running the plugin as efficiently as possible. Here are a few ways to make your Buddypress website operate more smoothly: </p>\n<h2>Optimize Your Speed</h2>\n<p>Speed is an iffy issue when it comes to running a BuddyPress site, and many users immediately notice that their website has slowed down significantly once they transitioned to a BuddyPress platform. You can double-check your website speed scores using on of these <a href=\"https://www.keycdn.com/blog/website-speed-test-tools/\">speed test tools</a>. The reason why your site might slow down is because the social networking functions on the BuddyPress architecture are database-driven, which means that, whenever you’re hosting, you may potentially run into a MySQL server speed issue. This is especially true is you share your hosting with other websites, as is the case with shared hosting. </p>\n<p>A strong <a href=\"https://www.dreamhost.com/hosting/vps/\">virtual private server</a> or dedicated server can help eliminate this issue. A virtual private server allows the website host to run their websites without sharing with other hosting tenants, which speeds up your site considerably. This even has the potential to increase your SEO: after all, site speed plays a major factor in user experience, and the better your user experience, the higher your search engine ranking. </p>\n<h2>Use A Content Delivery Network</h2>\n<p>If you plan on attracting users from around the world with your content, there’s no doubt that you’ll need a content delivery network (CDN). There are nearly 9 million websites using a CDN, and chances are, you’ve encountered a content delivery network within the last 24 hours. A CDN delivers web pages and web content to specific users, usually depending on location. If you were using a CDN for example, your website’s content would reside on multiple servers around the world, making it easier to distribute to end users. </p>\n<p>In the end, anyone searching for your content would receive it from the nearest server, effectively speeding up the entire process. And research has shown that websites that take more than three seconds to load can send the user over to another site. If you want your content available to everyone, at equal speeds, a CDN is necessary. </p>\n<h2>Pick the Right Theme</h2>\n<p>WordPress theme installation is slightly different when it comes to BuddyPress. Unlike a standard WordPress theme, BuddyPress comes with many functionalities that are not supported otherwise. A simple search for the <a href=\"https://athemes.com/collections/best-buddypress-wordpress-themes/\">best Buddypress themes</a> will yield hundreds of results, and each theme is designed to optimize the website as a social platform. A great BuddyPress theme creates a consistent experience for your site users: login pages, registration pages, and profile pages will all be optimized according to your design style preferences. </p>\n<p>For example, one of the more popular BuddyPress theme options is <a href=\"https://athemes.com/go/kleo\">KLEO</a>, which, in addition to providing a theme with all the bells and whistles necessary for a great WordPress site, it comes equipped with other tools especially unique to WordPress–like a BuddyPress profile search tool and the ability to add location-based features to your online community. And because it’s a multipurpose theme, you can also incorporate additional elements, like an online store or e-learning resource center. </p>\n<p>Other themes, like <a href=\"https://athemes.com/go/socialize\">Socialize</a>, make it easy to choose between four different layout styles and six different blog post styles, giving you ultimate flexibility. </p>\n<h2>Customize Your Profile &amp; Registration Forms</h2>\n<p>Currently, the core BuddyPress plugin does not allow you to customize user profile and registration forms. This can be an issue for people who are creating highly specific niche sites and want to know different things about their users. Fortunately, you can use a profile builder plugin that integrates well with BuddyPress. Plugins like <a href=\"https://wedevs.com/wp-user-frontend-pro/\">WP User Frontend Pro</a> have powerful profile building capabilities that allow you to fully customize how your users create their profiles.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ba79-Fkwd4Y:vzEVLVvLxc0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ba79-Fkwd4Y:vzEVLVvLxc0:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ba79-Fkwd4Y:vzEVLVvLxc0:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ba79-Fkwd4Y:vzEVLVvLxc0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=Ba79-Fkwd4Y:vzEVLVvLxc0:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Ba79-Fkwd4Y:vzEVLVvLxc0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=Ba79-Fkwd4Y:vzEVLVvLxc0:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/Ba79-Fkwd4Y\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Strategy","Tools","BuddyPress website","customize forms and profile","how to make your BuddyPress website run smoother","pick the right theme"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-07-11 13:38:03","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An SEO Expert’s Top Tips","pubDate":"2018-06-27 04:13:07","link":"http://feedproxy.google.com/~r/Devlounge/~3/D1FJMu8uRKk/top-strategy-tips-from-seo-expert","guid":"http://www.devlounge.net/?p=11180","author":"Richie KS","thumbnail":"http://www.devlounge.net/wp-content/uploads/2018/06/top-strategy-tips-from-seo-expert.jpg","description":"Search engine optimization continues to make a big difference in terms of a website’s ranking and visibility. Since everyone is online, making your business visible in the virtual world is very critical. With all the strategies you have in your marketing toolbox, the same will be rendered useless if you’re unfamiliar with the basics. It’s […]","content":"\n<p><a href=\"http://www.devlounge.net/top-strategy-tips-from-seo-expert-2\"><img class=\"alignnone size-full wp-image-11186\" src=\"http://www.devlounge.net/wp-content/uploads/2018/06/top-strategy-tips-from-seo-expert.jpg\" alt=\"\" width=\"1000\" height=\"714\" srcset=\"http://www.devlounge.net/wp-content/uploads/2018/06/top-strategy-tips-from-seo-expert.jpg 1000w, http://www.devlounge.net/wp-content/uploads/2018/06/top-strategy-tips-from-seo-expert-300x214.jpg 300w, http://www.devlounge.net/wp-content/uploads/2018/06/top-strategy-tips-from-seo-expert-640x457.jpg 640w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"></a>Search engine optimization continues to make a big difference in terms of a website’s ranking and visibility. Since everyone is online, making your business visible in the virtual world is very critical. With all the strategies you have in your marketing toolbox, the same will be rendered useless if you’re unfamiliar with the basics. It’s in fact very essential that a business owner should know how to use optimization to their business’ advantage.  If you want to get the most out from the benefits of SEO, here an <strong>SEO expert’s top tips</strong> that are worthy of considering from the very beginning.</p>\n<h3>1. Create well-written content</h3>\n<p>In this competitive world, you can actually write any content for your website. Unfortunately, that will never work when it comes to search engine optimization. In fact, you need to craft your content in a way that it can be made easily accessible to every user. Furthermore, accessible content isn’t only what you need for your SEO efforts to be successful. You have to achieve the right balance in terms of the quality and value of your content. This is because Google algorithms have the ability to distinguish poorly and well-written contents for all websites. Not only that but it can also detect unoriginal content that may affect your rankings in the long run. If you want to boost your traffic, stick with writing fresh and well-prepared content for your business website.</p>\n<h3>2. Right keywords</h3>\n<p>Contents without the right combination of keywords are meaningless because most people use keywords when searching for a particular information. In fact, it’s not just keywords but it should be long-tail keywords which are consist of four words or more. Because of the wider competition in the online market, having unique keywords can help your site stand out among the crowd. With long-tail keywords, users can get specific results of their searches.</p>\n<h3>3. Image optimization</h3>\n<p><strong> </strong>Users will not be enticed to visit your page if it appears to be plain and boring. For better search engine ranking, take full advantage of optimizing your site’s images by incorporating tags, titles and descriptions. Of course, make sure to only use original and high quality images to improve your SEO efforts.</p>\n<h3>4. Mobile optimization</h3>\n<p>With the latest technology trends recently, it’s no wonder if Google will have its mobile algorithm. And a result, more searches will be done on mobile devices than desktops. Thus to be on top of this growing trend, start working to make your website more mobile-friendly.</p>\n<h3>5. Blogging</h3>\n<p><strong> </strong>While blogging isn’t new in the digital marketing industry, it’s still something that you should never take lightly. Remember that content can go a long way in increasing your Google’s ranking – and blogging for instance opens up several opportunities to tackle and distribute relevant contents regularly. If you’re looking at maximizing your SEO strategy, then using the power of blogging can be very beneficial.</p>\n<h3>6. Backlinks</h3>\n<p><strong> </strong>Be more active in terms of getting natural backlinks because at the end of the day it can also drive traffic to your business website. The more backlinks you have, the better way of endorsing your site to a vast majority of online users.</p>\n<h3>7. Internal Linking</h3>\n<p>Don’t ever underestimate the power of internal linking. Take note that any site with an authority link can make your content more relevant in the search slides as long as your content is linked to it . So try adding internal links to optimize your page’s rankings.</p>\n<h3>8. Strong SEO strategy</h3>\n<p>Your SEO tactics will not work if you don’t have a strong and effective strategy in place for your business. Before worrying about the tactics, be sure to develop strategic goals that will provide you a real thought as to what you’re really trying to accomplish in the long run. As soon as you embark on your strategy, you can then chase the tactics you can use to achieve your marketing goals.</p>\n<h3>9. On-page SEO</h3>\n<p>On-page SEO can also help you reach the top of the search engines. You just need to put emphasis on your efforts by taking time to optimize your webpage efficiently. You can add more content and upgrade your site’s navigation features to achieve a good user experience. Remember that the time spent for optimizing your page is a time well-spent and well-deserved.</p>\n<h3>10. Website speed-up</h3>\n<p>Website loading page can affect your rankings dramatically. Like other factors, website speed up can increase your ranking and most importantly, your traffic. You just have to <a href=\"http://www.devlounge.net/general/site-speed-essential-2018\">improve your loading speed</a> to the point that users will not have to wait a little longer before the website becomes totally available. You can reduce your site’s loading time by resizing images.</p>\n<h3>11. Social media presence</h3>\n<p><a href=\"http://www.devlounge.net/social-media-influences-in-seo\"><img class=\"alignnone size-full wp-image-11187\" src=\"http://www.devlounge.net/wp-content/uploads/2018/06/social-media-influences-in-seo.jpg\" alt=\"\" width=\"1000\" height=\"726\" srcset=\"http://www.devlounge.net/wp-content/uploads/2018/06/social-media-influences-in-seo.jpg 1000w, http://www.devlounge.net/wp-content/uploads/2018/06/social-media-influences-in-seo-300x218.jpg 300w, http://www.devlounge.net/wp-content/uploads/2018/06/social-media-influences-in-seo-640x465.jpg 640w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"></a>SEO isn’t just about blogging, keywords and etc. It also covers activities coming from several social media platforms. At most, having a robust <a href=\"https://searchengineland.com/guide/what-is-social-media-marketing\">social media presence can be a good online marketing strategy</a> to look forward to. With thee rising popularity of social media nowadays, they have then become the best avenues to improve your site’s credibility. Moreover, users rely on social media channels to look for their favorite brand. Hence, it means that the more profiles you have, the more your business is exposed to a variety of audience.</p>\n<h3>12. Discipline</h3>\n<p>All your SEO tactics will be worthy of time, money and energy if you accomplish them with a strong sense of discipline. Essentially, you need to be disciplined in every aspect of what you do in order for you to be successful. For example, creating good contents and adhering to best practices require discipline. If you consider discipline as an important value in the business industry, then it’s best to avoid shortcuts and dangerous schemes to trick the system.</p>\n<h3>13. User engagement</h3>\n<p>Aside from social media channels, there are several ways whereby you can engage to your audience and prospect customers such as through contents, comments and more. And talking to them for instance, can help you get a sense of what’s important to them. When you’re able to have an idea of how they visualize the process, it’ll be easier for you to adjust your practices to make everything about your website more realistic on their end.</p>\n<h4>Conclusion</h4>\n<p>By following these SEO expert’s top tips and incorporating the same into your overall SEO marketing campaign, we hope we’re able to help in your endeavor to boost the performance of your website. As the digital setting continues to evolve, SEO practices also change over time. And having said that, it’s best if your business is always on top of the latest tips and practices and even asks assistance from a reputable SEO company like <a href=\"https://omegaseo.co/\">omegaseo.co</a> that’s considered expert in this industry.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=D1FJMu8uRKk:2CQTmZxjlYc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=D1FJMu8uRKk:2CQTmZxjlYc:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=D1FJMu8uRKk:2CQTmZxjlYc:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=D1FJMu8uRKk:2CQTmZxjlYc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=D1FJMu8uRKk:2CQTmZxjlYc:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=D1FJMu8uRKk:2CQTmZxjlYc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=D1FJMu8uRKk:2CQTmZxjlYc:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/D1FJMu8uRKk\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Strategy","search engines","seo tips","website performance"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-06-27 04:13:07","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"The Future of Online Education Depends On Web Developers","pubDate":"2018-06-16 08:12:43","link":"http://feedproxy.google.com/~r/Devlounge/~3/CLzKHZJ82Wk/the-future-of-online-education-depends-on-web-developers","guid":"http://www.devlounge.net/?p=11175","author":"Hermann Jay","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"There’s a reason websites like Udemy, Master Class, and Coursera are popular learning platforms despite their imperfections: they’re user-friendly. The process of registering for a course, accessing that course, and bookmarking segments is easy. Master Class, in particular, has an extremely user-friendly interface for communicating with other course participants. Although these platforms are intended for […]","content":"\n<p>There’s a reason websites like Udemy, Master Class, and Coursera are popular learning platforms despite their imperfections: they’re user-friendly. The process of registering for a course, accessing that course, and bookmarking segments is easy. Master Class, in particular, has an extremely user-friendly interface for communicating with other course participants. </p>\n<p>Although these platforms are intended for simple instruction, online universities can learn much from the way they work. The interface designs are modern, smooth, and intuitive. The <a href=\"http://www.devlounge.net/design/7-must-have-free-fabulous-gui-vectors\">graphics are pixel-perfect</a>, and modules are indexed within a clickable navigation system. Compared to these learning platforms, university platforms are due for an upgrade.<span></span></p>\n<p>It’s well known that almost all college websites need an upgrade. For some reason, college websites are some of the most neglected sites. This diagram humorously, yet truthfully, describes why <a href=\"https://www.huffingtonpost.com/2010/08/04/why-college-websites-suck_n_670018.html\">college websites need a better design</a> strategy: what people come for is rarely found on the home page. Unfortunately, online learning platforms can be just as frustrating.</p>\n<h2>Online learning has evolved, but hasn’t arrived – yet</h2>\n<p>Since the mid-2000s, most community colleges and universities have offered online classes to students. In the beginning, these class structures were basic. Students would join a designated Yahoo! group to collaborate with others, and the teacher would email all students their assignments for the week. Or, the class syllabus and assignments would be posted on the school’s website. </p>\n<p>As online courses gained popularity, the standard class format evolved. Some schools, like community colleges, stuck with the discussion group format. Then online universities started popping up, like the University of Phoenix. </p>\n<p>Instead of relying on existing software, online universities launched their own custom learning platforms. These custom platforms were intended to be easy to use. Although these platforms have evolved and are easier to use, they still seem to be missing two things: one-on-one help and live interaction.</p>\n<h2>It’s time for online learning platforms 2.0</h2>\n<p>Formerly, the closest you could get to live interaction with an instructor was a pre-recorded video of the teacher giving a lesson to their live students. This has changed with updated video conferencing technology, and the introduction of something called the SMART board. </p>\n<p>No, a SMART board isn’t a whiteboard you can program to lock your doors or do your dishes. As <a href=\"https://ivci.com/bloglist/collaboration-tools-education/\">collaboration experts at IVCi explain</a>, “the SMART board is an interactive whiteboard, aimed at providing unique presentations and engaging students.” They explain that the SMART board is connected to the instructor’s computer in real-time, allowing students to view, share, and store documents for later. You can even share notes digitally. This component should be integrated into every online learning platform.</p>\n<h2>A better design means teachers have time for students</h2>\n<p>The absence of one-on-one help in online environments may be a symptom of a poorly programmed platform. It’s understandably exhausting for a teacher to sort through an inbox full of messages from hundreds of students. They need to open and read each message to find out if it needs a response. </p>\n<p>Instead of that method, online learning platforms should provide an automated system that identifies what a student needs, and directs them to the proper channel. For instance, within each module, there should be an option to request one-on-one help. </p>\n<p>Then, there should be a progression of questions for students to answer, designed to filter requests, similar to the way self-help platforms work. This would greatly reduce the amount of time teachers need to spend sifting through messages, which would free up their time to offer personal help to those in need.</p>\n<h2>Will you build the next popular online learning platform?</h2>\n<p>If you’re a developer with an interest in supporting online learning, consider building a learning platform that is truly user-centric and user-friendly. The right project could end up being the go-to platform for all universities, and designers would jump at the chance to build and sell their themes. Such a project would bring simplicity and consistency to an industry in need.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=CLzKHZJ82Wk:v6bPlQR9dVg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=CLzKHZJ82Wk:v6bPlQR9dVg:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=CLzKHZJ82Wk:v6bPlQR9dVg:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=CLzKHZJ82Wk:v6bPlQR9dVg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=CLzKHZJ82Wk:v6bPlQR9dVg:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=CLzKHZJ82Wk:v6bPlQR9dVg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=CLzKHZJ82Wk:v6bPlQR9dVg:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/CLzKHZJ82Wk\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Jobs","Strategy","online learning for web developers","online learning platforms","web developers","web-design"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-06-16 08:12:43","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"People Gravitate Towards Colourful Banners","pubDate":"2018-03-29 06:23:50","link":"http://feedproxy.google.com/~r/Devlounge/~3/igssYmuGqzo/people-gravitate-towards-colourful-banners","guid":"http://www.devlounge.net/?p=11168","author":"Hermann Jay","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"There are a lot of elements in a banner. You should focus on every aspect of the banner. Regardless of your chosen text and images though, make sure the banners have a splash of colour. Studies have revealed that people gravitate more towards exhibition banners that are colourful. This makes them feel interested in finding […]","content":"\n<p>There are a lot of elements in a banner. You should focus on every aspect of the banner. Regardless of your chosen text and images though, make sure the banners have a splash of colour. Studies have revealed that people gravitate more towards <a href=\"https://www.rollerbannersuk.com/pop-up-and-exhibition-stands/\">exhibition banners</a> that are colourful. This makes them feel interested in finding out more information about the business. </p>\n<p>Banners that are plain, dull and boring just drive people away. They will glance at it before they move to the next banner. If your banners are placed next to many other banners, it would be a wasted opportunity. This is true especially if you are attending big events. There are a lot of companies who are joining these events and they are also using banners and display stands. Your goal is to stand out when placed next to them. <span></span></p>\n<h2>Attention catcher</h2>\n<p>The good thing about colours is that they immediately catch attention. People will take a second look at something that looks really interesting. It does not guarantee that you will be immediately popular, but at least you can get their attention. They might keep on looking for information once they realise that the company could be useful to them or the products are good. </p>\n<h2>Perfect for everyone</h2>\n<p>Colourful images are soothing to the eyes. People feel relaxed when seeing colourful banners. They exude joy. This makes them feel really interested in buying. Kids also love colourful images. They might convince their parents to buy what they see on the banners if they were attracted by the colours. </p>\n<h2>The perfect balance</h2>\n<p>Although colours can be amazing in a banner, you should also <a href=\"http://www.designs.net/blog/2016/09/23/12-tips-for-designing-the-perfect-effective-web-banner/\">understand the elements of design</a>. You can’t just overwhelm the banners with colours. Otherwise, they will be too much for people to look at. You should also make use of contrast so that the text can be easily seen. Everything has to be in moderation so that the information you want people to focus on will be highlighted. </p>\n<h2>Work with experts</h2>\n<p>Ultimately, you need the right people to help you in <a href=\"http://www.devlounge.net/general/make-a-unique-multi-layered-web-banner-using-photoshop\">designing the banners</a>. Find banner printing companies that have years of experience in the business. They will make sure that the final banner looks amazing. They also know how to deal with every element so that the banners will be appealing, but not overwhelming. </p>\n<p>Once you are ready, you can have the banners printed. Find out if people respond well to your banner. If they don’t, you should change it and design a new one. You should also change information if you think it is outdated. Most of all, you must give these posters some time before they can really make a huge boost to your business. </p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=igssYmuGqzo:3r-vy2wJ0C4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=igssYmuGqzo:3r-vy2wJ0C4:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=igssYmuGqzo:3r-vy2wJ0C4:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=igssYmuGqzo:3r-vy2wJ0C4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=igssYmuGqzo:3r-vy2wJ0C4:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=igssYmuGqzo:3r-vy2wJ0C4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=igssYmuGqzo:3r-vy2wJ0C4:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/igssYmuGqzo\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Design","Strategy","banner design tips","design tips","elements of design","how to create captivating banners"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-03-29 06:23:50","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Tips on Picking the Right Help Desk Solution That Works for Your Business","pubDate":"2018-03-21 14:09:08","link":"http://feedproxy.google.com/~r/Devlounge/~3/Bz3a-IXdWN0/tips-on-picking-the-right-help-desk-solution-that-works-for-your-business","guid":"http://www.devlounge.net/?p=11159","author":"Hermann Jay","thumbnail":"http://www.devlounge.net/wp-content/uploads/2018/03/workstation-405747_960_720.jpg","description":"Anyone who’s had to spearhead a medium to large sized business will tell you that one of the biggest reasons it stays afloat is because of an effective IT department. So many things can go wrong in a given day that could end up putting a dent in your overall productivity, but having the right […]","content":"\n<p>Anyone who’s had to spearhead a medium to large sized business will tell you that one of the biggest reasons it stays afloat is because of an effective IT department. So many things can go wrong in a given day that could end up putting a dent in your overall productivity, but having the right kind of support structure can ensure that your business continues to run like nothing ever happened. For this type of situation, a <a href=\"https://www.sysaid.com/\">helpdesk</a> program is a very effective platform to use as the baseline for the entire structure of your IT department.</p>\n<h2>Will any help desk solution do?</h2>\n<p>If that were the case then life would certainly be much easier. Unfortunately, not all helpdesk software solutions were created completely equal. All of them have their pros and cons, and it’s up to you to make the decision based on what you feel is most important for your company. That said, there are some things you can watch out for to make your search for the perfect helpdesk much easier.<span></span></p>\n<p><img src=\"http://www.devlounge.net/wp-content/uploads/2018/03/workstation-405747_960_720.jpg\" alt=\"\" width=\"480\" height=\"360\" class=\"aligncenter size-large wp-image-1548\"></p>\n<h2>Going back to basics</h2>\n<p>A helpdesk will have advanced features that will no doubt be a great boon to your company – but the question is can it do the basics exactly the way it needs to? The basics include managing the accounts of your employees and having simple and quick responses to any little issue that might pop up, such as requiring the reset of a password. If the helpdesk still requires the intervention of an admin to accomplish this task, then it <a href=\"https://www.huffingtonpost.com/heidi-murphy/five-reasons-to-outsource_b_3957805.html\">isn’t as efficient as it makes itself out to be</a>. Always keep the basics in mind when you’re trying to look for the best program solution for your business.</p>\n<h2>The ability to track assets throughout your business platform</h2>\n<p>While this is something that all helpdesk programs claim to have, the only way to figure out if it actually walks the walk would be for you to try it yourself. Fortunately, many of the quality services being offered online have a free trial, allowing you to figure out if it can accomplish these tasks to your liking. You and your employees need to be comfortable with the software you’re working on – otherwise, <a href=\"https://www.forbes.com/sites/centurylink/2016/12/01/which-it-services-should-be-managed/\">the helpdesk program</a> will have been a wasted venture.</p>\n<p>While it isn’t too difficult to tell the difference between a quality helpdesk program and a shoddy one, it’s still better to be safe than sorry. Simply keeping the above pointers in mind while going through the motions will allow you to quickly figure out whether the program is worth your time and money or not. Don’t be satisfied with a single good option, always have alternatives available and keep testing until you’re absolutely certain about your decision.</p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Bz3a-IXdWN0:nJ3RC0p3DQY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Bz3a-IXdWN0:nJ3RC0p3DQY:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Bz3a-IXdWN0:nJ3RC0p3DQY:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Bz3a-IXdWN0:nJ3RC0p3DQY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=Bz3a-IXdWN0:nJ3RC0p3DQY:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=Bz3a-IXdWN0:nJ3RC0p3DQY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=Bz3a-IXdWN0:nJ3RC0p3DQY:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/Bz3a-IXdWN0\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Strategy","business platform","helpdesk program","helpdesk solution","helpdesk solution for business","track assets"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-03-21 14:09:08","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Incorporating a Digital Marketing Strategy into Your Web Design","pubDate":"2018-03-16 08:11:51","link":"http://feedproxy.google.com/~r/Devlounge/~3/TXptHYjxCKI/incorporating-a-digital-marketing-strategy-into-your-web-design","guid":"http://www.devlounge.net/?p=11155","author":"Hermann Jay","thumbnail":"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA","description":"Web designers looking to grow their business or increase their value when working in a larger organization know the value of understanding strategy. Hard skills are important, but understanding why things are done a certain way, what’s worked in the past and why, and where things are headed in the future, can help you provide […]","content":"\n<p>Web designers looking to grow their business or increase their value when working in a larger organization know the value of understanding strategy. Hard skills are important, but understanding why things are done a certain way, what’s worked in the past and why, and where things are headed in the future, can help you provide more value to clients and build your business or climb the ranks within a larger organization.</p>\n<p>Digital marketing strategy is an important area to focus on when it comes to providing value to clients. Their interest in hiring web designers is to grow their businesses and understanding digital marketing strategies and to communicate them to your clients will help you explain why your work and ideas are important, how they benefit the client, and why they’re worth more. Here are five areas of digital marketing to introduce clients to that will prove your worth.<span></span></p>\n<h2>Machine-readable text</h2>\n<p>Your clients may already be aware of the value of search engine optimization (SEO). If they are, you should focus on how your web design supports this. If they’re not, you can explain that search engines need to be able to understand what’s on their website to help searchers (their customers) find it. A good SEO web design encourages best practices and introduces appropriate tags where content isn’t search engine friendly, translating graphic content like <a href=\"http://www.devlounge.net/design/5-tips-ensure-web-design-video-friendly\">videos or photos</a> into something that supports search discovery.</p>\n<h2>User-generated content</h2>\n<p>Incorporating user-generated content into websites is a growing trend in online marketing. It provides social proof that the brand delivers a product that is desirable, while also creating a sense of authenticity, transparency, and trustworthiness. Web designers can support this strategy by introducing it to clients and offering designs and API integrations to place pre-selected or auto-refreshing user-generated content.</p>\n<h2>Social media integration</h2>\n<p>On a related note, social media integrations, in general, are an increasingly valuable digital marketing strategy. There are a variety of approaches, including installing smart sharing tools that craft suggested content including images and text for visitors to share, linking to accounts to encourage new followers, and incorporating APIs that display a social media feed onsite in a way that supports the overall brand look and feel. Most clients will have at least one channel that they’ve invested in or are working on growing. Help them close the circle by connecting their website with their social media efforts to ensure maximum value and return on effort.</p>\n<h2>Functional optimization</h2>\n<p>A significant part of any digital marketing strategy should be to make the online experience as seamless for the visitor/customer as possible. Prove your value to your clients by explaining how your work makes their customers able to <a href=\"https://blog.templatetoaster.com/web-design-digital-marketing-strategy/\">load the site more quickly</a>, navigate it more easily, and fully appreciate the experience on every device and browser. Sites need to be mobile optimized, responsive, and up-to-date in design and coding choices. Visitors can spot a tired looking design, and have little patience for pages that load slowly or not at all. Offering a better admin/backend experience for clients is another area that can make a big difference, especially if uploading content is a task shared by many in the organization.</p>\n<h2>Conversion-oriented structure</h2>\n<p>Then take it to the next level by collaborating with your client to support their content strategy and conversion goals. Discuss how the digital property will support their goals, whether that’s through e-commerce, educational material, content marketing, or another strategy. Then craft a site that supports the marketing or sales funnel and carries visitors toward a target goal like a first contact, download, share, or purchase. Sometimes this means more straightforward coding and fewer bells and whistles, rather than more, to avoid taking attention away from the most important things.</p>\n<p>You’ll be able to offer more value to your clients by understanding what will most help their business. Digital marketing is a great continuing education choice for web designers, and you can open up <a href=\"https://www.bryantstratton.edu/degrees/associate-degrees\">various career options</a> with an associate degree or other specialist program.</p>\n<p>Grow your career and make the jump from a service provider constantly trying to interpret and actuate client instructions, to a valued partner and specialist professional. Understanding what best supports your clients’ interests from a strategic marketing perspective, in addition to having a solid foundation in design or coding solutions, can help you stand out from the crowd, provide true value, and grow your business with past customers who can’t stop raving about how much of a difference you made for them. Plus, when you’re providing all that expertise and value, you’ll be more than justified in raising your rates. </p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=TXptHYjxCKI:_J9xFS4e6qs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=yIl2AUoC8zA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=TXptHYjxCKI:_J9xFS4e6qs:dnMXMwOfBR0\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=dnMXMwOfBR0\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=TXptHYjxCKI:_J9xFS4e6qs:7Q72WNTAKBA\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?d=7Q72WNTAKBA\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=TXptHYjxCKI:_J9xFS4e6qs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=TXptHYjxCKI:_J9xFS4e6qs:D7DqB2pKExk\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/Devlounge?a=TXptHYjxCKI:_J9xFS4e6qs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Devlounge?i=TXptHYjxCKI:_J9xFS4e6qs:V_sGLiPBpWU\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/Devlounge/~4/TXptHYjxCKI\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["Design","Strategy","digital marketing","functional optimization","incorporating digital marketing in web design","social media integration","web-design"],"color":"dodgerblue","category":"Devlounge - Homepage","date":"2018-03-16 08:11:51","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"”En kvarts miljard vuxna är utestängda från demokratin”","pubDate":"2018-09-08 12:11:36","link":"https://www.dn.se/nyheter/varlden/en-kvarts-miljard-vuxna-ar-utestangda-fran-demokratin/","guid":"https://www.dn.se/nyheter/varlden/en-kvarts-miljard-vuxna-ar-utestangda-fran-demokratin/","author":"Anders Bolling","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/c19034fb-2ebb-4d5a-abef-cce1ca5dde4e/bigOriginal.JPG?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg","description":"För att ta del av en valkampanj fullt ut måste man kunna läsa. En kvarts miljard unga och vuxna kan fortfarande inte det. Världsbanken talar om en ”inlärningskris”. – Läskurser i östra Afrika får deltagarna att inse att det finns mänskliga rättigheter, säger den svenska arrangören, Hélène Boëthius.","content":"För att ta del av en valkampanj fullt ut måste man kunna läsa. En kvarts miljard unga och vuxna kan fortfarande inte det. Världsbanken talar om en ”inlärningskris”. – Läskurser i östra Afrika får deltagarna att inse att det finns mänskliga rättigheter, säger den svenska arrangören, Hélène Boëthius.","enclosure":{"link":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/c19034fb-2ebb-4d5a-abef-cce1ca5dde4e/bigOriginal.JPG?interpolation=lanczos-none&amp;downsize=1000:*&amp;output-quality=80&amp;output-format=jpeg","type":"image/jpeg","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/c19034fb-2ebb-4d5a-abef-cce1ca5dde4e/bigOriginal.JPG?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg"},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 12:11:36","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Helikopter i Nepal kraschade in i bergvägg","pubDate":"2018-09-08 11:58:41","link":"https://www.dn.se/nyheter/varlden/helikopter-i-nepal-kraschade-in-i-bergvagg/","guid":"https://www.dn.se/nyheter/varlden/helikopter-i-nepal-kraschade-in-i-bergvagg/","author":"TT","thumbnail":"","description":"Den nepalesiska helikoptern var på väg mot huvudstaden Katmandu med sju personer ombord när den plötsligt förlorade kontakt med flygledningen. Minst fem personer omkom när den kraschade in i en bergvägg.","content":"Den nepalesiska helikoptern var på väg mot huvudstaden Katmandu med sju personer ombord när den plötsligt förlorade kontakt med flygledningen. Minst fem personer omkom när den kraschade in i en bergvägg.","enclosure":{},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 11:58:41","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"50-tal äldre kvinnor markerade mot nazister i Ludvika","pubDate":"2018-09-08 11:55:11","link":"https://www.dn.se/nyheter/sverige/50-tal-aldre-kvinnor-markerade-mot-nazister-i-ludvika/","guid":"https://www.dn.se/nyheter/sverige/50-tal-aldre-kvinnor-markerade-mot-nazister-i-ludvika/","author":"Adam Svensson","thumbnail":"","description":"Ett 50-tal äldre kvinnor omringade nazistiska NMR i Ludvika på lördagen. Polisen avvisade kvinnorna från platsen. – Det gick lugnt tillväga, men polisen bedömde att det var risk för ordningsstörning, säger Christina Hallin, presstalesperson vid polisen i Bergslagen.","content":"Ett 50-tal äldre kvinnor omringade nazistiska NMR i Ludvika på lördagen. Polisen avvisade kvinnorna från platsen. – Det gick lugnt tillväga, men polisen bedömde att det var risk för ordningsstörning, säger Christina Hallin, presstalesperson vid polisen i Bergslagen.","enclosure":{},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 11:55:11","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Anna-Lena Laurén: I Ryssland tar man konjaken före maten och spelar ”Dallas”-musik vid skolstarten","pubDate":"2018-09-08 11:51:15","link":"https://www.dn.se/nyheter/anna-lena-lauren-i-ryssland-tar-man-konjaken-fore-maten-och-spelar-dallas-musik-vid-skolstarten/","guid":"https://www.dn.se/nyheter/anna-lena-lauren-i-ryssland-tar-man-konjaken-fore-maten-och-spelar-dallas-musik-vid-skolstarten/","author":"Anna-Lena Laurén","thumbnail":"","description":"I början av veckan gjorde jag ett reportage från den ryska skolstarten. Skolgården var full med festklädda barn, deras syskon, föräldrar, morföräldrar och farföräldrar. De sistnämnda skydde inga medel för att inte missa en glimt av sina barnbarn. Jag höll på att bli nermejad. ","content":"I början av veckan gjorde jag ett reportage från den ryska skolstarten. Skolgården var full med festklädda barn, deras syskon, föräldrar, morföräldrar och farföräldrar. De sistnämnda skydde inga medel för att inte missa en glimt av sina barnbarn. Jag höll på att bli nermejad. ","enclosure":{},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 11:51:15","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Egyptisk domstol dömer 75 till döden","pubDate":"2018-09-08 11:11:05","link":"https://www.dn.se/nyheter/varlden/egyptisk-domstol-domer-75-till-doden/","guid":"https://www.dn.se/nyheter/varlden/egyptisk-domstol-domer-75-till-doden/","author":"TT","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/aec1ac9b-2754-45bb-b1ca-f1c5d21db301/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg","description":"En egyptisk domstol har dömt 75 personer till döden genom hängning för inblandning i protester vid Rabaa al-Adawiya-moskén i Egyptens huvudstad Kairo 2013.","content":"En egyptisk domstol har dömt 75 personer till döden genom hängning för inblandning i protester vid Rabaa al-Adawiya-moskén i Egyptens huvudstad Kairo 2013.","enclosure":{"link":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/aec1ac9b-2754-45bb-b1ca-f1c5d21db301/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=1000:*&amp;output-quality=80&amp;output-format=jpeg","type":"image/jpeg","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/aec1ac9b-2754-45bb-b1ca-f1c5d21db301/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg"},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 11:11:05","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Man föll från hus i Stockholm – två gripna","pubDate":"2018-09-08 10:31:50","link":"https://www.dn.se/sthlm/man-foll-fran-hus-i-stockholm-tva-gripna/","guid":"https://www.dn.se/sthlm/man-foll-fran-hus-i-stockholm-tva-gripna/","author":"TT","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/7f28760f-b623-4cea-a592-eac6f3ecc433/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg","description":"Under lördagsmorgonen fick SOS Alarm in ett samtal om en man som fallit från ett flerfamiljshus på Södermalm i Stockholm.","content":"Under lördagsmorgonen fick SOS Alarm in ett samtal om en man som fallit från ett flerfamiljshus på Södermalm i Stockholm.","enclosure":{"link":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/7f28760f-b623-4cea-a592-eac6f3ecc433/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=1000:*&amp;output-quality=80&amp;output-format=jpeg","type":"image/jpeg","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/7f28760f-b623-4cea-a592-eac6f3ecc433/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg"},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 10:31:50","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Bajen-legendaren: ”Idag hade det blivit världens rubriker”","pubDate":"2018-09-08 10:00:00","link":"https://www.dn.se/sport/bajen-legendaren-idag-hade-det-blivit-varldens-rubriker/","guid":"https://www.dn.se/sport/bajen-legendaren-idag-hade-det-blivit-varldens-rubriker/","author":"Johan Esk","thumbnail":"","description":"Här är Johan Esks elva vecka 36. En sammanfattning i kortbitar över sportveckan som gått.","content":"Här är Johan Esks elva vecka 36. En sammanfattning i kortbitar över sportveckan som gått.","enclosure":{},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 10:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Johan Esk: Idrotten bryr sig om miljön lika lite som politiker bryr sig om idrott","pubDate":"2018-09-08 10:00:00","link":"https://www.dn.se/sport/johan-esk-idrotten-bryr-sig-om-miljon-lika-lite-som-politiker-bryr-sig-om-idrott/","guid":"https://www.dn.se/sport/johan-esk-idrotten-bryr-sig-om-miljon-lika-lite-som-politiker-bryr-sig-om-idrott/","author":"Johan Esk","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/7/2ae3aa66-a64d-42b8-b26a-67ccc36128b0/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg","description":"Politikerna har inför valet brytt sig lika lite om idrottsrörelsen som idrottsrörelsen bryr sig om en av valets huvudfrågor. Miljön.","content":"Politikerna har inför valet brytt sig lika lite om idrottsrörelsen som idrottsrörelsen bryr sig om en av valets huvudfrågor. Miljön.","enclosure":{"link":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/7/2ae3aa66-a64d-42b8-b26a-67ccc36128b0/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=1000:*&amp;output-quality=80&amp;output-format=jpeg","type":"image/jpeg","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/7/2ae3aa66-a64d-42b8-b26a-67ccc36128b0/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg"},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 10:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Hédi Fried och Stina Wirsén gör barnbok om Förintelsen","pubDate":"2018-09-08 09:58:43","link":"https://www.dn.se/kultur-noje/hedi-fried-och-stina-wirsen-gor-barnbok-om-forintelsen/","guid":"https://www.dn.se/kultur-noje/hedi-fried-och-stina-wirsen-gor-barnbok-om-forintelsen/","author":"TT","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/c5e7ac0c-4f18-45af-8e70-bfe47f3cf7f4/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg","description":"Illustratören Stina Wirsén gör en barnbok tillsammans med Hédi Fried. \"Historien om Bodri\" bygger på Hédi Frieds egen uppväxt och erfarenheter av Förintelsen.","content":"Illustratören Stina Wirsén gör en barnbok tillsammans med Hédi Fried. \"Historien om Bodri\" bygger på Hédi Frieds egen uppväxt och erfarenheter av Förintelsen.","enclosure":{"link":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/c5e7ac0c-4f18-45af-8e70-bfe47f3cf7f4/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=1000:*&amp;output-quality=80&amp;output-format=jpeg","type":"image/jpeg","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/c5e7ac0c-4f18-45af-8e70-bfe47f3cf7f4/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg"},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 09:58:43","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Fyra av tio bönder lider stor foderbrist","pubDate":"2018-09-08 09:36:16","link":"https://www.dn.se/ekonomi/fyra-av-tio-bonder-lider-stor-foderbrist/","guid":"https://www.dn.se/ekonomi/fyra-av-tio-bonder-lider-stor-foderbrist/","author":"TT","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/7b185985-293f-40b4-8d76-f77396f89ec5/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg","description":"Mer än hälften av spannmålsskörden har torkat bort i sommar. Det uppger 48 procent av landets bönder, enligt en enkätundersökning från LRF. Fyra av tio lider nu stor foderbrist.","content":"Mer än hälften av spannmålsskörden har torkat bort i sommar. Det uppger 48 procent av landets bönder, enligt en enkätundersökning från LRF. Fyra av tio lider nu stor foderbrist.","enclosure":{"link":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/7b185985-293f-40b4-8d76-f77396f89ec5/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=1000:*&amp;output-quality=80&amp;output-format=jpeg","type":"image/jpeg","thumbnail":"https://cached-images.bonnier.news/cms30/UploadedImages/2018/9/8/7b185985-293f-40b4-8d76-f77396f89ec5/bigOriginal.jpg?interpolation=lanczos-none&amp;downsize=151%3A*&amp;output-quality=80&amp;output-format=jpeg"},"categories":[],"color":"rgb(244, 0, 14)","category":"Nyheter","date":"2018-09-08 09:36:16","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"How GitHub Removed jQuery From Their Frontend","pubDate":"2018-09-07 00:00:00","link":"https://javascriptweekly.com/issues/402","guid":"https://javascriptweekly.com/issues/402","author":"","thumbnail":"https://copm.s3.amazonaws.com/1a3a6973.png","description":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#402 — September  7, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/52510/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n      <p>Apologies if you notice today's issue is a little lower tempo than usual. We have some great things coming up, including more interviews like Dr. Axel's in <a href=\"https://javascriptweekly.com/link/52527/rss\">issue 399</a>, but today I've been struck by a sickness bug 😷 and have struggled to even get this far. To a better next week! 🙂<br><span><em>— Peter Cooper, editor</em></span></p>\n    </td></tr></table>\n<div></div>\n\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52511/rss\">How GitHub Removed jQuery From Their Frontend</a></span> — GitHub has just been able to drop jQuery as a dependency of the frontend code for GitHub.com. This transition has taken years and here’s what they’ve learnt and what libraries have replaced it.</p>\n  <p>GitHub Engineering </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52528/rss\">Ky: A Tiny, Elegant HTTP Client for Browsers Based on Fetch</a></span> — A new HTTP client library for the browser from one man module machine Sindre Sorhus. This one essentially makes the Fetch API tidier to use as shown in the <a href=\"https://javascriptweekly.com/link/52529/rss\">demo code</a>.</p>\n  <p>Sindre Sorhus </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/52512/rss\"><img src=\"https://copm.s3.amazonaws.com/1a3a6973.png\" width=\"174\" height=\"75\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/52512/rss\">Angular, React or Vue?</a></span> — How do you choose one JavaScript framework over another for your next web application? Our new whitepaper gives insight into the current state of Angular, React and Vue and how they compare against a comprehensive set of criteria. <a href=\"https://javascriptweekly.com/link/52512/rss\">Download now</a>.</p>\n  <p>Progress Kendo UI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52530/rss\">Take the 'State of JavaScript 2018' Survey</a></span> — Sacha Greif’s popular survey returns, aiming to see what tools and technologies in the JavaScript space that developers are using, happy with and excited about. Results are expected in November and we’ll share them then.</p>\n  <p>Sacha Greif </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52531/rss\">A Tour of JavaScript Timers on the Web</a></span> — Want to get your head around <code>setTimeout</code> vs <code>setInterval</code> vs <code>setImmediate</code> vs  <code>requestAnimationFrame</code> and others? This will help.</p>\n  <p>Nolan Lawson </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52532/rss\">Sqorn: A Fast, Composable SQL Query Builder</a></span> — Uses a functional style that models query compilation as a series of transformations and also uses ES6 template literals in an interesting way. Worth checking out. <a href=\"https://javascriptweekly.com/link/52533/rss\">Full tutorial here.</a></p>\n  <p>Sufyan Dawoodjee </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52513/rss\">JavaScript Developer at X-Team (Remote)</a></span> — We help our developers keep learning and growing every day. Unleash your potential. Work from anywhere. <a href=\"https://javascriptweekly.com/link/52513/rss\">Join X-Team</a>.</p>\n  <p>x-team </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52514/rss\">Find A JavaScript Job Through Vettery</a></span> — Create a profile to connect with inspiring companies seeking JavaScript devs.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Opinions</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52534/rss\">Why Async: How JavaScript Interacts with the Real World</a></span> — A preview of an as yet unreleased course, but even these three pages might help you out if you’re still learning how promises and async/await can improve your code.</p>\n  <p>Frontend Armory </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52535/rss\">Using the Speech Synthesis Interface of the Web Speech API</a></span> — Get your browser to speak back to you.</p>\n  <p>Manuel Wieser </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52517/rss\">How to Build a Multiplayer JavaScript VR Game</a></span> — Combine A-Frame, PubNub, and WebVR to launch a browser-based VR game.</p>\n  <p>PubNub <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52515/rss\">Making GraphQL Client Requests in Node (and the Browser) using graphql.js</a></span></p>\n  <p>Hugo Di Francesco </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52516/rss\">How to Use Media Queries from JavaScript</a></span> — The <code>matchMedia</code> method is the key.</p>\n  <p>Craig Buckler </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52537/rss\">Goodbye Redux</a></span> — <em>“A complete breakdown on why we needed Redux in the past, and why we don’t any more.”</em></p>\n  <p>Jack Scott </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52536/rss\">Reduce JavaScript Payloads with Code Splitting</a></span></p>\n  <p>Google Developers </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52538/rss\">To Grok A Mockingbird: Using Recursive Combinators to Enhance Functional Composition</a></span> — One for the functional programming fans :-)</p>\n  <p>Reg Braithwaite </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52520/rss\">Webinar: Optimizing MongoDB Performance on AWS</a></span></p>\n  <p>mongodb <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52518/rss\">Using Babel 7 and 'preset-typescript' to Compile an Angular 6 App</a></span></p>\n  <p>Hubert Zub </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52539/rss\">TypeScript with Babel: A Beautiful Marriage?</a></span> — TypeScript has never been easier to adopt thanks to the new TypeScript plugin for Babel.</p>\n  <p>Matt Turnbull </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52540/rss\">How We Got a 100% Lighthouse Performance Score for a Vue.js App</a></span> — Lighthouse is a performance auditing tool embedded in Chrome.</p>\n  <p>Tim Nolet </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52519/rss\">Making Calls from a Browser with Vue.js and Nexmo In-App Voice</a></span></p>\n  <p>Phil Leggetter </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52541/rss\">Building A Flexible Image Uploader Component using Vue.js 2.0</a></span></p>\n  <p>Cathy Ha </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52542/rss\">date-fns: A Modern Date Utility Library</a></span> — It’s <em>“like lodash for dates”</em> and can really <a href=\"https://javascriptweekly.com/link/52543/rss\">get your bundle sizes down</a> <a href=\"https://javascriptweekly.com/link/52544/rss\">says</a> Addy Osmani.</p>\n  <p>Sasha Koss </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52521/rss\">Taking Payments Online with Square and Vue.js</a></span> — Take online payments in a custom form using Vue and the Square Payment Form.</p>\n  <p>Square Developer <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52545/rss\">Angular Fire v5.0: The Official Library for Using Firebase from Angular</a></span></p>\n  <p>Angular </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52546/rss\">React 16.5.0 Released</a></span> — For more, refer to <a href=\"https://javascriptweekly.com/link/52547/rss\">this week’s React newsletter.</a></p>\n  <p>React GitHub Repo </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>🗓 <strong>Upcoming JavaScript Events</strong></p>\n\n<ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/52522/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/52523/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/52524/rss\">Node+JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/52525/rss\">jsMobileConf (Oct 25-26 in Boston, MA)</a> — A two-day, two-track, developer event focused on mobility and the cutting-edge JavaScript ecosystem.</li>\n\n<li><a href=\"https://javascriptweekly.com/link/52526/rss\">CascadiaJS (Nov 15-16 in Seattle, WA)</a></li>\n\n</ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/402/rss\" width=\"1\" height=\"1\">\n","content":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#402 — September  7, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/52510/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n      <p>Apologies if you notice today's issue is a little lower tempo than usual. We have some great things coming up, including more interviews like Dr. Axel's in <a href=\"https://javascriptweekly.com/link/52527/rss\">issue 399</a>, but today I've been struck by a sickness bug 😷 and have struggled to even get this far. To a better next week! 🙂<br><span><em>— Peter Cooper, editor</em></span></p>\n    </td></tr></table>\n<div></div>\n\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52511/rss\">How GitHub Removed jQuery From Their Frontend</a></span> — GitHub has just been able to drop jQuery as a dependency of the frontend code for GitHub.com. This transition has taken years and here’s what they’ve learnt and what libraries have replaced it.</p>\n  <p>GitHub Engineering </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52528/rss\">Ky: A Tiny, Elegant HTTP Client for Browsers Based on Fetch</a></span> — A new HTTP client library for the browser from one man module machine Sindre Sorhus. This one essentially makes the Fetch API tidier to use as shown in the <a href=\"https://javascriptweekly.com/link/52529/rss\">demo code</a>.</p>\n  <p>Sindre Sorhus </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/52512/rss\"><img src=\"https://copm.s3.amazonaws.com/1a3a6973.png\" width=\"174\" height=\"75\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/52512/rss\">Angular, React or Vue?</a></span> — How do you choose one JavaScript framework over another for your next web application? Our new whitepaper gives insight into the current state of Angular, React and Vue and how they compare against a comprehensive set of criteria. <a href=\"https://javascriptweekly.com/link/52512/rss\">Download now</a>.</p>\n  <p>Progress Kendo UI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52530/rss\">Take the 'State of JavaScript 2018' Survey</a></span> — Sacha Greif’s popular survey returns, aiming to see what tools and technologies in the JavaScript space that developers are using, happy with and excited about. Results are expected in November and we’ll share them then.</p>\n  <p>Sacha Greif </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52531/rss\">A Tour of JavaScript Timers on the Web</a></span> — Want to get your head around <code>setTimeout</code> vs <code>setInterval</code> vs <code>setImmediate</code> vs  <code>requestAnimationFrame</code> and others? This will help.</p>\n  <p>Nolan Lawson </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52532/rss\">Sqorn: A Fast, Composable SQL Query Builder</a></span> — Uses a functional style that models query compilation as a series of transformations and also uses ES6 template literals in an interesting way. Worth checking out. <a href=\"https://javascriptweekly.com/link/52533/rss\">Full tutorial here.</a></p>\n  <p>Sufyan Dawoodjee </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52513/rss\">JavaScript Developer at X-Team (Remote)</a></span> — We help our developers keep learning and growing every day. Unleash your potential. Work from anywhere. <a href=\"https://javascriptweekly.com/link/52513/rss\">Join X-Team</a>.</p>\n  <p>x-team </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52514/rss\">Find A JavaScript Job Through Vettery</a></span> — Create a profile to connect with inspiring companies seeking JavaScript devs.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Opinions</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52534/rss\">Why Async: How JavaScript Interacts with the Real World</a></span> — A preview of an as yet unreleased course, but even these three pages might help you out if you’re still learning how promises and async/await can improve your code.</p>\n  <p>Frontend Armory </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52535/rss\">Using the Speech Synthesis Interface of the Web Speech API</a></span> — Get your browser to speak back to you.</p>\n  <p>Manuel Wieser </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52517/rss\">How to Build a Multiplayer JavaScript VR Game</a></span> — Combine A-Frame, PubNub, and WebVR to launch a browser-based VR game.</p>\n  <p>PubNub <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52515/rss\">Making GraphQL Client Requests in Node (and the Browser) using graphql.js</a></span></p>\n  <p>Hugo Di Francesco </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52516/rss\">How to Use Media Queries from JavaScript</a></span> — The <code>matchMedia</code> method is the key.</p>\n  <p>Craig Buckler </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52537/rss\">Goodbye Redux</a></span> — <em>“A complete breakdown on why we needed Redux in the past, and why we don’t any more.”</em></p>\n  <p>Jack Scott </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52536/rss\">Reduce JavaScript Payloads with Code Splitting</a></span></p>\n  <p>Google Developers </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52538/rss\">To Grok A Mockingbird: Using Recursive Combinators to Enhance Functional Composition</a></span> — One for the functional programming fans :-)</p>\n  <p>Reg Braithwaite </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52520/rss\">Webinar: Optimizing MongoDB Performance on AWS</a></span></p>\n  <p>mongodb <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52518/rss\">Using Babel 7 and 'preset-typescript' to Compile an Angular 6 App</a></span></p>\n  <p>Hubert Zub </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52539/rss\">TypeScript with Babel: A Beautiful Marriage?</a></span> — TypeScript has never been easier to adopt thanks to the new TypeScript plugin for Babel.</p>\n  <p>Matt Turnbull </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52540/rss\">How We Got a 100% Lighthouse Performance Score for a Vue.js App</a></span> — Lighthouse is a performance auditing tool embedded in Chrome.</p>\n  <p>Tim Nolet </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52519/rss\">Making Calls from a Browser with Vue.js and Nexmo In-App Voice</a></span></p>\n  <p>Phil Leggetter </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52541/rss\">Building A Flexible Image Uploader Component using Vue.js 2.0</a></span></p>\n  <p>Cathy Ha </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52542/rss\">date-fns: A Modern Date Utility Library</a></span> — It’s <em>“like lodash for dates”</em> and can really <a href=\"https://javascriptweekly.com/link/52543/rss\">get your bundle sizes down</a> <a href=\"https://javascriptweekly.com/link/52544/rss\">says</a> Addy Osmani.</p>\n  <p>Sasha Koss </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52521/rss\">Taking Payments Online with Square and Vue.js</a></span> — Take online payments in a custom form using Vue and the Square Payment Form.</p>\n  <p>Square Developer <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52545/rss\">Angular Fire v5.0: The Official Library for Using Firebase from Angular</a></span></p>\n  <p>Angular </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52546/rss\">React 16.5.0 Released</a></span> — For more, refer to <a href=\"https://javascriptweekly.com/link/52547/rss\">this week’s React newsletter.</a></p>\n  <p>React GitHub Repo </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>🗓 <strong>Upcoming JavaScript Events</strong></p>\n\n<ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/52522/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/52523/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/52524/rss\">Node+JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/52525/rss\">jsMobileConf (Oct 25-26 in Boston, MA)</a> — A two-day, two-track, developer event focused on mobility and the cutting-edge JavaScript ecosystem.</li>\n\n<li><a href=\"https://javascriptweekly.com/link/52526/rss\">CascadiaJS (Nov 15-16 in Seattle, WA)</a></li>\n\n</ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/402/rss\" width=\"1\" height=\"1\">\n","enclosure":{},"categories":[],"color":"mediumseagreen","category":"JavaScript Weekly","date":"2018-09-07 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Babel 7.0 Released","pubDate":"2018-08-31 00:00:00","link":"https://javascriptweekly.com/issues/401","guid":"https://javascriptweekly.com/issues/401","author":"","thumbnail":"https://copm.s3.amazonaws.com/9f0038b2.png","description":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#401 — August 31, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/52179/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52180/rss\">Babel 7.0 Released: The JavaScript Transpiler</a></span> — A significant release for the popular JavaScript compiler. Some links to help you navigate your way:\n</p>\n<ul>\n<li>If you need just <em>one</em> reason to upgrade, 7.0 is <a href=\"https://javascriptweekly.com/link/52181/rss\">a lot faster.</a>\n</li>\n<li>There's a new <a href=\"https://javascriptweekly.com/link/52182/rss\">upgrade tool</a> to help you migrate.</li>\n<li><a href=\"https://javascriptweekly.com/link/52183/rss\">TypeScript support is now baked in.</a></li>\n<li>\n<a href=\"https://javascriptweekly.com/link/52184/rss\">Stage presets were removed.</a> Here's why and how to deal with it.</li>\n<li>\n<a href=\"https://javascriptweekly.com/link/52185/rss\">Planning for 7.0</a> and <a href=\"https://javascriptweekly.com/link/52186/rss\">Nearing the 7.0 Release</a> will bring you up to date with what it's taken to get this far.</li>\n</ul>\n<p> </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/52187/rss\"><img src=\"https://copm.s3.amazonaws.com/9f0038b2.png\" width=\"125\" height=\"54\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/52187/rss\">Cheat Sheet: Functional Programming with JavaScript</a></span> — JavaScript developers, here’s a handy resource for your reference stack. This cheat sheet structures some of the language features most commonly used by JavaScript developers interested in writing functional style code. Check it out.</p>\n  <p>Progress Kendo UI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52188/rss\">This Week's Node Weekly Newsletter</a></span> — If you’ve ever wondered why there isn’t a lot of Node stuff in JavaScript Weekly, it’s because we have <a href=\"https://javascriptweekly.com/link/52189/rss\">a separate newsletter for that!</a> This week we covered a V8 vulnerability and how to use Docker for Node.js development.</p>\n  <p>Cooperpress </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52190/rss\">v86: x86 Virtualization in JavaScript</a></span> — Works in both the browser and Node. Check out the demos running Windows 98, Linux, and other operating systems.</p>\n  <p>Fabian Hemmer </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52191/rss\">What's Coming Up in 'JavaScript 2018'</a></span> — The latest annual ECMAScript update, published in June 2018, is the largest yearly release so far, although still far smaller than ECMAScript 6 with its backlog of already common features.</p>\n  <p>Mary Branscombe </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52192/rss\">Lerna Added (Then Removed) A License Term Blocking Some Companies From Using It</a></span> — If you’re not on social media, you may have missed this story which has since concluded. <a href=\"https://javascriptweekly.com/link/52193/rss\">Lerna</a>, a popular tool for working with monorepos, relicensed itself to block its use at a variety of companies (including Microsoft) but after a lot of discussion and community feedback, <a href=\"https://javascriptweekly.com/link/52194/rss\">this was reverted.</a></p>\n  <p>Lerna </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52195/rss\">Senior Front End Engineer at External Data Systems, Netflix</a></span> — Help build a world class user interface for the platform that collects data to drive business insights for our teams.</p>\n  <p>Netflix </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52196/rss\">Find A JavaScript Job Through Vettery</a></span> — Create a profile to connect with inspiring companies seeking JavaScript devs.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n      <p><a href=\"https://javascriptweekly.com/link/52197/rss\">Place your own job listing in a future issue</a></p>\n    </td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Opinions</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/52198/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/ohxy48xtjtylwviisg2l.jpg\" width=\"640\"></a>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/52198/rss\">Creating Electronic Dance Music with JavaScript</a></span></p>\n  <p>Walmik Deshpande </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52199/rss\">Serverless Machine Learning with TensorFlow.js</a></span> — A thorough look at getting Tensorflow, a flexible machine learning framework, to work properly in a serverless environment.</p>\n  <p>James Thomas </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52200/rss\">Building a Serverless App with MongoDB Stitch</a></span> — <a href=\"https://javascriptweekly.com/link/52201/rss\">MongoDB Stitch</a> is a MongoDB-based serverless platform that can make it quicker to build apps in the cloud. This tutorial is a practical demonstration of using it to build a stock price monitoring app.</p>\n  <p>Valeri Karpov </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52202/rss\">Build a Netflix Style Video Delivery Platform</a></span> — SDKs for all platforms - Play videos at the same quality &amp; speed as Netflix &amp; YouTube.</p>\n  <p>Bitmovin <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52203/rss\">An Introduction to React and How To Build Your First App</a></span> — Not just a ‘Hello World’ example but an app that uses a router, components, and even does auth with Auth0’s service. Subscribe to our <a href=\"https://javascriptweekly.com/link/52204/rss\">React newsletter</a> if you get a taste for React after this ;-)</p>\n  <p>Bruno Krebs </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52205/rss\">Using Cloudflare Workers To Make Static Sites Dynamic</a></span> — Cloudflare Workers places a serverless JS environment in <em>front</em> of your ordinary site so you can perform various tasks before a request even hits your server.</p>\n  <p>Paddy Sherry </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52206/rss\">Dynamic App Themes with CSS Variables and JavaScript</a></span></p>\n  <p>Mike Wilcox </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/52207/rss\">Through the Open Source Looking Glass</a></span> — A non-technical talk by Babel maintainer Henry Zhu about what it’s like and what it means to be the maintainer of popular open source projects.</p>\n  <p>Henry Zhu </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52208/rss\">Why is a 'Java Guy' So Excited About Node.js?</a></span> — Interesting to hear from someone who worked on the Java team at Sun wax lyrical about JavaScript.</p>\n  <p>David Herron </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52209/rss\">Create A Short Digital Address for Any Location w/ AngularJS</a></span></p>\n  <p>DigitalOcean <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52210/rss\">Why You Should replace forEach with 'map' and 'filter'</a></span></p>\n  <p>Roope Hakulinen </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52211/rss\">Making a Progressive Web App with Webpack Just Got Easier</a></span> — <a href=\"https://javascriptweekly.com/link/52212/rss\">webpack-web-app-manifest-plugins</a> generates a PWA manifest and integrates with the assets JSON.</p>\n  <p>Tumblr </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52182/rss\">babel-upgrade: A New Tool for Automtically Upgrading Projects to Babel 7</a></span> — In case you missed it at the top of the issue!</p>\n  <p>Babel </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52213/rss\">Catch JavaScript Errors Before Users Do</a></span> — Detect JavaScript errors in real-time, then debug them in minutes. Works with Node, React, Angular, and more.</p>\n  <p>ROLLBAR <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52214/rss\">goodshare.js: A Vue.js Component for Social Sharing Buttons</a></span> — <a href=\"https://javascriptweekly.com/link/52215/rss\">Full example here.</a></p>\n  <p>Vic Shóstak </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52216/rss\">Wexond: A 'Web Browser' Built on Electron and React</a></span> — An interesting idea. Being Electron-based, it’s using Chromium for rendering, but the UI/chrome is React and styled-components.</p>\n  <p>Wexond </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52217/rss\">Code Surfer: A React Component for Scrolling, Zooming and Highlighting Code Samples</a></span></p>\n  <p>Rodrigo Pombo </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52218/rss\">size-plugin: Track Compressed Webpack Asset Sizes Over Time</a></span></p>\n  <p>Google Chrome Labs </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>📅 Upcoming JavaScript Events</p>\n\n    <ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/52220/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/52221/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/52223/rss\">Node+JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n    <li><a href=\"https://javascriptweekly.com/link/52224/rss\">CascadiaJS (Nov 15-16 in Seattle, WA)</a></li>\n\n    </ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/401/rss\" width=\"1\" height=\"1\">\n","content":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#401 — August 31, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/52179/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52180/rss\">Babel 7.0 Released: The JavaScript Transpiler</a></span> — A significant release for the popular JavaScript compiler. Some links to help you navigate your way:\n</p>\n<ul>\n<li>If you need just <em>one</em> reason to upgrade, 7.0 is <a href=\"https://javascriptweekly.com/link/52181/rss\">a lot faster.</a>\n</li>\n<li>There's a new <a href=\"https://javascriptweekly.com/link/52182/rss\">upgrade tool</a> to help you migrate.</li>\n<li><a href=\"https://javascriptweekly.com/link/52183/rss\">TypeScript support is now baked in.</a></li>\n<li>\n<a href=\"https://javascriptweekly.com/link/52184/rss\">Stage presets were removed.</a> Here's why and how to deal with it.</li>\n<li>\n<a href=\"https://javascriptweekly.com/link/52185/rss\">Planning for 7.0</a> and <a href=\"https://javascriptweekly.com/link/52186/rss\">Nearing the 7.0 Release</a> will bring you up to date with what it's taken to get this far.</li>\n</ul>\n<p> </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/52187/rss\"><img src=\"https://copm.s3.amazonaws.com/9f0038b2.png\" width=\"125\" height=\"54\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/52187/rss\">Cheat Sheet: Functional Programming with JavaScript</a></span> — JavaScript developers, here’s a handy resource for your reference stack. This cheat sheet structures some of the language features most commonly used by JavaScript developers interested in writing functional style code. Check it out.</p>\n  <p>Progress Kendo UI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52188/rss\">This Week's Node Weekly Newsletter</a></span> — If you’ve ever wondered why there isn’t a lot of Node stuff in JavaScript Weekly, it’s because we have <a href=\"https://javascriptweekly.com/link/52189/rss\">a separate newsletter for that!</a> This week we covered a V8 vulnerability and how to use Docker for Node.js development.</p>\n  <p>Cooperpress </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52190/rss\">v86: x86 Virtualization in JavaScript</a></span> — Works in both the browser and Node. Check out the demos running Windows 98, Linux, and other operating systems.</p>\n  <p>Fabian Hemmer </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52191/rss\">What's Coming Up in 'JavaScript 2018'</a></span> — The latest annual ECMAScript update, published in June 2018, is the largest yearly release so far, although still far smaller than ECMAScript 6 with its backlog of already common features.</p>\n  <p>Mary Branscombe </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52192/rss\">Lerna Added (Then Removed) A License Term Blocking Some Companies From Using It</a></span> — If you’re not on social media, you may have missed this story which has since concluded. <a href=\"https://javascriptweekly.com/link/52193/rss\">Lerna</a>, a popular tool for working with monorepos, relicensed itself to block its use at a variety of companies (including Microsoft) but after a lot of discussion and community feedback, <a href=\"https://javascriptweekly.com/link/52194/rss\">this was reverted.</a></p>\n  <p>Lerna </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52195/rss\">Senior Front End Engineer at External Data Systems, Netflix</a></span> — Help build a world class user interface for the platform that collects data to drive business insights for our teams.</p>\n  <p>Netflix </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52196/rss\">Find A JavaScript Job Through Vettery</a></span> — Create a profile to connect with inspiring companies seeking JavaScript devs.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n      <p><a href=\"https://javascriptweekly.com/link/52197/rss\">Place your own job listing in a future issue</a></p>\n    </td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Opinions</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/52198/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/ohxy48xtjtylwviisg2l.jpg\" width=\"640\"></a>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/52198/rss\">Creating Electronic Dance Music with JavaScript</a></span></p>\n  <p>Walmik Deshpande </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52199/rss\">Serverless Machine Learning with TensorFlow.js</a></span> — A thorough look at getting Tensorflow, a flexible machine learning framework, to work properly in a serverless environment.</p>\n  <p>James Thomas </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52200/rss\">Building a Serverless App with MongoDB Stitch</a></span> — <a href=\"https://javascriptweekly.com/link/52201/rss\">MongoDB Stitch</a> is a MongoDB-based serverless platform that can make it quicker to build apps in the cloud. This tutorial is a practical demonstration of using it to build a stock price monitoring app.</p>\n  <p>Valeri Karpov </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52202/rss\">Build a Netflix Style Video Delivery Platform</a></span> — SDKs for all platforms - Play videos at the same quality &amp; speed as Netflix &amp; YouTube.</p>\n  <p>Bitmovin <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52203/rss\">An Introduction to React and How To Build Your First App</a></span> — Not just a ‘Hello World’ example but an app that uses a router, components, and even does auth with Auth0’s service. Subscribe to our <a href=\"https://javascriptweekly.com/link/52204/rss\">React newsletter</a> if you get a taste for React after this ;-)</p>\n  <p>Bruno Krebs </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52205/rss\">Using Cloudflare Workers To Make Static Sites Dynamic</a></span> — Cloudflare Workers places a serverless JS environment in <em>front</em> of your ordinary site so you can perform various tasks before a request even hits your server.</p>\n  <p>Paddy Sherry </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52206/rss\">Dynamic App Themes with CSS Variables and JavaScript</a></span></p>\n  <p>Mike Wilcox </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/52207/rss\">Through the Open Source Looking Glass</a></span> — A non-technical talk by Babel maintainer Henry Zhu about what it’s like and what it means to be the maintainer of popular open source projects.</p>\n  <p>Henry Zhu </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52208/rss\">Why is a 'Java Guy' So Excited About Node.js?</a></span> — Interesting to hear from someone who worked on the Java team at Sun wax lyrical about JavaScript.</p>\n  <p>David Herron </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52209/rss\">Create A Short Digital Address for Any Location w/ AngularJS</a></span></p>\n  <p>DigitalOcean <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52210/rss\">Why You Should replace forEach with 'map' and 'filter'</a></span></p>\n  <p>Roope Hakulinen </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52211/rss\">Making a Progressive Web App with Webpack Just Got Easier</a></span> — <a href=\"https://javascriptweekly.com/link/52212/rss\">webpack-web-app-manifest-plugins</a> generates a PWA manifest and integrates with the assets JSON.</p>\n  <p>Tumblr </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52182/rss\">babel-upgrade: A New Tool for Automtically Upgrading Projects to Babel 7</a></span> — In case you missed it at the top of the issue!</p>\n  <p>Babel </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52213/rss\">Catch JavaScript Errors Before Users Do</a></span> — Detect JavaScript errors in real-time, then debug them in minutes. Works with Node, React, Angular, and more.</p>\n  <p>ROLLBAR <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52214/rss\">goodshare.js: A Vue.js Component for Social Sharing Buttons</a></span> — <a href=\"https://javascriptweekly.com/link/52215/rss\">Full example here.</a></p>\n  <p>Vic Shóstak </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52216/rss\">Wexond: A 'Web Browser' Built on Electron and React</a></span> — An interesting idea. Being Electron-based, it’s using Chromium for rendering, but the UI/chrome is React and styled-components.</p>\n  <p>Wexond </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52217/rss\">Code Surfer: A React Component for Scrolling, Zooming and Highlighting Code Samples</a></span></p>\n  <p>Rodrigo Pombo </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/52218/rss\">size-plugin: Track Compressed Webpack Asset Sizes Over Time</a></span></p>\n  <p>Google Chrome Labs </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>📅 Upcoming JavaScript Events</p>\n\n    <ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/52220/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/52221/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/52223/rss\">Node+JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n    <li><a href=\"https://javascriptweekly.com/link/52224/rss\">CascadiaJS (Nov 15-16 in Seattle, WA)</a></li>\n\n    </ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/401/rss\" width=\"1\" height=\"1\">\n","enclosure":{},"categories":[],"color":"mediumseagreen","category":"JavaScript Weekly","date":"2018-08-31 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Johnny Five is alive, Ghost 2.0, and Stimulus","pubDate":"2018-08-24 00:00:00","link":"https://javascriptweekly.com/issues/400","guid":"https://javascriptweekly.com/issues/400","author":"","thumbnail":"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/yjahkqnfu0kks2ypj0xt.jpg","description":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#400 — August 24, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/51848/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n      <p>Due to unforeseen circumstances, this 400th issue of JavaScript Weekly comes to you from a tent in the middle of a freezing cold field in Yorkshire! Apologies if it's a few hours late, but we were  also waiting for Babel 7.0 to drop <em>(update: it's not, it's now <a href=\"https://javascriptweekly.com/link/51863/rss\">next week</a>)</em>.</p>\n\n      <p>A huge thanks to you for being a subscriber, and an extra special thanks if you're one of the few hundred subscribers who has stayed with us since issue 1 almost 8 years ago :-)<br><span><em>— Peter Cooper, editor</em></span></p>\n    </td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51864/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/yjahkqnfu0kks2ypj0xt.jpg\" width=\"640\"></a>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51865/rss\">Johnny-Five 1.0: A JS Robotics and IoT Platform</a></span> — Now at some six years old, Johnny Five has reached its 1.0 release in an announcement at JSConf. The <a href=\"https://javascriptweekly.com/link/51866/rss\">examples</a> page is packed with source code examples of what it can be used to achieve.</p>\n  <p>Johnny Five Team </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51867/rss\">A Complete GraphQL Server Tutorial</a></span> — An epic tutorial covering the full GraphQL server experience using Apollo Server and Express including authentication, roles/permissions, subscriptions, error handling, pagination..</p>\n  <p>Robin Wieruch </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51849/rss\"><img src=\"https://copm.s3.amazonaws.com/784980ca.png\" width=\"125\" height=\"63\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/51849/rss\">Whitepaper: Choosing Web App Libraries in an Open Source World</a></span> — OS frameworks lack a single, comprehensive component library for developers to build standardized UIs. In many cases commercial component libraries used in conjunction with OS frameworks can offer the best of both worlds. <a href=\"https://javascriptweekly.com/link/51849/rss\">Read on</a> to learn more.</p>\n  <p>Sencha, Inc. <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51868/rss\">Liftoff: A Look at the New Baseline Compiler for WebAssembly in V8</a></span> — Very technical but exciting news if you’re planning to lean heavily on WebAssembly. V8 6.9 (and hence Chrome 69) and above will start WebAssembly code <em>much</em> faster.</p>\n  <p>Clemens Hammacher </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51869/rss\">Introducing Ghost 2.0: The JavaScript Blogging Platform</a></span> — Want a fully JavaScript powered blog? 2.0 takes big steps forward with a new editor, multi-language support, custom routes, custom site structures, and more.</p>\n  <p>John O'Nolan </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51870/rss\">Behind The Scenes of Dr. Axel's Latest JavaScript Book</a></span> — Last week, <a href=\"https://javascriptweekly.com/link/51871/rss\">we interviewed</a> Dr. Axel about his new book, <a href=\"https://javascriptweekly.com/link/51872/rss\"><em>JavaScript for Impatient Programmers.</em></a> Here, he shows just what went into the process of creating it.</p>\n  <p>Dr. Axel Rauschmayer </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51873/rss\">Stimulus 1.1 Released: A JS Framework for the HTML You Already Have</a></span> — An interesting framework from Basecamp (formerly 37signals). Here's the <a href=\"https://javascriptweekly.com/link/51874/rss\">full origin story</a> including <em>why</em> it's useful. 1.1 includes <a href=\"https://javascriptweekly.com/link/51875/rss\">new reference documentation</a> and <a href=\"https://javascriptweekly.com/link/51876/rss\">ordered actions.</a></p>\n  <p>Basecamp </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51850/rss\">Senior Software Engineer (NYC)</a></span> — Learn from the best and lead by example. Do your finest work, with purpose, freedom, and a great community.</p>\n  <p>Reaktor </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51851/rss\">Senior Front End Engineer at External Data Systems, Netflix</a></span> — Help build a world class user interface for the platform that collects data to drive business insights for our teams.</p>\n  <p>Netflix </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51852/rss\">Find A JavaScript Job Through Vettery</a></span> — Vettery specializes in dev roles and is completely free for job seekers. Create a profile to get started.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Stories</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51877/rss\">Complex Numbers in JavaScript</a></span> — I hope you like math! This is a neat walkthrough of calculating the dot product of two complex vectors with JS.</p>\n  <p>Mateo Gianolio </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51878/rss\">The Solo JavaScript Developer Challenging Google and Facebook</a></span> — It’s a short, high level piece, but it’s nice to see Vue getting more mainstream attention which is basically what the article is about too :-)</p>\n  <p>Klint Finley (WIRED) </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51853/rss\">How to Do Functional Programming with JavaScript?</a></span> — A handy cheat sheet used by JavaScript developers interested in writing functional style code. Check it out.</p>\n  <p>Progress Kendo UI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51879/rss\">Level Up Your '.filter' Game</a></span> — The <code>filter</code> array method creates a new array of elements that pass a test defined in a given function. This tutorial will help you feel confident with it.</p>\n  <p>Adam Giese </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51880/rss\">Taking Your First Steps with TensorFlow.js</a></span> — Want to dig into a little machine learning with JavaScript? This introduces some basic concepts.</p>\n  <p>Aral Roca </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51881/rss\">New npm Registry Features to Help npm Users Protect Themselves</a></span></p>\n  <p>The npm Blog </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51854/rss\">Creating a Chrome Browser Extension: Screencast</a></span> — Try 'The Frontier' free for 14-days. Short tutorials from the instructors and authors you trust.</p>\n  <p>Big Nerd Ranch <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51882/rss\">What Do The Three Dots '...' Mean in JavaScript?</a></span></p>\n  <p>Adrian Oprea </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51883/rss\">Build A Live Graph with D3.js and Pusher</a></span></p>\n  <p>Ayooluwa Isaiah (Pusher) </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51884/rss\">Puppeteer Recorder: A Chrome Extension That Turns Browser Interactions into Puppeteer Scripts</a></span></p>\n  <p>Checkly </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51885/rss\">Git Tutor: Generate Step-by-Step Markdown Tutorials from Git History</a></span> — An interesting idea. Well suited for projects where the git commits act as logical steps of growth. See <a href=\"https://javascriptweekly.com/link/51886/rss\">an example</a> of the end result.</p>\n  <p>Andrei Volchenko </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51855/rss\">Real-Time Error Monitoring, Alerting, and Analytics for JavaScript 🚀</a></span></p>\n  <p>ROLLBAR <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51887/rss\">Immer: Create The Next Immutable State Tree by Mutating The Current Tree</a></span> — If you want to work with immutable state, this is worth looking at.</p>\n  <p>Michel Weststrate </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51888/rss\">Pyodide: A Python Scientific Stack, Compiled to WebAssembly</a></span> — The interesting outcome being seamless interactivity between Python and JS/browser. <a href=\"https://javascriptweekly.com/link/51889/rss\">Demo here.</a></p>\n  <p>iodide </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51890/rss\">ajax: A Vanilla JS Module for Ajax Requests</a></span> — Don’t want to use <code>fetch</code> but still want to make simple jQuery-style Ajax requests? This is an option.</p>\n  <p>Fernando Daciuk </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51891/rss\">Windows 2000 in the Browser via WebAssembly</a></span> — Don’t click if you aren’t ready to use a fair bit of bandwidth, but this example of emulating Windows 2000 in the browser (at high performance, too) is certainly compelling.</p>\n  <p>Fabrice Bellard </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>📅 Upcoming JavaScript Events</p>\n\n    <ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/51860/rss\">Vue.JS London (Sep 20-21 in London, UK)</a> — A two day event with talks, workshops and an advice lounge.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51856/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51857/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51861/rss\">Node+JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51862/rss\">EmberFest (Oct 11-12 in Amsterdam, Netherlands)</a> — The European Community Ember Conference</li>\n\n    </ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/400/rss\" width=\"1\" height=\"1\">\n","content":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#400 — August 24, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/51848/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n      <p>Due to unforeseen circumstances, this 400th issue of JavaScript Weekly comes to you from a tent in the middle of a freezing cold field in Yorkshire! Apologies if it's a few hours late, but we were  also waiting for Babel 7.0 to drop <em>(update: it's not, it's now <a href=\"https://javascriptweekly.com/link/51863/rss\">next week</a>)</em>.</p>\n\n      <p>A huge thanks to you for being a subscriber, and an extra special thanks if you're one of the few hundred subscribers who has stayed with us since issue 1 almost 8 years ago :-)<br><span><em>— Peter Cooper, editor</em></span></p>\n    </td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51864/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/yjahkqnfu0kks2ypj0xt.jpg\" width=\"640\"></a>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51865/rss\">Johnny-Five 1.0: A JS Robotics and IoT Platform</a></span> — Now at some six years old, Johnny Five has reached its 1.0 release in an announcement at JSConf. The <a href=\"https://javascriptweekly.com/link/51866/rss\">examples</a> page is packed with source code examples of what it can be used to achieve.</p>\n  <p>Johnny Five Team </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51867/rss\">A Complete GraphQL Server Tutorial</a></span> — An epic tutorial covering the full GraphQL server experience using Apollo Server and Express including authentication, roles/permissions, subscriptions, error handling, pagination..</p>\n  <p>Robin Wieruch </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51849/rss\"><img src=\"https://copm.s3.amazonaws.com/784980ca.png\" width=\"125\" height=\"63\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/51849/rss\">Whitepaper: Choosing Web App Libraries in an Open Source World</a></span> — OS frameworks lack a single, comprehensive component library for developers to build standardized UIs. In many cases commercial component libraries used in conjunction with OS frameworks can offer the best of both worlds. <a href=\"https://javascriptweekly.com/link/51849/rss\">Read on</a> to learn more.</p>\n  <p>Sencha, Inc. <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51868/rss\">Liftoff: A Look at the New Baseline Compiler for WebAssembly in V8</a></span> — Very technical but exciting news if you’re planning to lean heavily on WebAssembly. V8 6.9 (and hence Chrome 69) and above will start WebAssembly code <em>much</em> faster.</p>\n  <p>Clemens Hammacher </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51869/rss\">Introducing Ghost 2.0: The JavaScript Blogging Platform</a></span> — Want a fully JavaScript powered blog? 2.0 takes big steps forward with a new editor, multi-language support, custom routes, custom site structures, and more.</p>\n  <p>John O'Nolan </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51870/rss\">Behind The Scenes of Dr. Axel's Latest JavaScript Book</a></span> — Last week, <a href=\"https://javascriptweekly.com/link/51871/rss\">we interviewed</a> Dr. Axel about his new book, <a href=\"https://javascriptweekly.com/link/51872/rss\"><em>JavaScript for Impatient Programmers.</em></a> Here, he shows just what went into the process of creating it.</p>\n  <p>Dr. Axel Rauschmayer </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51873/rss\">Stimulus 1.1 Released: A JS Framework for the HTML You Already Have</a></span> — An interesting framework from Basecamp (formerly 37signals). Here's the <a href=\"https://javascriptweekly.com/link/51874/rss\">full origin story</a> including <em>why</em> it's useful. 1.1 includes <a href=\"https://javascriptweekly.com/link/51875/rss\">new reference documentation</a> and <a href=\"https://javascriptweekly.com/link/51876/rss\">ordered actions.</a></p>\n  <p>Basecamp </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51850/rss\">Senior Software Engineer (NYC)</a></span> — Learn from the best and lead by example. Do your finest work, with purpose, freedom, and a great community.</p>\n  <p>Reaktor </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51851/rss\">Senior Front End Engineer at External Data Systems, Netflix</a></span> — Help build a world class user interface for the platform that collects data to drive business insights for our teams.</p>\n  <p>Netflix </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51852/rss\">Find A JavaScript Job Through Vettery</a></span> — Vettery specializes in dev roles and is completely free for job seekers. Create a profile to get started.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Stories</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51877/rss\">Complex Numbers in JavaScript</a></span> — I hope you like math! This is a neat walkthrough of calculating the dot product of two complex vectors with JS.</p>\n  <p>Mateo Gianolio </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51878/rss\">The Solo JavaScript Developer Challenging Google and Facebook</a></span> — It’s a short, high level piece, but it’s nice to see Vue getting more mainstream attention which is basically what the article is about too :-)</p>\n  <p>Klint Finley (WIRED) </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51853/rss\">How to Do Functional Programming with JavaScript?</a></span> — A handy cheat sheet used by JavaScript developers interested in writing functional style code. Check it out.</p>\n  <p>Progress Kendo UI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51879/rss\">Level Up Your '.filter' Game</a></span> — The <code>filter</code> array method creates a new array of elements that pass a test defined in a given function. This tutorial will help you feel confident with it.</p>\n  <p>Adam Giese </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51880/rss\">Taking Your First Steps with TensorFlow.js</a></span> — Want to dig into a little machine learning with JavaScript? This introduces some basic concepts.</p>\n  <p>Aral Roca </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51881/rss\">New npm Registry Features to Help npm Users Protect Themselves</a></span></p>\n  <p>The npm Blog </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51854/rss\">Creating a Chrome Browser Extension: Screencast</a></span> — Try 'The Frontier' free for 14-days. Short tutorials from the instructors and authors you trust.</p>\n  <p>Big Nerd Ranch <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51882/rss\">What Do The Three Dots '...' Mean in JavaScript?</a></span></p>\n  <p>Adrian Oprea </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51883/rss\">Build A Live Graph with D3.js and Pusher</a></span></p>\n  <p>Ayooluwa Isaiah (Pusher) </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51884/rss\">Puppeteer Recorder: A Chrome Extension That Turns Browser Interactions into Puppeteer Scripts</a></span></p>\n  <p>Checkly </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51885/rss\">Git Tutor: Generate Step-by-Step Markdown Tutorials from Git History</a></span> — An interesting idea. Well suited for projects where the git commits act as logical steps of growth. See <a href=\"https://javascriptweekly.com/link/51886/rss\">an example</a> of the end result.</p>\n  <p>Andrei Volchenko </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51855/rss\">Real-Time Error Monitoring, Alerting, and Analytics for JavaScript 🚀</a></span></p>\n  <p>ROLLBAR <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51887/rss\">Immer: Create The Next Immutable State Tree by Mutating The Current Tree</a></span> — If you want to work with immutable state, this is worth looking at.</p>\n  <p>Michel Weststrate </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51888/rss\">Pyodide: A Python Scientific Stack, Compiled to WebAssembly</a></span> — The interesting outcome being seamless interactivity between Python and JS/browser. <a href=\"https://javascriptweekly.com/link/51889/rss\">Demo here.</a></p>\n  <p>iodide </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51890/rss\">ajax: A Vanilla JS Module for Ajax Requests</a></span> — Don’t want to use <code>fetch</code> but still want to make simple jQuery-style Ajax requests? This is an option.</p>\n  <p>Fernando Daciuk </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51891/rss\">Windows 2000 in the Browser via WebAssembly</a></span> — Don’t click if you aren’t ready to use a fair bit of bandwidth, but this example of emulating Windows 2000 in the browser (at high performance, too) is certainly compelling.</p>\n  <p>Fabrice Bellard </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>📅 Upcoming JavaScript Events</p>\n\n    <ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/51860/rss\">Vue.JS London (Sep 20-21 in London, UK)</a> — A two day event with talks, workshops and an advice lounge.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51856/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51857/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51861/rss\">Node+JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n    <li>\n<a href=\"https://javascriptweekly.com/link/51862/rss\">EmberFest (Oct 11-12 in Amsterdam, Netherlands)</a> — The European Community Ember Conference</li>\n\n    </ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/400/rss\" width=\"1\" height=\"1\">\n","enclosure":{},"categories":[],"color":"mediumseagreen","category":"JavaScript Weekly","date":"2018-08-24 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Kyle Simpson, charting libraries, and an interview with Dr. Axel Rauschmayer","pubDate":"2018-08-17 00:00:00","link":"https://javascriptweekly.com/issues/399","guid":"https://javascriptweekly.com/issues/399","author":"","thumbnail":"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/dgt2wojtjualvh9aiwvs.jpg","description":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#399 — August 17, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/51521/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n      <p>A blast from the past this week as we take some time out to ask Dr. Axel Rauschmayer, a former editor of <em>JavaScript Weekly</em>, some questions on the release of his new book, <em><a href=\"https://javascriptweekly.com/link/51522/rss\">JavaScript for Impatient Programmers</a></em>. You can find that further down in this issue :-)<br><span><em>— Peter Cooper, editor</em></span></p>\n    </td></tr></table>\n<div></div>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51540/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/dgt2wojtjualvh9aiwvs.jpg\"></a>\n  \n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51540/rss\">JavaScript Engine Fundamentals: Optimizing Prototypes</a></span> — Having a deeper understanding of how JavaScript engines work can help you reason about the performance characteristics of your code and this diagram-rich post digs into engines optimize around JavaScript’s use of prototype-based inheritance.</p>\n  <p>Mathias Bynens </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51541/rss\">Kyle Simpson says 'Keep Betting on JavaScript'</a></span> — A look back at “how far we’ve come” to see what the path ahead may look like for JavaScript. Filmed at JSCamp Barcelona. <a href=\"https://javascriptweekly.com/link/51542/rss\">Associated slides here</a>.</p>\n  <p>Kyle Simpson </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51523/rss\"><img src=\"https://copm.s3.amazonaws.com/32fbb648.png\" width=\"166\" height=\"125\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/51523/rss\">How to Choose the Best Framework for Mobile Development?</a></span> — The mobile development landscape has changed and we've put together a list of modern options for you. This is a long term decision, you must choose wisely. Download our free ebook to learn more.</p>\n  <p>Progress <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51543/rss\">16 JavaScript Data Visualization and Charting Libraries</a></span> — A rather extensive summary and comparison of charting libraries, comparing key factors such as chart types, commercial vs free, and their open-source status.</p>\n  <p>Dan Englishby </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51544/rss\">V8's Embedded Builtins and Reducing V8's Median Heap Size by 19%</a></span> — The V8 JavaScript engine ships with an extensive library of built-in functions and a lot of work has gone into reducing the memory overhead these can represent.</p>\n  <p>Jakob Gruber </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51545/rss\">Creating a Chrome Extension in 2018: The Good, the Bad and the Meh</a></span> — Talks through the development lifecycle of creating an extension and lists some of the architectural gotchas.</p>\n  <p>Tim Nolet </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51546/rss\">Visual Studio Code's July 2018 Update</a></span> — The most popular editor in the JavaScript world has added a variety of features, many of them JS-oriented, including <a href=\"https://javascriptweekly.com/link/51547/rss\">JSX tag completion</a>, a <a href=\"https://javascriptweekly.com/link/51548/rss\">‘add all missing imports’</a> feature, and better JS/TS error reporting.</p>\n  <p>Microsoft </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51524/rss\">Node Data Engineer at eBench (Remote, full-time)</a></span> — We're a SaaS company that creates beautiful data visualizations. Enjoy crafting quality code? We would love to hear from you.</p>\n  <p>eBench </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51525/rss\">Front-end Developer at Forza Football</a></span> — We're seeking an open minded person who enjoys working in a team and has advanced knowledge in frontend development.</p>\n  <p>Football Addicts AB </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51526/rss\">Find A JavaScript Job Through Vettery</a></span> — Vettery specializes in dev roles and is completely free for job seekers. Create a profile to get started.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Opinions</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51549/rss\">10 Things You Will Eventually Learn About JavaScript Projects</a></span> — A collection of common patterns that made working on even the most uncoordinated projects somehow manageable.</p>\n  <p>The Cat with a Dragon Tattoo </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51550/rss\">Setting Up Constants via Proxies</a></span></p>\n  <p>Dr. Axel Rauschmayer </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51527/rss\">Build a Netflix Style Video Delivery Platform</a></span> — SDKs for all platforms - Play videos at the same quality and speed as Netflix &amp; YouTube.</p>\n  <p>Bitmovin <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51551/rss\">How Angular CLI Budgets Save My Day And How They Can Save Yours</a></span> — Runs through what Angular application budgets are and what problems they can help surface.</p>\n  <p>Tomas Trajan </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51552/rss\">The Generic Sensor API</a></span> — The <a href=\"https://javascriptweekly.com/link/51553/rss\">Generic Sensor API</a> aims to provide a consistent JS API for client device sensors.</p>\n  <p>Ruadhan O'Donoghue </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51554/rss\">Handling Authentication in Vue with Vuex</a></span></p>\n  <p>Chris Nwamba </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51555/rss\">Web Performance For Third Party Scripts: Two Talks</a></span> — Two talks to help you take into account the effect third party scripts may have on your site’s performance.</p>\n  <p>SmashingConf </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51556/rss\">Next-Generation Frontend Testing with Cypress.io</a></span></p>\n  <p>Amir Rustamzadeh </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51528/rss\">See Why Facebook, Spotify, &amp; Sony Trust CircleCI with Their CI/CD</a></span></p>\n  <p>CircleCI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51557/rss\">A Conversation with Ember Co-Creator Tom Dale on Ember 3.0 and Ember's Future</a></span></p>\n  <p>JavaScript Jabber <span>podcast</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51558/rss\">A Proposal: Elixir-Style Modules in JavaScript</a></span></p>\n  <p>Will Ockelmann-Wagner </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51559/rss\">Three Reasons to Use Vue.js in Your Next Web Project</a></span></p>\n  <p>Arnaud Lewis </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n<table border=\"0\"><tr><td></td></tr></table>\n<table border=\"0\"><tr><td>\n\n<img src=\"https://res.cloudinary.com/cpress/image/upload/v1534501855/xm6jiym0dfvjwzh2t6hp.png\" width=\"100\"><p><span>💬 A Q&amp;A with…</span><br>Dr. Axel Rauschmayer<br><span>JavaScript book author and trainer</span><br><em>Munich, Germany</em></p>\n\n<p>To celebrate the release of his new book, <em><a href=\"https://javascriptweekly.com/link/51522/rss\">JavaScript for Impatient Programmers</a></em>, we've caught up with once-<em>JavaScript Weekly</em> editor <a href=\"https://javascriptweekly.com/link/51529/rss\">Dr. Axel Rauschmayer</a> to ask him a couple of questions:</p>\n\n<p>What <em>is</em> an 'impatient' programmer?</p>\n\n<p>I’m assuming that readers of my latest book are 'impatient' in the sense that they want to get started with JavaScript as quickly as possible.</p>\n\n<p>Most chapters are split into two parts. First, the basics, or what is the absolute minimum that you need to know? Then, more advanced stuff, or what should you know once you are more familiar with the language?</p>\n\n<p>This is the only book, that I’m aware of, that covers <em>all </em>of JavaScript, up to and including the very latest version (ES2018). That allowed me to omit old features that were superseded by better features in recent versions (but I do include references that explain the omitted features).</p>\n\n<p>What recent JavaScript features do you think are underused and deserve more attention?</p>\n\n<p>Three stand out for me:</p>\n\n<ul>\n<li>In the category “boring, but important”, I count modules and classes, because they provide standardization where we previously had competing and incompatible approaches.</li>\n<li>Built-in support for iteration is great, especially if combined with destructuring:\n<code>for (const [i, x] of arr.entries()) console.log(i, x);</code>\n</li>\n<li>Asynchronous functions and asynchronous iteration make asynchronous programming much more pleasant. They are the culmination of a standardization process that started with Promises in ES6.</li>\n</ul>\n<p>Dr. Axel Rauschmayer is the author of <a href=\"https://javascriptweekly.com/link/51522/rss\">JavaScript for Impatient Programmers</a> — out now.</p>\n\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51560/rss\">Tone.js: A Web Audio Framework for Making Interactive Music in the Browser</a></span> — Lots of <a href=\"https://javascriptweekly.com/link/51561/rss\">examples here.</a></p>\n  <p>Yotam Mann </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51562/rss\">SpaceTime: A Lightweight JavaScript Timezone Library</a></span></p>\n  <p>Spencer Kelly </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51530/rss\">Move Fast and Fix Stuff. Over 500K Developers Fix Errors with Sentry</a></span> — Notify only the right person based on the commit and see unminified code in the stack trace with source maps.</p>\n  <p>Sentry <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51563/rss\">from-html: Get Element References Directly From a String of HTML</a></span> — An interesting and straightforward way to create nested DOM elements.</p>\n  <p>m3g4p0p </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51564/rss\">flowchart.js: Turn Textual Representation of Diagrams into Flow Charts</a></span> — Want something similar for UML sequence diagrams? <a href=\"https://javascriptweekly.com/link/51565/rss\">Here you go.</a></p>\n  <p>Adriano Raiano </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>📅 Some forthcoming JavaScript events</p>\n\n<ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/51531/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/51532/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/51533/rss\">JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/51534/rss\">JSMobileConf (Oct 25-26 in Boston, MA)</a> — An impressive roster of speakers for this event with a focus on mobile and IoT.</li>\n\n</ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/399/rss\" width=\"1\" height=\"1\">\n","content":"\n<table border=\"0\" align=\"center\"><tr><td>\n\n  <div>    \n    <table border=\"0\"><tr>\n<td align=\"left\"><p>#399 — August 17, 2018</p></td>\n<td align=\"right\"><p><a href=\"https://javascriptweekly.com/link/51521/rss\">Read on the Web</a></p></td>\n</tr></table>\n<table border=\"0\"><tr><td><p>JavaScript Weekly</p></td></tr></table>\n<table border=\"0\"><tr><td>\n      <p>A blast from the past this week as we take some time out to ask Dr. Axel Rauschmayer, a former editor of <em>JavaScript Weekly</em>, some questions on the release of his new book, <em><a href=\"https://javascriptweekly.com/link/51522/rss\">JavaScript for Impatient Programmers</a></em>. You can find that further down in this issue :-)<br><span><em>— Peter Cooper, editor</em></span></p>\n    </td></tr></table>\n<div></div>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51540/rss\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/dgt2wojtjualvh9aiwvs.jpg\"></a>\n  \n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51540/rss\">JavaScript Engine Fundamentals: Optimizing Prototypes</a></span> — Having a deeper understanding of how JavaScript engines work can help you reason about the performance characteristics of your code and this diagram-rich post digs into engines optimize around JavaScript’s use of prototype-based inheritance.</p>\n  <p>Mathias Bynens </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51541/rss\">Kyle Simpson says 'Keep Betting on JavaScript'</a></span> — A look back at “how far we’ve come” to see what the path ahead may look like for JavaScript. Filmed at JSCamp Barcelona. <a href=\"https://javascriptweekly.com/link/51542/rss\">Associated slides here</a>.</p>\n  <p>Kyle Simpson </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  <a href=\"https://javascriptweekly.com/link/51523/rss\"><img src=\"https://copm.s3.amazonaws.com/32fbb648.png\" width=\"166\" height=\"125\"></a>\n  <p><span><a href=\"https://javascriptweekly.com/link/51523/rss\">How to Choose the Best Framework for Mobile Development?</a></span> — The mobile development landscape has changed and we've put together a list of modern options for you. This is a long term decision, you must choose wisely. Download our free ebook to learn more.</p>\n  <p>Progress <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51543/rss\">16 JavaScript Data Visualization and Charting Libraries</a></span> — A rather extensive summary and comparison of charting libraries, comparing key factors such as chart types, commercial vs free, and their open-source status.</p>\n  <p>Dan Englishby </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51544/rss\">V8's Embedded Builtins and Reducing V8's Median Heap Size by 19%</a></span> — The V8 JavaScript engine ships with an extensive library of built-in functions and a lot of work has gone into reducing the memory overhead these can represent.</p>\n  <p>Jakob Gruber </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51545/rss\">Creating a Chrome Extension in 2018: The Good, the Bad and the Meh</a></span> — Talks through the development lifecycle of creating an extension and lists some of the architectural gotchas.</p>\n  <p>Tim Nolet </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51546/rss\">Visual Studio Code's July 2018 Update</a></span> — The most popular editor in the JavaScript world has added a variety of features, many of them JS-oriented, including <a href=\"https://javascriptweekly.com/link/51547/rss\">JSX tag completion</a>, a <a href=\"https://javascriptweekly.com/link/51548/rss\">‘add all missing imports’</a> feature, and better JS/TS error reporting.</p>\n  <p>Microsoft </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>💻 Jobs</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51524/rss\">Node Data Engineer at eBench (Remote, full-time)</a></span> — We're a SaaS company that creates beautiful data visualizations. Enjoy crafting quality code? We would love to hear from you.</p>\n  <p>eBench </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51525/rss\">Front-end Developer at Forza Football</a></span> — We're seeking an open minded person who enjoys working in a team and has advanced knowledge in frontend development.</p>\n  <p>Football Addicts AB </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51526/rss\">Find A JavaScript Job Through Vettery</a></span> — Vettery specializes in dev roles and is completely free for job seekers. Create a profile to get started.</p>\n  <p>Vettery </p>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>📘 Tutorials and Opinions</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51549/rss\">10 Things You Will Eventually Learn About JavaScript Projects</a></span> — A collection of common patterns that made working on even the most uncoordinated projects somehow manageable.</p>\n  <p>The Cat with a Dragon Tattoo </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51550/rss\">Setting Up Constants via Proxies</a></span></p>\n  <p>Dr. Axel Rauschmayer </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51527/rss\">Build a Netflix Style Video Delivery Platform</a></span> — SDKs for all platforms - Play videos at the same quality and speed as Netflix &amp; YouTube.</p>\n  <p>Bitmovin <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51551/rss\">How Angular CLI Budgets Save My Day And How They Can Save Yours</a></span> — Runs through what Angular application budgets are and what problems they can help surface.</p>\n  <p>Tomas Trajan </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51552/rss\">The Generic Sensor API</a></span> — The <a href=\"https://javascriptweekly.com/link/51553/rss\">Generic Sensor API</a> aims to provide a consistent JS API for client device sensors.</p>\n  <p>Ruadhan O'Donoghue </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51554/rss\">Handling Authentication in Vue with Vuex</a></span></p>\n  <p>Chris Nwamba </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51555/rss\">Web Performance For Third Party Scripts: Two Talks</a></span> — Two talks to help you take into account the effect third party scripts may have on your site’s performance.</p>\n  <p>SmashingConf </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51556/rss\">Next-Generation Frontend Testing with Cypress.io</a></span></p>\n  <p>Amir Rustamzadeh </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51528/rss\">See Why Facebook, Spotify, &amp; Sony Trust CircleCI with Their CI/CD</a></span></p>\n  <p>CircleCI <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span>▶  <a href=\"https://javascriptweekly.com/link/51557/rss\">A Conversation with Ember Co-Creator Tom Dale on Ember 3.0 and Ember's Future</a></span></p>\n  <p>JavaScript Jabber <span>podcast</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51558/rss\">A Proposal: Elixir-Style Modules in JavaScript</a></span></p>\n  <p>Will Ockelmann-Wagner </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51559/rss\">Three Reasons to Use Vue.js in Your Next Web Project</a></span></p>\n  <p>Arnaud Lewis </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n<table border=\"0\"><tr><td></td></tr></table>\n<table border=\"0\"><tr><td>\n\n<img src=\"https://res.cloudinary.com/cpress/image/upload/v1534501855/xm6jiym0dfvjwzh2t6hp.png\" width=\"100\"><p><span>💬 A Q&amp;A with…</span><br>Dr. Axel Rauschmayer<br><span>JavaScript book author and trainer</span><br><em>Munich, Germany</em></p>\n\n<p>To celebrate the release of his new book, <em><a href=\"https://javascriptweekly.com/link/51522/rss\">JavaScript for Impatient Programmers</a></em>, we've caught up with once-<em>JavaScript Weekly</em> editor <a href=\"https://javascriptweekly.com/link/51529/rss\">Dr. Axel Rauschmayer</a> to ask him a couple of questions:</p>\n\n<p>What <em>is</em> an 'impatient' programmer?</p>\n\n<p>I’m assuming that readers of my latest book are 'impatient' in the sense that they want to get started with JavaScript as quickly as possible.</p>\n\n<p>Most chapters are split into two parts. First, the basics, or what is the absolute minimum that you need to know? Then, more advanced stuff, or what should you know once you are more familiar with the language?</p>\n\n<p>This is the only book, that I’m aware of, that covers <em>all </em>of JavaScript, up to and including the very latest version (ES2018). That allowed me to omit old features that were superseded by better features in recent versions (but I do include references that explain the omitted features).</p>\n\n<p>What recent JavaScript features do you think are underused and deserve more attention?</p>\n\n<p>Three stand out for me:</p>\n\n<ul>\n<li>In the category “boring, but important”, I count modules and classes, because they provide standardization where we previously had competing and incompatible approaches.</li>\n<li>Built-in support for iteration is great, especially if combined with destructuring:\n<code>for (const [i, x] of arr.entries()) console.log(i, x);</code>\n</li>\n<li>Asynchronous functions and asynchronous iteration make asynchronous programming much more pleasant. They are the culmination of a standardization process that started with Promises in ES6.</li>\n</ul>\n<p>Dr. Axel Rauschmayer is the author of <a href=\"https://javascriptweekly.com/link/51522/rss\">JavaScript for Impatient Programmers</a> — out now.</p>\n\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td><p>🔧 Code and Tools</p></td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51560/rss\">Tone.js: A Web Audio Framework for Making Interactive Music in the Browser</a></span> — Lots of <a href=\"https://javascriptweekly.com/link/51561/rss\">examples here.</a></p>\n  <p>Yotam Mann </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51562/rss\">SpaceTime: A Lightweight JavaScript Timezone Library</a></span></p>\n  <p>Spencer Kelly </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51530/rss\">Move Fast and Fix Stuff. Over 500K Developers Fix Errors with Sentry</a></span> — Notify only the right person based on the commit and see unminified code in the stack trace with source maps.</p>\n  <p>Sentry <span>sponsor</span></p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51563/rss\">from-html: Get Element References Directly From a String of HTML</a></span> — An interesting and straightforward way to create nested DOM elements.</p>\n  <p>m3g4p0p </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n  \n  <p><span><a href=\"https://javascriptweekly.com/link/51564/rss\">flowchart.js: Turn Textual Representation of Diagrams into Flow Charts</a></span> — Want something similar for UML sequence diagrams? <a href=\"https://javascriptweekly.com/link/51565/rss\">Here you go.</a></p>\n  <p>Adriano Raiano </p>\n</td></tr></table>\n<table border=\"0\"><tr><td>\n\n<table border=\"0\"><tr><td>\n<p>📅 Some forthcoming JavaScript events</p>\n\n<ul>\n<li>\n<a href=\"https://javascriptweekly.com/link/51531/rss\">JSCamp 2018 (Sep 22 in Chicago, IL)</a> — A one day single track event.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/51532/rss\">Framework Summit 2018 (Oct 2-3 in Park City, UT)</a> — A new 2 day conference focused on all front end frameworks with keynotes from the teams of the most popular ones.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/51533/rss\">JS Interactive (Oct 10-12 in Vancouver, Canada)</a> — One of the largest JavaScript events. Organized by the Linux Foundation.</li>\n\n<li>\n<a href=\"https://javascriptweekly.com/link/51534/rss\">JSMobileConf (Oct 25-26 in Boston, MA)</a> — An impressive roster of speakers for this event with a focus on mobile and IoT.</li>\n\n</ul>\n</td></tr></table>\n</td></tr></table>\n<table border=\"0\"><tr><td></td></tr></table>\n</div>\n\n  </td></tr></table>\n<img src=\"https://javascriptweekly.com/open/399/rss\" width=\"1\" height=\"1\">\n","enclosure":{},"categories":[],"color":"mediumseagreen","category":"JavaScript Weekly","date":"2018-08-17 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Firefox 62 – Tools Cool for School!","pubDate":"2018-09-06 14:39:42","link":"https://hacks.mozilla.org/2018/09/firefox-62/","guid":"https://hacks.mozilla.org/?p=32619","author":"Potch","thumbnail":"https://hacks.mozilla.org/files/2018/09/grapes-and-shapes-1.png","description":"\n<p>From the new Firefox Shape Path Editor, which lets floated content sculpt the flow of content, to the Variable Fonts, which enable fine-grained adjustment of font rendering, to more efficient Firefox Dev Tools view options, Firefox 62 delivers a cornucopia of features. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/09/firefox-62/\">Firefox 62 – Tools Cool for School!</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p>Hello there! It’s been six-odd weeks, and the march of progress continues to, uh… march… progressingly. That means we have a brand new Firefox to share, with an abundance of bug fixes, performance improvements, and (in particular) sweet developer tool treats! So tuck in your napkin and enjoy this tasting menu of some of what’s new in Firefox 62.</p>\n<h2>Shape Up Your Floats</h2>\n<p><a href=\"https://labs.jensimmons.com/2016/examples/shapes-3.html\"><img src=\"https://hacks.mozilla.org/files/2018/09/grapes-and-shapes-1.png\" alt=\"A CSS shape around some grapes\" width=\"927\" height=\"516\" class=\"alignnone size-full wp-image-32622\" srcset=\"https://hacks.mozilla.org/files/2018/09/grapes-and-shapes-1.png 927w, https://hacks.mozilla.org/files/2018/09/grapes-and-shapes-1-250x139.png 250w, https://hacks.mozilla.org/files/2018/09/grapes-and-shapes-1-768x427.png 768w, https://hacks.mozilla.org/files/2018/09/grapes-and-shapes-1-500x278.png 500w\" sizes=\"(max-width: 927px) 100vw, 927px\"></a></p>\n<p>CSS Shapes lets a floated element sculpt the flow of content around it beyond the classic rectangular bounding box we’ve been constrained to. For instance, in the above screenshot and linked demo, the text is wrapping to the shape of the grapes vs the image’s border. There are properties for basic shapes all the way up to complex polygons. There are of course <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside\">great docs</a> on all of this, but Firefox 62 also includes new tooling to both inspect and visually manipulate CSS Shapes values.</p>\n<p>You can learn more in <a href=\"https://hacks.mozilla.org/2018/09/make-your-web-layouts-bust-out-of-the-rectangle-with-the-firefox-shape-path-editor/\">Josh Marinacci’s post on the new CSS Shapes tooling</a> from yesterday.</p>\n<h2>Variable Fonts Are Here!</h2>\n<p><a href=\"https://hacks.mozilla.org/files/2018/09/Screenshot-2018-09-05-14.18.42.png\"><img src=\"https://hacks.mozilla.org/files/2018/09/Screenshot-2018-09-05-14.18.42.png\" alt=\"Screenshot of the new font tool in the Firefox DevTools\" width=\"1278\" height=\"560\"></a></p>\n<p>No punny title, I’m just excited! OpenType Font Variations allow a single font file to contain multiple instances of the same font, encoding the differences between instances. In addition to being in one file, font creators can expose any number of variation axes that give developers fine-grained control on how a font is rendered. These can be standard variations like font weight (font weight 536 looks right? no problem!) or things that were never previously available via CSS (x-height! serif-size!). In addition to the candy-store possibilities for typography nerds, being able to serve a single file with multiple variants is a major page weight savings. <a href=\"https://hacks.mozilla.org/2018/09/variable-fonts-arrive-in-firefox-62/\">Dan Callahan</a> goes much deeper on the grooviness to be found and how Firefox makes it easy to tweak these new custom values.</p>\n<h2>Devtools Commands</h2>\n<p>The Developer Toolbar was an alternate command <a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\" rel=\"noopener\" target=\"_blank\">repl</a> input in the Firefox Developer tools, apart from the Web Console. I say “was” because as of Firefox 62, it has been removed. It was always a bit hard to find and not as well-advertised as it could be, but did encapsulate some powerful commands. Most of these commands have been progressively migrated elsewhere in the devtools, and this is wrapped up in Firefox 62, so we’ve removed the toolbar altogether.</p>\n<p>One of the last commands to be migrated is <code>screenshot</code>, which is a power-user version of the “take a screenshot” button available in the devtools UI. The <code>screenshot</code> command is now available as <code>:screenshot</code> in the Web Console. For example, have you ever needed a high-res screenshot of a page for print? You can specify a higher pixel density for a screenshot via the command:</p>\n<pre><code>:screenshot --dpr 4\n</code></pre>\n<p>There are a bunch of other options as well, such as specifying output filenames, capture delays, and selector-cropped screenshots. <a href=\"https://meyerweb.com/eric/thoughts/2018/08/24/firefoxs-screenshot-command-2018/\">Eric Meyer wrote a great primer</a> on the power of <code>:screenshot</code> on his blog, and it will change your page capture game!</p>\n<p><img src=\"https://s.w.org/images/core/emoji/11/72x72/1f320.png\" alt=\"🌠\" class=\"wp-smiley\"><em>Did You Know: In addition to <code>:screenshot</code>, there are a bunch of other helpful commands and magic variables available from within the Web Console? You can learn about them on <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Helpers\">MDN Web Docs</a>.</em></p>\n<h2>Mo’ Pixels, Mo’ Panels</h2>\n<p>Do you have a 4k monitor? Do your browser windows bathe in a wash of ample screen real-estate? Let your devtools stretch their legs with a new <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/3-pane_mode\">3-column mode</a> in the Page Inspector. You can now pop the CSS Rules view into its own column, to let you view style information and the excellent Grid tooling or Animations panel side-by-side.</p>\n<figure><a href=\"https://hacks.mozilla.org/files/2018/09/three-column-inspector.png\"><img src=\"https://hacks.mozilla.org/files/2018/09/three-column-inspector.png\" alt=\"\" width=\"2972\" height=\"734\" class=\"alignnone size-full wp-image-32620\" srcset=\"https://hacks.mozilla.org/files/2018/09/three-column-inspector.png 2972w, https://hacks.mozilla.org/files/2018/09/three-column-inspector-250x62.png 250w, https://hacks.mozilla.org/files/2018/09/three-column-inspector-768x190.png 768w, https://hacks.mozilla.org/files/2018/09/three-column-inspector-500x123.png 500w\" sizes=\"(max-width: 2972px) 100vw, 2972px\"></a></figure><figcaption>The Three-Column View toggle can be found in the top-left of the Inspector side panel.</figcaption><h2>Streamlining MediaStream</h2>\n<p>If you’ve worked with WebRTC’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\"><code>getUserMedia</code> API</a>, you may be familiar with a bit of branching logic when attaching a MediaStream object to a <code>&lt;video&gt;</code> or <code>&lt;audio&gt;</code> tag:</p>\n<pre><code class=\"language-js\">navigator.mediaDevices.getUserMedia({ audio: true, video: true })\n.then(function(stream) {\n  if (\"srcObject\" in video) {\n    videoEl.srcObject = stream;\n  } else {\n    videoEl.src = URL.createObjectURL(stream);\n  }\n});\n</code></pre>\n<p>It’s true that earlier support for WebRTC required the use of the <code>URL</code> API, but this was non-standard and is no longer necessary. Firefox 62 removes support for passing a MediaStream to <code>createObjectURL</code>, so be sure you’re using a proper capability check as above.</p>\n<h2>Why stop here?</h2>\n<p>I’ve shown you a glimpse of what’s new and exciting in Firefox 62, but there’s more to learn and love! Be sure to check out the <a href=\"https://www.mozilla.org/en-US/firefox/62.0/releasenotes/\">product release notes</a> for user-facing features as well as a more complete list of developer facing changes on <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/62\">MDN</a>.</p>\n<p>Happy building!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/09/firefox-62/\">Firefox 62 – Tools Cool for School!</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["CSS","Developer Tools","Featured Article","Firefox","Firefox Development Highlights","Firefox Releases","css shapes","Firefox Shape Path Editor","variable fonts"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-09-06 14:39:42","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Make your web layouts bust out of the rectangle with the Firefox Shape Path Editor","pubDate":"2018-09-05 13:53:38","link":"https://hacks.mozilla.org/2018/09/make-your-web-layouts-bust-out-of-the-rectangle-with-the-firefox-shape-path-editor/","guid":"https://hacks.mozilla.org/?p=32597","author":"Josh Marinacci","thumbnail":"https://hacks.mozilla.org/files/2018/08/leaf-example.png","description":"\n<p>CSS Shapes lets your web designs break out of the rectangular grid.  Using a new CSS standard, text can flow, images can be rounded, even just a few non parallel lines can make your site stand out and make your brand distinctive. With the Shape Path Editor in Firefox 62 you can visually edit the shape directly from the CSS inspector, using Firefox Developer Tools to select the element whose shape you want to modify.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/09/make-your-web-layouts-bust-out-of-the-rectangle-with-the-firefox-shape-path-editor/\">Make your web layouts bust out of the rectangle with the Firefox Shape Path Editor</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p>The web doesn’t have to be boxy. Historically, every element in a page is rendered as a rectangle of some kind, but it doesn’t have to be this way. With CSS Shapes you can create web layouts every bit as stylish as print magazines, but with all of the advantages of the web.</p>\n<p>CSS Shapes let your web designs break out of the rectangular grid. All of those classic magazine design elements like non-rectangular text flow and shaped images can be yours, for the low low price of using a new CSS standard. Text can flow, images can be rounded, even just a few non-parallel lines can make your site stand out and make your brand distinctive. Standing out is the biggest challenge most sites face today. Shapes can help!</p>\n<div class=\"wp-caption alignnone\">\n<a href=\"https://hacks.mozilla.org/files/2018/08/leaf-example.png\"><img class=\"wp-image-32599\" src=\"https://hacks.mozilla.org/files/2018/08/leaf-example.png\" alt=\"Save The Trees mockup with leaf-shaped icon, and flowed lorem ipsum text\" width=\"678\" height=\"424\" srcset=\"https://hacks.mozilla.org/files/2018/08/leaf-example.png 678w, https://hacks.mozilla.org/files/2018/08/leaf-example-250x156.png 250w, https://hacks.mozilla.org/files/2018/08/leaf-example-500x313.png 500w\" sizes=\"(max-width: 678px) 100vw, 678px\"></a><p class=\"wp-caption-text\">Image by Sara Soueidan</p>\n</div>\n<h2>The Standard</h2>\n<p>The shape of your elements can be controlled with just two CSS properties: <code>shape-outside</code> and <code>clip-path</code>.</p>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside\" target=\"_blank\" rel=\"noopener\"><code>shape-outside</code></a> property changes the way content flows outside of a <i>floated</i> DOM element. It affects layout, not drawing. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path\" target=\"_blank\" rel=\"noopener\"><code>clip-path</code></a> property changes the clipping boundary of how the DOM element is drawn. It affects drawing, not layout.</p>\n<div class=\"wp-caption alignnone\">\n<a href=\"https://hacks.mozilla.org/files/2018/08/clip-path-vs-shape-outside.png\"><img class=\"wp-image-32600 size-large\" src=\"https://hacks.mozilla.org/files/2018/08/clip-path-vs-shape-outside-500x261.png\" alt=\"clipping the image of a kitten into a circular shape\" width=\"500\" height=\"261\" srcset=\"https://hacks.mozilla.org/files/2018/08/clip-path-vs-shape-outside-500x261.png 500w, https://hacks.mozilla.org/files/2018/08/clip-path-vs-shape-outside-250x130.png 250w, https://hacks.mozilla.org/files/2018/08/clip-path-vs-shape-outside-768x401.png 768w, https://hacks.mozilla.org/files/2018/08/clip-path-vs-shape-outside.png 1568w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a><p class=\"wp-caption-text\">The clip-path and shape-outside properties.</p>\n</div>\n<p>Because these two properties are separate, you can use one, or both, or none — to get just exactly the effect you are looking for. The good news is that both of these use the same <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape\"><code>basic-shape</code> syntax</a>.</p>\n<p>Want to clip your image to be in a circle? Just use <code>clip-path: circle(50%)</code>. Want to make text wrap around your image as if it were a circle, just use <code>shape-outside: circle(50%)</code>. The shape syntax supports rectangles, circles, ellipses, and full polygons. Of course, manually positioning polygons with numbers is slow and painful. Fortunately there is a better way.</p>\n<h2>The Shape Path Editor</h2>\n<p>With the Shape Path Editor in Firefox 62, you can visually edit the shape directly from the CSS inspector. Open your page in Firefox, and use Firefox Developer Tools to select the element whose shape you want to modify. Once you select the element there will be a little icon next to the <code>shape-outside</code> and <code>clip-path</code> properties if you have used one of them. If not, add <code>shape-outside</code> and <code>clip-path</code> to that element first. Click on that little icon to start the visual editor. Then you can <em>directly manipulate</em> the shape with your mouse.</p>\n<div class=\"wp-caption alignnone\">\n<a href=\"https://hacks.mozilla.org/files/2018/08/direct-manipulation.png\"><img class=\"wp-image-32602 size-full\" src=\"https://hacks.mozilla.org/files/2018/08/direct-manipulation.png\" alt=\"Using the shape editor in Firefox Dev Tools\" width=\"1348\" height=\"1366\" srcset=\"https://hacks.mozilla.org/files/2018/08/direct-manipulation.png 1348w, https://hacks.mozilla.org/files/2018/08/direct-manipulation-250x253.png 250w, https://hacks.mozilla.org/files/2018/08/direct-manipulation-768x778.png 768w, https://hacks.mozilla.org/files/2018/08/direct-manipulation-500x507.png 500w\" sizes=\"(max-width: 1348px) 100vw, 1348px\"></a><p class=\"wp-caption-text\">Image courtesy of <a href=\"https://placekitten.com/\">placekitten</a>, text courtesy of <a href=\"http://catipsum.com/\">catipsum</a>.</p>\n</div>\n<p>Open the Inspector and select the element you want to modify:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/open-inspector.gif\"><img class=\"alignnone wp-image-32603 size-full\" src=\"https://hacks.mozilla.org/files/2018/08/open-inspector.gif\" alt=\"using the inspector to modify a kitten photo\" width=\"702\" height=\"778\"></a></p>\n<p>Click the icon next to <code>clip-path</code> or <code>shape-outside</code>. If the element doesn’t have one of these properties, add it, then select it.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/select-clip-path.gif\"><img class=\"alignnone wp-image-32604 size-full\" src=\"https://hacks.mozilla.org/files/2018/08/select-clip-path.gif\" alt=\"modifying the image element with the shape editor\" width=\"702\" height=\"778\"></a></p>\n<p>Edit the clip path:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/change-clippath.gif\"><img class=\"alignnone wp-image-32605 size-full\" src=\"https://hacks.mozilla.org/files/2018/08/change-clippath.gif\" alt=\"editing the clip path\" width=\"702\" height=\"778\"></a></p>\n<p>Edit the outside shape:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/change-shape-outside.gif\"><img class=\"alignnone wp-image-32606 size-full\" src=\"https://hacks.mozilla.org/files/2018/08/change-shape-outside.gif\" alt=\"editing the outside shape\" width=\"702\" height=\"778\"></a></p>\n<p>Check out this <a href=\"https://css-shapes-demo-1.glitch.me/\">live demo</a> on glitch.</p>\n<p> </p>\n<p>To learn more about how to use the CSS Shape Editor read the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_CSS_shapes\">full documentation</a>.</p>\n<h2>Progressive Enhancement</h2>\n<p>CSS shapes are here and they work today in most browsers, and most importantly they <i>degrade gracefully</i>. Readers with current browsers will get a beautiful experience and readers with non-compliant browsers <i>will never know they are missing anything</i>.</p>\n<figure><a href=\"https://hacks.mozilla.org/files/2018/08/with-shapes.png\"><img class=\"wp-image-32607 size-medium\" src=\"https://hacks.mozilla.org/files/2018/08/with-shapes-250x224.png\" alt=\"kitten with shape support\" width=\"250\" height=\"224\" srcset=\"https://hacks.mozilla.org/files/2018/08/with-shapes-250x224.png 250w, https://hacks.mozilla.org/files/2018/08/with-shapes-768x687.png 768w, https://hacks.mozilla.org/files/2018/08/with-shapes-500x447.png 500w, https://hacks.mozilla.org/files/2018/08/with-shapes.png 1294w\" sizes=\"(max-width: 250px) 100vw, 250px\"></a><a href=\"https://hacks.mozilla.org/files/2018/08/without-shapes.png\"><img class=\"wp-image-32608 size-medium\" src=\"https://hacks.mozilla.org/files/2018/08/without-shapes-250x224.png\" alt=\"kitten image without shape support degrades progressively\" width=\"250\" height=\"224\" srcset=\"https://hacks.mozilla.org/files/2018/08/without-shapes-250x224.png 250w, https://hacks.mozilla.org/files/2018/08/without-shapes-768x687.png 768w, https://hacks.mozilla.org/files/2018/08/without-shapes-500x447.png 500w, https://hacks.mozilla.org/files/2018/08/without-shapes.png 1294w\" sizes=\"(max-width: 250px) 100vw, 250px\"></a></figure><h2>Stunning Examples</h2>\n<p>Here are just a few examples of the amazing layouts you can do with CSS Shapes:</p>\n<p><a href=\"https://codepen.io/mandymichael/pen/KmwvVb\">Page layout text effects with <code>clip-path</code></a>:</p>\n<div class=\"wp-caption alignnone\">\n<a href=\"https://codepen.io/mandymichael/pen/KmwvVb\"><img class=\"wp-image-32609 size-large\" src=\"https://hacks.mozilla.org/files/2018/08/girl-example-500x241.png\" alt='Codepen by Mandy Michael called \"Create\"' width=\"500\" height=\"241\" srcset=\"https://hacks.mozilla.org/files/2018/08/girl-example-500x241.png 500w, https://hacks.mozilla.org/files/2018/08/girl-example-250x120.png 250w, https://hacks.mozilla.org/files/2018/08/girl-example-768x370.png 768w, https://hacks.mozilla.org/files/2018/08/girl-example.png 1486w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a><p class=\"wp-caption-text\">via Mandy Michael</p>\n</div>\n<p>Plants and background effect using <code>clip-path</code>:</p>\n<div class=\"wp-caption alignnone\">\n<a href=\"http://aganaplocha.com/netmag/plants/\"><img class=\"wp-image-32611 size-large\" src=\"https://hacks.mozilla.org/files/2018/08/plants-demo-500x286.png\" alt=\"Image of plants in foreground, pink background, with text overlay\" width=\"500\" height=\"286\" srcset=\"https://hacks.mozilla.org/files/2018/08/plants-demo-500x286.png 500w, https://hacks.mozilla.org/files/2018/08/plants-demo-220x125.png 220w, https://hacks.mozilla.org/files/2018/08/plants-demo-250x143.png 250w, https://hacks.mozilla.org/files/2018/08/plants-demo-768x440.png 768w, https://hacks.mozilla.org/files/2018/08/plants-demo.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a><p class=\"wp-caption-text\">via <a href=\"http://aganaplocha.com/netmag/plants/\">Aga Naplocha</a></p>\n</div>\n<p>Minion using <code>shape-outside</code>:</p>\n<div class=\"wp-caption alignnone\">\n<a href=\"https://medium.com/@nicke920/wrapping-content-around-images-using-css-shapes-2fb17c8fde4e\"><img class=\"wp-image-32612 size-large\" src=\"https://hacks.mozilla.org/files/2018/08/minion-demo-500x280.png\" alt=\"Image of minion with text flowing around them\" width=\"500\" height=\"280\" srcset=\"https://hacks.mozilla.org/files/2018/08/minion-demo-500x280.png 500w, https://hacks.mozilla.org/files/2018/08/minion-demo-250x140.png 250w, https://hacks.mozilla.org/files/2018/08/minion-demo-768x431.png 768w, https://hacks.mozilla.org/files/2018/08/minion-demo.png 1600w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a><p class=\"wp-caption-text\">via <a href=\"https://medium.com/@nicke920/wrapping-content-around-images-using-css-shapes-2fb17c8fde4e\">Nicholas Evans</a></p>\n</div>\n<h2>Break out of the Box</h2>\n<p>Shapes on the web are here today, thanks to <code>shape-outside</code> and <code>clip-path</code>. Using the <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_CSS_shapes\">Firefox Shape Path Editor</a> makes them even easier to use.</p>\n<p>How will you make your website break out of the box? Let us know how you’re using Shapes.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/09/make-your-web-layouts-bust-out-of-the-rectangle-with-the-firefox-shape-path-editor/\">Make your web layouts bust out of the rectangle with the Firefox Shape Path Editor</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["CSS","Featured Article","Firefox","Firefox Releases","clip-path","css shapes","shapes editor"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-09-05 13:53:38","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Variable Fonts Arrive in Firefox 62","pubDate":"2018-09-04 14:09:57","link":"https://hacks.mozilla.org/2018/09/variable-fonts-arrive-in-firefox-62/","guid":"https://hacks.mozilla.org/?p=32590","author":"Dan Callahan","thumbnail":"https://hacks.mozilla.org/files/2018/08/font-files-500x285.png","description":"\n<p>Firefox 62 adds support for Variable Fonts, an exciting new technology that makes it possible to create beautiful typography with a single font file. Variable fonts are now supported in all major browsers. And because great features deserve great tools, we’re hard at work building an all new Font Editor into the Firefox DevTools for Firefox 63. Or check it out today in Firefox Nightly. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/09/variable-fonts-arrive-in-firefox-62/\">Variable Fonts Arrive in Firefox 62</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p>Firefox 62, which lands in general release this week, adds support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide\" rel=\"noopener\" target=\"_blank\">Variable Fonts</a>, an exciting new technology that makes it possible to create beautiful typography with a single font file. Variable fonts are now <a href=\"https://caniuse.com/#feat=variable-fonts\">supported in all major browsers</a>.</p>\n<h2>What <i>are</i> Variable Fonts?</h2>\n<p>Font families can have dozens of variations: different weights, expanded or condensed widths, italics, etc. Traditionally, each variant required its own separate font file, which meant that Web designers had to balance typographic nuance with pragmatic concerns around page weight and network performance.</p>\n<p>Compared to traditional fonts, variable fonts contain additional data, which make it possible to <i>generate</i> different styles of the font on demand. For one example, consider <a href=\"http://indestructibletype.com/Jost.html\"><i>Jost*</i></a><i>,</i> an <a href=\"https://github.com/indestructible-type/Jost\">open-source</a>, Futura-inspired typeface from <a href=\"http://indestructibletype.com/\">indestructible type*</a>. Jost* comes in nine weights, each with regular and italic styles, for a total of eighteen files.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/font-files.png\"><img class=\"aligncenter size-large wp-image-32594\" src=\"https://hacks.mozilla.org/files/2018/08/font-files-500x285.png\" alt=\"Screenshot of 18 traditional TTF files next to to a single, variable TTF file that that can replace the 18 other files.\" width=\"500\" height=\"285\" srcset=\"https://hacks.mozilla.org/files/2018/08/font-files-500x285.png 500w, https://hacks.mozilla.org/files/2018/08/font-files-220x125.png 220w, https://hacks.mozilla.org/files/2018/08/font-files-250x143.png 250w, https://hacks.mozilla.org/files/2018/08/font-files-768x438.png 768w, https://hacks.mozilla.org/files/2018/08/font-files.png 1505w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a></p>\n<p>Jost* also comes as a single variable font file which is able to generate not only those same eighteen variations, but also any intermediate weight at any degree of italicization.</p>\n<h2>Design Axes</h2>\n<p>Jost* is an example of a “two-axis” variable font: it can vary in both <b>weight</b> and <i>italics</i>. Variable fonts can have any number of axes, and each axis can control any aspect of the design. Weight is the most common axis, but typographers are free to invent their own.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/09/two-axes.png\"><img class=\"aligncenter wp-image-32614 size-large\" src=\"https://hacks.mozilla.org/files/2018/09/two-axes-500x872.png\" alt=\"Illustration of the various weights and italics settings for the Jost* font\" width=\"500\" height=\"872\" srcset=\"https://hacks.mozilla.org/files/2018/09/two-axes-500x872.png 500w, https://hacks.mozilla.org/files/2018/09/two-axes-250x436.png 250w, https://hacks.mozilla.org/files/2018/09/two-axes.png 577w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a></p>\n<p>One typeface that invented its own axis is <a href=\"https://v-fonts.com/fonts/slovic-variable\">Slovic</a>. Slovic is a Cyrillic variable font with a single axis, <code>style</code>, that effectively varies <i>history</i>. At one extreme, characters are drawn similarly to how they appear in 9th century manuscripts, while at the other, they adopt modern sans-serif forms. In between are several intermediate styles. Variable font technology allows the design to adapt and morph smoothly across the entire range of the axis.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/slovic.png\"><img class=\"aligncenter wp-image-32592 size-medium\" src=\"https://hacks.mozilla.org/files/2018/08/slovic-250x74.png\" alt=\"Illustration of the Slovic font's letterforms morphing with different values of the &quot;style&quot; variable font axis\" width=\"250\" height=\"74\" srcset=\"https://hacks.mozilla.org/files/2018/08/slovic-250x74.png 250w, https://hacks.mozilla.org/files/2018/08/slovic-500x148.png 500w, https://hacks.mozilla.org/files/2018/08/slovic.png 600w\" sizes=\"(max-width: 250px) 100vw, 250px\"></a></p>\n<p>The sky’s the limit! To see other examples of variable fonts, check out <a href=\"http://v-fonts.com/\">v-fonts.com</a> and <a href=\"http://www.axis-praxis.org/\">Axis Praxis</a>.</p>\n<h2>Better Tools for Better Typography on the Web</h2>\n<p>Great features deserve great tools, and that’s why we’re hard at work building an all new <a href=\"https://developer.mozilla.org/docs/Tools/Page_Inspector/How_to/View_fonts\">Font Editor</a> into the Firefox DevTools. Here’s a sneak peek:</p>\n<p></p>\n<p>You can find the Font Editor as a panel inside the Page Inspector in the Dev Tools. If you have enough space on your screen, it’s helpful to enable <a href=\"https://developer.mozilla.org/docs/Tools/Page_Inspector/3-pane_mode\">3-pane mode</a> so you can see the DOM tree, CSS Rules, and Font Editor all side-by-side.</p>\n<p>When you click on an element in the DOM tree, the Font Editor updates to show information about the selected element’s font, as well as tools for editing its properties. The Font Editor works on all fonts, but really shines with variable ones. For instance, the weight control subtly changes from stepped slider to continuous one in the presence of a variable font with a weight axis.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/Screen-Shot-2018-08-30-at-22.25.11-edit.png\"><img class=\"aligncenter size-large wp-image-32593\" src=\"https://hacks.mozilla.org/files/2018/08/Screen-Shot-2018-08-30-at-22.25.11-edit-500x167.png\" alt=\"A comparison of the DevTools Font Editor when inspecting a variable font versus a traditional font, showing how the varible font axes appear as continuous, smooth sliders, while the traditional font has toggles or stepped sliders to adjust things like italic or weight\" width=\"500\" height=\"167\" srcset=\"https://hacks.mozilla.org/files/2018/08/Screen-Shot-2018-08-30-at-22.25.11-edit-500x167.png 500w, https://hacks.mozilla.org/files/2018/08/Screen-Shot-2018-08-30-at-22.25.11-edit-250x83.png 250w, https://hacks.mozilla.org/files/2018/08/Screen-Shot-2018-08-30-at-22.25.11-edit-768x256.png 768w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a></p>\n<p>Similarly, each design axis in a variable font gets its own widget in the editor, allowing you to directly customize the font’s appearance and immediately see the results on your page.</p>\n<p>The new Font Editor will arrive with <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/63\" rel=\"noopener\" target=\"_blank\">Firefox 63</a> in October, but you can use it today by downloading <a href=\"https://www.mozilla.org/firefox/channel/desktop/#nightly\">Firefox Nightly</a>. Let us know what you think! Your feedback is an essential guide as we continue to build and refine Firefox’s design tools.</p>\n<p><em>Editor’s note:</em> Attention MacOS users — variable fonts require MacOS 10.13+</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/09/variable-fonts-arrive-in-firefox-62/\">Variable Fonts Arrive in Firefox 62</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["Featured Article","Firefox","Firefox Releases","Web Developer Toolbox","fonts","typography","variable fonts"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-09-04 14:09:57","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Dweb: Building Cooperation and Trust into the Web with IPFS","pubDate":"2018-08-29 14:43:20","link":"https://hacks.mozilla.org/2018/08/dweb-building-cooperation-and-trust-into-the-web-with-ipfs/","guid":"https://hacks.mozilla.org/?p=32569","author":"Kyle Drake","thumbnail":"https://hacks.mozilla.org/files/2018/08/ipfs-stack-high-level-overview-500x387.png","description":"\n<p>The Interplanetary File System (IPFS) is a new protocol powered by individuals on the internet. Its goal is to “re-decentralize” the web by replacing location-oriented HTTP with a content-oriented protocol that allows websites and web apps to be “served” by any computer on the internet with IPFS support. IPFS and the distributed web decouple information from physical location and singular distribution, with the aim of creating a more affordable, available, and faster web for all.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-building-cooperation-and-trust-into-the-web-with-ipfs/\">Dweb: Building Cooperation and Trust into the Web with IPFS</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p><em>In this series we are covering projects that explore what is possible when the web becomes decentralized or distributed. These projects aren’t affiliated with Mozilla, and some of them rewrite the rules of how we think about a web browser. What they have in common: These projects are open source, and open for participation, and share Mozilla’s mission to keep the web open and accessible for all.</em></p>\n<p><em>Some projects start small, aiming for incremental improvements. Others start with a grand vision, leapfrogging today’s problems by architecting an idealized world. The InterPlanetary File System (IPFS) is definitely the latter – attempting to replace HTTP entirely, with a network layer that has scale, trust, and anti-DDOS measures all built into the protocol. It’s our pleasure to have an introduction to IPFS today from <a href=\"https://twitter.com/kyledrake\">Kyle Drake</a>, the founder of <a href=\"https://neocities.org/\">Neocities</a> and <a href=\"https://github.com/lidel\">Marcin Rataj</a>, the creator of <a href=\"https://github.com/ipfs-shipyard/ipfs-companion/\">IPFS Companion</a>, both on the IPFS team at <a href=\"https://protocol.ai/\">Protocol Labs</a> -Dietrich Ayala</em></p>\n<h2>IPFS – The InterPlanetary File System</h2>\n<p>We’re a team of people all over the world working on IPFS, an implementation of the distributed web that seeks to replace <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\" target=\"_blank\" rel=\"noopener\">HTTP</a> with a new protocol that is powered by individuals on the internet. The goal of IPFS is to “re-decentralize” the web by replacing the location-oriented HTTP with a content-oriented protocol that does not require trust of third parties. This allows for websites and web apps to be “served” by any computer on the internet with IPFS support, without requiring servers to be run by the original content creator. IPFS and the distributed web unmoor information from physical location and singular distribution, ultimately creating a more affordable, equal, available, faster, and less censorable web.</p>\n<p>IPFS aims for a “distributed” or “logically decentralized” design. IPFS consists of a network of nodes, which help each other find data using a content hash via a <a href=\"https://en.wikipedia.org/wiki/Distributed_hash_table\" target=\"_blank\" rel=\"noopener\">Distributed Hash Table (DHT)</a>. The result is that all nodes help find and serve web sites, and even if the original provider of the site goes down, you can still load it as long as one other computer in the network has a copy of it. The web becomes empowered by individuals, rather than depending on the large organizations that can afford to build large content delivery networks and serve a lot of traffic.</p>\n<p>The IPFS stack is an abstraction built on top of <a href=\"https://ipld.io/\">IPLD</a> and <a href=\"https://libp2p.io/\">libp2p</a>:</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/ipfs-stack-high-level-overview.png\"><img class=\"alignnone wp-image-32585 size-large\" src=\"https://hacks.mozilla.org/files/2018/08/ipfs-stack-high-level-overview-500x387.png\" alt=\"The IPFS Stack: High Level Overview\" width=\"500\" height=\"387\" srcset=\"https://hacks.mozilla.org/files/2018/08/ipfs-stack-high-level-overview-500x387.png 500w, https://hacks.mozilla.org/files/2018/08/ipfs-stack-high-level-overview-250x193.png 250w, https://hacks.mozilla.org/files/2018/08/ipfs-stack-high-level-overview-768x594.png 768w\" sizes=\"(max-width: 500px) 100vw, 500px\"></a></p>\n<h2>Hello World</h2>\n<p>We have a reference implementation in Go (<a href=\"https://github.com/ipfs/go-ipfs\" target=\"_blank\" rel=\"noopener\">go-ipfs</a>) and a constantly improving one in Javascript (<a href=\"https://github.com/ipfs/js-ipfs\" target=\"_blank\" rel=\"noopener\">js-ipfs</a>). There is also a long list of API clients for other languages.</p>\n<p>Thanks to the JS implementation, using IPFS in web development is extremely easy. The following code snippet…</p>\n<ul>\n<li>Starts an IPFS node</li>\n<li>Adds some data to IPFS</li>\n<li>Obtains the Content IDentifier (CID) for it</li>\n<li>Reads that data back from IPFS using the CID</li>\n</ul>\n<pre><code class=\"language-html\"><br>&lt;script src=\"https://unpkg.com/ipfs/dist/index.min.js\"&gt;&lt;/script&gt;\n\nOpen Console (Ctrl+Shift+K)\n\n&lt;script&gt;\n  const ipfs = new Ipfs()\n  const data = 'Hello from IPFS, &lt;YOUR NAME HERE&gt;!'\n\n  // Once the ipfs node is ready\n  ipfs.once('ready', async () =&gt; {\n    console.log('IPFS node is ready! Current version: ' + (await ipfs.id()).agentVersion)\n\n    // convert your data to a Buffer and add it to IPFS\n    console.log('Data to be published: ' + data)\n    const files = await ipfs.files.add(ipfs.types.Buffer.from(data))\n\n    // 'hash', known as CID, is a string uniquely addressing the data\n    // and can be used to get it again. 'files' is an array because\n    // 'add' supports multiple additions, but we only added one entry\n    const cid  = files[0].hash\n    console.log('Published under CID: ' + cid)\n\n    // read data back from IPFS: CID is the only identifier you need!\n    const dataFromIpfs = await ipfs.files.cat(cid)\n    console.log('Read back from IPFS: ' + String(dataFromIpfs))\n\n    // Compatibility layer: HTTP gateway\n    console.log('Bonus: open at one of public HTTP gateways: https://ipfs.io/ipfs/' + cid)\n  })\n&lt;/script&gt;\n</code></pre>\n<p>That’s it!</p>\n<p>Before diving deeper, let’s answer key questions:</p>\n<h3>Who else can access it?</h3>\n<p>Everyone with the CID can access it. Sensitive files should be encrypted before publishing.</p>\n<h3>How long will this content exist? Under what circumstances will it go away? How does one remove it?</h3>\n<p>The permanence of content-addressed data in IPFS is intrinsically bound to the active participation of peers interested in providing it to others. It is impossible to remove data from other peers but if no peer is keeping it alive, it will be “forgotten” by the swarm.</p>\n<p>The public HTTP gateway will keep the data available for a few hours — if you want to ensure long term availability make sure to pin important data at nodes you control. Try <a href=\"http://cluster.ipfs.io/\" target=\"_blank\" rel=\"noopener\">IPFS Cluster</a>: a stand-alone application and a CLI client to allocate, replicate and track pins across a cluster of IPFS daemons.</p>\n<h2>Developer Quick Start</h2>\n<p>You can experiment with <a href=\"https://github.com/ipfs/js-ipfs/\">js-ipfs</a> to make simple browser apps. If you want to run an IPFS server you can <a href=\"https://ipfs.io/\">install go-ipfs</a>, or <a href=\"http://cluster.ipfs.io/\">run a cluster</a>, as we mentioned above.</p>\n<p>There is a growing list of <a href=\"https://github.com/ipfs/js-ipfs/tree/master/examples/\">examples</a>, and make sure to see the <a href=\"https://github.com/ipfs/js-ipfs/tree/master/examples/exchange-files-in-browser\">bi-directional file exchange demo</a> built with js-ipfs.</p>\n<p>You can add IPFS to the browser by installing the <a href=\"https://addons.mozilla.org/en-US/firefox/addon/ipfs-companion/\">IPFS Companion extension</a> for Firefox.</p>\n<h2>Learn More</h2>\n<p>Learn about IPFS concepts by visiting our documentation website at <a href=\"https://docs.ipfs.io/\" target=\"_blank\" rel=\"noopener\">https://docs.ipfs.io</a>.</p>\n<p>Readers can participate by improving documentation, visiting <a href=\"https://ipfs.io/\" target=\"_blank\" rel=\"noopener\">https://ipfs.io</a>, developing distributed web apps and sites with IPFS, and exploring and contributing to <a href=\"https://github.com/ipfs\">our git repos</a> and various things built by the <a href=\"https://awesome.ipfs.io/\">community</a>.</p>\n<p>A great place to ask questions is our friendly community forum: <a href=\"https://discuss.ipfs.io/\">https://discuss.ipfs.io</a>.<br>\nWe also have an IRC channel, #ipfs on Freenode (or #freenode_#ipfs:matrix.org on Matrix). Join us!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-building-cooperation-and-trust-into-the-web-with-ipfs/\">Dweb: Building Cooperation and Trust into the Web with IPFS</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["Dweb","Featured Article","P2P Web","Interplanetary File System","IPFS"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-08-29 14:43:20","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Share your favorite images and videos in VR with Mozilla Hubs","pubDate":"2018-08-23 14:45:31","link":"https://hacks.mozilla.org/2018/08/share-your-favorite-images-and-videos-in-vr-with-mozilla-hubs/","guid":"https://hacks.mozilla.org/?p=32557","author":"Josh Marinacci","thumbnail":"https://hacks.mozilla.org/files/2018/08/giphy-demo-500x313.png","description":"\n<p>Mozilla Hubs is a VR chat system that lets you walk and talk in VR with your friends, no matter where in the world they are. Now you can share virtually any kind of media with everyone in your Hubs room by just pasting in a URL. Anything you share becomes a virtual object that everyone can interact with.  From images to videos to 3D models, Hubs enables sharing and collaboration across devices (laptops, phones, headsets) and OSes.  </p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/share-your-favorite-images-and-videos-in-vr-with-mozilla-hubs/\">Share your favorite images and videos in VR with Mozilla Hubs</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p>Last April we released <a href=\"http://hubs.mozilla.com/\">Mozilla Hubs</a>, a VR chat system that lets you walk and talk in VR with your friends, no matter where in the world they are. Now we <a href=\"https://blog.mozvr.com/new-in-hubs-images-videos-and-3d-models/\">have a game changing new feature:</a> you can share virtually any kind of media with everyone in your Hubs room by just pasting in a URL. Anything you share becomes a virtual object that everyone can interact with.  From images to videos to 3D models, Hubs is the best way to collaborate across devices (laptops, phones, headsets) and OSes. Let’s look at a few details.</p>\n<h2>What can I share?</h2>\n<p>Hubs supports the common image formats: PNG, JPG, and even animated GIFs.</p>\n<p><img class=\"alignnone size-large wp-image-32558\" src=\"https://hacks.mozilla.org/files/2018/08/giphy-demo-500x313.png\" alt=\"\" width=\"500\" height=\"313\" srcset=\"https://hacks.mozilla.org/files/2018/08/giphy-demo-500x313.png 500w, https://hacks.mozilla.org/files/2018/08/giphy-demo-250x156.png 250w, https://hacks.mozilla.org/files/2018/08/giphy-demo-768x480.png 768w, https://hacks.mozilla.org/files/2018/08/giphy-demo.png 1600w\" sizes=\"(max-width: 500px) 100vw, 500px\"></p>\n<p>Hubs also supports streaming media files like MP3s and MP4s, as well as 3D models in GLB format (the compact binary form of <a href=\"https://en.wikipedia.org/wiki/GlTF\" rel=\"noopener\" target=\"_blank\">GLTF</a>).  And finally, Hubs has special support for content from certain websites.</p>\n<p>If you paste in a URL to a model on <a href=\"https://sketchfab.com/\">Sketchfab</a> (an online community and marketplace of 3D artists and makers), Hubs will fetch the model and import it into the room, no extra work required. As long as the model is less than 100MB and marked as downloadable, the Hubs server will process the webpage to find the link to the actual 3D model and import only that.  Hubs can also perform this same trick with URLs from <a href=\"https://giphy.com/\">Giphy</a>, <a href=\"https://imgur.com/\">Imgur</a>, <a href=\"https://poly.google.com/\">Google Poly</a> (only objects made in Blocks, not panoramas), and even <a href=\"https://www.youtube.com/\">YouTube</a> videos. The media is cached into the Hubs server before sending to Hubs clients.</p>\n<h3>Is it secure?</h3>\n<p>Yes. When someone in your Hubs room pastes in a URL it does not immediately go to every client logged into the room. Instead the URL is processed by the Hubs server which hosts the encrypted media, sending only the validated data to the other clients.  This helps to protect from <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS attacks</a> as well.</p>\n<p>The Hubs server will host all content for up to 48 hours after the last time it is accessed, so once everyone is done interacting with it, the media file will eventually disappear. It is never copied anywhere else. The server also encrypts the data, so only clients in your Hubs room can see it. Additionally, Hubs does not track logins, so content has no user-identifiable data that could be used for tracking.</p>\n<h3>What can I do with content in Hubs?</h3>\n<p>You can pick up any kind of content object then move it, throw it, or leave it stuck in one place by holding still for a moment before releasing.  If you have a 6DoF controller then you can also resize the object.</p>\n<p>For audio and video you can click to play and pause the media stream.  For PDFs you can advance one page at a time, making Hubs the best way to share presentations in VR, or just join your friends for some YouTube binging.</p>\n<h3>Are there any other requirements?</h3>\n<p>Nope.  Any content you have on the web you can share. Since the server acts as a proxy you don’t need to worry about CORS. If the content you want to share is not web accessible then you can upload the file directly to Hubs, which will then host and share it automatically. You can even use content from your public Dropbox folder. It all just works.</p>\n<p>If you have content that you want to ensure users can share within Hubs, then just make it publicly accessible from the web in one of the file formats we support (as listed above).  For data you don’t want to stay public permanently, you can serve up a randomly generated URL which expires after 10 minutes. Once the data is imported into the Hubs server it no longer needs to be accessible on the web.</p>\n<h3>What now?</h3>\n<p>Play with it. Join your friends in a room to hang out, work on a presentation, or just watch some videos.  All with real-time voice communication as well. As always, Hubs will work on any device with a browser, from 2D desktop to standalone VR headset to smartphone. Hubs will adapt to the device you have available.  Just share a link to your room and go.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/share-your-favorite-images-and-videos-in-vr-with-mozilla-hubs/\">Share your favorite images and videos in VR with Mozilla Hubs</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["Featured Article","WebVR"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-08-23 14:45:31","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Dweb: Serving the Web from the Browser with Beaker","pubDate":"2018-08-22 14:37:04","link":"https://hacks.mozilla.org/2018/08/dweb-serving-the-web-from-the-browser-with-beaker/","guid":"https://hacks.mozilla.org/?p=32548","author":"Tara Vancil","thumbnail":"https://hacks.mozilla.org/files/2018/08/beaker-team.jpg","description":"\n<p>Publishing and sharing is core to the Web’s ethos, yet to publish your own website or even just share a document, you need to know how to run a server, or be able to pay someone to do it for you. Peer-to-peer protocols like <code>dat://</code> make it possible for regular user devices to host content, so Beaker uses <code>dat://</code> to enable publishing from the browser, where instead of using a server, a website’s author and its visitors help host its files. It’s kind of like BitTorrent, but for websites!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-serving-the-web-from-the-browser-with-beaker/\">Dweb: Serving the Web from the Browser with Beaker</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p><em>In this series we are covering projects that explore what is possible when the web becomes decentralized or distributed. These projects aren’t affiliated with Mozilla, and some of them rewrite the rules of how we think about a web browser. What they have in common: These projects are open source, and open for participation, and share Mozilla’s mission to keep the web open and accessible for all.</em></p>\n<p>So far we’ve covered <a href=\"https://hacks.mozilla.org/2018/08/dweb-social-feeds-with-secure-scuttlebutt/\">distributed social feeds</a> and <a href=\"https://hacks.mozilla.org/2018/08/dweb-building-a-resilient-web-with-webtorrent/\">sharing files in a decentralized way</a> with some new tools for developers. Today we’d like to introduce something a bit different: Imagine what an <em>entire browser experience</em> would be like if the web was distributed… Beaker browser does exactly this! Beaker is a big vision from a team who are proving out the distributed web from top to bottom. Please enjoy this post from Beaker co-creator Tara Vancil. – Dietrich Ayala</p>\n<hr class=\"dino\">\n<h2>Blue Link Labs and Beaker</h2>\n<p>We’re <a href=\"https://bluelinklabs.com/\">Blue Link Labs</a>, a team of three working to improve the Web with the <a href=\"https://datproject.org/\">Dat protocol</a> and an experimental peer-to-peer browser called <a href=\"https://beakerbrowser.com/\">Beaker</a>.</p>\n<p><img src=\"https://hacks.mozilla.org/files/2018/08/beaker-team.jpg\" alt=\"Blue Link Labs team\"></p>\n<p>We work on Beaker because publishing and sharing is core to the Web’s ethos, yet to publish your own website or even just share a document, you need to know how to run a server, or be able to pay someone to do it for you.</p>\n<p>So we asked ourselves, “What if you could share a website directly from your browser?”</p>\n<p>Peer-to-peer protocols like <code>dat://</code> make it possible for regular user devices to host content, so we use <code>dat://</code> in Beaker to enable publishing from the browser, where instead of using a server, a website’s author and its visitors help host its files. It’s kind of like BitTorrent, but for websites!</p>\n<h2>Architecture</h2>\n<p>Beaker uses a distributed peer-to-peer network to publish websites and datasets (sometimes we call them “dats”).</p>\n<p><code>dat://</code> websites are addressed with a public key as the URL, and each piece of<br>\ndata added to a <code>dat://</code> website is appended to a signed log. Visitors to a <code>dat://</code><br>\nwebsite find each other with a tracker or <a href=\"https://en.wikipedia.org/wiki/Distributed_hash_table\">DHT</a>, then sync the data between each other, acting both as downloaders and uploaders, and checking that the data hasn’t been tampered with in transit.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/beaker-mozhacks-diagram.png\"><img src=\"https://hacks.mozilla.org/files/2018/08/beaker-mozhacks-diagram.png\" alt=\"a basic illustration of the dat:// network\" width=\"394\" height=\"252\" class=\"alignnone size-full wp-image-32540\" srcset=\"https://hacks.mozilla.org/files/2018/08/beaker-mozhacks-diagram.png 394w, https://hacks.mozilla.org/files/2018/08/beaker-mozhacks-diagram-250x160.png 250w\" sizes=\"(max-width: 394px) 100vw, 394px\"></a></p>\n<p>At its core, a <code>dat://</code> website isn’t much different than an https:// website — it’s a collection of files and folders that a browser interprets according to Web standards. But <code>dat://</code> websites are special in Beaker because we’ve added <a href=\"https://beakerbrowser.com/docs/apis\">peer-to-peer Web APIs</a> so developers can do things like read, write, and watch <code>dat://</code> files and build peer-to-peer Web apps.</p>\n<h2>Create a P2P Website</h2>\n<p>Beaker makes it easy for anyone to create a new <code>dat://</code> website with one click (see our <a href=\"https://beakerbrowser.com/docs/tour\">tour</a>). If you’re familiar with HTML, CSS, or JavaScript (even just a little bit!) then you’re ready to publish your first <code>dat://</code> website.</p>\n<p>Developers can get started by checking out our <a href=\"https://beakerbrowser.com/docs/apis\">API documentation</a> or reading through our <a href=\"https://beakerbrowser.com/docs/guides\">guides</a>.</p>\n<p>This example shows a website editing <em>itself</em> to create and save a new JSON file. While this example is contrived, it demonstrates a common pattern for storing data, user profiles, etc. in a <code>dat://</code> website—instead of application data being sent away to a server, it can be stored in the website itself!</p>\n<pre><code class=\"language-html\">// index.html\n\nSubmit message\n\n&lt;script src=\"index.js\"&gt;&lt;/script&gt;\n\n</code></pre>\n<pre><code class=\"language-javascript\">// index.js\n\n// first get an instance of the website's files\nvar files = new DatArchive(window.location)\n\ndocument.getElementById('create-json-button').addEventListener('click', saveMessage)\n\nasync function saveMessage () {\nvar timestamp = Date.now()\nvar filename = timestamp + '.json'\nvar content = {\ntimestamp,\nmessage: document.getElementById('message').value\n}\n\n// write the message to a JSON file\n// this file can be read later using the DatArchive.readFile API\nawait files.writeFile(filename, JSON.stringify(content))\n}\n</code></pre>\n<h2>Learn More</h2>\n<p>We’re always excited to see what people build with <code>dat://</code> and Beaker. We especially love seeing when someone builds a personal site or blog, or when they experiment with Beaker’s APIs to build an app.</p>\n<p>There’s lots to explore on the peer-to-peer Web!</p>\n<ul>\n<li><a href=\"https://beakerbrowser.com/docs/tour\">Take a tour of Beaker</a></li>\n<li><a href=\"https://beakerbrowser.com/docs\">Beaker documentation</a></li>\n<li>\n<a href=\"http://p2pforever.org/\">p2pforever.org</a> – a humble hub of peer-to-peer Web resources</li>\n<li><a href=\"https://github.com/beakerbrowser/beaker\">Beaker on GitHub</a></li>\n</ul>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-serving-the-web-from-the-browser-with-beaker/\">Dweb: Serving the Web from the Browser with Beaker</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["Dweb","Featured Article","beaker","dat:// protocol","p2p"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-08-22 14:37:04","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Dweb: Building a Resilient Web with WebTorrent","pubDate":"2018-08-15 14:49:16","link":"https://hacks.mozilla.org/2018/08/dweb-building-a-resilient-web-with-webtorrent/","guid":"https://hacks.mozilla.org/?p=32533","author":"Feross Aboukhadijeh","thumbnail":"https://hacks.mozilla.org/files/2018/08/screenshot-player.png","description":"\n<p>The web is healthy when the financial cost of self-expression isn’t a barrier. This installment of the Dweb series describes WebTorrent – an implementation of the BitTorrent protocol that runs in a web browser. It’s written completely in JavaScript – the language of the web – and uses WebRTC for true peer-to-peer transport. No browser plugin, extension, or installation is required. The distributed approach removes the cost of running centralized servers at data centers, allowing websites to scale sustainably. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-building-a-resilient-web-with-webtorrent/\">Dweb: Building a Resilient Web with WebTorrent</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p><em>In this series we are covering projects that explore what is possible when the web becomes decentralized or distributed. These projects aren’t affiliated with Mozilla, and some of them rewrite the rules of how we think about a web browser. What they have in common: These projects are open source, and open for participation, and share Mozilla’s mission to keep the web open and accessible for all.</em></p>\n<p>The web is healthy when the financial cost of self-expression isn’t a barrier. In this installment of the Dweb series we’ll learn about WebTorrent – an implementation of the <a href=\"http://www.bittorrent.org/beps/bep_0003.html\" target=\"_blank\" rel=\"noopener\">BitTorrent protocol</a> that runs in web browsers. This approach to serving files means that websites can scale with as many users as are simultaneously viewing the website – removing the cost of running centralized servers at data centers. The post is written by Feross Aboukhadijeh, the creator of <a href=\"https://webtorrent.io/\" target=\"_blank\" rel=\"noopener\">WebTorrent</a>, co-founder of PeerCDN and a prolific NPM module author… 225 modules at last count! –Dietrich Ayala</p>\n<h2>What is WebTorrent?</h2>\n<p>WebTorrent is the first torrent client that works in the browser. It’s written completely in JavaScript – the language of the web – and uses <a href=\"https://webrtc.org/\" target=\"_blank\" rel=\"noopener\">WebRTC</a> for true peer-to-peer transport. No browser plugin, extension, or installation is required.</p>\n<p>Using open web standards, WebTorrent connects website users together to form a distributed, decentralized browser-to-browser network for efficient file transfer. The more people use a WebTorrent-powered website, the faster and more resilient it becomes.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/screenshot-player.png\"><img class=\"aligncenter wp-image-32534 size-full\" src=\"https://hacks.mozilla.org/files/2018/08/screenshot-player.png\" alt=\"Screenshot of the WebTorrent player interface\" width=\"2034\" height=\"982\" srcset=\"https://hacks.mozilla.org/files/2018/08/screenshot-player.png 2034w, https://hacks.mozilla.org/files/2018/08/screenshot-player-250x121.png 250w, https://hacks.mozilla.org/files/2018/08/screenshot-player-768x371.png 768w, https://hacks.mozilla.org/files/2018/08/screenshot-player-500x241.png 500w\" sizes=\"(max-width: 2034px) 100vw, 2034px\"></a></p>\n<h2>Architecture</h2>\n<p>The WebTorrent protocol works just like BitTorrent protocol, except it uses WebRTC instead of TCP or uTP as the transport protocol.</p>\n<p>In order to support WebRTC’s connection model, we made a few changes to the tracker protocol. Therefore, a browser-based WebTorrent client or “web peer” can only connect to other clients that support WebTorrent/WebRTC.</p>\n<p>Once peers are connected, the wire protocol used to communicate is exactly the same as in normal BitTorrent. This should make it easy for existing popular torrent clients like <a href=\"https://transmissionbt.com/\" target=\"_blank\" rel=\"noopener\">Transmission</a>, and <a href=\"https://www.utorrent.com/\" target=\"_blank\" rel=\"noopener\">uTorrent</a> to add support for WebTorrent. <a href=\"https://www.vuze.com/\" target=\"_blank\" rel=\"noopener\">Vuze</a> already has support for WebTorrent!</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/network.png\"><img class=\"aligncenter wp-image-32535 size-full\" src=\"https://hacks.mozilla.org/files/2018/08/network.png\" alt=\"Diagram showing the decentralized P2P network of torrents \" width=\"1200\" height=\"674\" srcset=\"https://hacks.mozilla.org/files/2018/08/network.png 1200w, https://hacks.mozilla.org/files/2018/08/network-220x125.png 220w, https://hacks.mozilla.org/files/2018/08/network-250x140.png 250w, https://hacks.mozilla.org/files/2018/08/network-768x431.png 768w, https://hacks.mozilla.org/files/2018/08/network-500x281.png 500w\" sizes=\"(max-width: 1200px) 100vw, 1200px\"></a></p>\n<h2>Getting Started</h2>\n<p>It only takes a few lines of code to download a torrent in the browser!</p>\n<p>To start using WebTorrent, simply include the <code>webtorrent.min.js</code> script on your page. You can download the script from the <a href=\"https://webtorrent.io/intro\">WebTorrent website</a> or <a href=\"https://cdn.jsdelivr.net/webtorrent/latest/webtorrent.min.js\">link to the CDN copy</a>.</p>\n<pre><code class=\"language-html\">&lt;script src=\"webtorrent.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>This provides a <code>WebTorrent</code> function on the <code>window</code> object. There is also an<br><a href=\"https://www.npmjs.com/package/webtorrent\">npm package</a> available.</p>\n<pre><code class=\"language-js\">var client = new WebTorrent()\n\n// Sintel, a free, Creative Commons movie\nvar torrentId = 'magnet:...' // Real torrent ids are much longer.\n\nvar torrent = client.add(torrentId)\n\ntorrent.on('ready', () =&gt; {\n// Torrents can contain many files. Let's use the .mp4 file\nvar file = torrent.files.find(file =&gt; file.name.endsWith('.mp4'))\n\n// Display the file by adding it to the DOM.\n// Supports video, audio, image files, and more!\nfile.appendTo('body')\n})\n</code></pre>\n<p>That’s it! Now you’ll see the torrent streaming into a <code>&lt;video width=\"300\" height=\"150\"&gt;</code> tag in the webpage!</p>\n<h2>Learn more</h2>\n<p>You can learn more at <a href=\"https://webtorrent.io/\">webtorrent.io</a>, or by asking a question in #webtorrent on Freenode IRC or on <a href=\"https://gitter.im/webtorrent/webtorrent\">Gitter</a>. We’re looking for more people who can answer questions and help people with issues on the GitHub issue tracker. If you’re a friendly, helpful person and want an excuse to dig deeper into the torrent protocol or WebRTC, then this is your chance!</p>\n<p> </p>\n<p> </p>\n<p></p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-building-a-resilient-web-with-webtorrent/\">Dweb: Building a Resilient Web with WebTorrent</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["Dweb","Featured Article","P2P Web","WebRTC","webtorrent"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-08-15 14:49:16","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"MDN Changelog for July 2018: CDN tests, Goodbye Zones, and BCD","pubDate":"2018-08-10 16:46:09","link":"https://hacks.mozilla.org/2018/08/mdn-changelog-for-july-2018-cdn-tests-goodbye-zones-and-bcd/","guid":"https://hacks.mozilla.org/?p=32524","author":"John Whitlock","thumbnail":"https://hacks.mozilla.org/files/2018/08/2018-08-analytics-china.png","description":"\n<p>Editor’s note: A changelog is “a log or record of all notable changes made to a project. [It] usually includes records of changes such as bug fixes, new features, etc.” Publishing a changelog is kind of a tradition in open source, and a long-time practice on the web. We thought readers of Hacks and folks […]</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/mdn-changelog-for-july-2018-cdn-tests-goodbye-zones-and-bcd/\">MDN Changelog for July 2018: CDN tests, Goodbye Zones, and BCD</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p><strong>Editor’s note:</strong> <em>A <a href=\"https://en.wikipedia.org/wiki/Changelog\" target=\"_blank\" rel=\"noopener\">changelog</a> is “a log or record of all notable changes made to a project. [It] usually includes records of changes such as bug fixes, new features, etc.” Publishing a changelog is kind of a tradition in open source, and a long-time practice on the web. We thought readers of Hacks and folks who use and contribute to <a href=\"https://developer.mozilla.org/en-US/\" target=\"_blank\" rel=\"noopener\">MDN Web Docs</a> would be interested in learning more about the work of the MDN engineering team, and the impact they have in a given month. We’ll also introduce code contribution opportunities, interesting projects, and new ways to participate.</em></p>\n<p>Here’s what happened in July to the <a href=\"https://github.com/mdn/\">code, data, and tools</a> that support <a href=\"https://developer.mozilla.org/\">MDN Web Docs</a>:</p>\n<ul>\n<li><a href=\"https://hacks.mozilla.org/#cdn-jul-18\">Experimented with the CDN</a></li>\n<li><a href=\"https://hacks.mozilla.org/#zones-jul-18\">Decommissioned zones</a></li>\n<li><a href=\"https://hacks.mozilla.org/#bcd-jul-18\">Converted compatibility data</a></li>\n<li>\n<a href=\"https://hacks.mozilla.org/#tweaks-jul-18\">Shipped tweaks and fixes</a> by merging 307 pull requests, including 58 pull requests from 43 new contributors.</li>\n</ul>\n<p>Here’s the plan for August:</p>\n<ul>\n<li><a href=\"https://hacks.mozilla.org/#es-jul-18\">Upgrade to Elasticsearch 5.6</a></li>\n</ul>\n<h2>Done in July</h2>\n<h3>Experimented with longer CDN expirations</h3>\n<p>We moved MDN Web Docs to a CDN in <a href=\"https://hacks.mozilla.org/2018/05/cdn-bcd-and-svg-mdn-changelog-for-april-2018/\">April 2018</a>, and saw a 16% improvement in page load times. We shipped with 5 minute expiration times for MDN pages, so that the CDN will request a fresh copy after a short time. MDN is a wiki, and we can’t predict when a page will change. 300 seconds was a compromise between some caching for our most popular pages, and how long an author would need to wait for a changed page to be published to all visitors. 80% of visitors are getting an uncached page.</p>\n<p>Longer cache expirations would require cache invalidation, <a href=\"https://twitter.com/codinghorror/status/506010907021828096\">one of the two hard things in computer science</a>. Before committing to the work, we wanted to estimate the expected performance benefits. From July 9 to 15, <a href=\"https://github.com/escattone\">Ryan Johnson</a> bumped the timeout from 5 minutes to 48 hours (<a href=\"https://github.com/mozilla/kuma/pull/4876\">PR 4876</a>), and we gathered the performance data.</p>\n<p>Average page load time decreased 3% over the previous week, a small and not significant improvement. The results for different countries was mixed, some slightly improved, and some slightly worse. The outlier was China, where average page load time increased 22%, a significant <em>decrease</em> in performance.</p>\n<div class=\"wp-caption aligncenter\">\n<a href=\"https://hacks.mozilla.org/files/2018/08/2018-08-analytics-china.png\"><img class=\"size-full wp-image-32525\" src=\"https://hacks.mozilla.org/files/2018/08/2018-08-analytics-china.png\" alt=\"A graph comparing page load time during the experiment vs. the previous week.\" width=\"1552\" height=\"446\" srcset=\"https://hacks.mozilla.org/files/2018/08/2018-08-analytics-china.png 1552w, https://hacks.mozilla.org/files/2018/08/2018-08-analytics-china-250x72.png 250w, https://hacks.mozilla.org/files/2018/08/2018-08-analytics-china-768x221.png 768w, https://hacks.mozilla.org/files/2018/08/2018-08-analytics-china-500x144.png 500w\" sizes=\"(max-width: 1552px) 100vw, 1552px\"></a><p class=\"wp-caption-text\">Page load time in China was worse, 60% longer on July 13</p>\n</div>\n<p>The page load time varied on weekdays versus weekends as well (positive percents are shorter page load times, better for users):</p>\n<table width=\"774\">\n<thead><tr>\n<th>Country</th>\n<th>Page Load Decrease,<br>\nWeekday</th>\n<th>Page Load Decrease,<br>\nWeekend</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>All</td>\n<td>1%</td>\n<td>-2%</td>\n</tr>\n<tr>\n<td>USA</td>\n<td>3%</td>\n<td>3%</td>\n</tr>\n<tr>\n<td>India</td>\n<td>2%</td>\n<td>-7%</td>\n</tr>\n<tr>\n<td>China</td>\n<td>-22%</td>\n<td>-35%</td>\n</tr>\n<tr>\n<td>Japan</td>\n<td>0%</td>\n<td>10%</td>\n</tr>\n<tr>\n<td>France</td>\n<td>-1%</td>\n<td>-5%</td>\n</tr>\n<tr>\n<td>Germany</td>\n<td>3%</td>\n<td>3%</td>\n</tr>\n<tr>\n<td>UK</td>\n<td>2%</td>\n<td>2%</td>\n</tr>\n<tr>\n<td>Russia</td>\n<td>0%</td>\n<td>2%</td>\n</tr>\n<tr>\n<td>Brazil</td>\n<td>2%</td>\n<td>-2%</td>\n</tr>\n<tr>\n<td>Ukraine</td>\n<td>6%</td>\n<td>1%</td>\n</tr>\n</tbody>\n</table>\n<p>This is a successful experiment. We got an unexpected result, with minimal work to get those results. At the same time, we’re curious why the longer CDN expiration had little effect for most users, and a negative effect for China. We have some theories.</p>\n<p>CloudFront is Amazon’s CDN, and uses the same data centers and networks as MDN’s servers. MDN is optimized for quickly serving wiki pages, so a cache miss adds only 50-100 milliseconds to a request. The primary benefit of the CDN is reducing server load, and we did see a 25% – 50% reduction in requests made to the servers, especially during peak hours.</p>\n<p>We’re currently directing CloudFront to cache pages, but telling downstream proxies and browsers not to cache the pages. A wiki page can change after someone edits it, and we wanted to avoid several layers of caches holding on to stale copies. Downstream caches may have a bigger impact than we expect on page load, and we can try allowing caching in the next experiment.</p>\n<p>China has country-wide policies to monitor and control internet traffic. We don’t know the details, but longer caching times result in slower processing. We saw an improvement in China moving developer.mozilla.org to CloudFront, lowering the average page load time by 30%. It is possible that most of the benefit was due to removing a second domain lookup for assets. A future experiment may skip CloudFront for traffic from China.</p>\n<p>There’s a significant difference between weekday and weekend traffic in some countries, like China and Japan. Our guess is that weekday traffic is dominated by developers using MDN for work, weekend traffic by developers using MDN for hobbies and learning. We also suspect there are differences between the capabilities of work week devices and home devices.</p>\n<p>Finally, the results may be a limitation of CloudFront, and we would see different results with a different CDN provider.</p>\n<p>We’ll look elsewhere for ways to speed up our page load times. For example, <a href=\"https://github.com/schalkneethling\">Schalk Neethling</a> is working to replace icons via webfonts with SVG icons (<a href=\"https://github.com/mozilla/kuma/pull/4860\">PR 4860</a>), and inlining short JavaScript files rather than making a request (<a href=\"https://github.com/mozilla/kuma/pull/4881\">PR 4881</a>). We have further plans for reducing page load time, to meet our new performance goals.</p>\n<h2>Decommissioned zones</h2>\n<p><a href=\"https://github.com/escattone\">Ryan Johnson</a> removed zones on July 24, merging <a href=\"https://github.com/mozilla/kuma/pull/4853\">PR 4853</a>. From a user’s perspective, there are a few changes.</p>\n<p>Custom zone URLs, like <a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/61\">https://developer.mozilla.org/en-US/Firefox/Releases/61</a>, are now at standard wiki URLs under <code>/docs/</code>, like <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/61\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/61</a>. There are redirects to the new URLs, so old links should continue working.</p>\n<p>Custom zone styling is removed, and zone pages now look like other wiki pages. This is subtle on most pages, such as removing an icon next to the title. Other pages required a re-write, such as <a href=\"https://developer.mozilla.org/en-US/docs/MDN_at_ten/History_of_MDN\">The History of MDN</a>.</p>\n<div class=\"wp-caption aligncenter\">\n<a href=\"https://hacks.mozilla.org/files/2018/07/2018-07-progressive.png\"><img class=\"size-full wp-image-32448\" src=\"https://hacks.mozilla.org/files/2018/07/2018-07-progressive.png\" alt=\"On the Progressive Web Apps MDN page, the zone style has an icon next to the tile, that it will lose without zone styles.\" width=\"3840\" height=\"2400\" srcset=\"https://hacks.mozilla.org/files/2018/07/2018-07-progressive.png 3840w, https://hacks.mozilla.org/files/2018/07/2018-07-progressive-250x156.png 250w, https://hacks.mozilla.org/files/2018/07/2018-07-progressive-768x480.png 768w, https://hacks.mozilla.org/files/2018/07/2018-07-progressive-500x313.png 500w\" sizes=\"(max-width: 3840px) 100vw, 3840px\"></a><p class=\"wp-caption-text\">The subtle change when removing zone styles</p>\n</div>\n<p>Zone sidebars were converted to KumaScript sidebars, and added to each page in the zone, through the heroic efforts of <a href=\"https://github.com/wbamberg\">wbamberg</a> (<a href=\"https://github.com/mdn/kumascript/pull/711\">PR 711</a> and a few others).</p>\n<p>About 2600 lines of code were removed, about 10% of the codebase. The wiki code is now simpler, less error prone, and safer to update.</p>\n<h3>Converted compatibility data</h3>\n<p>In July of last year, the Browser Compatibility Data (BCD) project hit the milestone of over 1000 MDN pages using the new compatibility data, with about 4900 to convert. This month, there are less than 850 pages left to convert, and over 5000 MDN pages are using the new data. The steady work of the BCD team has made a huge impact on MDN and the community.</p>\n<p>Visual Studio Code <a href=\"https://code.visualstudio.com/updates/v1_25#_improved-accuracy-of-browser-compatibility-data\">improved the accuracy of their data</a> by adopting the BCD project in the June 2018 release. This was proposed by <a href=\"https://github.com/octref\">Pine</a> in <a href=\"https://github.com/Microsoft/vscode-css-languageservice/issues/102\">vscode-css-languageservice issue #102</a> and implemented in <a href=\"https://github.com/Microsoft/vscode-css-languageservice/pull/105\">PR #105</a>, with feedback from BCD and mdn/data contributor <a href=\"https://github.com/connorshea\">Connor Shea</a>.</p>\n<div class=\"wp-caption aligncenter\">\n<a href=\"https://hacks.mozilla.org/files/2018/08/2018-08-vscode.png\"><img class=\"size-full wp-image-32526\" src=\"https://hacks.mozilla.org/files/2018/08/2018-08-vscode.png\" alt=\"The compatibilty data is available as a tooltip when editing\" width=\"1016\" height=\"549\" srcset=\"https://hacks.mozilla.org/files/2018/08/2018-08-vscode.png 1016w, https://hacks.mozilla.org/files/2018/08/2018-08-vscode-250x135.png 250w, https://hacks.mozilla.org/files/2018/08/2018-08-vscode-768x415.png 768w, https://hacks.mozilla.org/files/2018/08/2018-08-vscode-500x270.png 500w\" sizes=\"(max-width: 1016px) 100vw, 1016px\"></a><p class=\"wp-caption-text\">Data from BCD in VS Code as seen in <a href=\"https://code.visualstudio.com/updates/v1_25#_improved-accuracy-of-browser-compatibility-data\" rel=\"noopener\" target=\"_blank\">Visual Studio Code</a>.</p>\n</div>\n<p>After a long discussion, the BCD project has updated the policy for Node.js versions numbers (<a href=\"https://github.com/mdn/browser-compat-data/pull/2196\">PR 2196</a>, <a href=\"https://github.com/mdn/browser-compat-data/pull/2294\">PR 2294</a>, and others). At first, browser-style version numbers were used, such as <code>“4”</code>, <code>“6”</code>, and <code>“8”</code>, but the Node.js community requested <code>“4.0.0”</code>, <code>“6.0.0”</code>, and <code>“8.0.0”</code>, to reflect how they think of release numbers. This affected lots of files and unstuck several Node.js pull requests.</p>\n<p><a href=\"https://github.com/Elchi3\">Florian Scholz</a> went on vacation, and <a href=\"https://github.com/ddbeck\">Daniel D. Beck</a> took the lead on project maintenance, including shipping the npm package, now documented via <a href=\"https://github.com/mdn/browser-compat-data/pull/2480\">PR 2480</a>. Most of the <a href=\"https://github.com/mdn/browser-compat-data/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+label%3A%22HackOnMDNParis2018+%3Afr%3A%22+\">PRs from the Paris Hack on MDN event</a> are now merged or closed, and the project is down to 120 open PRs, representing about half of the remaining conversion work.</p>\n<h3>Shipped Tweaks and Fixes</h3>\n<p>There were 307 PRs merged in July:</p>\n<ul>\n<li><a href=\"https://github.com/mdn/browser-compat-data/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">197 mdn/browser-compat-data PRs</a></li>\n<li><a href=\"https://github.com/mdn/interactive-examples/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">48 mdn/interactive-examples PRs</a></li>\n<li><a href=\"https://github.com/mozilla/kuma/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">26 mozilla/kuma PRs</a></li>\n<li><a href=\"https://github.com/mdn/kumascript/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">13 mdn/kumascript PRs</a></li>\n<li><a href=\"https://github.com/mdn/bob/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">6 mdn/bob PRs</a></li>\n<li><a href=\"https://github.com/mdn/infra/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">5 mdn/infra PRs</a></li>\n<li><a href=\"https://github.com/mdn/learning-area/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">4 mdn/learning-area PRs</a></li>\n<li><a href=\"https://github.com/mdn/learning-area-pt-br/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/learning-area-pt-br PR</a></li>\n<li><a href=\"https://github.com/mdn/dom-examples/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/dom-examples PR</a></li>\n<li><a href=\"https://github.com/mdn/voice-change-o-matic/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/voice-change-o-matic PR</a></li>\n<li><a href=\"https://github.com/mdn/web-components-examples/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/web-components-examples PR</a></li>\n<li><a href=\"https://github.com/mdn/webextensions-examples/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/webextensions-examples PR</a></li>\n<li><a href=\"https://github.com/mdn/doc-linter-webextension/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/doc-linter-webextension PR</a></li>\n<li><a href=\"https://github.com/mdn/data/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/data PR</a></li>\n<li><a href=\"https://github.com/mdn/web-speech-api/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22\">1 mdn/web-speech-api PR</a></li>\n</ul>\n<p>58 of these were from first-time contributors:</p>\n<ul>\n<li>Correct node support for spread (<code>...</code>) in object literals (<a href=\"https://github.com/mdn/browser-compat-data/pull/2189\">BCD PR 2189</a>), from <a href=\"https://github.com/m4staka\">Tobias</a>.</li>\n<li>Add NodeJS versions for some features (<a href=\"https://github.com/mdn/browser-compat-data/pull/2196\">BCD PR 2196</a>), from <a href=\"https://github.com/Solant\">Solant</a>.</li>\n<li>Update JavaScript spread operator (<code>...</code>) for Node.js (<a href=\"https://github.com/mdn/browser-compat-data/pull/2262\">PR 2262</a>), Update Node.js versions (<a href=\"https://github.com/mdn/browser-compat-data/pull/2294\">PR 2294</a>), and <a href=\"https://github.com/mdn/browser-compat-data/pulls?page=1&amp;utf8=%E2%9C%93&amp;q=is:pr+is:closed+merged:%222018-07-01..2018-07-31%22+author:jcsahnwaldt\">9 more PRs</a> to BCD from <a href=\"https://github.com/jcsahnwaldt\">Christopher Sahnwaldt</a>.</li>\n<li>Add browser compatibility table for <code>&lt;input type=\"checkbox\"&gt;</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2383\">PR 2383</a>), Add browser compatibility table for <code>&lt;input type=\"button\"&gt;</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2384\">PR 2384</a>), and Add browser compatibility table for <code>&lt;input type=\"search\"&gt;</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2385\">PR 2385</a>), to BCD from <a href=\"https://github.com/varun07\">varun singh</a>.</li>\n<li>Add missing entity ampersands in description. (<a href=\"https://github.com/mdn/browser-compat-data/pull/2397\">BCD PR 2397</a>), from <a href=\"https://github.com/epistemex\">epistemex</a>.</li>\n<li>Add <code>DOMStringMap</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2401\">BCD PR 2401</a>), from <a href=\"https://github.com/Mr-Magnificent\">Ayush Poddar</a>.</li>\n<li>Add Edge support for <code>overflow-wrap</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2406\">BCD PR 2406</a>), from <a href=\"https://github.com/quentez\">Quentin Calvez</a>.</li>\n<li>Add missing <code>browserSettings</code> permission (<a href=\"https://github.com/mdn/browser-compat-data/pull/2407\">BCD PR 2407</a>), from <a href=\"https://github.com/icl7126\">Juraj Mäsiar</a>.</li>\n<li>Add data on <code>window.scroll</code> for MS Edge (<a href=\"https://github.com/mdn/browser-compat-data/pull/2433\">BCD PR 2433</a>), from <a href=\"https://github.com/davwheat\">David Wheatley</a>.</li>\n<li>Update data on <code>&lt;input type=\"color\"&gt;</code> for Edge (<a href=\"https://github.com/mdn/browser-compat-data/pull/2434\">BCD PR 2434</a>), from <a href=\"https://github.com/zlypher\">Thomas Prochazka</a>.</li>\n<li>Add IDEA (IntelliJ, WebStorm, etc.) to <code>.gitignore</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2435\">PR 2435</a>), and Add Node.js 8.0.0 support for JavaScript features (<a href=\"https://github.com/mdn/browser-compat-data/pull/2436\">PR 2436</a>), to BCD from <a href=\"https://github.com/peter-mouland\">Peter Mouland</a>.</li>\n<li>Update <code>backdrop-filter</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2438\">BCD PR 2438</a>), from <a href=\"https://github.com/flipflop97\">Philip Goto</a>.</li>\n<li>Add <code>text-align</code>’s <code>&lt;string&gt;</code> value (<a href=\"https://github.com/mdn/browser-compat-data/pull/2442\">BCD PR 2442</a>), from <a href=\"https://github.com/sonicdoe\">Jakob Krigovsky</a>.</li>\n<li>Add <code>search.get</code>, <code>search.search</code> API data (<a href=\"https://github.com/mdn/browser-compat-data/pull/2444\">BCD PR 2444</a>), from <a href=\"https://github.com/Smile4ever\">Geoffrey De Belie</a>.</li>\n<li>Add compatibility for <code>window.scrollTo</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2445\">BCD PR 2445</a>), from <a href=\"https://github.com/M3kH\">Mauro Mandracchia</a>.</li>\n<li>Add support for CSS selector <code>:defined</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2454\">BCD PR 2454</a>), from <a href=\"https://github.com/estelle\">Estelle Weyl</a>.</li>\n<li>Add support for <code>window.scroll</code> functions in Safari (<a href=\"https://github.com/mdn/browser-compat-data/pull/2462\">BCD PR 2462</a>), from <a href=\"https://github.com/zargold\">Raz Goldin</a>.</li>\n<li>Mark properties defined in ECMA-262 Annex B as deprecated (<a href=\"https://github.com/mdn/browser-compat-data/pull/2469\">BCD PR 2469</a>), from <a href=\"https://github.com/TSlivede\">TSlivede</a>.</li>\n<li>Add support for <code>MediaDevices</code> API (<a href=\"https://github.com/mdn/browser-compat-data/pull/2472\">BCD PR 2472</a>), from <a href=\"https://github.com/gauravmahto\">Gaurav Mahto</a>.</li>\n<li>Update Safari support for CSS property <code>overscroll-behavior</code> from unknown to unsupported (<a href=\"https://github.com/mdn/browser-compat-data/pull/2490\">BCD PR 2490</a>), from <a href=\"https://github.com/fernap3\">Peter Fernandes</a>.</li>\n<li>Update Safari support for <code>Navigator.registerProtocolHandler</code> API from unknown to unsupported (<a href=\"https://github.com/mdn/browser-compat-data/pull/2499\">BCD PR 2499</a>), from <a href=\"https://github.com/lioman\">Lioman</a>.</li>\n<li>Move Firefox support for <code>Server-Timing</code> header from 59 to 61 (<a href=\"https://github.com/mdn/browser-compat-data/pull/2504\">BCD PR 2504</a>), from <a href=\"https://github.com/cvazac\">Charles Vazac</a>.</li>\n<li>Fix JS <code>RegExp</code> lookbehind assertion description (<a href=\"https://github.com/mdn/browser-compat-data/pull/2521\">BCD PR 2521</a>), from <a href=\"https://github.com/Wevah\">Nate Weaver</a>.</li>\n<li>Update IE’s support of CSS property <code>text-align-last</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2525\">BCD PR 2525</a>), from <a href=\"https://github.com/rellect\">Refael Iliaguyev</a>.</li>\n<li>Add Node.js 10 support for <code>promise.finally</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2529\">BCD PR 2529</a>), from <a href=\"https://github.com/NKN1396\">NKN1396</a>.</li>\n<li>Add Chrome support for <code>crisp-edges</code> as <code>-webkit-optimize-contrast</code> (<a href=\"https://github.com/mdn/browser-compat-data/pull/2531\">BCD PR 2531</a>), from <a href=\"https://github.com/Eugeny\">Eugene Pankov</a>.</li>\n<li>Fix CSP term <code>navigate-to</code> (was <code>navigation-to</code>) (<a href=\"https://github.com/mdn/browser-compat-data/pull/2532\">BCD PR 2532</a>), from <a href=\"https://github.com/Malvoz\">Malvoz</a>.</li>\n<li>Lowercase <code>minlength</code> attribute for <code>&lt;input type=password&gt;</code> example (<a href=\"https://github.com/mdn/interactive-examples/pull/1024\">Interactive Examples PR 1024</a>), from <a href=\"https://github.com/Krinkle\">Timo Tijhof</a>.</li>\n<li>Change <code>&lt;select&gt;</code> examples to use “placeholder label option” pattern (<a href=\"https://github.com/mdn/interactive-examples/pull/1025\">Interactive Examples PR 1025</a>), from <a href=\"https://github.com/tigt\">Taylor Hunt</a>.</li>\n<li>Add a new line for markdown bullet list (<a href=\"https://github.com/mdn/interactive-examples/pull/1028\">Interactive Examples PR 1028</a>), from <a href=\"https://github.com/enguerran\">Enguerran</a>.</li>\n<li>Add <code>balance-all</code> value to <code>column-fill</code> example (<a href=\"https://github.com/mdn/interactive-examples/pull/1039\">Interactive Examples PR 1039</a>), from <a href=\"https://github.com/estelle\">Estelle Weyl</a>.</li>\n<li>Add <code>id</code> as reference for <code>&lt;label for=&gt;</code> attribute (<a href=\"https://github.com/mdn/interactive-examples/pull/1045\">Interactive Examples PR 1045</a>), from <a href=\"https://github.com/Row\">Jon Borglund</a>.</li>\n<li>Make “Publish and Keep Editing” height the same as others (<a href=\"https://github.com/mozilla/kuma/pull/4900\">Kuma PR 4900</a>), from <a href=\"https://github.com/Mihir-Karbelkar\">Mihir Karbelkar</a>.</li>\n<li>Update the URL of Web Speech API (<a href=\"https://github.com/mdn/kumascript/pull/731\">KumaScript PR 731</a>), from <a href=\"https://github.com/saschanaz\">Kagami Sascha Rosylight</a>.</li>\n<li>Updating Learn sidebar to add new Layout guides (<a href=\"https://github.com/mdn/kumascript/pull/736\">PR 736</a>), from <a href=\"https://github.com/rachelandrew\">Rachel Andrew</a> (first contribution to KumaScript).</li>\n<li>Move Writing Modes Level 4 to Candidate Recommendation (CR) (<a href=\"https://github.com/mdn/kumascript/pull/744\">KumaScript PR 744</a>), from <a href=\"https://github.com/estelle\">Estelle Weyl</a>.</li>\n<li>Reference correct video source video file (<a href=\"https://github.com/mdn/learning-area/pull/84\">learning-area PR 84</a>), from <a href=\"https://github.com/rohit\">Rohit Arondekar</a>.</li>\n<li>Fix “farenheit” typo (<a href=\"https://github.com/mdn/learning-area/pull/85\">learning-area PR 85</a>), from <a href=\"https://github.com/arda152\">arda152</a>.</li>\n<li>Fix comparison operator (<code>!==</code>) in Event Listener (<a href=\"https://github.com/mdn/learning-area/pull/86\">learning-area PR 86</a>), from <a href=\"https://github.com/aka-yuki\">Mourad El garma</a>.</li>\n<li>Add folder <code>javascript/object-basics</code> for chapter translation (<a href=\"https://github.com/mdn/learning-area-pt-br/pull/2\">learning-area-pt-br PR 2</a>), from <a href=\"https://github.com/webfelipemaia\">Felipe Maia</a>.</li>\n<li>Change convolver to disconnect and reconnect to the audio path (<a href=\"https://github.com/mdn/voice-change-o-matic/pull/15\">voice-change-o-matic PR 15</a>), from <a href=\"https://github.com/lgaribaldi\">LUCAS GARIBALDI ALVES</a>.</li>\n<li>Use ES2015+ syntax (<a href=\"https://github.com/mdn/web-components-examples/pull/8\">web-components-examples PR 8</a>), from <a href=\"https://github.com/knagurski\">Kevin Nagurski</a>.</li>\n<li>Add <code>EventRef</code> to the list of allowed macros (<a href=\"https://github.com/mdn/doc-linter-webextension/pull/70\">PR 70</a>), from <a href=\"https://github.com/a2sheppy\">Eric Shepherd</a> (first contribution to Doc Linter WebExtension).</li>\n<li>Maintain case consistency (<a href=\"https://github.com/mdn/web-speech-api/pull/26\">web-speech-api PR 26</a>), from <a href=\"https://github.com/utkarsh-raj\">utkarsh-raj</a>.</li>\n</ul>\n<p>Other significant PRs:</p>\n<ul>\n<li>Check bugzil.la link format (<a href=\"https://github.com/mdn/browser-compat-data/pull/2511\">BCD PR 2511</a>), one of <a href=\"https://github.com/mdn/browser-compat-data/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+is%3Aclosed+merged%3A%222018-07-01..2018-07-31%22+author%3Acaugner\">32 Pull Requests</a> from <a href=\"https://github.com/caugner\">Claas Augner</a>.</li>\n<li>Open interactive example links in a new tab (<a href=\"https://github.com/mdn/interactive-examples/pull/1009\">Interactive Examples PR 1009</a>), from <a href=\"https://github.com/stephanmax\">Stephan Max</a>.</li>\n<li>Update node 8, dependencies (<a href=\"https://github.com/mozilla/kuma/pull/4852\">Kuma PR 4852</a>), from <a href=\"https://github.com/jwhitlock\">me</a>.</li>\n</ul>\n<h2>Planned for August</h2>\n<p>In August, we’ll continue working on new and improved interactive examples, converting compatibility data (aiming for less than 50 open PRs), switching to Python 3, improving performance, and other long-term projects.</p>\n<h3>Upgrade to Elasticsearch 5.6</h3>\n<p>Elasticsearch powers our little-loved site search, and we’re using version 2.4 in production. This version went <a href=\"https://www.elastic.co/support/eol\">out of support</a> in February 2018, but our provider gave us until August to update. We used that grace period to <a href=\"https://hacks.mozilla.org/2018/07/mdn-changelog-for-june-2018/#shipped-django-111\">update from Django 1.8 to 1.11</a>. In August, we’ll update our client libraries and code so we can update to Elasticsearch 5.6, the next major release. We don’t expect many user-visible changes with the new server, but we also don’t plan to lose site search due to missing the deadline.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/mdn-changelog-for-july-2018-cdn-tests-goodbye-zones-and-bcd/\">MDN Changelog for July 2018: CDN tests, Goodbye Zones, and BCD</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["MDN"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-08-10 16:46:09","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"AV1 and the Video Wars of 2027","pubDate":"2018-08-09 14:57:49","link":"https://hacks.mozilla.org/2018/08/the-video-wars-of-2027/","guid":"https://hacks.mozilla.org/?p=32511","author":"Judy McConnell","thumbnail":"https://hacks.mozilla.org/files/2018/08/PAY-UP-final.jpg","description":"\n<p>This post imagines a dystopian future where only the rich can stream video to their homes, and the democratizing forces of the internet have crumbled under corruption and greed. The author reports back from a troubled future in the late 2020s that is wholly fictitious. The open video codec AV1 is wholly real. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/the-video-wars-of-2027/\">AV1 and the Video Wars of 2027</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p><i>Author’s Note: This post imagines a dystopian future for web video, if we continue to rely on patented codecs to transmit media files. What if one company had a perpetual monopoly on those patents? How could it limit our access to media and culture? The premise of this cautionary tale is grounded in fact. However, the future scenario is fiction, and the entities and events portrayed are not intended to represent real people, companies, or events.</i></p>\n<div class=\"wp-caption alignnone\">\n<a href=\"https://hacks.mozilla.org/files/2018/08/PAY-UP-final.jpg\"><img class=\"size-full wp-image-32521\" src=\"https://hacks.mozilla.org/files/2018/08/PAY-UP-final.jpg\" alt=\"\" width=\"1200\" height=\"675\"></a><p class=\"wp-caption-text\">Illustration by James Dybvig</p>\n</div>\n<p>The year is 2029. It’s been two years since the start of the Video Wars, and there’s no end in sight. It’s hard to believe how deranged things have become on earth. People are going crazy because they can’t afford <a href=\"https://blog.mozilla.org/blog/2018/07/11/royalty-free-web-video-codecs/\" target=\"_blank\" rel=\"noopener\">web video fees</a> – and there’s not much else to do. The world’s media giants have irrevocably twisted laws and governments to protect their incredibly lucrative franchise: the right to own their intellectual property for all time.</p>\n<p>It all started decades ago, with an arcane compression technology and a cartoon mouse. As if we needed any more proof that truth is stranger than fiction.</p>\n<h3>Adulteration of the U.S. Legal System</h3>\n<p>In 1998, the U.S. Congress passed the <a href=\"https://en.wikipedia.org/wiki/Copyright_Term_Extension_Act\" target=\"_blank\" rel=\"noopener\">Sonny Bono Copyright Term Extension Act</a>. This new law extended copyrights on corporate works to the author’s lifetime plus 95 years. The effort was driven by the Walt Disney Company, to protect its lucrative retail franchise around the animated character Mickey Mouse. Without this extension, Mickey would have entered the public domain, meaning anyone could create new cartoons and merchandise without fear of being sued by Disney. When the extension passed, it gave Disney another 20 years to profit from Mickey. The news sparked outrage from lawyers and academics at the time, but it was a dull and complex topic that most people didn’t understand or care about.</p>\n<p>In 2020, Disney again lobbied to extend the law, so its copyright would last for 10,000 years. Its monopoly on our culture was complete. No art, music, video, or story would pass into the public domain for millennia. All copyrighted ideas would remain the private property of corporations. The <a href=\"https://www.ted.com/talks/larry_lessig_says_the_law_is_strangling_creativity\" target=\"_blank\" rel=\"noopener\">quiet strangulation of our collective creativity</a> had begun.</p>\n<p>A small but powerful corporate collective called MalCorp took note of Disney’s success. Backed by deep-pocketed investors, MalCorp had quietly started buying the technology patents that made video streaming work over the internet. It revealed itself in 2021 as a protector of innovation. But its true goal was to create a monopoly on video streaming technology that would last forever, to shunt profits to its already wealthy investors. It was purely an instrument of greed.</p>\n<h3><b>Better Compression for Free</b></h3>\n<p>Now, there were some good guys in this story. As early as 2007, prescient tech companies wanted the web platform to remain free and open to all – especially for video. Companies like Cisco, Mozilla, Google, and others worked on new video codecs that could replace the patented, ubiquitous H.264 codec. They even <a href=\"https://aomedia.org/\" target=\"_blank\" rel=\"noopener\">combined their efforts</a> in 2015 to create a royalty-free codec called <a href=\"https://research.mozilla.org/av1-media-codecs/\" target=\"_blank\" rel=\"noopener\">AV1</a> that anyone could use free of charge.</p>\n<p>AV1 was notable in that it offered better compression, and therefore better video quality, than any other codec of its time. But just as the free contender was getting off the ground, the video streaming industry was thrown into turmoil. Browser companies backed different codecs, and the market fragmented. Adoption stalled, and for years the streaming industry continued paying licensing fees for subpar codecs, even though better options were available.</p>\n<h3>The End of Shared Innovation</h3>\n<p>Meanwhile MalCorp found a way to tweak the law so its patents would never expire. It proposed a special amendment, just for patent pools, that said: Any time any part of any patent changes, the entire pool is treated as a new invention under U.S. law. With its deep pockets, MalCorp was able to buy the votes needed to get its law passed.</p>\n<p>MalCorp’s patents would not expire. Not in 20 years. Not ever. And because <a href=\"https://en.wikipedia.org/wiki/United_States_patent_law\" target=\"_blank\" rel=\"noopener\">patent law</a> is about as interesting as <a href=\"https://en.wikipedia.org/wiki/Copyright_law_of_the_United_States#Duration_of_copyright\" target=\"_blank\" rel=\"noopener\">copyright law</a>, few protested the change.</p>\n<p>Things went downhill quickly for advocates of the open web. MalCorp’s patents became broader, vaguer, ever-changing. With billions in its war chest, MalCorp was able to sue royalty-free codecs like AV1 out of existence. MalCorp had won. It had a monopoly on web streaming technology. It began, slowly at first, to raise licensing fees.</p>\n<h3>Gorgeous Video, Crushing Fees</h3>\n<p>For those who could afford it, web video got much better. MalCorp’s newest high-efficiency video codecs brought pixel-perfect 32K-Strato-Def images and 3D sound into people’s homes. Video and audio were clear and rich – better than real life. Downloads were fast. Images were crisp and spectacular. Fees were high.</p>\n<p>Without access to any competing technologies, streaming companies had to pay billions instead of millions a year to MalCorp. Streaming services had to 100x their prices to cover their costs. Monthly fees rose to $4,500. Even students had to pay $50 a minute to watch a lecture on YouTube. Gradually, the world began to wake up to what MalCorp had done.</p>\n<h3>Life Indoors</h3>\n<p>By the mid-twenties, the Robotic Age had put most people out of work. The lucky ones lived on fixed incomes, paid by their governments. Humans were only needed for specialized service jobs, like nursery school teachers and style consultants. Even <a href=\"https://www.bloomberg.com/view/articles/2017-07-28/big-data-shows-big-promise-in-medicine\" target=\"_blank\" rel=\"noopener\">doctors were automated</a>, using up-to-the-minute, crowd-sourced data to diagnose disease and track trends and outbreaks.</p>\n<p>People were idle. Discontent was rising. Where once a retired workforce might have traveled or pursued hobbies, growing environmental problems rendered the outside world mostly uninhabitable. People hiked at home with their headsets on, enjoying stereoscopic birdsong and the idea of a fresh breeze. We lived indoors, in front of screens.</p>\n<h3>Locked In, Locked Out</h3>\n<p>It didn’t take long for MalCorp to become the most powerful corporation in the world. When video and mixed reality files made up 90 percent of all internet traffic, MalCorp was collecting on every transmission. Still, its greed kept growing.</p>\n<p>Fed up with workarounds like piracy sites and peer-to-peer networks, MalCorp dismantled all legacy codecs. The slow, furry, lousy videos that were vaguely affordable ceased to function on modern networks and devices. People noticed when the signal went dark. Sure, there was still television and <a href=\"https://www.ebay.com/b/Betamax-Cult-DVDs-and-Movies/41676/bn_230222\">solid state media</a>, but it wasn’t the same. Soon enough, all hell broke loose.</p>\n<h3>The Wars Begin</h3>\n<p>During Super Bowl LXII, football fans firebombed police stations in 70 cities, because listening to the game on radio just didn’t cut it. Thousands died in the riots and, later, in the crackdowns. Protesters picketed Disneyland, because the people had finally figured out what had happened to their democracy, and how it got started.</p>\n<p>For the first time in years, people began to organize. They joined chat rooms and formed political parties like VidPeace and YouStream, vying for a majority. They had one demand: Give us back free video on the open web. They put banners on their vid-free Facebook feeds, advocating for the liberation of web video from greedy patent holders. They rallied around an inalienable right, once taken for granted, to be able to make and watch and share their own family movies, without paying MalCorp’s fees.</p>\n<p>But it was too late. The opportunity to influence the chain of events had ended years before. Some say the tipping point was in 2019. Others blame the apathy and naiveté of early web users, who assumed tech companies and governments would always make decisions that served the common good. That capitalism would deliver the best services, in spite of powerful profit motives. And that the internet would always be free.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/the-video-wars-of-2027/\">AV1 and the Video Wars of 2027</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["AV1","Featured Article","Video","H.264","media codecs","streaming","video codecs","web video"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-08-09 14:57:49","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Dweb: Social Feeds with Secure Scuttlebutt","pubDate":"2018-08-08 16:01:05","link":"https://hacks.mozilla.org/2018/08/dweb-social-feeds-with-secure-scuttlebutt/","guid":"https://hacks.mozilla.org/?p=32508","author":"André Staltz","thumbnail":"https://hacks.mozilla.org/files/2018/08/stack.svg","description":"\n<p>Scuttlebutt is a free and open source social network with unique offline-first and peer-to-peer properties. Mainstream closed platforms have become a more popular way of creating and consuming content than the Web. Instead of attempting to adapt existing Web technologies for the mobile social era, Scuttlebutt offers a new platform for discourse that lets us start from scratch in designing a decentralized social ecosystem.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-social-feeds-with-secure-scuttlebutt/\">Dweb: Social Feeds with Secure Scuttlebutt</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","content":"\n<p><em>In the <a href=\"https://hacks.mozilla.org/2018/07/introducing-the-d-web/\">series introduction</a>, we highlighted the importance of putting people in control their social interactions online, instead of allowing for-profit companies be the arbiters of hate speech or harassment. Our first installment in the Dweb series introduces Secure Scuttlebutt, which envisions a world where users are in full control of their communities online.</em></p>\n<p>In the weeks ahead we will cover a variety of projects that represent explorations of the decentralized/distributed space. These projects aren’t affiliated with Mozilla, and some of them rewrite the rules of how we think about a web browser. What they have in common: These projects are open source, and open for participation, and share Mozilla’s mission to keep the web open and accessible for all.</p>\n<p>This post is written by André Staltz, who has <a href=\"https://staltz.com/the-web-began-dying-in-2014-heres-how.html\">written</a> <a href=\"https://staltz.com/a-plan-to-rescue-the-web-from-the-internet.html\">extensively</a> on the fate of the web in the face of mass digital migration to corporate social networks, and is a core contributor to the Scuttlebutt project.  –Dietrich Ayala</p>\n<h2>Getting started with Scuttlebutt</h2>\n<p><a href=\"https://www.scuttlebutt.nz/\">Scuttlebutt</a> is a free and open source social network with unique offline-first and peer-to-peer properties. As a JavaScript open source programmer, I discovered Scuttlebutt two years ago as a promising foundation for a new “social web” that provides an alternative to proprietary platforms. The social metaphor of mainstream platforms is now a more popular way of creating and consuming content than the Web is. Instead of attempting to adapt existing Web technologies for the mobile social era, Scuttlebutt allows us to start from scratch the construction of a new ecosystem.</p>\n<h2>A local database, shared with friends</h2>\n<p>The central idea of the Secure Scuttlebutt (SSB) protocol is simple: your social account is just a cryptographic keypair (your <em>identity</em>) plus a log of messages (your <em>feed</em>) stored in a local database. So far, this has no relation to the Internet, it is just a local database where your posts are stored in an append-only sequence, and allows you to write status updates like you would with a personal diary. SSB becomes a <em>social network</em> when those local feeds are shared among computers through the internet or through local networks. The protocol supports peer-to-peer replication of feeds, so that you can have local (and full) copies of your friends’ feeds, and update them whenever you are online. One implementation of SSB, <a href=\"https://github.com/ssbc/scuttlebot\"><em>Scuttlebot</em></a>, uses Node.js and allows UI applications to interact with the local database and the network stack.</p>\n<p><a href=\"https://hacks.mozilla.org/files/2018/08/stack.svg\"><img src=\"https://hacks.mozilla.org/files/2018/08/stack.svg\" alt=\"\" class=\"aligncenter size-large wp-image-32509\"></a></p>\n<h2>Using Scuttlebot</h2>\n<p>While SSB is being implemented in multiple languages (<a href=\"https://github.com/cryptoscope/secretstream\">Go</a>, <a href=\"https://github.com/ssbc/ssb-client-rs\">Rust</a>, <a href=\"https://git.scuttlebot.io/%25133ulDgs%2FoC1DXjoK04vDFy6DgVBB%2FZok15YJmuhD5Q%3D.sha256/blob/fd953a1e72b4b16e6e5a74bcf2f893dbf1407ce4/sbotc.c\">C</a>), its main implementation at the moment is the npm package <a href=\"https://github.com/ssbc/scuttlebot\"><code>scuttlebot</code></a> and <a href=\"https://www.scuttlebutt.nz/applications.html\">Electron desktop apps</a> that use Scuttlebot. To build your own UI application from scratch, you can setup Scuttlebot plus a localhost HTTP server to render the UI in your browser.</p>\n<p>Run the following <code>npm</code> command to add Scuttlebot to your Node.js project:</p>\n<pre><code>npm install --save scuttlebot\n</code></pre>\n<p>You can use Scuttlebot locally using the command line interface, to post messages, view messages, connect with friends. First, start the server:</p>\n<pre><code class=\"language-bash\">$(npm bin)/sbot server\n</code></pre>\n<p>In another terminal you can use the server to publish a message in your local feed:</p>\n<pre><code class=\"language-bash\">$(npm bin)/sbot publish --type post --text \"Hello world\"\n</code></pre>\n<p>You can also consume invite codes to connect with friends and replicate their feeds. Invite codes are generated by <a href=\"https://github.com/ssbc/scuttlebot/wiki/Pub-Servers\"><em>pub servers</em></a><br>\nowned by friends in the community, which act as mirrors of feeds in the community. Using an invite code means the server will allow you to connect to it and will mirror your data too.</p>\n<pre><code class=\"language-bash\">$(npm bin)/sbot invite.accept $INSERT_INVITE_CODE_HERE\n</code></pre>\n<p>To create a simple web app to render your local feed, you can start the scuttlebot server in a Node.js script (with dependencies <a href=\"https://github.com/ssbc/ssb-config\"><code>ssb-config</code></a> and <a href=\"https://github.com/pull-stream/pull-stream\"><code>pull-stream</code></a>), and serve the feed through an HTTP server:</p>\n<pre><code class=\"language-js\">// server.js\nconst fs = require('fs');\nconst http = require('http');\nconst pull = require('pull-stream');\nconst sbot = require('scuttlebot/index').call(null, require('ssb-config'));\n\nhttp\n  .createServer((request, response) =&gt; {\n    if (request.url.endsWith('/feed')) {\n      pull(\n        sbot.createFeedStream({live: false, limit: 100}),\n        pull.collect((err, messages) =&gt; {\n          response.end(JSON.stringify(messages));\n        }),\n      );\n    } else {\n      response.end(fs.readFileSync('./index.html'));\n    }\n  })\n  .listen(9000);\n</code></pre>\n<p>Start the server with <code>node server.js</code>, and upon opening <code>localhost:9000</code> in your browser, it should serve the index.html:</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n\n&lt;body&gt;\n  &lt;script&gt;\n    fetch('/feed')\n      .then(res =&gt; res.json())\n      .then(messages =&gt; {\n        document.body.innerHTML = `\n          &lt;h1&gt;Feed&lt;/h1&gt;\n          &lt;ul&gt;${messages\n            .filter(msg =&gt; msg.value.content.type === 'post')\n            .map(msg =&gt;\n              `&lt;li&gt;${msg.value.author} said: ${msg.value.content.text}&lt;/li&gt;`\n            )\n          }&lt;/ul&gt;\n        `;\n      });\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<h2>Learn more</h2>\n<p>SSB applications can accomplish more than social messaging. Secure Scuttlebutt is being used for <a href=\"https://github.com/clehner/git-ssb\">Git collaboration</a>, <a href=\"https://github.com/happy0/ssb-chess\">chess games</a>, and <a href=\"https://github.com/pietgeursen/patch-gatherings\">managing online gatherings</a>.</p>\n<p>You build your own applications on top of SSB by creating or using plug-ins for specialized APIs or different ways of querying the database. See <a href=\"https://github.com/ssbc/secret-stack\">secret-stack</a> for details on how to build custom plugins. See <a href=\"https://github.com/flumedb/flumedb\">flumedb</a> for details on how to create custom indexes in the database. Also there are many useful <a href=\"https://github.com/ssbc/\">repositories in our GitHub org</a>.</p>\n<p>To learn about the protocol that all of the implementations use, see the <a href=\"https://ssbc.github.io/scuttlebutt-protocol-guide/\">protocol guide</a>, which explains the cryptographic primitives used, and data formats agreed on.</p>\n<p>Finally, don’t miss the frontpage <a href=\"https://www.scuttlebutt.nz/\">Scuttlebutt.nz</a>, which explains the design decisions and principles we value. We highlight the important role that humans have in internet communities, which should not be delegated to computers.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/2018/08/dweb-social-feeds-with-secure-scuttlebutt/\">Dweb: Social Feeds with Secure Scuttlebutt</a> appeared first on <a rel=\"nofollow\" href=\"https://hacks.mozilla.org/\">Mozilla Hacks - the Web developer blog</a>.</p>\n","enclosure":{},"categories":["Dweb","Featured Article","Node.js","P2P Web","scuttlebot","scuttlebutt","Secure Scuttlebutt protocol","SSB"],"color":"orangered","category":"Mozilla Hacks –","date":"2018-08-08 16:01:05","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"10 Years of Chrome DevTools","pubDate":"2018-09-06 16:59:00","link":"http://blog.chromium.org/2018/09/10-years-of-chrome-devtools.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-6946175971572240791","author":"Chrome Blog","thumbnail":"https://lh3.googleusercontent.com/kERZXRq3XId5YhSowkwb1zsafnmU65qdo3XM2lNlPQ45xCMYu39EnpDzXTxmXG7mtwwSHYvenQJzzrDwcSZgWqhA-1MoiCFIIZWKRSV1H6sLBpFqkUxx5orAf23KAPnCDETC4GJ0","description":"\n<span></span><br><div dir=\"ltr\"><span><span>Chrome is turning 10! Thank you for making the web development community so open, collaborative, and supportive. DevTools draws inspiration from countless other projects. Here’s a look back at how DevTools came about, and how it’s changed over the years.</span></span></div>\n<h2></h2>\n<h2>\n<br><br>In the beginning, there was Firebug</h2>\n<div dir=\"ltr\"><span><span>Imagine for a moment that browsers didn't ship with developer tools. How would you debug JavaScript? You'd basically have 3 options: </span></span></div>\n<ul>\n<li>Sprinkle window.alert() calls throughout your code.</li>\n<li><span>Comment out sections of code.</span></li>\n<li><span>Stare at the code for a long time until the JavaScript gods bless you with a solution.</span></li>\n</ul>\n<div dir=\"ltr\"><span><span><span></span></span></span></div>\n<div dir=\"ltr\"><span><span>What about layout issues? Network errors? Again, all you could really do is conduct painstaking experiments in your code. This was the reality of web development up until 2006. Then a little tool called Firebug came along and changed everything.</span></span></div>\n<div><div><span><span></span></span></div></div>\n<div>\n<div>\n<div class=\"separator\"><a href=\"https://lh3.googleusercontent.com/kERZXRq3XId5YhSowkwb1zsafnmU65qdo3XM2lNlPQ45xCMYu39EnpDzXTxmXG7mtwwSHYvenQJzzrDwcSZgWqhA-1MoiCFIIZWKRSV1H6sLBpFqkUxx5orAf23KAPnCDETC4GJ0\" imageanchor=\"1\"><img border=\"0\" height=\"284\" src=\"https://lh3.googleusercontent.com/kERZXRq3XId5YhSowkwb1zsafnmU65qdo3XM2lNlPQ45xCMYu39EnpDzXTxmXG7mtwwSHYvenQJzzrDwcSZgWqhA-1MoiCFIIZWKRSV1H6sLBpFqkUxx5orAf23KAPnCDETC4GJ0\" width=\"624\"></a></div>\n<span><span><i><span><br><br>A screenshot of Firebug's Net panel, taken from </span><a href=\"https://hacks.mozilla.org/2017/10/saying-goodbye-to-firebug/\"><span>Saying Goodbye to Firebug</span></a><span> (</span><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/10/net-panel.gif\"><span>source</span></a><span> and </span><a href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><span>license</span></a><span>)</span></i></span></span>\n</div>\n<br><span><span><span>Firebug was a Firefox extension that let you debug, edit, and monitor pages in real-time. As a web developer suddenly you went from having no visibility into your pages to having what are essentially the core features of modern developer tools. The ability to understand exactly why Firefox was behaving as it was unleashed a flood of creativity on the web. Without Firebug, the Web 2.0 era wouldn't have been possible.</span></span></span><br><h2></h2>\n</div>\n<h2></h2>\n<h2></h2>\n<h2>\n<br><br><br><span>WebKit Web Inspector</span>\n</h2>\n<div><br></div>\n<h2>\n<span><span><span>Around the same time as Firebug’s launch, a few Google engineers started working on a project which would eventually lead to Chrome. From the start, Chrome was a mashup of different code libraries. For rendering the Chrome engineers opted for WebKit, which is the open-source project that still powers Safari to this day. An added bonus of using WebKit was that it came with a handy tool called the Web Inspector.</span></span></span><img height=\"488\" src=\"https://lh4.googleusercontent.com/26HnJ-nCLzoDc5IZXj-zH_APHKIvlL_xGBa2iC-haDOjljkTCMc6kBG-2aPBZCeWhUCafZqT5UVJKjb9kbmjrGUBz_MlI7ejR263KMZtt4T_De-z3ZkkNses8PFa_R8ouIzoLFdI\" width=\"624\">\n</h2>\n<span></span> <br><div><span><i>A screenshot of the Web Inspector, taken from <a href=\"https://webkit.org/blog/197/web-inspector-redesign/\">Web Inspector Redesign</a> (<a href=\"https://webkit.org/blog-files/inspector-elements-panel.png\">source</a> and <a href=\"https://webkit.org/licensing-webkit/\">license</a>)</i></span></div>\n<span></span><br><div><span><span><span>Like the Net panel of Firebug, the original Web Inspector probably looks familiar. Much of its functionality lives on to this day as the Elements panel in Chrome DevTools. Web Inspector launched a few days after Firebug, and Safari was the first browser to bundle developer tooling directly into the browser.</span></span></span></div>\n<span></span><br><h2></h2>\n<h2>\n<br><br><br>The \"Inspect Element\" era</h2>\n<div>\n<span><span><br></span></span><span><span><span>Chrome brought many innovative ideas to the browser ecosystem, such as the omnibox that combined search and the address bar, and a multi-process architecture that prevented one hanging tab from crashing the entire browser. But the innovation we like the most was providing developer tools in every build to every user, exposed with the click of a mouse.</span></span></span>\n</div>\n<div><span><span><img height=\"316\" src=\"https://lh3.googleusercontent.com/sioL979MZDJ6Y-eTtvV1z88gOx4ExsyOXmsK3mUIjX-FUOdGeM29MOTJpPlcxkebmOEth26gCUUVnIISXGnz8vT8YvtuyDwXFltxtSUm3U0zDgJF37091142hg_rZwv4Q3whpzOY\" width=\"624\"></span></span></div>\n<span></span><br><div><span><span><i>\"Inspect Element\" in 2010</i></span></span></div>\n<span></span> <br><div><span><span><i></i></span></span></div>\n<span></span> <br><div>\n<span><br>Before Chrome, developer tooling was an opt-in experience. You either had to install an extension, like Firebug, or enable some flags, as is still the case in Safari today. Chrome was the first browser to make developer tooling accessible from every browser instance. We'd like to claim that we had a grand vision for creating a developer-friendly browser from the start, but the reality is that Chrome had a lot of compatibility issues in its early days (which makes sense, since no one was building for it) and we needed to give web developers an easy way to fix these issues. Web developers told us that it was a useful feature, and we kept it.</span><br><span><span></span></span><br><div dir=\"ltr\"><span><span><span><span></span></span></span></span></div>\n<span><span></span></span><br><h2><span>The mobile era</span></h2>\n<span></span> <br><div dir=\"ltr\"><span><span><span>For the first few years of the DevTools project, we essentially added chapters to the stories that Firebug and Web Inspector started. The next big shift in how we approached DevTools happened when it became clear that smartphones were here to stay.</span></span></span></div>\n<div dir=\"ltr\"><span><span><span><span></span></span></span></span></div>\n<div dir=\"ltr\"><span><span><span>Our first mission in this brave new world was to enable developers to debug real mobile devices from their development machines, which we call remote debugging. DevTools was actually well-positioned to handle remote debugging, thanks to another consequence of Chrome’s multi-process architecture. Early on in the DevTools project we realized that the only way a debugger could reliably access a multi-process browser was through a client-server protocol, with the browser being the server, and the debugger being the client. When mobile Chrome came around, the protocol was already baked into it, so we just had to make the DevTools running on your development machine communicate with the Chrome running on your mobile device over the protocol. This protocol still forms the backbone of DevTools today, and is now known as the </span><a href=\"https://chromedevtools.github.io/devtools-protocol/\"><span>Chrome DevTools Protocol</span></a><span>.</span></span></span></div>\n<div><span><span><img height=\"247\" src=\"https://lh4.googleusercontent.com/qf_D1vUxYpaulQIPdXqjQFZfl3jzDSaZIB4XJrckdiLWYNfRaTy0PIzuwaUUisqfM9qMoq4UFpWsDtuJHAFuPhnVBvjoPk_uYbFf-R7NSGJGiXOIWtUMxh8bhn4BGQRKa5qGkg61\" width=\"624\"></span></span></div>\n<div>\n<span><span><span></span></span></span><br><div dir=\"ltr\"><span><span><span><span><span><i>Remote Debugging</i></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div dir=\"ltr\"><span><span><span><span><span><span><span>Remote debugging was a step in the right direction, and to this day is still the primary tool for making sure that your sites behave reasonably on real mobile devices. Over time, however, we realized that remote debugging could be a bit tedious. When you're in the early phases of building out a site or feature, you usually just need a first-order approximation of the mobile experience. This prompted us to create a set of mobile simulation features, such as</span></span></span></span><span>:</span></span></span></span></div>\n<span><span><span></span></span></span><br><ul><span><span><span><li>Precisely emulating the mobile viewport, simulating touch-based input and device orientation.</li>\n<li>Throttling the network connection to simulate 3G and CPU to simulate less-powerful mobile hardware.</li>\n<li>Spoofing user agent, geolocation, accelerometer data and more.</li></span></span></span></ul>\n<span><span><span></span></span></span><br><div><span><span><span><span>We collectively refer to these features as Device Mode.</span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><img height=\"286\" src=\"https://lh6.googleusercontent.com/SZlk5tXgHa-VywxFkTPYSq13aQ3CkxjkydXmO7SYMbdNg7SMfn_ILSH-4uPBBUKANJ0jQvSoTgyTzYc5u-3Xc_9T0jAahWmaUGUaTNXoAQMyiflT50JJj0EnnbBTQESSu8ouFL7l\" width=\"400\"></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><span><i><br><br><br>An early prototype of Device Mode</i></span></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><i></i></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><img height=\"335\" src=\"https://lh4.googleusercontent.com/su2lTgS6_TSjcPyYI-kW2Cw54gl_t1JdCb_w1gJzlhl1FCy77MsvgK6WSPQy2UHWR9JJHBkDpXl8nNCXi_H_0SoeOsxBIFOJEQCuT-yVBgyf0mutCRJbMa-BFKy3meMCHlTALSh5\" width=\"400\"></span></span></span></span></span></div>\n<span><span><span></span></span></span><div><span><span><span><span><span><span><i>Device Mode in 2018</i></span></span></span></span></span></span></div>\n<span><span><span><div><span><span><i></i></span></span></div>\n<div><span><span><i></i></span></span></div>\n<div>\n<br><br><h2><span><span>The performance era</span></span></h2>\n<span><span></span></span> <br><div dir=\"ltr\"><span><span><span><span>While the mobile era unfolded, big apps like Gmail were pushing the limits of the web's capabilities. </span><a href=\"https://youtu.be/x9Jlu_h_Lyw\"><span>Gmail-scale bugs called for Gmail-scale tools</span></a><span>. One of our first major contributions to the tooling ecosystem was to show a play-by-play breakdown of exactly everything that Chrome had to do in order to display a page.</span></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><img height=\"387\" src=\"https://lh4.googleusercontent.com/0wpXSjTga8zjPa93xeTJ_CitmD43gINO-o58JDeR-VXDVeTTqfRosd534FPCCznkJp37bHXNQ2mAHlfBMfmnX6dAzky8hmZP0ZTPQUAwmOsEN1kw-kOzvQyOmiWjYOGcMVf7armt\" width=\"624\"></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><i><span>The original Timeline panel, as announced in </span><a href=\"https://blog.chromium.org/2012/10/do-more-with-chrome-developer-tools.html\"><span>Do More with Chrome Developer Tools</span></a></i></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><img height=\"529\" src=\"https://lh4.googleusercontent.com/AFu8PIdpJml4vgGrr_5_XkeHVA9uTbxkVuspQjCZjhiL1dtL7F5Tua7fDWUhMKUNwHrnF8jX5rm_1iUabLmTm1-y_BCkaRnU4pAAr-euI0Us04ko5IQJaw_8Ne8hKD1Wo-ffZ28h\" width=\"624\"></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><span><i>The Performance panel in 2018</i></span></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><span><br>These tools were a step in the right direction, but in order to spot optimization opportunities you needed to learn the nitty-gritty details about how browsers work and sift through a lot of data. Lately we've been building on this foundation to provide more </span><a href=\"https://developers.google.com/web/tools/chrome-devtools/speed/get-started\"><span>guided performance insights</span></a><span>. The new </span><a href=\"https://developers.google.com/web/tools/lighthouse/\"><span>Lighthouse</span></a><span> engine powers the Audits panel, and is also available as a Node module for integration with CI systems.</span></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><img height=\"681\" src=\"https://lh4.googleusercontent.com/VeEn3HMhNkdnX8FhJ0_q3Ajtq7YbFCgq3F6lTZ9m2RLO4Fb4SFmGWqZpz6gXz9dAmpt6U-5c7yOzrdkjL5fHfUeMrYvre4Zca07nHErvzFkRD7rehFeVdVNduECxVAz7lYEEcj_B\" width=\"542\"></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><i>Performance suggestions in the Audits panel</i></span></span></span></div>\n<span><span></span></span><br><h2><span><br></span></h2>\n<h2><span>The Node.js era</span></h2>\n<br><span>Up until 2014 or so, we mainly thought of DevTools as a tool for building great experiences on Chrome. The rise of Node prompted us to rethink our role in the web ecosystem. </span><br><span>For the first few years of Node's existence, Node developers were in a situation similar to that of web developers before Firebug, or Gmail developers before the Timeline panel: the scale of Node apps outpaced the scale of Node tools. Given that Node runs on Chrome's JavaScript engine, V8, DevTools was a natural candidate to fill the gap. Support for debugging Node with DevTools landed in 2016 and includes the usual DevTools features, such as breakpoints, code stepping, blackboxing, source maps for transpiled code, and so on.</span><span></span><br><div dir=\"ltr\"><span><span><span><span><img height=\"457\" src=\"https://lh4.googleusercontent.com/DpzUokfiOn2gVW6nGD2S8vd_JkXpsdKV1h322u12GLehRcJ60j9PPJN01mDrBpbirZpiBv2UcvmMyc8y_umMoHZpTsLNBlij8MDisG9GmbJ8_bQRurSljnM9-wiywVL3i7rGzmD2\" width=\"624\"></span></span><i><span>Node Connection Manager</span></i></span></span></div>\n<span></span><br><h3 dir=\"ltr\"><span></span></h3>\n<span></span><br><h2><span><br>The DevTools protocol ecosystem</span></h2>\n<br><span><span><span>The name </span><span>Chrome DevTools Protocol </span><span>(CDP) suggests an API that only DevTools can use. The reality is more general than that: it’s the API that enables programmatic access to Chrome. Over the last few years, we've seen a few third-party libraries and applications join the protocol ecosystem:</span></span></span><br><ul><span><li dir=\"ltr\"><div dir=\"ltr\"><span><a href=\"https://github.com/cyrus-and/chrome-remote-interface\"><span>chrome-remote-interface</span></a><span> provides low level JavaScript access to the protocol</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><a href=\"https://github.com/GoogleChrome/puppeteer\"><span>Puppeteer</span></a><span> brings it to the next level of abstraction and enables automation of the evergreen </span><a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\"><span>headless Chrome</span></a><span> browser with modern JavaScript API</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><a href=\"https://developers.google.com/web/tools/lighthouse/\"><span>Lighthouse</span></a><span> automates the process of finding ways to improve the performance and quality of pages</span></span></div></li></span></ul>\n<span></span><br><div dir=\"ltr\"><span><span><span>We're excited to see thousands of projects depend on these packages to enable rich interaction with Chrome. If you’re in the tooling or automation business, it’s worth checking out the protocol to see if it opens up any opportunities in your domain. For example, the </span><a href=\"https://code.visualstudio.com/\"><span>VS Code</span></a><span> and </span><a href=\"https://www.jetbrains.com/webstorm/\"><span>WebStorm</span></a><span> teams both use it to enable JavaScript debugging within their respective IDEs.</span></span></span></div>\n<span></span><br><h2><span>What's next?</span></h2>\n<span></span><br><div dir=\"ltr\"><span><span><span>Our core mission is to build tools that help you create great experiences on the web. We very much rely on your feedback to help us determine what products or features to build.</span></span></span></div>\n<span></span><br><ul><span><li dir=\"ltr\"><div dir=\"ltr\"><span><span>Stay up-to-date on new features with our </span><a href=\"https://developers.google.com/web/updates/tags/devtools-whatsnew\"><span>What's New</span></a><span> posts</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Propose new features on the </span><a href=\"https://groups.google.com/forum/#!forum/google-chrome-developer-tools\"><span>mailing list</span></a></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>File bugs in </span><a href=\"https://crbug.com/\"><span>Chromium Bug Tracker</span></a></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Follow us on </span><a href=\"https://twitter.com/ChromeDevTools\"><span>Twitter</span></a><span> to discover new features and bite-sized workflows</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Ask questions on </span><a href=\"https://stackoverflow.com/questions/ask?tags=google-chrome-devtools\"><span>Stack Overflow</span></a><span> to get help with using DevTools</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Take matters into your own hands and </span><a href=\"https://docs.google.com/document/d/1WNF-KqRSzPLUUfZqQG5AFeU_Ll8TfWYcJasa_XGf7ro/edit#heading=h.xz439gqj1lwr\"><span>contribute to DevTools</span></a></span></div></li></span></ul>\n<span></span><br><div dir=\"ltr\"><span><span><span>Thank you for creating such a vibrant community. We look forward to another 10 years of building the web with you.</span></span></span></div>\n<span></span><br><div><span><span>Posted by the Chrome DevTools team</span></span></div>\n<span></span>\n</div></span></span></span>\n</div>\n</div>\n<span></span>\n","content":"\n<span></span><br><div dir=\"ltr\"><span><span>Chrome is turning 10! Thank you for making the web development community so open, collaborative, and supportive. DevTools draws inspiration from countless other projects. Here’s a look back at how DevTools came about, and how it’s changed over the years.</span></span></div>\n<h2></h2>\n<h2>\n<br><br>In the beginning, there was Firebug</h2>\n<div dir=\"ltr\"><span><span>Imagine for a moment that browsers didn't ship with developer tools. How would you debug JavaScript? You'd basically have 3 options: </span></span></div>\n<ul>\n<li>Sprinkle window.alert() calls throughout your code.</li>\n<li><span>Comment out sections of code.</span></li>\n<li><span>Stare at the code for a long time until the JavaScript gods bless you with a solution.</span></li>\n</ul>\n<div dir=\"ltr\"><span><span><span></span></span></span></div>\n<div dir=\"ltr\"><span><span>What about layout issues? Network errors? Again, all you could really do is conduct painstaking experiments in your code. This was the reality of web development up until 2006. Then a little tool called Firebug came along and changed everything.</span></span></div>\n<div><div><span><span></span></span></div></div>\n<div>\n<div>\n<div class=\"separator\"><a href=\"https://lh3.googleusercontent.com/kERZXRq3XId5YhSowkwb1zsafnmU65qdo3XM2lNlPQ45xCMYu39EnpDzXTxmXG7mtwwSHYvenQJzzrDwcSZgWqhA-1MoiCFIIZWKRSV1H6sLBpFqkUxx5orAf23KAPnCDETC4GJ0\" imageanchor=\"1\"><img border=\"0\" height=\"284\" src=\"https://lh3.googleusercontent.com/kERZXRq3XId5YhSowkwb1zsafnmU65qdo3XM2lNlPQ45xCMYu39EnpDzXTxmXG7mtwwSHYvenQJzzrDwcSZgWqhA-1MoiCFIIZWKRSV1H6sLBpFqkUxx5orAf23KAPnCDETC4GJ0\" width=\"624\"></a></div>\n<span><span><i><span><br><br>A screenshot of Firebug's Net panel, taken from </span><a href=\"https://hacks.mozilla.org/2017/10/saying-goodbye-to-firebug/\"><span>Saying Goodbye to Firebug</span></a><span> (</span><a href=\"https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/10/net-panel.gif\"><span>source</span></a><span> and </span><a href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><span>license</span></a><span>)</span></i></span></span>\n</div>\n<br><span><span><span>Firebug was a Firefox extension that let you debug, edit, and monitor pages in real-time. As a web developer suddenly you went from having no visibility into your pages to having what are essentially the core features of modern developer tools. The ability to understand exactly why Firefox was behaving as it was unleashed a flood of creativity on the web. Without Firebug, the Web 2.0 era wouldn't have been possible.</span></span></span><br><h2></h2>\n</div>\n<h2></h2>\n<h2></h2>\n<h2>\n<br><br><br><span>WebKit Web Inspector</span>\n</h2>\n<div><br></div>\n<h2>\n<span><span><span>Around the same time as Firebug’s launch, a few Google engineers started working on a project which would eventually lead to Chrome. From the start, Chrome was a mashup of different code libraries. For rendering the Chrome engineers opted for WebKit, which is the open-source project that still powers Safari to this day. An added bonus of using WebKit was that it came with a handy tool called the Web Inspector.</span></span></span><img height=\"488\" src=\"https://lh4.googleusercontent.com/26HnJ-nCLzoDc5IZXj-zH_APHKIvlL_xGBa2iC-haDOjljkTCMc6kBG-2aPBZCeWhUCafZqT5UVJKjb9kbmjrGUBz_MlI7ejR263KMZtt4T_De-z3ZkkNses8PFa_R8ouIzoLFdI\" width=\"624\">\n</h2>\n<span></span> <br><div><span><i>A screenshot of the Web Inspector, taken from <a href=\"https://webkit.org/blog/197/web-inspector-redesign/\">Web Inspector Redesign</a> (<a href=\"https://webkit.org/blog-files/inspector-elements-panel.png\">source</a> and <a href=\"https://webkit.org/licensing-webkit/\">license</a>)</i></span></div>\n<span></span><br><div><span><span><span>Like the Net panel of Firebug, the original Web Inspector probably looks familiar. Much of its functionality lives on to this day as the Elements panel in Chrome DevTools. Web Inspector launched a few days after Firebug, and Safari was the first browser to bundle developer tooling directly into the browser.</span></span></span></div>\n<span></span><br><h2></h2>\n<h2>\n<br><br><br>The \"Inspect Element\" era</h2>\n<div>\n<span><span><br></span></span><span><span><span>Chrome brought many innovative ideas to the browser ecosystem, such as the omnibox that combined search and the address bar, and a multi-process architecture that prevented one hanging tab from crashing the entire browser. But the innovation we like the most was providing developer tools in every build to every user, exposed with the click of a mouse.</span></span></span>\n</div>\n<div><span><span><img height=\"316\" src=\"https://lh3.googleusercontent.com/sioL979MZDJ6Y-eTtvV1z88gOx4ExsyOXmsK3mUIjX-FUOdGeM29MOTJpPlcxkebmOEth26gCUUVnIISXGnz8vT8YvtuyDwXFltxtSUm3U0zDgJF37091142hg_rZwv4Q3whpzOY\" width=\"624\"></span></span></div>\n<span></span><br><div><span><span><i>\"Inspect Element\" in 2010</i></span></span></div>\n<span></span> <br><div><span><span><i></i></span></span></div>\n<span></span> <br><div>\n<span><br>Before Chrome, developer tooling was an opt-in experience. You either had to install an extension, like Firebug, or enable some flags, as is still the case in Safari today. Chrome was the first browser to make developer tooling accessible from every browser instance. We'd like to claim that we had a grand vision for creating a developer-friendly browser from the start, but the reality is that Chrome had a lot of compatibility issues in its early days (which makes sense, since no one was building for it) and we needed to give web developers an easy way to fix these issues. Web developers told us that it was a useful feature, and we kept it.</span><br><span><span></span></span><br><div dir=\"ltr\"><span><span><span><span></span></span></span></span></div>\n<span><span></span></span><br><h2><span>The mobile era</span></h2>\n<span></span> <br><div dir=\"ltr\"><span><span><span>For the first few years of the DevTools project, we essentially added chapters to the stories that Firebug and Web Inspector started. The next big shift in how we approached DevTools happened when it became clear that smartphones were here to stay.</span></span></span></div>\n<div dir=\"ltr\"><span><span><span><span></span></span></span></span></div>\n<div dir=\"ltr\"><span><span><span>Our first mission in this brave new world was to enable developers to debug real mobile devices from their development machines, which we call remote debugging. DevTools was actually well-positioned to handle remote debugging, thanks to another consequence of Chrome’s multi-process architecture. Early on in the DevTools project we realized that the only way a debugger could reliably access a multi-process browser was through a client-server protocol, with the browser being the server, and the debugger being the client. When mobile Chrome came around, the protocol was already baked into it, so we just had to make the DevTools running on your development machine communicate with the Chrome running on your mobile device over the protocol. This protocol still forms the backbone of DevTools today, and is now known as the </span><a href=\"https://chromedevtools.github.io/devtools-protocol/\"><span>Chrome DevTools Protocol</span></a><span>.</span></span></span></div>\n<div><span><span><img height=\"247\" src=\"https://lh4.googleusercontent.com/qf_D1vUxYpaulQIPdXqjQFZfl3jzDSaZIB4XJrckdiLWYNfRaTy0PIzuwaUUisqfM9qMoq4UFpWsDtuJHAFuPhnVBvjoPk_uYbFf-R7NSGJGiXOIWtUMxh8bhn4BGQRKa5qGkg61\" width=\"624\"></span></span></div>\n<div>\n<span><span><span></span></span></span><br><div dir=\"ltr\"><span><span><span><span><span><i>Remote Debugging</i></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div dir=\"ltr\"><span><span><span><span><span><span><span>Remote debugging was a step in the right direction, and to this day is still the primary tool for making sure that your sites behave reasonably on real mobile devices. Over time, however, we realized that remote debugging could be a bit tedious. When you're in the early phases of building out a site or feature, you usually just need a first-order approximation of the mobile experience. This prompted us to create a set of mobile simulation features, such as</span></span></span></span><span>:</span></span></span></span></div>\n<span><span><span></span></span></span><br><ul><span><span><span><li>Precisely emulating the mobile viewport, simulating touch-based input and device orientation.</li>\n<li>Throttling the network connection to simulate 3G and CPU to simulate less-powerful mobile hardware.</li>\n<li>Spoofing user agent, geolocation, accelerometer data and more.</li></span></span></span></ul>\n<span><span><span></span></span></span><br><div><span><span><span><span>We collectively refer to these features as Device Mode.</span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><img height=\"286\" src=\"https://lh6.googleusercontent.com/SZlk5tXgHa-VywxFkTPYSq13aQ3CkxjkydXmO7SYMbdNg7SMfn_ILSH-4uPBBUKANJ0jQvSoTgyTzYc5u-3Xc_9T0jAahWmaUGUaTNXoAQMyiflT50JJj0EnnbBTQESSu8ouFL7l\" width=\"400\"></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><span><i><br><br><br>An early prototype of Device Mode</i></span></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><i></i></span></span></span></span></span></div>\n<span><span><span></span></span></span><br><div><span><span><span><span><span><img height=\"335\" src=\"https://lh4.googleusercontent.com/su2lTgS6_TSjcPyYI-kW2Cw54gl_t1JdCb_w1gJzlhl1FCy77MsvgK6WSPQy2UHWR9JJHBkDpXl8nNCXi_H_0SoeOsxBIFOJEQCuT-yVBgyf0mutCRJbMa-BFKy3meMCHlTALSh5\" width=\"400\"></span></span></span></span></span></div>\n<span><span><span></span></span></span><div><span><span><span><span><span><span><i>Device Mode in 2018</i></span></span></span></span></span></span></div>\n<span><span><span><div><span><span><i></i></span></span></div>\n<div><span><span><i></i></span></span></div>\n<div>\n<br><br><h2><span><span>The performance era</span></span></h2>\n<span><span></span></span> <br><div dir=\"ltr\"><span><span><span><span>While the mobile era unfolded, big apps like Gmail were pushing the limits of the web's capabilities. </span><a href=\"https://youtu.be/x9Jlu_h_Lyw\"><span>Gmail-scale bugs called for Gmail-scale tools</span></a><span>. One of our first major contributions to the tooling ecosystem was to show a play-by-play breakdown of exactly everything that Chrome had to do in order to display a page.</span></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><img height=\"387\" src=\"https://lh4.googleusercontent.com/0wpXSjTga8zjPa93xeTJ_CitmD43gINO-o58JDeR-VXDVeTTqfRosd534FPCCznkJp37bHXNQ2mAHlfBMfmnX6dAzky8hmZP0ZTPQUAwmOsEN1kw-kOzvQyOmiWjYOGcMVf7armt\" width=\"624\"></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><i><span>The original Timeline panel, as announced in </span><a href=\"https://blog.chromium.org/2012/10/do-more-with-chrome-developer-tools.html\"><span>Do More with Chrome Developer Tools</span></a></i></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><img height=\"529\" src=\"https://lh4.googleusercontent.com/AFu8PIdpJml4vgGrr_5_XkeHVA9uTbxkVuspQjCZjhiL1dtL7F5Tua7fDWUhMKUNwHrnF8jX5rm_1iUabLmTm1-y_BCkaRnU4pAAr-euI0Us04ko5IQJaw_8Ne8hKD1Wo-ffZ28h\" width=\"624\"></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><span><i>The Performance panel in 2018</i></span></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><span><br>These tools were a step in the right direction, but in order to spot optimization opportunities you needed to learn the nitty-gritty details about how browsers work and sift through a lot of data. Lately we've been building on this foundation to provide more </span><a href=\"https://developers.google.com/web/tools/chrome-devtools/speed/get-started\"><span>guided performance insights</span></a><span>. The new </span><a href=\"https://developers.google.com/web/tools/lighthouse/\"><span>Lighthouse</span></a><span> engine powers the Audits panel, and is also available as a Node module for integration with CI systems.</span></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><img height=\"681\" src=\"https://lh4.googleusercontent.com/VeEn3HMhNkdnX8FhJ0_q3Ajtq7YbFCgq3F6lTZ9m2RLO4Fb4SFmGWqZpz6gXz9dAmpt6U-5c7yOzrdkjL5fHfUeMrYvre4Zca07nHErvzFkRD7rehFeVdVNduECxVAz7lYEEcj_B\" width=\"542\"></span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span><i>Performance suggestions in the Audits panel</i></span></span></span></div>\n<span><span></span></span><br><h2><span><br></span></h2>\n<h2><span>The Node.js era</span></h2>\n<br><span>Up until 2014 or so, we mainly thought of DevTools as a tool for building great experiences on Chrome. The rise of Node prompted us to rethink our role in the web ecosystem. </span><br><span>For the first few years of Node's existence, Node developers were in a situation similar to that of web developers before Firebug, or Gmail developers before the Timeline panel: the scale of Node apps outpaced the scale of Node tools. Given that Node runs on Chrome's JavaScript engine, V8, DevTools was a natural candidate to fill the gap. Support for debugging Node with DevTools landed in 2016 and includes the usual DevTools features, such as breakpoints, code stepping, blackboxing, source maps for transpiled code, and so on.</span><span></span><br><div dir=\"ltr\"><span><span><span><span><img height=\"457\" src=\"https://lh4.googleusercontent.com/DpzUokfiOn2gVW6nGD2S8vd_JkXpsdKV1h322u12GLehRcJ60j9PPJN01mDrBpbirZpiBv2UcvmMyc8y_umMoHZpTsLNBlij8MDisG9GmbJ8_bQRurSljnM9-wiywVL3i7rGzmD2\" width=\"624\"></span></span><i><span>Node Connection Manager</span></i></span></span></div>\n<span></span><br><h3 dir=\"ltr\"><span></span></h3>\n<span></span><br><h2><span><br>The DevTools protocol ecosystem</span></h2>\n<br><span><span><span>The name </span><span>Chrome DevTools Protocol </span><span>(CDP) suggests an API that only DevTools can use. The reality is more general than that: it’s the API that enables programmatic access to Chrome. Over the last few years, we've seen a few third-party libraries and applications join the protocol ecosystem:</span></span></span><br><ul><span><li dir=\"ltr\"><div dir=\"ltr\"><span><a href=\"https://github.com/cyrus-and/chrome-remote-interface\"><span>chrome-remote-interface</span></a><span> provides low level JavaScript access to the protocol</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><a href=\"https://github.com/GoogleChrome/puppeteer\"><span>Puppeteer</span></a><span> brings it to the next level of abstraction and enables automation of the evergreen </span><a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\"><span>headless Chrome</span></a><span> browser with modern JavaScript API</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><a href=\"https://developers.google.com/web/tools/lighthouse/\"><span>Lighthouse</span></a><span> automates the process of finding ways to improve the performance and quality of pages</span></span></div></li></span></ul>\n<span></span><br><div dir=\"ltr\"><span><span><span>We're excited to see thousands of projects depend on these packages to enable rich interaction with Chrome. If you’re in the tooling or automation business, it’s worth checking out the protocol to see if it opens up any opportunities in your domain. For example, the </span><a href=\"https://code.visualstudio.com/\"><span>VS Code</span></a><span> and </span><a href=\"https://www.jetbrains.com/webstorm/\"><span>WebStorm</span></a><span> teams both use it to enable JavaScript debugging within their respective IDEs.</span></span></span></div>\n<span></span><br><h2><span>What's next?</span></h2>\n<span></span><br><div dir=\"ltr\"><span><span><span>Our core mission is to build tools that help you create great experiences on the web. We very much rely on your feedback to help us determine what products or features to build.</span></span></span></div>\n<span></span><br><ul><span><li dir=\"ltr\"><div dir=\"ltr\"><span><span>Stay up-to-date on new features with our </span><a href=\"https://developers.google.com/web/updates/tags/devtools-whatsnew\"><span>What's New</span></a><span> posts</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Propose new features on the </span><a href=\"https://groups.google.com/forum/#!forum/google-chrome-developer-tools\"><span>mailing list</span></a></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>File bugs in </span><a href=\"https://crbug.com/\"><span>Chromium Bug Tracker</span></a></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Follow us on </span><a href=\"https://twitter.com/ChromeDevTools\"><span>Twitter</span></a><span> to discover new features and bite-sized workflows</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Ask questions on </span><a href=\"https://stackoverflow.com/questions/ask?tags=google-chrome-devtools\"><span>Stack Overflow</span></a><span> to get help with using DevTools</span></span></div></li>\n<li dir=\"ltr\"><div dir=\"ltr\"><span><span>Take matters into your own hands and </span><a href=\"https://docs.google.com/document/d/1WNF-KqRSzPLUUfZqQG5AFeU_Ll8TfWYcJasa_XGf7ro/edit#heading=h.xz439gqj1lwr\"><span>contribute to DevTools</span></a></span></div></li></span></ul>\n<span></span><br><div dir=\"ltr\"><span><span><span>Thank you for creating such a vibrant community. We look forward to another 10 years of building the web with you.</span></span></span></div>\n<span></span><br><div><span><span>Posted by the Chrome DevTools team</span></span></div>\n<span></span>\n</div></span></span></span>\n</div>\n</div>\n<span></span>\n","enclosure":{},"categories":["10th birthday","birthday","chrome","devtools"],"color":"lightgreen","category":"Chromium Blog","date":"2018-09-06 16:59:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Conversational Semantics","pubDate":"2018-08-30 14:00:00","link":"http://feedproxy.google.com/~r/alistapart/main/~3/t-qA2LWHJ5w/conversational-semantics","guid":"http://alistapart.com/article/conversational-semantics","author":"by","thumbnail":"http://feeds.feedburner.com/~r/alistapart/main/~4/t-qA2LWHJ5w","description":"\n<p>As Alexa, Cortana, Siri, and even customer support chat bots become the norm, we have to start carefully considering not only how our content looks but how it could sound. We can—and should—use HTML and ARIA to make our content structured, sensible, and most importantly, meaningful.</p>\n\n<h2>Content, confined</h2>\n\n<p>Most bots and digital assistants work from specially-coded data sets, APIs, and models, but there are more than 4.5 billion pages of content on the web, trapped, in many cases, within our websites. Articles, stories, blog posts, educational materials, books, and marketing messages—all on the web, but in many cases unusable in a non-visual context. A few projects—search spiders most notably—are working to turn our messy, unstructured web pages into something usable. But we can do more—a lot more—to facilitate that and enable our web pages to be more usable by both real people and the computers that power voice-based user experiences.</p>\n\n<p>Let’s release our content from the screen and empower it to go anywhere and everywhere. We can help it find its way into virtual assistants and other voice-response technologies—and even voiceless chat bots—without having to code and re-code that content over and over into multiple, redundant formats. We can even enable our users to actively engage with our content by filling in forms and manipulating widgets on the web purely via voice. It’s all possible, but we need to start by taking a long, hard look at our markup.</p>\n\n<p>Consider this <code>em</code> element:</p>\n\n<pre><code class=\"language-markup\">I’m &lt;em&gt;really&lt;/em&gt; happy to see you.</code></pre>\n\n<p>Sure, it is visually <em>rendered</em> as italics, but it also adds emphasis to the content within. HTML is chock full of elements that are useful for conveying meaning, nuance, and relationships. Being aware of them enables us to author more expressive documents. Ignoring them can undermine the usability of the content we’re marking up. When we create a web page, we need to be mindful of the conversation we are creating with our customers in the process, and choose elements with intent and care.</p>\n\n<p>One of the best indicators for how HTML will make it into our virtual assistants is another assistive technology: <a href=\"https://webaccess.berkeley.edu/ask-pecan/what-is-a-screen-reader\">screen readers</a>. Not only do screen readers do as their name implies, they also enable users to rapidly navigate a page in various ways, and provide mechanisms that translate visual design constructs—proximity, proportion, etc.—into useful information. At least they do when documents are authored thoughtfully.</p>\n\n<p>So, let’s jump in and look at some solid examples of how we can both create more meaningful documents and empower them to be more usable in “headless” UIs.</p>\n\n<h2>Powerful phrases</h2>\n\n<p>We’ll start by looking at what are called “phrasing” elements. The emphasis you saw earlier is an example of this element type. We used to call them “inline” elements because, by default, they are visibly displayed as inline text. But “phrasing” is a much more accurate description of the role they play in our web pages, because, well, they mark up phrases.</p>\n\n<p>We saw this example earlier:</p>\n\n<pre><code class=\"language-markup\">I’m &lt;em&gt;really&lt;/em&gt; happy to see you.</code></pre>\n\n<p>Here, the word “really” is marked for emphasis. I’m unaware of any current speech synthesizer that audibly emphasizes text like we do, but it’s still early days in the grand scheme of things. I’m sure it’ll happen—there’s been a lot of focus on building more human-sounding voices—and it could sound something like this:</p>\n\n<figure><audio controls preload=\"none\">\n    <source src=\"//alistapart.com/d/conversational-semantics/emphasis.mp3\" type=\"audio/mp3\">\n    <source src=\"//alistapart.com/d/conversational-semantics/emphasis.ogg\" type=\"audio/ogg\">\n    <!-- fall back to a simple image -->\n  <p>Your browser doesn’t support HTML5 audio, but you can <a href=\"https://alistapart.com/d/conversational-semantics/emphasis.mp3\">download the MP3</a> instead.</p>\n</source></source></audio><p>  <figcaption>Mimicking Emphasis using speechSynthesis</figcaption></p>\n</figure><p>Sometimes emphasis is not enough. When we want to indicate that content is vital for our customers to pay attention to, the <code>strong</code> element is the right way to go. “Strong” means “of strong importance.”</p>\n\n<pre><code class=\"language-markup\">Please fill out the form below to contact us. &lt;strong&gt;All fields are required.&lt;/strong&gt;</code></pre>\n\n<p>Visually, <code>em</code> and <code>strong</code> are displayed as italics (as mentioned previously) and bold, respectively.</p>\n\n<figure class=\"quote\">\nI’m <em>really</em> happy to see you.<br>\nPlease fill out the form below to contact us. <strong>All fields are required.</strong>\n</figure><p>Now we also have the <code>i</code> and <code>b</code> elements, which are rendered exactly the same as <code>em</code> and <code>strong</code>, respectively. In the early days of the web, that led many of us—myself included—to believe they were interchangeable. And with <code>b</code> and <code>i</code> being shorter to write, they proliferated on the web. Semantically, however, the <code>i</code> and <code>b</code> elements are quite different from their doppelgängers.</p>\n\n<p>The <code>i</code> element is similar to the emphasis element, but more generic. It is used to indicate an alternate voice or mood. It could be used to indicate sarcasm, idiomatic remarks, and shifts in language.</p>\n\n<pre><code class=\"language-markup\">It's a terrible movie and it made $200 million. &lt;i&gt;Go figure!&lt;/i&gt;\n\nShe is admired for her energy and &lt;i lang=\"fr\"&gt;joie de vivre&lt;/i&gt;.</code></pre>\n\n<p>In the latter example, you might also notice that I’ve indicated that the phrase “joie de vivre” is in another language—French—using the <code>lang</code> attribute. This attribute lets the digital assistant know it may want to shift its pronunciation.</p>\n\n<figure><audio controls preload=\"none\">\n    <source src=\"//alistapart.com/d/conversational-semantics/language.mp3\" type=\"audio/mp3\">\n    <source src=\"//alistapart.com/d/conversational-semantics/language.ogg\" type=\"audio/ogg\">\n    <!-- fall back to a simple image -->\n  <p>Your browser doesn’t support HTML5 audio, but you can <a href=\"https://alistapart.com/d/conversational-semantics/language.mp3\">download the MP3</a> instead.</p>\n</source></source></audio><p>  <figcaption>Supporting Language Shifts in speechSynthesis</figcaption></p>\n</figure><p>Admittedly, replicating this <a href=\"https://www.smashingmagazine.com/2017/02/experimenting-with-speechsynthesis/\">using the <code>speechSynthesis</code> API</a> is still a little rough, but with time, this too will no doubt improve.</p>\n\n<p>The <code>b</code> element is used for content that should be set apart—or “stylistically offset”—from the surrounding text. It does not indicate that the phrase is of any greater importance though. I like to use it for names of people and products. Keywords would be another option. Books, films, and other media have their own element, which I’ll get to in a moment.</p>\n\n<pre><code class=\"language-markup\">For 12 years and running, over 100,000 companies have adopted the &lt;b&gt;Basecamp&lt;/b&gt; way of working. Not just tried, but signed up, said “ah-ha!”, and never looked back. There’s nothing else like &lt;b&gt;Basecamp&lt;/b&gt;.</code></pre>\n\n<p>Functionally, the <code>b</code> element is a lot like a <code>span</code>—generic phrasing content albeit with a shorter tag.</p>\n\n<p>Since I mentioned movies and books, I’ll quickly bring up the <code>cite</code> element, which is for the title of cited or referenced works.</p>\n\n<pre><code class=\"language-markup\">I wrote the book &lt;cite&gt;Adaptive Web Design&lt;/cite&gt;. If you like this article, you’ll find in-depth information about semantics (and a whole lot more) in there.</code></pre>\n\n<h3>Specialized syntax</h3>\n\n<p>HTML has other specialized phrasing constructs, such as <code>abbr</code> for abbreviations and acronyms. Traditionally, we’d recommended using title to provide an expansion:</p>\n\n<pre><code class=\"language-markup\">&lt;abbr title=\"Hypertext Markup Language\"&gt;HTML&lt;/abbr&gt; is the standard markup language for creating web pages and web applications.</code></pre>\n\n<p>Sadly—as with many things on the web—<a href=\"https://www.google.com/search?q=title+attribute+seo\">black hat SEO practices involving <code>title</code></a> spurred screen readers to ignore the attribute altogether. Visual browsers do still provide tooltips, so they’re not completely useless, but given that screen readers don’t pay attention to the <code>title</code> attribute currently, it’s pretty unlikely they will be surfaced by a virtual assistant.</p>\n\n<p>To be honest, <a href=\"https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/\">it’s best to avoid <code>title</code> altogether</a>. For the purposes of absolute clarity, you should introduce and explain important abbreviations and acronyms the first time they are used. There’s even <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/dfn\">an element that signals a defining context: <code>dfn</code></a>.</p>\n\n<pre><code class=\"language-markup\">&lt;dfn id=\"dfn-html\"&gt;Hypertext Markup Language (HTML)&lt;/dfn&gt; is the standard markup language for creating web pages and web applications.</code></pre>\n\n<p>For more technical writing, the <code>kbd</code> and <code>code</code> elements can be quite useful. They indicate keys a user might need to press and words and phrases that are used in writing software or coding documents:</p>\n\n<pre><code class=\"language-markup\">Press &lt;kbd&gt;Tab&lt;/kbd&gt; to move from link to link within a document.\n\nThe &lt;code&gt;kbd&lt;/code&gt; element is used to indicate keyboard key names.</code></pre>\n\n<p>Then there’s the <code>span</code> element, which is used for generic phrases, as I noted earlier. It’s a meaningless element, so will not be spoken in any way differently by default.</p>\n\n<pre><code class=\"language-markup\">There is &lt;span&gt;nothing particularly interesting&lt;/span&gt; in this sentence.</code></pre>\n\n<p>There are <a href=\"https://www.w3.org/TR/2012/WD-html-markup-20121011/common-models.html#common.elem.phrasing\">more phrasing elements</a>, but these are the ones you’re most likely to want in most projects.</p>\n\n<h3>Clear connections</h3>\n\n<p>Links are also phrasing elements, but I want to call them out specifically because they provide a much richer set of options for fine-tuning how our users interact with our pages.</p>\n\n<p>The primary way we use links is to connect related content. It’s incredibly important to choose meaningful words and phrases as link text. Links that read generically like “click here” and “read more” are not terribly useful, especially when the text of every link is being read out to you—which is a key way headless UI users skim web pages. Make it clear where you are linking. Restructure sentences if you need to in order to provide good link text.</p>\n\n<p>If you are drawn to “read more” style links for their brevity, you can <a href=\"https://dictionary.cambridge.org/us/dictionary/english/have-your-cake-and-eat-it-too\">have your cake and eat it too</a> by including non-visible text within a link. This gives you brief, uniform links from a visual standpoint, but also lets you provide context in headless scenarios. Here’s an example from <a href=\"https://www.aaron-gustafson.com/\">my site’s</a> navigation. I’ve broken it up across a few lines to make it a little easier to follow:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"/speaking-engagements/\"&gt;\n\t&lt;b class=\"hidden\"&gt;A List of My&lt;/b&gt;\n\tSpeaking\n\t&lt;b class=\"hidden\"&gt;Engagements&lt;/b&gt;\n&lt;/a&gt;</code></pre>\n\n<p>Within the link, I have two <code>b</code> elements classified as “hidden.” In my CSS, I hide the content within them from sighted users, but I <a href=\"https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\">hide them in a way that they remain available to assistive technology</a>. So a sighted user will only see “speaking,” but a screen reader or digital assistant will read “a list of my speaking engagements.”</p>\n\n<p>You could also <a href=\"https://developer.mozilla.org/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute\">offer an expansion with <code>aria-label</code></a> on the anchor element. If that “aria-” bit in <code>aria-label</code> looks weird to you, it comes from the Accessible Rich Internet Applications (ARIA) spec, <a href=\"https://developer.mozilla.org/docs/Web/Accessibility/ARIA\">an ongoing effort to map complex operating-system-like UI constructs into accessible ones</a>. I chose the hidden text route to give myself the flexibility to display the hidden content in certain scenarios.</p>\n\n<p>Some of you may be wondering why I didn’t bring up <code>aria-label</code> when I mentioned the <code>abbr</code> element. It seems like a good fit, and <a href=\"https://www.w3.org/TR/wai-aria/#aria-label\">the <code>aria-label</code> spec</a> currently allows the attribute on <code>abbr</code> elements. The issue isn’t the spec, but rather the reality that the info in <code>aria-label</code> isn’t always exposed by browsers or sought out by assistive technology on elements like <code>abbr</code>. With good reason, they’ve been much more <a href=\"https://developer.paciellogroup.com/blog/2017/07/short-note-on-aria-label-aria-labelledby-and-aria-describedby/\">focused on exposing <code>aria-label</code> (and it’s kin) on interactive elements, landmarks, and widgets</a>.</p>\n\n<p>It’s worth noting that hidden text in links can cause issues for folks who rely on a combination of screens and dictation software to interact with their computers. If the link text that’s displayed does not match the actual link text in the markup, a user saying the visible link text—like the word “Speaking” in the case of my site’s navigation—won’t actually activate the link. It’s also worth reiterating the importance of quality link text; don’t use <code>aria-label</code> to paper over poorly-worded links or unnecessary redundancy like “read more.”</p>\n\n<p>We can also use links to reference content within the current document or even at a specifically-identified position in another document:</p>\n\n<pre><code class=\"language-markup\">To illustrate the concept of layering styles, perhaps it’s best to start at the beginning: with no style applied. &lt;a href=\"#figure-3-3\"&gt;Figure 3.3&lt;/a&gt; shows the lodging article in Safari with only the default browser styles applied.\n…\n&lt;figure id=\"figure-3-3\"&gt;\n  …\n&lt;/figure&gt;</code></pre>\n\n<p>At the tail end of this code sample, we have a <code>figure</code> element that is referenced elsewhere in the document. Rather than leaving it up to the reader to find “Figure 3.3,” we can use a fragment identifier to jump the reader directly to the reference. Adding a unique id attribute to each important element in your design makes it easy for you—or others—to link directly to them.</p>\n\n<p>As with the <code>i</code> element example I shared earlier, you can inform your readers about the language of a linked page using <code>hreflang</code>:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"…\" hreflang=\"es\"&gt;&lt;i lang=\"es\"&gt;\n\t&lt;b class=\"hidden\"&gt;Lea esta página en&lt;/b&gt; español\n&lt;/i&gt;&lt;/a&gt;</code></pre>\n\n<p>That’s Spanish for “read this page in Spanish,” and the link points to a Spanish-language translation of the page. The hidden content approach is in use here, too, with sighted users only seeing “español.”</p>\n\n<p>You can indicate the kind of content being linked to, using the <code>type</code> attribute:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"giant.mp4\" type=\"video/mp4\"&gt;Download this movie&lt;/a&gt;</code></pre>\n\n<p>And we also have the <code>download</code> keyword, which informs the browser that the file in question should be downloaded rather than presented. Again, a simple attribute that makes a simple HTML document capable of doing so much more:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"giant.mp4\" type=\"video/mp4\" download&gt;Download this movie&lt;/a&gt;</code></pre>\n\n<p>When encountering this type of link in a voice context, your digital assistant could prompt you to save the file to a connected storage account, like Dropbox. That’s pretty cool, but it’s worth noting that browsers will ignore the <code>download</code> attribute on cross-origin links for security purposes. Unfortunately that means you can’t use this approach to download files from your Content Delivery Network (CDN).</p>\n\n<p>Anchor elements also support non-web “pseudo” protocols. Two of the most common examples are “mailto:” for email links and “tel:” for phone numbers, but “sms:” and “webcal:” are also common.</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"mailto:mail@domain.com\"&gt;Send me an email&lt;/a&gt;\n\n&lt;a href=\"tel:18009346489\"&gt;Call Comcast Customer Service&lt;/a&gt;</code></pre>\n\n<p>Some operating systems (and browsers) allow installed apps to register custom protocols that can provide access to in-app functionality. A word of caution though: unrecognized protocols may prompt the user to search for an application that can use it.</p>\n\n<p>All of this phrasing content is great, but I’ve spent a good deal of time in the weeds. Let’s pull back a bit and look at documents themselves.</p>\n\n<h2>Sound structure</h2>\n\n<p>As you’re no doubt aware, <a href=\"https://careerfoundry.com/en/blog/ux-design/voice-ui-design-and-cognitive-load\">headless UIs place a greater cognitive load on our users</a>. It’s hard to keep track of where you are in an interface when you can’t see it. It can also be challenging to move around when you can’t gather information about the interface based on visual cues. The more complex an interface is, the more challenging this becomes.</p>\n\n<p>The same is true in visual interfaces, which is why <a href=\"https://abookapart.com/products/mobile-first\">“mobile first” thinking</a> encourages us to focus each page on a single task. This reduces the noise and raises the signal. But most web pages are the antithesis of clear and straightforward. As our screen sizes enlarged, we found more stuff to fill that space. Sharing links, related content, cross-promotions, and so on. Sometimes it’s easy to lose sight of the actual content.</p>\n\n<p>To combat this, screen readers provide <a href=\"https://tink.uk/understanding-screen-reader-interaction-modes/\">numerous mechanisms that enable users to gather information about the UI and move through it efficiently</a>. One of the most common involves moving the focus carat from one interactive element to another. Traditionally that movement is done via the keyboard Tab key, but it’s also possible via voice using keywords like “next” and “previous.” In most documents, users are moving from link to link. This is why it’s so important to offer informative link text.</p>\n\n<pre><code class=\"language-markup\">&lt;p&gt;This twist is what &lt;a href=\"https://en.wikipedia.org/wiki/John_Harsanyi\"&gt;John Harsanyi&lt;/a&gt;—an early game theorist—refers to as the “&lt;a href=\"https://en.wikipedia.org/wiki/Veil_of_ignorance\"&gt;Veil of Ignorance&lt;/a&gt;,” and what Rawls found, time and time again, was that individuals participating in the experiment would gravitate toward creating the most egalitarian societies.&lt;/p&gt;</code></pre>\n\n<p>It’s worth noting that form elements—buttons, inputs, etc.—are also part of the default tab order of a web page.</p>\n\n<p>Elements that would not traditionally be focusable can be included in the tab order by adding a <code>tabindex</code> attribute with a value of “0” (zero) to them. This ensures critical interface components are not accidentally bypassed by users who are skimming an interface by tabbing. Incidentally, it can also <a href=\"https://developer.paciellogroup.com/blog/2016/02/short-note-on-improving-usability-of-scrollable-regions/\">give sighted users keyboard control over scrollable elements</a>.</p>\n\n<p>Another mode of document traversal is browsing by heading. The various <a href=\"https://www.w3.org/TR/html401/struct/global.html#h-7.5.5\">heading levels in HTML</a> create a natural document outline, and assistive technologies can enable users to skim content using these headings:</p>\n\n<pre><code class=\"language-markup\">&lt;h1&gt;This is the title of the page&lt;/h1&gt;\n…\n&lt;h2&gt;This titles a section&lt;/h2&gt;\n…\n&lt;h3&gt;This titles a subsection&lt;/h3&gt;\n…\netc.</code></pre>\n\n<p>Since only the contents of the heading elements are read out in this mode, it’s best to avoid cutesy marketing phrases, and stick to summarizing the contents of a section.</p>\n\n<p>More recently, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/ARIA11.html\">document “landmarks”</a> have come along, providing quick access to key parts of the page. Landmark elements were first introduced as part of ARIA. Using the <code>role</code> attribute, you can define the function of specific regions of a page. Consider the following:</p>\n\n<pre><code class=\"language-markup\">&lt;div id=\"nav\"&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;\n\t\t\t&lt;a href=\"/about/\"&gt;&lt;b class=\"hidden\"&gt;A Bit &lt;/b&gt;About&lt;b class=\"hidden\"&gt; Me&lt;/b&gt;&lt;/a&gt;\n\t\t&lt;/li&gt;\n\t\t…\n\t&lt;/ul&gt;\n&lt;/div&gt;</code></pre>\n\n<p>In this example, the navigation list is sitting in a <code>div</code> with an <code>id</code> of “nav.” While that’s a meaningful identifier for the purposes of styling, scripting, and anchoring, the <code>div</code> is not actually exposed to assistive technology as navigation. Adding a <code>role</code> of “navigation”, however, makes that function explicit:</p>\n\n<pre><code class=\"language-markup\">&lt;div id=\"nav\" role=\"navigation\"&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;\n\t\t\t&lt;a href=\"/about/\"&gt;&lt;b class=\"hidden\"&gt;A Bit &lt;/b&gt;About&lt;b class=\"hidden\"&gt; Me&lt;/b&gt;&lt;/a&gt;\n\t\t&lt;/li&gt;\n\t\t…\n\t&lt;/ul&gt;\n&lt;/div&gt;</code></pre>\n\n<p>There are numerous role values that qualify as landmarks:</p>\n\n<ul>\n<li>banner</li>\n<li>navigation</li>\n<li>search</li>\n<li>main</li>\n<li>complementary</li>\n<li>contentinfo</li>\n</ul>\n<p>Landmarks also give users the opportunity to jump directly to a location within an interface, which is incredibly helpful. In a voice context, a user might be able to ask their digital assistant to “read me the navigation for this page” or “search for wooden baby toys,” and the assistant could use these landmarks to quickly respond to those commands.</p>\n\n<p>It’s worth noting that most of these landmarks have equivalent HTML elements. This is because HTML5 and ARIA were being developed at the same time, and both were looking to address the same limitations of the web. Here’s a rundown of ARIA landmark roles with HTML equivalents:</p>\n\n<ul>\n<li>banner - first <code>header</code> element not inside <a href=\"https://www.w3.org/TR/html/dom.html#sectioning-content\">sectioning content</a>\n</li>\n<li>navigation - <code>nav</code>\n</li>\n<li>main - <code>main</code>\n</li>\n<li>complementary - <code>aside</code>\n</li>\n<li>contentinfo - first <code>footer</code> element not inside <a href=\"https://www.w3.org/TR/html/dom.html#sectioning-content\">sectioning content</a>\n</li>\n</ul>\n<p>Each HTML5 element shown here is automatically assigned its corresponding ARIA <code>role</code> by modern browsers and is recognized by modern assistive technologies. However, in older browser and assistive technology combinations, the automatic role assignment may not happen. That’s why it’s not uncommon to see <code>nav</code> elements with a “navigation” <code>role</code> or similar even though validators will flag it as unnecessary.</p>\n\n<p>One last bit I want to touch on before I wrap up is the <code>div</code> element.</p>\n\n<pre><code class=\"language-markup\">&lt;div&gt;\n\tThis is simply a generic division of content.\n&lt;/div&gt;</code></pre>\n\n<p>We often employ a <code>div</code> when we want to group some elements together. That’s fine, but <code>div</code> is a meaningless element that adds nothing to the interface in terms of context. By contrast, other organizational elements do add value to a page:</p>\n\n<ul>\n<li>\n<code>p</code> - a paragraph; a voice synthesizer will naturally pause between them</li>\n<li>\n<code>ol</code> - a list of items whose order matters</li>\n<li>\n<code>ul</code> - a list of items whose order doesn’t matter</li>\n<li>\n<code>li</code> - an item in a list</li>\n<li>\n<code>dl</code> - a list of terms and their associated descriptions</li>\n<li>\n<code>dt</code> - a term described within a description list</li>\n<li>\n<code>dd</code> - a description of a term (or terms) in a description list</li>\n<li>\n<code>blockquote</code> - a long piece of quoted content</li>\n<li>\n<code>figure</code> - referenced content (images, tables, etc.)</li>\n<li>\n<code>figcaption</code> - the caption for a figure</li>\n</ul>\n<p>Some of these are among the elements categorized as <a href=\"https://www.w3.org/TR/2012/WD-html-markup-20121011/common-models.html#common.elem.flow\">“flow” content</a>. At a higher level, there are numerous organizational elements to choose from:</p>\n\n<ul>\n<li>\n<code>article</code> - a piece of content that can stand on its own</li>\n<li>\n<code>section</code> - a section of a document or article</li>\n<li>\n<code>header</code> - preamble content for a document, article, or section</li>\n<li>\n<code>footer</code> - supplementary information for a document, article, or section</li>\n<li>\n<code>main</code> - the primary content of a document</li>\n<li>\n<code>nav</code> - navigational content</li>\n<li>\n<code>aside</code> - complementary content</li>\n</ul>\n<p>There are a ton of meaningful elements out there that can enable our digital assistants to do more for our customers. And the more we use them, the more useful our assistants become, and the more powerful our users feel. For instance, using <code>article</code> and heading elements can enable voice commands like “Read me the top three headlines in the <cite>New York Times</cite> today” without involving any sort of specialized data feed.</p>\n\n<p>A generic <code>div</code> gets you none of these benefits.</p>\n\n<h2>Create conversations</h2>\n\n<p>HTML is a truly robust and expressive language that is often overlooked and undervalued, but it has the incredible potential to nurture conversations with our users without requiring a lot of effort on our part. Simply taking the time to code web pages well will enable our sites to speak to our customers like they speak to each other. Thinking about how our sites are experienced as headless interfaces now will set the stage for more natural interactions between the real world and the digital one.</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/t-qA2LWHJ5w\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p>As Alexa, Cortana, Siri, and even customer support chat bots become the norm, we have to start carefully considering not only how our content looks but how it could sound. We can—and should—use HTML and ARIA to make our content structured, sensible, and most importantly, meaningful.</p>\n\n<h2>Content, confined</h2>\n\n<p>Most bots and digital assistants work from specially-coded data sets, APIs, and models, but there are more than 4.5 billion pages of content on the web, trapped, in many cases, within our websites. Articles, stories, blog posts, educational materials, books, and marketing messages—all on the web, but in many cases unusable in a non-visual context. A few projects—search spiders most notably—are working to turn our messy, unstructured web pages into something usable. But we can do more—a lot more—to facilitate that and enable our web pages to be more usable by both real people and the computers that power voice-based user experiences.</p>\n\n<p>Let’s release our content from the screen and empower it to go anywhere and everywhere. We can help it find its way into virtual assistants and other voice-response technologies—and even voiceless chat bots—without having to code and re-code that content over and over into multiple, redundant formats. We can even enable our users to actively engage with our content by filling in forms and manipulating widgets on the web purely via voice. It’s all possible, but we need to start by taking a long, hard look at our markup.</p>\n\n<p>Consider this <code>em</code> element:</p>\n\n<pre><code class=\"language-markup\">I’m &lt;em&gt;really&lt;/em&gt; happy to see you.</code></pre>\n\n<p>Sure, it is visually <em>rendered</em> as italics, but it also adds emphasis to the content within. HTML is chock full of elements that are useful for conveying meaning, nuance, and relationships. Being aware of them enables us to author more expressive documents. Ignoring them can undermine the usability of the content we’re marking up. When we create a web page, we need to be mindful of the conversation we are creating with our customers in the process, and choose elements with intent and care.</p>\n\n<p>One of the best indicators for how HTML will make it into our virtual assistants is another assistive technology: <a href=\"https://webaccess.berkeley.edu/ask-pecan/what-is-a-screen-reader\">screen readers</a>. Not only do screen readers do as their name implies, they also enable users to rapidly navigate a page in various ways, and provide mechanisms that translate visual design constructs—proximity, proportion, etc.—into useful information. At least they do when documents are authored thoughtfully.</p>\n\n<p>So, let’s jump in and look at some solid examples of how we can both create more meaningful documents and empower them to be more usable in “headless” UIs.</p>\n\n<h2>Powerful phrases</h2>\n\n<p>We’ll start by looking at what are called “phrasing” elements. The emphasis you saw earlier is an example of this element type. We used to call them “inline” elements because, by default, they are visibly displayed as inline text. But “phrasing” is a much more accurate description of the role they play in our web pages, because, well, they mark up phrases.</p>\n\n<p>We saw this example earlier:</p>\n\n<pre><code class=\"language-markup\">I’m &lt;em&gt;really&lt;/em&gt; happy to see you.</code></pre>\n\n<p>Here, the word “really” is marked for emphasis. I’m unaware of any current speech synthesizer that audibly emphasizes text like we do, but it’s still early days in the grand scheme of things. I’m sure it’ll happen—there’s been a lot of focus on building more human-sounding voices—and it could sound something like this:</p>\n\n<figure><audio controls preload=\"none\">\n    <source src=\"//alistapart.com/d/conversational-semantics/emphasis.mp3\" type=\"audio/mp3\">\n    <source src=\"//alistapart.com/d/conversational-semantics/emphasis.ogg\" type=\"audio/ogg\">\n    <!-- fall back to a simple image -->\n  <p>Your browser doesn’t support HTML5 audio, but you can <a href=\"https://alistapart.com/d/conversational-semantics/emphasis.mp3\">download the MP3</a> instead.</p>\n</source></source></audio><p>  <figcaption>Mimicking Emphasis using speechSynthesis</figcaption></p>\n</figure><p>Sometimes emphasis is not enough. When we want to indicate that content is vital for our customers to pay attention to, the <code>strong</code> element is the right way to go. “Strong” means “of strong importance.”</p>\n\n<pre><code class=\"language-markup\">Please fill out the form below to contact us. &lt;strong&gt;All fields are required.&lt;/strong&gt;</code></pre>\n\n<p>Visually, <code>em</code> and <code>strong</code> are displayed as italics (as mentioned previously) and bold, respectively.</p>\n\n<figure class=\"quote\">\nI’m <em>really</em> happy to see you.<br>\nPlease fill out the form below to contact us. <strong>All fields are required.</strong>\n</figure><p>Now we also have the <code>i</code> and <code>b</code> elements, which are rendered exactly the same as <code>em</code> and <code>strong</code>, respectively. In the early days of the web, that led many of us—myself included—to believe they were interchangeable. And with <code>b</code> and <code>i</code> being shorter to write, they proliferated on the web. Semantically, however, the <code>i</code> and <code>b</code> elements are quite different from their doppelgängers.</p>\n\n<p>The <code>i</code> element is similar to the emphasis element, but more generic. It is used to indicate an alternate voice or mood. It could be used to indicate sarcasm, idiomatic remarks, and shifts in language.</p>\n\n<pre><code class=\"language-markup\">It's a terrible movie and it made $200 million. &lt;i&gt;Go figure!&lt;/i&gt;\n\nShe is admired for her energy and &lt;i lang=\"fr\"&gt;joie de vivre&lt;/i&gt;.</code></pre>\n\n<p>In the latter example, you might also notice that I’ve indicated that the phrase “joie de vivre” is in another language—French—using the <code>lang</code> attribute. This attribute lets the digital assistant know it may want to shift its pronunciation.</p>\n\n<figure><audio controls preload=\"none\">\n    <source src=\"//alistapart.com/d/conversational-semantics/language.mp3\" type=\"audio/mp3\">\n    <source src=\"//alistapart.com/d/conversational-semantics/language.ogg\" type=\"audio/ogg\">\n    <!-- fall back to a simple image -->\n  <p>Your browser doesn’t support HTML5 audio, but you can <a href=\"https://alistapart.com/d/conversational-semantics/language.mp3\">download the MP3</a> instead.</p>\n</source></source></audio><p>  <figcaption>Supporting Language Shifts in speechSynthesis</figcaption></p>\n</figure><p>Admittedly, replicating this <a href=\"https://www.smashingmagazine.com/2017/02/experimenting-with-speechsynthesis/\">using the <code>speechSynthesis</code> API</a> is still a little rough, but with time, this too will no doubt improve.</p>\n\n<p>The <code>b</code> element is used for content that should be set apart—or “stylistically offset”—from the surrounding text. It does not indicate that the phrase is of any greater importance though. I like to use it for names of people and products. Keywords would be another option. Books, films, and other media have their own element, which I’ll get to in a moment.</p>\n\n<pre><code class=\"language-markup\">For 12 years and running, over 100,000 companies have adopted the &lt;b&gt;Basecamp&lt;/b&gt; way of working. Not just tried, but signed up, said “ah-ha!”, and never looked back. There’s nothing else like &lt;b&gt;Basecamp&lt;/b&gt;.</code></pre>\n\n<p>Functionally, the <code>b</code> element is a lot like a <code>span</code>—generic phrasing content albeit with a shorter tag.</p>\n\n<p>Since I mentioned movies and books, I’ll quickly bring up the <code>cite</code> element, which is for the title of cited or referenced works.</p>\n\n<pre><code class=\"language-markup\">I wrote the book &lt;cite&gt;Adaptive Web Design&lt;/cite&gt;. If you like this article, you’ll find in-depth information about semantics (and a whole lot more) in there.</code></pre>\n\n<h3>Specialized syntax</h3>\n\n<p>HTML has other specialized phrasing constructs, such as <code>abbr</code> for abbreviations and acronyms. Traditionally, we’d recommended using title to provide an expansion:</p>\n\n<pre><code class=\"language-markup\">&lt;abbr title=\"Hypertext Markup Language\"&gt;HTML&lt;/abbr&gt; is the standard markup language for creating web pages and web applications.</code></pre>\n\n<p>Sadly—as with many things on the web—<a href=\"https://www.google.com/search?q=title+attribute+seo\">black hat SEO practices involving <code>title</code></a> spurred screen readers to ignore the attribute altogether. Visual browsers do still provide tooltips, so they’re not completely useless, but given that screen readers don’t pay attention to the <code>title</code> attribute currently, it’s pretty unlikely they will be surfaced by a virtual assistant.</p>\n\n<p>To be honest, <a href=\"https://www.24a11y.com/2017/the-trials-and-tribulations-of-the-title-attribute/\">it’s best to avoid <code>title</code> altogether</a>. For the purposes of absolute clarity, you should introduce and explain important abbreviations and acronyms the first time they are used. There’s even <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/dfn\">an element that signals a defining context: <code>dfn</code></a>.</p>\n\n<pre><code class=\"language-markup\">&lt;dfn id=\"dfn-html\"&gt;Hypertext Markup Language (HTML)&lt;/dfn&gt; is the standard markup language for creating web pages and web applications.</code></pre>\n\n<p>For more technical writing, the <code>kbd</code> and <code>code</code> elements can be quite useful. They indicate keys a user might need to press and words and phrases that are used in writing software or coding documents:</p>\n\n<pre><code class=\"language-markup\">Press &lt;kbd&gt;Tab&lt;/kbd&gt; to move from link to link within a document.\n\nThe &lt;code&gt;kbd&lt;/code&gt; element is used to indicate keyboard key names.</code></pre>\n\n<p>Then there’s the <code>span</code> element, which is used for generic phrases, as I noted earlier. It’s a meaningless element, so will not be spoken in any way differently by default.</p>\n\n<pre><code class=\"language-markup\">There is &lt;span&gt;nothing particularly interesting&lt;/span&gt; in this sentence.</code></pre>\n\n<p>There are <a href=\"https://www.w3.org/TR/2012/WD-html-markup-20121011/common-models.html#common.elem.phrasing\">more phrasing elements</a>, but these are the ones you’re most likely to want in most projects.</p>\n\n<h3>Clear connections</h3>\n\n<p>Links are also phrasing elements, but I want to call them out specifically because they provide a much richer set of options for fine-tuning how our users interact with our pages.</p>\n\n<p>The primary way we use links is to connect related content. It’s incredibly important to choose meaningful words and phrases as link text. Links that read generically like “click here” and “read more” are not terribly useful, especially when the text of every link is being read out to you—which is a key way headless UI users skim web pages. Make it clear where you are linking. Restructure sentences if you need to in order to provide good link text.</p>\n\n<p>If you are drawn to “read more” style links for their brevity, you can <a href=\"https://dictionary.cambridge.org/us/dictionary/english/have-your-cake-and-eat-it-too\">have your cake and eat it too</a> by including non-visible text within a link. This gives you brief, uniform links from a visual standpoint, but also lets you provide context in headless scenarios. Here’s an example from <a href=\"https://www.aaron-gustafson.com/\">my site’s</a> navigation. I’ve broken it up across a few lines to make it a little easier to follow:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"/speaking-engagements/\"&gt;\n\t&lt;b class=\"hidden\"&gt;A List of My&lt;/b&gt;\n\tSpeaking\n\t&lt;b class=\"hidden\"&gt;Engagements&lt;/b&gt;\n&lt;/a&gt;</code></pre>\n\n<p>Within the link, I have two <code>b</code> elements classified as “hidden.” In my CSS, I hide the content within them from sighted users, but I <a href=\"https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\">hide them in a way that they remain available to assistive technology</a>. So a sighted user will only see “speaking,” but a screen reader or digital assistant will read “a list of my speaking engagements.”</p>\n\n<p>You could also <a href=\"https://developer.mozilla.org/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute\">offer an expansion with <code>aria-label</code></a> on the anchor element. If that “aria-” bit in <code>aria-label</code> looks weird to you, it comes from the Accessible Rich Internet Applications (ARIA) spec, <a href=\"https://developer.mozilla.org/docs/Web/Accessibility/ARIA\">an ongoing effort to map complex operating-system-like UI constructs into accessible ones</a>. I chose the hidden text route to give myself the flexibility to display the hidden content in certain scenarios.</p>\n\n<p>Some of you may be wondering why I didn’t bring up <code>aria-label</code> when I mentioned the <code>abbr</code> element. It seems like a good fit, and <a href=\"https://www.w3.org/TR/wai-aria/#aria-label\">the <code>aria-label</code> spec</a> currently allows the attribute on <code>abbr</code> elements. The issue isn’t the spec, but rather the reality that the info in <code>aria-label</code> isn’t always exposed by browsers or sought out by assistive technology on elements like <code>abbr</code>. With good reason, they’ve been much more <a href=\"https://developer.paciellogroup.com/blog/2017/07/short-note-on-aria-label-aria-labelledby-and-aria-describedby/\">focused on exposing <code>aria-label</code> (and it’s kin) on interactive elements, landmarks, and widgets</a>.</p>\n\n<p>It’s worth noting that hidden text in links can cause issues for folks who rely on a combination of screens and dictation software to interact with their computers. If the link text that’s displayed does not match the actual link text in the markup, a user saying the visible link text—like the word “Speaking” in the case of my site’s navigation—won’t actually activate the link. It’s also worth reiterating the importance of quality link text; don’t use <code>aria-label</code> to paper over poorly-worded links or unnecessary redundancy like “read more.”</p>\n\n<p>We can also use links to reference content within the current document or even at a specifically-identified position in another document:</p>\n\n<pre><code class=\"language-markup\">To illustrate the concept of layering styles, perhaps it’s best to start at the beginning: with no style applied. &lt;a href=\"#figure-3-3\"&gt;Figure 3.3&lt;/a&gt; shows the lodging article in Safari with only the default browser styles applied.\n…\n&lt;figure id=\"figure-3-3\"&gt;\n  …\n&lt;/figure&gt;</code></pre>\n\n<p>At the tail end of this code sample, we have a <code>figure</code> element that is referenced elsewhere in the document. Rather than leaving it up to the reader to find “Figure 3.3,” we can use a fragment identifier to jump the reader directly to the reference. Adding a unique id attribute to each important element in your design makes it easy for you—or others—to link directly to them.</p>\n\n<p>As with the <code>i</code> element example I shared earlier, you can inform your readers about the language of a linked page using <code>hreflang</code>:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"…\" hreflang=\"es\"&gt;&lt;i lang=\"es\"&gt;\n\t&lt;b class=\"hidden\"&gt;Lea esta página en&lt;/b&gt; español\n&lt;/i&gt;&lt;/a&gt;</code></pre>\n\n<p>That’s Spanish for “read this page in Spanish,” and the link points to a Spanish-language translation of the page. The hidden content approach is in use here, too, with sighted users only seeing “español.”</p>\n\n<p>You can indicate the kind of content being linked to, using the <code>type</code> attribute:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"giant.mp4\" type=\"video/mp4\"&gt;Download this movie&lt;/a&gt;</code></pre>\n\n<p>And we also have the <code>download</code> keyword, which informs the browser that the file in question should be downloaded rather than presented. Again, a simple attribute that makes a simple HTML document capable of doing so much more:</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"giant.mp4\" type=\"video/mp4\" download&gt;Download this movie&lt;/a&gt;</code></pre>\n\n<p>When encountering this type of link in a voice context, your digital assistant could prompt you to save the file to a connected storage account, like Dropbox. That’s pretty cool, but it’s worth noting that browsers will ignore the <code>download</code> attribute on cross-origin links for security purposes. Unfortunately that means you can’t use this approach to download files from your Content Delivery Network (CDN).</p>\n\n<p>Anchor elements also support non-web “pseudo” protocols. Two of the most common examples are “mailto:” for email links and “tel:” for phone numbers, but “sms:” and “webcal:” are also common.</p>\n\n<pre><code class=\"language-markup\">&lt;a href=\"mailto:mail@domain.com\"&gt;Send me an email&lt;/a&gt;\n\n&lt;a href=\"tel:18009346489\"&gt;Call Comcast Customer Service&lt;/a&gt;</code></pre>\n\n<p>Some operating systems (and browsers) allow installed apps to register custom protocols that can provide access to in-app functionality. A word of caution though: unrecognized protocols may prompt the user to search for an application that can use it.</p>\n\n<p>All of this phrasing content is great, but I’ve spent a good deal of time in the weeds. Let’s pull back a bit and look at documents themselves.</p>\n\n<h2>Sound structure</h2>\n\n<p>As you’re no doubt aware, <a href=\"https://careerfoundry.com/en/blog/ux-design/voice-ui-design-and-cognitive-load\">headless UIs place a greater cognitive load on our users</a>. It’s hard to keep track of where you are in an interface when you can’t see it. It can also be challenging to move around when you can’t gather information about the interface based on visual cues. The more complex an interface is, the more challenging this becomes.</p>\n\n<p>The same is true in visual interfaces, which is why <a href=\"https://abookapart.com/products/mobile-first\">“mobile first” thinking</a> encourages us to focus each page on a single task. This reduces the noise and raises the signal. But most web pages are the antithesis of clear and straightforward. As our screen sizes enlarged, we found more stuff to fill that space. Sharing links, related content, cross-promotions, and so on. Sometimes it’s easy to lose sight of the actual content.</p>\n\n<p>To combat this, screen readers provide <a href=\"https://tink.uk/understanding-screen-reader-interaction-modes/\">numerous mechanisms that enable users to gather information about the UI and move through it efficiently</a>. One of the most common involves moving the focus carat from one interactive element to another. Traditionally that movement is done via the keyboard Tab key, but it’s also possible via voice using keywords like “next” and “previous.” In most documents, users are moving from link to link. This is why it’s so important to offer informative link text.</p>\n\n<pre><code class=\"language-markup\">&lt;p&gt;This twist is what &lt;a href=\"https://en.wikipedia.org/wiki/John_Harsanyi\"&gt;John Harsanyi&lt;/a&gt;—an early game theorist—refers to as the “&lt;a href=\"https://en.wikipedia.org/wiki/Veil_of_ignorance\"&gt;Veil of Ignorance&lt;/a&gt;,” and what Rawls found, time and time again, was that individuals participating in the experiment would gravitate toward creating the most egalitarian societies.&lt;/p&gt;</code></pre>\n\n<p>It’s worth noting that form elements—buttons, inputs, etc.—are also part of the default tab order of a web page.</p>\n\n<p>Elements that would not traditionally be focusable can be included in the tab order by adding a <code>tabindex</code> attribute with a value of “0” (zero) to them. This ensures critical interface components are not accidentally bypassed by users who are skimming an interface by tabbing. Incidentally, it can also <a href=\"https://developer.paciellogroup.com/blog/2016/02/short-note-on-improving-usability-of-scrollable-regions/\">give sighted users keyboard control over scrollable elements</a>.</p>\n\n<p>Another mode of document traversal is browsing by heading. The various <a href=\"https://www.w3.org/TR/html401/struct/global.html#h-7.5.5\">heading levels in HTML</a> create a natural document outline, and assistive technologies can enable users to skim content using these headings:</p>\n\n<pre><code class=\"language-markup\">&lt;h1&gt;This is the title of the page&lt;/h1&gt;\n…\n&lt;h2&gt;This titles a section&lt;/h2&gt;\n…\n&lt;h3&gt;This titles a subsection&lt;/h3&gt;\n…\netc.</code></pre>\n\n<p>Since only the contents of the heading elements are read out in this mode, it’s best to avoid cutesy marketing phrases, and stick to summarizing the contents of a section.</p>\n\n<p>More recently, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/ARIA11.html\">document “landmarks”</a> have come along, providing quick access to key parts of the page. Landmark elements were first introduced as part of ARIA. Using the <code>role</code> attribute, you can define the function of specific regions of a page. Consider the following:</p>\n\n<pre><code class=\"language-markup\">&lt;div id=\"nav\"&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;\n\t\t\t&lt;a href=\"/about/\"&gt;&lt;b class=\"hidden\"&gt;A Bit &lt;/b&gt;About&lt;b class=\"hidden\"&gt; Me&lt;/b&gt;&lt;/a&gt;\n\t\t&lt;/li&gt;\n\t\t…\n\t&lt;/ul&gt;\n&lt;/div&gt;</code></pre>\n\n<p>In this example, the navigation list is sitting in a <code>div</code> with an <code>id</code> of “nav.” While that’s a meaningful identifier for the purposes of styling, scripting, and anchoring, the <code>div</code> is not actually exposed to assistive technology as navigation. Adding a <code>role</code> of “navigation”, however, makes that function explicit:</p>\n\n<pre><code class=\"language-markup\">&lt;div id=\"nav\" role=\"navigation\"&gt;\n\t&lt;ul&gt;\n\t\t&lt;li&gt;\n\t\t\t&lt;a href=\"/about/\"&gt;&lt;b class=\"hidden\"&gt;A Bit &lt;/b&gt;About&lt;b class=\"hidden\"&gt; Me&lt;/b&gt;&lt;/a&gt;\n\t\t&lt;/li&gt;\n\t\t…\n\t&lt;/ul&gt;\n&lt;/div&gt;</code></pre>\n\n<p>There are numerous role values that qualify as landmarks:</p>\n\n<ul>\n<li>banner</li>\n<li>navigation</li>\n<li>search</li>\n<li>main</li>\n<li>complementary</li>\n<li>contentinfo</li>\n</ul>\n<p>Landmarks also give users the opportunity to jump directly to a location within an interface, which is incredibly helpful. In a voice context, a user might be able to ask their digital assistant to “read me the navigation for this page” or “search for wooden baby toys,” and the assistant could use these landmarks to quickly respond to those commands.</p>\n\n<p>It’s worth noting that most of these landmarks have equivalent HTML elements. This is because HTML5 and ARIA were being developed at the same time, and both were looking to address the same limitations of the web. Here’s a rundown of ARIA landmark roles with HTML equivalents:</p>\n\n<ul>\n<li>banner - first <code>header</code> element not inside <a href=\"https://www.w3.org/TR/html/dom.html#sectioning-content\">sectioning content</a>\n</li>\n<li>navigation - <code>nav</code>\n</li>\n<li>main - <code>main</code>\n</li>\n<li>complementary - <code>aside</code>\n</li>\n<li>contentinfo - first <code>footer</code> element not inside <a href=\"https://www.w3.org/TR/html/dom.html#sectioning-content\">sectioning content</a>\n</li>\n</ul>\n<p>Each HTML5 element shown here is automatically assigned its corresponding ARIA <code>role</code> by modern browsers and is recognized by modern assistive technologies. However, in older browser and assistive technology combinations, the automatic role assignment may not happen. That’s why it’s not uncommon to see <code>nav</code> elements with a “navigation” <code>role</code> or similar even though validators will flag it as unnecessary.</p>\n\n<p>One last bit I want to touch on before I wrap up is the <code>div</code> element.</p>\n\n<pre><code class=\"language-markup\">&lt;div&gt;\n\tThis is simply a generic division of content.\n&lt;/div&gt;</code></pre>\n\n<p>We often employ a <code>div</code> when we want to group some elements together. That’s fine, but <code>div</code> is a meaningless element that adds nothing to the interface in terms of context. By contrast, other organizational elements do add value to a page:</p>\n\n<ul>\n<li>\n<code>p</code> - a paragraph; a voice synthesizer will naturally pause between them</li>\n<li>\n<code>ol</code> - a list of items whose order matters</li>\n<li>\n<code>ul</code> - a list of items whose order doesn’t matter</li>\n<li>\n<code>li</code> - an item in a list</li>\n<li>\n<code>dl</code> - a list of terms and their associated descriptions</li>\n<li>\n<code>dt</code> - a term described within a description list</li>\n<li>\n<code>dd</code> - a description of a term (or terms) in a description list</li>\n<li>\n<code>blockquote</code> - a long piece of quoted content</li>\n<li>\n<code>figure</code> - referenced content (images, tables, etc.)</li>\n<li>\n<code>figcaption</code> - the caption for a figure</li>\n</ul>\n<p>Some of these are among the elements categorized as <a href=\"https://www.w3.org/TR/2012/WD-html-markup-20121011/common-models.html#common.elem.flow\">“flow” content</a>. At a higher level, there are numerous organizational elements to choose from:</p>\n\n<ul>\n<li>\n<code>article</code> - a piece of content that can stand on its own</li>\n<li>\n<code>section</code> - a section of a document or article</li>\n<li>\n<code>header</code> - preamble content for a document, article, or section</li>\n<li>\n<code>footer</code> - supplementary information for a document, article, or section</li>\n<li>\n<code>main</code> - the primary content of a document</li>\n<li>\n<code>nav</code> - navigational content</li>\n<li>\n<code>aside</code> - complementary content</li>\n</ul>\n<p>There are a ton of meaningful elements out there that can enable our digital assistants to do more for our customers. And the more we use them, the more useful our assistants become, and the more powerful our users feel. For instance, using <code>article</code> and heading elements can enable voice commands like “Read me the top three headlines in the <cite>New York Times</cite> today” without involving any sort of specialized data feed.</p>\n\n<p>A generic <code>div</code> gets you none of these benefits.</p>\n\n<h2>Create conversations</h2>\n\n<p>HTML is a truly robust and expressive language that is often overlooked and undervalued, but it has the incredible potential to nurture conversations with our users without requiring a lot of effort on our part. Simply taking the time to code web pages well will enable our sites to speak to our customers like they speak to each other. Thinking about how our sites are experienced as headless interfaces now will set the stage for more natural interactions between the real world and the digital one.</p>\n<img src=\"http://feeds.feedburner.com/~r/alistapart/main/~4/t-qA2LWHJ5w\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["HTML, Accessibility"],"color":"tan","category":"A List Apart:","date":"2018-08-30 14:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Charting Browser Interoperability","pubDate":"2018-08-30 17:39:00","link":"http://blog.chromium.org/2018/08/charting-browser-interoperability.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-6241520327253641594","author":"Chrome Blog","thumbnail":"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FCross-browser%20Web%20APIs.png?1535655135314","description":"\n<div dir=\"ltr\"><span><span>At this year's Google I/O, Ben Galbraith and Malte Ubl </span><a href=\"https://youtu.be/Ay-mdLMDtbs?t=739\"><span>presented a chart</span></a><span> during the Web keynote showing how the web is getting more interoperable:</span></span></div>\n<div dir=\"ltr\">\n<div class=\"separator\"><a href=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FCross-browser%20Web%20APIs.png?1535655135314\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"454\" data-original-width=\"800\" height=\"362\" src=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FCross-browser%20Web%20APIs.png?1535655135314\" width=\"640\"></a></div>\n<div class=\"separator\"><br></div>\n<span>This trend is really important to the Chrome team: web developers should be able to target </span><span>the web platform</span><span>, not four different (though overlapping) platforms. The chart was gleaned from the data in our </span><a href=\"https://web-confluence.appspot.com/\"><span>Web API Confluence Dashboard</span></a><span>. This project, originally designed for browser engineers, provides insights into web interoperability by tracking page-visible JavaScript APIs across many releases of the four major browser engines. Here’s an example:</span>\n</div>\n<div dir=\"ltr\"><span><img height=\"281\" src=\"https://lh6.googleusercontent.com/ILEBfFpmy1BdzGuJiubbo--gJsOS3r7u7dtpGOVPS4gJ7e4oG25yekkue0vrHtNZS2H_dF8cwTkjHBNhTgPPix9PVWbznRwzVq1IpjNBlQ1Ar9ZvNSVSaEieK9_cckMYxAWqMpW6\" width=\"624\"></span></div>\n<div dir=\"ltr\"><span><span>Caption: Count of browser-specific APIs goes up when browsers are first to ship a new API, and down when either (i) a second browser implements a new API, or (ii) an API that failed to build consensus is removed by the one browser that implemented it.</span></span></div>\n<div dir=\"ltr\"><span><span>This chart plots a count of APIs shipped by only one of the four browser vendors over time. Interacting with the chart on the dashboard lets you open the list of APIs that corresponds to each count:</span></span></div>\n<div dir=\"ltr\"><span><img height=\"216\" src=\"https://lh3.googleusercontent.com/Un_FwbtA6NYKR12mpAtExAEhEHXZCYzUneFbfbIs5LbRqZ5WOJVS6WOlyoM9qc8FsjpgakFUUq8Y5uZO_9nRRN4CUIGdk5MJDU6GE2FHJUlSvQNoBv1048QD0_c72GtGOWLCdcl5\" width=\"624\"></span></div>\n<div dir=\"ltr\"><span><span>This information helps browser vendors prioritize work that will make the web more interoperable by either removing old browser-specific APIs or working with other vendors to implement APIs that are not yet widely supported.</span></span></div>\n<h2><span><span>How APIs are collected</span></span></h2>\n<div dir=\"ltr\"><span><span>In order to count APIs on the web, we first had to define what counts as a “web API”. The web is full of useful features, some of which are hard to define let alone detect. For this analysis we focused on JavaScript APIs that are visible to the developer when the page first loads. This leaves out several classes of feature, like CSS properties, HTML attributes, and APIs that are not available on page load (e.g., APIs are surfaced through interaction user/API interactions, or only available in certain types of workers). Nevertheless, it gives us a general view of programmable browser capabilities.</span></span></div>\n<div dir=\"ltr\"><span><span>Our </span><a href=\"https://github.com/GoogleChromeLabs/confluence/blob/master/CatalogDataCollection.md#detailed-algorithm\"><span>JavaScript API-finding algorithm</span></a><span> inspects the JavaScript object graph exposed on the global </span><span>window</span><span> object. Check out the link for details on how we managed to extract APIs from JavaScript prototypes. With the help of </span><a href=\"https://www.browserstack.com/\"><span>BrowserStack</span></a><span>’s 1000+ browser/operating system configurations, we were able to gather API data for browser releases going back as far as 2012</span><span>.</span></span></div>\n<div dir=\"ltr\">\n<div class=\"separator\"><a href=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FConfluence%20Blog%20Post_%20Process%20Drawing.png?1535655090903\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"585\" data-original-width=\"800\" height=\"465\" src=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FConfluence%20Blog%20Post_%20Process%20Drawing.png?1535655090903\" width=\"640\"></a></div>\n<div class=\"separator\"><span>Determining if the web is healthy</span></div>\n</div>\n<div dir=\"ltr\"><span><span>Take a look at the </span><a href=\"https://web-confluence.appspot.com/#!/confluence\"><span>metrics page</span></a><span> on the dashboard and you’ll see a few different charts we’ve generated about the shape of the web. These metrics, and the APIs they represent, give web platform implementers insights into which APIs are fragmenting the web. APIs that fragment the web are:</span></span></div>\n<ol>\n<li>Shipped by <span>almost</span><span> every browser, but not quite;</span>\n</li>\n<li>Removed by one browser, but not others; or</li>\n<li>Shipped by one browser, but not others.</li>\n</ol>\n<div dir=\"ltr\"><span><img height=\"349\" src=\"https://lh6.googleusercontent.com/UDwZCk8ZpteonMO7R9j-l8Y150S3maNwesNr1TaaA7CmJwyuKwD3Vp_G9E9xPq2h7e7XzWz41CZoVJcwLlWuCq7T3t66dQlaGzJHx2UFS_rk5UK6Uo7XQQNCWpSXAsHKQvZNBV-0\" width=\"624\"></span></div>\n<div dir=\"ltr\"><span><span>For example, our data shows that Safari is the only major browser that does not ship </span><span>CSSStyleDeclaration#backfaceVisibility</span><span>, Chrome has removed a number of </span><span>SVGSVGElement</span><span> APIs that are still shipped by all major browsers, and Edge is the only major browser shipping a number of </span><span>BhxBrowser</span><span> APIs.</span></span></div>\n<h2><span><span>Querying the raw data yourself</span></span></h2>\n<div dir=\"ltr\"><span><span>The dashboard isn’t intended to replace tools like </span><a href=\"https://developer.mozilla.org/\"><span>MDN Docs</span></a><span> or </span><a href=\"https://caniuse.com/\"><span>caniuse.com</span></a><span>, but rather to illustrate trends that help browser vendors keep evolving the web towards interoperability. That said, the </span><a href=\"https://web-confluence.appspot.com/#!/catalog\"><span>catalog page</span></a><span> on the dashboard can give developers another source to corroborate interop info from manually curated sources. Try playing around with the search box above the API catalog. It supports some </span><a href=\"https://github.com/GoogleChromeLabs/confluence/blob/master/README.md#querying-the-catalog\"><span>basic structured queries</span></a><span> like </span><a href=\"https://web-confluence.appspot.com/#!/catalog?releases=%5B%22Chrome_65.0.3325.146_Windows_10.0%22,%22Firefox_59.0_Windows_10.0%22,%22Chrome_66.0.3359.117_Windows_10.0%22,%22Firefox_60.0_Windows_10.0%22,%22Chrome_67.0.3396.62_Windows_10.0%22,%22Firefox_61.0_Windows_10.0%22,%22Chrome_68.0.3440.75_Windows_10.0%22%5D&amp;q=%22in:firefox60%20or%20notin:chrome66%22\"><span>in:firefox60 or notin:chrome66</span></a><span> for APIs in Firefox 60 or missing from Chrome 66, or </span><a href=\"https://web-confluence.appspot.com/#!/catalog?q=%22RTCPeerConnection%20count:2%22\"><span>RTCPeerConnection count:2</span></a><span> for RTCPeerConnection-related APIs shipped by exactly two of the browsers currently in view. Clicking the vertical ellipsis icon lets you add or remove dozens of browser releases from the grid, and the URL bar always contains a link that will get you back to the current query.</span></span></div>\n<h2 dir=\"ltr\"><span><span>Validating MDN browser compat tables</span></span></h2>\n<div dir=\"ltr\"><span><span>We’ve also started using the data to help tech writers </span><a href=\"https://github.com/mdn/browser-compat-data/blob/master/CONTRIBUTING.md#optional-validatecross-reference-against-web-api-confluence-dashboard\"><span>programmatically check their contributions</span></a><span> to MDN’s excellent browser compatibility database. Try this out:</span></span></div>\n<div dir=\"ltr\"><span><span># Clone MDN’s browser compatibility database</span></span></div>\n<div dir=\"ltr\"><span><span>git clone https://github.com/mdn/browser-compat-data.git</span></span></div>\n<div dir=\"ltr\"><span><span>cd browser-compat-data</span></span></div>\n<div dir=\"ltr\"><span><span># Install dependencies</span></span></div>\n<div dir=\"ltr\"><span><span>npm install</span></span></div>\n<div dir=\"ltr\"><span><span># Load confluence data for ServiceWorker</span></span></div>\n<div dir=\"ltr\"><span><span>npm run confluence -- --interfaces=ServiceWorker</span></span></div>\n<div dir=\"ltr\"><span><span># Take a look at the differences that have been applied to your working tree</span></span></div>\n<div dir=\"ltr\"><span><span>git diff</span></span></div>\n<div dir=\"ltr\"><span><span># Read the full list of parameters you can try on `npm run confluence`</span></span></div>\n<div dir=\"ltr\"><span><span>npm run confluence -- --help</span></span></div>\n<h2><span><span>Conclusion</span></span></h2>\n<span><span><span>We hope both browser engineers and web developers can benefit from the dashboard. Check it out and let us know what you think over at </span><a href=\"https://github.com/GoogleChromeLabs/confluence/\"><span>the GitHub project</span></a><span> that hosts the code.</span></span></span><br><span><span><br></span></span><span><span>Posted by Mark Dittmer, Software Engineer working on Web Ecosystem Infrastructure</span></span><br><br>\n","content":"\n<div dir=\"ltr\"><span><span>At this year's Google I/O, Ben Galbraith and Malte Ubl </span><a href=\"https://youtu.be/Ay-mdLMDtbs?t=739\"><span>presented a chart</span></a><span> during the Web keynote showing how the web is getting more interoperable:</span></span></div>\n<div dir=\"ltr\">\n<div class=\"separator\"><a href=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FCross-browser%20Web%20APIs.png?1535655135314\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"454\" data-original-width=\"800\" height=\"362\" src=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FCross-browser%20Web%20APIs.png?1535655135314\" width=\"640\"></a></div>\n<div class=\"separator\"><br></div>\n<span>This trend is really important to the Chrome team: web developers should be able to target </span><span>the web platform</span><span>, not four different (though overlapping) platforms. The chart was gleaned from the data in our </span><a href=\"https://web-confluence.appspot.com/\"><span>Web API Confluence Dashboard</span></a><span>. This project, originally designed for browser engineers, provides insights into web interoperability by tracking page-visible JavaScript APIs across many releases of the four major browser engines. Here’s an example:</span>\n</div>\n<div dir=\"ltr\"><span><img height=\"281\" src=\"https://lh6.googleusercontent.com/ILEBfFpmy1BdzGuJiubbo--gJsOS3r7u7dtpGOVPS4gJ7e4oG25yekkue0vrHtNZS2H_dF8cwTkjHBNhTgPPix9PVWbznRwzVq1IpjNBlQ1Ar9ZvNSVSaEieK9_cckMYxAWqMpW6\" width=\"624\"></span></div>\n<div dir=\"ltr\"><span><span>Caption: Count of browser-specific APIs goes up when browsers are first to ship a new API, and down when either (i) a second browser implements a new API, or (ii) an API that failed to build consensus is removed by the one browser that implemented it.</span></span></div>\n<div dir=\"ltr\"><span><span>This chart plots a count of APIs shipped by only one of the four browser vendors over time. Interacting with the chart on the dashboard lets you open the list of APIs that corresponds to each count:</span></span></div>\n<div dir=\"ltr\"><span><img height=\"216\" src=\"https://lh3.googleusercontent.com/Un_FwbtA6NYKR12mpAtExAEhEHXZCYzUneFbfbIs5LbRqZ5WOJVS6WOlyoM9qc8FsjpgakFUUq8Y5uZO_9nRRN4CUIGdk5MJDU6GE2FHJUlSvQNoBv1048QD0_c72GtGOWLCdcl5\" width=\"624\"></span></div>\n<div dir=\"ltr\"><span><span>This information helps browser vendors prioritize work that will make the web more interoperable by either removing old browser-specific APIs or working with other vendors to implement APIs that are not yet widely supported.</span></span></div>\n<h2><span><span>How APIs are collected</span></span></h2>\n<div dir=\"ltr\"><span><span>In order to count APIs on the web, we first had to define what counts as a “web API”. The web is full of useful features, some of which are hard to define let alone detect. For this analysis we focused on JavaScript APIs that are visible to the developer when the page first loads. This leaves out several classes of feature, like CSS properties, HTML attributes, and APIs that are not available on page load (e.g., APIs are surfaced through interaction user/API interactions, or only available in certain types of workers). Nevertheless, it gives us a general view of programmable browser capabilities.</span></span></div>\n<div dir=\"ltr\"><span><span>Our </span><a href=\"https://github.com/GoogleChromeLabs/confluence/blob/master/CatalogDataCollection.md#detailed-algorithm\"><span>JavaScript API-finding algorithm</span></a><span> inspects the JavaScript object graph exposed on the global </span><span>window</span><span> object. Check out the link for details on how we managed to extract APIs from JavaScript prototypes. With the help of </span><a href=\"https://www.browserstack.com/\"><span>BrowserStack</span></a><span>’s 1000+ browser/operating system configurations, we were able to gather API data for browser releases going back as far as 2012</span><span>.</span></span></div>\n<div dir=\"ltr\">\n<div class=\"separator\"><a href=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FConfluence%20Blog%20Post_%20Process%20Drawing.png?1535655090903\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"585\" data-original-width=\"800\" height=\"465\" src=\"https://cdn.glitch.com/8719b0b1-7e33-45f7-9b97-b1346b2068c4%2FConfluence%20Blog%20Post_%20Process%20Drawing.png?1535655090903\" width=\"640\"></a></div>\n<div class=\"separator\"><span>Determining if the web is healthy</span></div>\n</div>\n<div dir=\"ltr\"><span><span>Take a look at the </span><a href=\"https://web-confluence.appspot.com/#!/confluence\"><span>metrics page</span></a><span> on the dashboard and you’ll see a few different charts we’ve generated about the shape of the web. These metrics, and the APIs they represent, give web platform implementers insights into which APIs are fragmenting the web. APIs that fragment the web are:</span></span></div>\n<ol>\n<li>Shipped by <span>almost</span><span> every browser, but not quite;</span>\n</li>\n<li>Removed by one browser, but not others; or</li>\n<li>Shipped by one browser, but not others.</li>\n</ol>\n<div dir=\"ltr\"><span><img height=\"349\" src=\"https://lh6.googleusercontent.com/UDwZCk8ZpteonMO7R9j-l8Y150S3maNwesNr1TaaA7CmJwyuKwD3Vp_G9E9xPq2h7e7XzWz41CZoVJcwLlWuCq7T3t66dQlaGzJHx2UFS_rk5UK6Uo7XQQNCWpSXAsHKQvZNBV-0\" width=\"624\"></span></div>\n<div dir=\"ltr\"><span><span>For example, our data shows that Safari is the only major browser that does not ship </span><span>CSSStyleDeclaration#backfaceVisibility</span><span>, Chrome has removed a number of </span><span>SVGSVGElement</span><span> APIs that are still shipped by all major browsers, and Edge is the only major browser shipping a number of </span><span>BhxBrowser</span><span> APIs.</span></span></div>\n<h2><span><span>Querying the raw data yourself</span></span></h2>\n<div dir=\"ltr\"><span><span>The dashboard isn’t intended to replace tools like </span><a href=\"https://developer.mozilla.org/\"><span>MDN Docs</span></a><span> or </span><a href=\"https://caniuse.com/\"><span>caniuse.com</span></a><span>, but rather to illustrate trends that help browser vendors keep evolving the web towards interoperability. That said, the </span><a href=\"https://web-confluence.appspot.com/#!/catalog\"><span>catalog page</span></a><span> on the dashboard can give developers another source to corroborate interop info from manually curated sources. Try playing around with the search box above the API catalog. It supports some </span><a href=\"https://github.com/GoogleChromeLabs/confluence/blob/master/README.md#querying-the-catalog\"><span>basic structured queries</span></a><span> like </span><a href=\"https://web-confluence.appspot.com/#!/catalog?releases=%5B%22Chrome_65.0.3325.146_Windows_10.0%22,%22Firefox_59.0_Windows_10.0%22,%22Chrome_66.0.3359.117_Windows_10.0%22,%22Firefox_60.0_Windows_10.0%22,%22Chrome_67.0.3396.62_Windows_10.0%22,%22Firefox_61.0_Windows_10.0%22,%22Chrome_68.0.3440.75_Windows_10.0%22%5D&amp;q=%22in:firefox60%20or%20notin:chrome66%22\"><span>in:firefox60 or notin:chrome66</span></a><span> for APIs in Firefox 60 or missing from Chrome 66, or </span><a href=\"https://web-confluence.appspot.com/#!/catalog?q=%22RTCPeerConnection%20count:2%22\"><span>RTCPeerConnection count:2</span></a><span> for RTCPeerConnection-related APIs shipped by exactly two of the browsers currently in view. Clicking the vertical ellipsis icon lets you add or remove dozens of browser releases from the grid, and the URL bar always contains a link that will get you back to the current query.</span></span></div>\n<h2 dir=\"ltr\"><span><span>Validating MDN browser compat tables</span></span></h2>\n<div dir=\"ltr\"><span><span>We’ve also started using the data to help tech writers </span><a href=\"https://github.com/mdn/browser-compat-data/blob/master/CONTRIBUTING.md#optional-validatecross-reference-against-web-api-confluence-dashboard\"><span>programmatically check their contributions</span></a><span> to MDN’s excellent browser compatibility database. Try this out:</span></span></div>\n<div dir=\"ltr\"><span><span># Clone MDN’s browser compatibility database</span></span></div>\n<div dir=\"ltr\"><span><span>git clone https://github.com/mdn/browser-compat-data.git</span></span></div>\n<div dir=\"ltr\"><span><span>cd browser-compat-data</span></span></div>\n<div dir=\"ltr\"><span><span># Install dependencies</span></span></div>\n<div dir=\"ltr\"><span><span>npm install</span></span></div>\n<div dir=\"ltr\"><span><span># Load confluence data for ServiceWorker</span></span></div>\n<div dir=\"ltr\"><span><span>npm run confluence -- --interfaces=ServiceWorker</span></span></div>\n<div dir=\"ltr\"><span><span># Take a look at the differences that have been applied to your working tree</span></span></div>\n<div dir=\"ltr\"><span><span>git diff</span></span></div>\n<div dir=\"ltr\"><span><span># Read the full list of parameters you can try on `npm run confluence`</span></span></div>\n<div dir=\"ltr\"><span><span>npm run confluence -- --help</span></span></div>\n<h2><span><span>Conclusion</span></span></h2>\n<span><span><span>We hope both browser engineers and web developers can benefit from the dashboard. Check it out and let us know what you think over at </span><a href=\"https://github.com/GoogleChromeLabs/confluence/\"><span>the GitHub project</span></a><span> that hosts the code.</span></span></span><br><span><span><br></span></span><span><span>Posted by Mark Dittmer, Software Engineer working on Web Ecosystem Infrastructure</span></span><br><br>\n","enclosure":{},"categories":["browser interoperability","dashboard","webapi"],"color":"lightgreen","category":"Chromium Blog","date":"2018-08-30 17:39:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Help test / provide feedback on upcoming Chrome browser features","pubDate":"2018-08-24 17:03:00","link":"http://blog.chromium.org/2018/08/help-test-provide-feedback-on-upcoming.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-3090627286624580394","author":"Chrome Blog","thumbnail":"","description":"Feeling adventurous? Preview upcoming Chrome features before they’re released across Desktop, Android and iOS.<br><span><br></span><b>What is the Chrome beta channel?</b><b><span><br></span></b>Chrome beta allows you to preview upcoming features before they’re released. You can expect weekly updates, access to features and designs that may or may not make it to a stable version, and the ability to submit feedback earlier in the development process.<br><div>\n<br><b><span><br></span></b><b>How do I switch to the Chrome beta channel?</b><br><ul>\n<li>\n<a href=\"https://www.google.com/chrome/beta/\">Chrome Beta for Desktop (Windows, Mac, Linux) can be found on our official website</a>.</li>\n<li>\n<a href=\"https://play.google.com/store/apps/details?id=com.chrome.beta\">Chrome Beta for Android can be found on Google Play</a>.</li>\n<li>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeYjYd27r_N1KbYpxeRWTVhiL3pLvGN5YpkuDE0xhS2GrYbmg/viewform\">Chrome Beta for iOS is available via TestFlight. You can sign up using this form (also linked from the official site above)</a>.</li>\n</ul>\n<div><br></div>\n<b>Is the beta channel considered stable enough to use every day?</b><br>Generally yes - but there may be hiccups along the way. We encourage beta channel users to regularly back up their important personal settings, like bookmarks, passwords, and more.</div>\n<div>\n<br><b><br></b><b>What’s the best way to provide feedback, report problems, etc.?</b><b><br></b>Chrome has three ways to provide feedback and report issues you may spot.<br><div dir=\"ltr\"></div>\n<ol>\n<li>\n<b>Reporting feedback within Chrome.</b><span> </span><a href=\"https://support.google.com/chrome/answer/95315\">You can use the instructions found here to submit a feedback report within Chrome.</a> We use these reports in aggregate to identify spikes and trends. We also perform deep dives when investigating issues, when checking in on new feature launches, and as part of regular user journey efforts.</li>\n<li>\n<b>Troubleshooting an issue</b><span><b>.</b> </span><a href=\"https://productforums.google.com/forum/#!forum/chrome\">Our official community forums</a> are the best place to get help troubleshooting issues. We have a group of <a href=\"https://topcontributor.withgoogle.com/\">top contributors</a> who also have the ability to escalate threads, which often help identify issues we aren’t seeing elsewhere.</li>\n<li>\n<b>Reporting confirmed bugs <a href=\"https://crbug.com/\">on this project tracker</a>.</b> Once an issue is confirmed as a bug, you’re able to create a report to it on our public development tracker - straight to our team! You may find that your bug has already been reported (things move fast!), but this allows us to track a bug’s life cycle in an easy way.</li>\n</ol>\n<br><b><br></b><b>Is there anything more beta than beta?</b><br>Yes! For some platforms, we also offer developer versions and even canary builds that are fresh off the test servers. These are generally only advised for folks that work on projects that need testing lead time. <a href=\"https://www.chromium.org/chrome-release-channels\">You can learn more about other release options here.</a><br><div><br></div>\n</div>\n","content":"Feeling adventurous? Preview upcoming Chrome features before they’re released across Desktop, Android and iOS.<br><span><br></span><b>What is the Chrome beta channel?</b><b><span><br></span></b>Chrome beta allows you to preview upcoming features before they’re released. You can expect weekly updates, access to features and designs that may or may not make it to a stable version, and the ability to submit feedback earlier in the development process.<br><div>\n<br><b><span><br></span></b><b>How do I switch to the Chrome beta channel?</b><br><ul>\n<li>\n<a href=\"https://www.google.com/chrome/beta/\">Chrome Beta for Desktop (Windows, Mac, Linux) can be found on our official website</a>.</li>\n<li>\n<a href=\"https://play.google.com/store/apps/details?id=com.chrome.beta\">Chrome Beta for Android can be found on Google Play</a>.</li>\n<li>\n<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeYjYd27r_N1KbYpxeRWTVhiL3pLvGN5YpkuDE0xhS2GrYbmg/viewform\">Chrome Beta for iOS is available via TestFlight. You can sign up using this form (also linked from the official site above)</a>.</li>\n</ul>\n<div><br></div>\n<b>Is the beta channel considered stable enough to use every day?</b><br>Generally yes - but there may be hiccups along the way. We encourage beta channel users to regularly back up their important personal settings, like bookmarks, passwords, and more.</div>\n<div>\n<br><b><br></b><b>What’s the best way to provide feedback, report problems, etc.?</b><b><br></b>Chrome has three ways to provide feedback and report issues you may spot.<br><div dir=\"ltr\"></div>\n<ol>\n<li>\n<b>Reporting feedback within Chrome.</b><span> </span><a href=\"https://support.google.com/chrome/answer/95315\">You can use the instructions found here to submit a feedback report within Chrome.</a> We use these reports in aggregate to identify spikes and trends. We also perform deep dives when investigating issues, when checking in on new feature launches, and as part of regular user journey efforts.</li>\n<li>\n<b>Troubleshooting an issue</b><span><b>.</b> </span><a href=\"https://productforums.google.com/forum/#!forum/chrome\">Our official community forums</a> are the best place to get help troubleshooting issues. We have a group of <a href=\"https://topcontributor.withgoogle.com/\">top contributors</a> who also have the ability to escalate threads, which often help identify issues we aren’t seeing elsewhere.</li>\n<li>\n<b>Reporting confirmed bugs <a href=\"https://crbug.com/\">on this project tracker</a>.</b> Once an issue is confirmed as a bug, you’re able to create a report to it on our public development tracker - straight to our team! You may find that your bug has already been reported (things move fast!), but this allows us to track a bug’s life cycle in an easy way.</li>\n</ol>\n<br><b><br></b><b>Is there anything more beta than beta?</b><br>Yes! For some platforms, we also offer developer versions and even canary builds that are fresh off the test servers. These are generally only advised for folks that work on projects that need testing lead time. <a href=\"https://www.chromium.org/chrome-release-channels\">You can learn more about other release options here.</a><br><div><br></div>\n</div>\n","enclosure":{},"categories":["beta","chrome","feedback","releases"],"color":"lightgreen","category":"Chromium Blog","date":"2018-08-24 17:03:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Chrome 69 Beta: CSS tricks, and more","pubDate":"2018-08-02 18:43:00","link":"http://blog.chromium.org/2018/08/chrome-69-beta-av1-video-decoder-css.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-711768038442271472","author":"Chrome Blog","thumbnail":"https://lh6.googleusercontent.com/F12OWRqdd-IgVTPNUqEIH_PV2xj2UH3OpSGamNLeG-jyaEpf-UTXAuWzE0ssX-t40Zp3hCTdv2CYfXxCShhmZKMxIaAGSb3UP2MLe6RdE5EOP5A0hx8a-OLD5u3RVacKJIHBKKjK","description":"Unless otherwise noted, changes described below apply to the newest Chrome Beta channel release for Android, Chrome OS, Linux, macOS, and Windows. View a complete list of the features in Chrome 69 on <a href=\"https://www.chromestatus.com/features#milestone%3D69\">ChromeStatus.com</a>. Chrome 69 is beta as of August 2.<br><h2><span>New CSS tricks</span></h2>Chrome has added several new CSS features.<br><h3>Conic gradients</h3>\n<a href=\"https://www.chromestatus.com/feature/5706155347148800\">CSS conic (angular/sweep) gradients</a> allow color transitions around a center rather than radiating from it. This allows, for example, creating a hue wheel using only two CSS properties as shown below. More examples <a href=\"https://leaverou.github.io/conic-gradient/\">are available</a>.<br><br><br><pre>div {<br>  background: conic-gradient(red, yellow, lime, aqua, blue, magenta, red);<br>  border-radius: 50%<br>}</pre>\n<br><h3>New margin, padding, and border properties</h3>Logical <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin\">margin</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/padding\">padding</a></code>, and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border\">border</a></code> properties <a href=\"https://www.chromestatus.com/feature/6041507983261696\">now use standard names</a>, specifically <code>margin-{block,inline}-{start,end}</code>, <code>padding-{block,inline}-{start,end}</code> and <code>border-{block,inline}-{start,end}-{width,style,color}</code>. These capabilities were previously supported through <code>-webkit</code> prefixes and non-standard names. Shorthand properties are only added for <code>border-{block,inline}-{start,end}</code>.<br><h3>CSS scroll snap</h3>\n<a href=\"https://www.chromestatus.com/feature/5721832506261504\">CSS scroll snap positions</a> are offsets in a scroll container's visual viewport where scrolling will stop after each scrolling operation. This improves the user experience by allowing scrollable zones to easily stop at predefined points. This also enables common UX scroll patterns without the need for JavaScript. One such pattern is a horizontal image carousel accomplished with the declarations below. The article Well-Controlled Scrolling with CSS Scroll Snap provides more depth.<br><br><br><pre class=\"prettyprint\">#gallery {<br>  scroll-snap-type: x mandatory;<br>  overflow-x: scroll;<br>  display: flex;<br>}<br><br>#gallery img {<br>   scroll-snap-align: center;<br>}<br></pre>\n<br><h3>Display cutouts</h3>\n<a href=\"https://www.chromestatus.com/feature/5710044637167616\">Display cutouts</a> are now supported in Chrome through the new CSS <code>env()</code> function (environment variables) and the viewport-fit meta tag. This allows developers to take advantage of the entire screen on devices that have a display cutout.<br><br>For example, to tell the browser to expand into the display cutout area the site should set the <code>viewport-fit</code> property in the <code>viewport</code> meta tag to <code>cover</code>. The site can then use the safe area inset CSS environment variables to layout their content without being covered by the cutout. This is shown below. The <a href=\"https://docs.google.com/document/d/1lbZi18_5cMlLOphpFqTbuI4B0YGykQvvtRbw6j67UyE/edit\">explainer</a> and the <a href=\"https://drafts.csswg.org/css-env-1/\">spec</a> provide more information.<br><br><br><pre>&lt;meta name=\"viewport\" content=\"viewport-fit: cover\" /&gt;<br><br>&lt;style&gt;<br>  #box {<br>    margin-top: env(safe-area-inset-top);<br>    margin-left: env(safe-area-inset-left);<br>    margin-bottom: env(safe-area-inset-bottom);<br>    margin-right: env(safe-area-inset-right);<br>  }<br>&lt;/style&gt; <br><br>&lt;div id=box&gt;&lt;/div&gt;<br></pre>\n<br><h2>Other features in this release</h2>\n<h3>Canvas</h3>\n<a href=\"https://www.chromestatus.com/feature/5681560598609920\">OffscreenCanvas</a> is a new interface that allows 2D and WebGL canvas rendering contexts to be used in Workers. This increases parallelism in web applications and improves performance on multi-core systems.<br><br>Chrome now also supports <code>DedicatedWorker.requestAnimationFrame()</code>, allowing animation-like events to be triggered the same on dedicated workers as they are in Window. For example:<br><br><br><pre>const offscreenCanvas = new OffscreenCanvas(100, 100);<br>const ctx = offscreenCanvas.getContext(\"2d\");<br>ctx.fillRect(0, 0, 10, 10);</pre>\n<br>Or together with canvas:<br><br><pre>const canvasElement = document.getElementById(\"mycanvas\")<br>const offscreenCanvas = canvasElement.transferControlToOffscreen();<br>const ctx = offscreenCanvas.getContext(\"2d\");<br>ctx.fillRect(0, 0, 10, 10);<br></pre>\n<br>Inside a worker:<br><br><pre>self.onmessage = function(ev) {<br>  const offscreenCanvas = ev.data;<br>  const ctx = offscreenCanvas.getContext(\"2d\");<br>  let x = 0;<br>  const draw = function() {<br>    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);<br>    ctx.fillRect(x, 0, 10, 10);<br>    x = (x + 1) % ctx.canvas.width;<br>    requestAnimationFrame(draw);<br>  };<br>  draw(0);<br>}<br></pre>\n<br>Main page:<br><br><pre>const worker = new Worker(\"worker.js\");<br>const offscreenCanvas =<br>    document.getElementById(\"canvas\").transferControlToOffscreen();<br>worker.postMessage(offscreenCanvas, [offscreenCanvas]);<br></pre>\n<br><h3>DOM</h3>A new method named <code><a href=\"https://www.chromestatus.com/feature/5676852374929408\">Element.toggleAttribute()</a> </code>allows toggling the existence of an element's attribute in a way similar to <code>Element.classList.toggle</code>. An optional force parameter forces addition or deletion of the attribute depending on the value of force. This makes managing boolean attributes much simpler as the interface doesn't use strings as does <code>Element.setAttribute()</code>.<br><h3>Fetch API: Request.isHistoryNavigation</h3>A boolean property has been added to request objects to indicate whether a particular request is a history navigation. This allows a service worker to know whether a request was due to a back/forward navigation. An example of how this might be used is that a service worker could respond to such a navigation with a cached response.<br><h3>JavaScript APIs</h3>JavaScript has several new APIs:<br><ul>\n<li>The <a href=\"https://developers.google.com/web/updates/2018/07/reportingobserver\">ReportingObserver API</a> provides a JavaScript callback function invoked in response to deprecations and browser interventions. The report can be saved, sent to the server, or or handled using arbitrary JavaScript. This feature is designed to give developers greater insight into the operation of their sites on real-world devices.</li>\n<li>JavaScript arrays are getting <a href=\"https://developers.google.com/web/updates/2018/03/smooshgate\">two new methods</a>. <code>Array.prototype.flat()</code> returns a new array with all sub-array elements concatenated into it recursively up to the specified depth. The sub-array elements become members of the new array. <code>Array.prototype.flatMap()</code> first maps each element using a mapping function, then flattens the result into a new array. This method is functionally equivalent to a map followed by calling <code>flat()</code> with a depth of 1.</li>\n</ul>\n<h3>Keyboard Map API</h3>Some applications such as games assign specific functions to specific physical keys. When the interface references these keys it needs to show either the character displayed on the key, which varies by locale, or the character assigned to the key by an alternate keyboard layout that may have been installed by the user. Because of these layout variations it's sometimes possible for the character shown in the interface to not reference the intended physical key.<br>This new API provides a way to translate <code>KeyboardEvent.code</code> values representing physical keys into correct strings for display to the user. You can find details and examples of this new API in the <a href=\"https://wicg.github.io/keyboard-map/\">specification</a> and the <a href=\"https://github.com/wicg/keyboard-map/blob/master/explainer.md\">explainer</a>.<br><h3>Loader</h3>Support for the <a href=\"https://www.chromestatus.com/feature/5407907378102272\">\"<code>rtt</code>\", \"<code>downlink</code>\", and \"<code>ect</code>\" client hint values</a> and HTTP request headers have been added to Chrome to convey a device's network connection speed to servers. For example, the <code>rtt</code> client hint provides the server with the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.The server could use this serve a downsampled image if the connection speed is slower than expected. These network quality hints provide to the server the same values as provided to a web page by the Network Information APIs <code>navigator.connection.rtt</code>, <code>navigator.connection.downlink</code>, and <code>navigator.connection.effectiveType</code>.<br><h3>Media: Querying encryption scheme support through EME</h3>Some platforms or key systems only support AES-128 in CTR mode, while others only support CBCS mode. Still others are able to support both. A <a href=\"https://developers.google.com/web/updates/2018/08/chrome-69-media-updates#encryption_scheme\">new method</a> allows web developers to query whether a specific encryption scheme is supported by Encrypted Media Extensions (EME).<br><h3>Mid-ligature text selection</h3>Chrome now allows for text to be selected inside ligatures. (A ligature is a combination of two or more letters in a single symbol.) This includes both mouse selection as well as cursor selection in input and textarea elements. We have also changed slightly the way we render text selection to support this change. Parts of text that happen to lie outside the selection area are now rendered with the original style:<br><br><span><span><img height=\"80\" src=\"https://lh6.googleusercontent.com/F12OWRqdd-IgVTPNUqEIH_PV2xj2UH3OpSGamNLeG-jyaEpf-UTXAuWzE0ssX-t40Zp3hCTdv2CYfXxCShhmZKMxIaAGSb3UP2MLe6RdE5EOP5A0hx8a-OLD5u3RVacKJIHBKKjK\" width=\"227\"></span></span><br><em>Selection in a ligature in English.</em><br><img height=\"129\" src=\"https://lh6.googleusercontent.com/a3FDhWClmOnQdmWdnYBWpkdwhQXxJFxtjKkvCem5uur43zpwYvKWP3FLzFEBswn7Maawnxqyl7uwJvO-PN2GcMgdTv4HXN45YsTAFwPwJIkWIuJ4WkuE6wt8hMJuxpweHGQ3Yooh\" width=\"227\"><br><em>Selection in a ligature in Arabic.</em><br><h3>Performance</h3>To avoid leaking information between frames, performance.memory values are currently heavily quantized, and delayed by 20 minutes.<br>If the renderer process is locked to documents from a single site (as in the case of <a href=\"https://security.googleblog.com/2018/07/mitigating-spectre-with-site-isolation.html\">Site Isolation on desktop</a>), we can expose this information with fewer concerns about leaking information between frames. In these cases, we'll not <a href=\"https://www.chromestatus.com/feature/5128919925653504\">return quantized memory consumption information</a>, delayed by 30 seconds. This allows developers to detect performance regressions from user data more easily because the memory measurements will be more accurate and can be taken more frequently.<br><h3>ServiceWorker</h3>Service workers have two improvements:<br><ul>\n<li>\n<code>ServiceWorkerRegistration.update()</code> previously resolved with undefined. <a href=\"https://www.chromestatus.com/feature/5436747060084736\">Now it resolves to the registration object</a> as required by the specification.</li>\n<li>Because of a technical limitation, <code>navigator.serviceWorker</code> previously threw a <code>SecurityError</code> when accessed on an insecure context. After this change, <code><a href=\"https://www.chromestatus.com/feature/4835970390163456\">navigator.serviceWorker</a></code> returns undefined</li>\n</ul>. This aligns with the specification.    <br><h3>Update behavior of CSS Grid Layout percentage row tracks and gutters</h3>In a future release there will be a change to how percentage row tracks and gutters are resolved on grid containers with indefinite height. Currently they behave similar to percentage heights in regular blocks, but going forward they will behave the same as for columns, making them symmetric.<br>Percentages will be ignored when computing intrinsic height (like it happens now) and resolved afterwards against that height. That way both column and row axes will have a symmetric behavior in order to resolve tracks and gutters specified by percentages.<br>In Chrome 69 you'll get a warning in the JavaScript console about this change. If you want to keep the current behavior in Chrome 70 you need to replace your percentage row tracks and gutters in indefinite height grid containers by \"auto\" and \"0px\" respectively.<br><h3>Web Locks API</h3>The Web Locks API allows scripts running in one tab to <a href=\"https://www.chromestatus.com/feature/5712361335816192\">asynchronously acquire a lock</a>, hold it while work is performed, then release it. While held, no other script executing in the same origin can acquire the same lock. A lock represents some potentially shared resource, identified by a name chosen by the web app. For example, if a web app running in multiple tabs wants to ensure that only one tab is syncing to the network, each tab could try to acquire a <code>my_net_sync</code> lock, but only one tab will succeed. <br>An example is shown below. It shows a function called when a lock for <code>my_resource</code> is acquired. <br><br><pre>await navigator.locks.request('my_resource', async lock =&gt; {<br>  const url = await look_up_in_database();<br>  const response = await fetch(url);<br>  const body = await response.text();<br>  await store_body_in_database(body);<br>});<br></pre>\n<br>For more details about the API methods and options, see the <a href=\"https://github.com/inexorabletash/web-locks\">explainer</a> and <a href=\"https://inexorabletash.github.io/web-locks/\">draft specification</a>. <br><h3>Web Authentication now supports CTAP2 FIDO devices</h3>Web Authentication <a href=\"https://www.chromestatus.com/feature/6288375388569600\">adds support for CTAP2 devices</a>, which provide advanced security capabilities such as biometric authentication and resident keys (keys stored on the device). <a href=\"https://www.chromestatus.com/feature/5669923372138496\">The WebAuthentication API</a> formerly only supported Universal 2nd Factor (U2F) devices at the transport layer. This change doesn't alter the API surface itself, but enables richer device interactions via the existing Web Authentication API.<br><h3>WebRTC</h3>WebRTC has two improvements:<br><ul>\n<li>Chrome now supports<a href=\"https://www.chromestatus.com/feature/6675724865896448\"> the <code>RTCRtpParameters.headerExtensions</code></a> dictionary entry which is returned by <code>RTCRtpSender.getParameters()</code>. This is a read-only field that allows inspection of the parameters that are set on a <code>PeerConnection</code> after negotiation. </li>\n<li>The <code>RTCRtpSender</code> and <code>RTCRtpReceiver</code> interfaces now provide the <code><a href=\"https://www.chromestatus.com/feature/6206698196828160\">getCapabilities()</a></code> method</li>\n</ul>which returns the most optimistic view of the capabilities of the system for sending media of the given kind. It does not reserve any resources, ports, or other state but is meant to provide a way to discover the types of capabilities of the browser including which codecs or RTP extensions may be supported.   <br><h2><span>Deprecations and Interoperability Improvements</span></h2>Chrome sometimes deprecates, removes, or changes features to increase interoperability with other browsers. This version of Chrome includes the following such changes. <br><h3>Removal of 'stalled' event from HTMLMediaElements that use Media Source Extensions</h3>Previously, the <code>HTMLMediaElement.stalled</code> event fired when media download has failed to progress for at least 3 seconds. In Media Source Extensions, the web app manages the download and the media element is not aware of its progress. Since some apps append media data in chunks larger than 3 seconds, <code>stalled</code> was being fired at inappropriate times. To solve this, <code>stalled</code> has been <a href=\"https://www.chromestatus.com/feature/6338037575319552\">removed for Media Source Extensions</a>.   <br><h3>Removal of document.createTouchList</h3>The <code><a href=\"https://www.chromestatus.com/feature/5185332291043328\">document.createTouchList()</a></code> method was removed<br>in favor of the <code>Touch()</code> constructor which has been supported since Chrome 48.  <br><h3>The window.confirm() method no longer activates its parent tab</h3>If a document in a background tab calls <code>window.confirm()</code>, it <a href=\"https://www.chromestatus.com/feature/5140698722467840\">returns immediately with <code>false</code></a>, and no dialog is shown to the user. If the tab is active, then the call shows a dialog as normal. Specifically, this removes the ability to use <code>window.confirm()</code> to bring a tab to the front because this is rarely what the user wants.<br><span class=\"post-author\">Posted by Jennifer Apacible</span>\n","content":"Unless otherwise noted, changes described below apply to the newest Chrome Beta channel release for Android, Chrome OS, Linux, macOS, and Windows. View a complete list of the features in Chrome 69 on <a href=\"https://www.chromestatus.com/features#milestone%3D69\">ChromeStatus.com</a>. Chrome 69 is beta as of August 2.<br><h2><span>New CSS tricks</span></h2>Chrome has added several new CSS features.<br><h3>Conic gradients</h3>\n<a href=\"https://www.chromestatus.com/feature/5706155347148800\">CSS conic (angular/sweep) gradients</a> allow color transitions around a center rather than radiating from it. This allows, for example, creating a hue wheel using only two CSS properties as shown below. More examples <a href=\"https://leaverou.github.io/conic-gradient/\">are available</a>.<br><br><br><pre>div {<br>  background: conic-gradient(red, yellow, lime, aqua, blue, magenta, red);<br>  border-radius: 50%<br>}</pre>\n<br><h3>New margin, padding, and border properties</h3>Logical <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin\">margin</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/padding\">padding</a></code>, and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border\">border</a></code> properties <a href=\"https://www.chromestatus.com/feature/6041507983261696\">now use standard names</a>, specifically <code>margin-{block,inline}-{start,end}</code>, <code>padding-{block,inline}-{start,end}</code> and <code>border-{block,inline}-{start,end}-{width,style,color}</code>. These capabilities were previously supported through <code>-webkit</code> prefixes and non-standard names. Shorthand properties are only added for <code>border-{block,inline}-{start,end}</code>.<br><h3>CSS scroll snap</h3>\n<a href=\"https://www.chromestatus.com/feature/5721832506261504\">CSS scroll snap positions</a> are offsets in a scroll container's visual viewport where scrolling will stop after each scrolling operation. This improves the user experience by allowing scrollable zones to easily stop at predefined points. This also enables common UX scroll patterns without the need for JavaScript. One such pattern is a horizontal image carousel accomplished with the declarations below. The article Well-Controlled Scrolling with CSS Scroll Snap provides more depth.<br><br><br><pre class=\"prettyprint\">#gallery {<br>  scroll-snap-type: x mandatory;<br>  overflow-x: scroll;<br>  display: flex;<br>}<br><br>#gallery img {<br>   scroll-snap-align: center;<br>}<br></pre>\n<br><h3>Display cutouts</h3>\n<a href=\"https://www.chromestatus.com/feature/5710044637167616\">Display cutouts</a> are now supported in Chrome through the new CSS <code>env()</code> function (environment variables) and the viewport-fit meta tag. This allows developers to take advantage of the entire screen on devices that have a display cutout.<br><br>For example, to tell the browser to expand into the display cutout area the site should set the <code>viewport-fit</code> property in the <code>viewport</code> meta tag to <code>cover</code>. The site can then use the safe area inset CSS environment variables to layout their content without being covered by the cutout. This is shown below. The <a href=\"https://docs.google.com/document/d/1lbZi18_5cMlLOphpFqTbuI4B0YGykQvvtRbw6j67UyE/edit\">explainer</a> and the <a href=\"https://drafts.csswg.org/css-env-1/\">spec</a> provide more information.<br><br><br><pre>&lt;meta name=\"viewport\" content=\"viewport-fit: cover\" /&gt;<br><br>&lt;style&gt;<br>  #box {<br>    margin-top: env(safe-area-inset-top);<br>    margin-left: env(safe-area-inset-left);<br>    margin-bottom: env(safe-area-inset-bottom);<br>    margin-right: env(safe-area-inset-right);<br>  }<br>&lt;/style&gt; <br><br>&lt;div id=box&gt;&lt;/div&gt;<br></pre>\n<br><h2>Other features in this release</h2>\n<h3>Canvas</h3>\n<a href=\"https://www.chromestatus.com/feature/5681560598609920\">OffscreenCanvas</a> is a new interface that allows 2D and WebGL canvas rendering contexts to be used in Workers. This increases parallelism in web applications and improves performance on multi-core systems.<br><br>Chrome now also supports <code>DedicatedWorker.requestAnimationFrame()</code>, allowing animation-like events to be triggered the same on dedicated workers as they are in Window. For example:<br><br><br><pre>const offscreenCanvas = new OffscreenCanvas(100, 100);<br>const ctx = offscreenCanvas.getContext(\"2d\");<br>ctx.fillRect(0, 0, 10, 10);</pre>\n<br>Or together with canvas:<br><br><pre>const canvasElement = document.getElementById(\"mycanvas\")<br>const offscreenCanvas = canvasElement.transferControlToOffscreen();<br>const ctx = offscreenCanvas.getContext(\"2d\");<br>ctx.fillRect(0, 0, 10, 10);<br></pre>\n<br>Inside a worker:<br><br><pre>self.onmessage = function(ev) {<br>  const offscreenCanvas = ev.data;<br>  const ctx = offscreenCanvas.getContext(\"2d\");<br>  let x = 0;<br>  const draw = function() {<br>    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);<br>    ctx.fillRect(x, 0, 10, 10);<br>    x = (x + 1) % ctx.canvas.width;<br>    requestAnimationFrame(draw);<br>  };<br>  draw(0);<br>}<br></pre>\n<br>Main page:<br><br><pre>const worker = new Worker(\"worker.js\");<br>const offscreenCanvas =<br>    document.getElementById(\"canvas\").transferControlToOffscreen();<br>worker.postMessage(offscreenCanvas, [offscreenCanvas]);<br></pre>\n<br><h3>DOM</h3>A new method named <code><a href=\"https://www.chromestatus.com/feature/5676852374929408\">Element.toggleAttribute()</a> </code>allows toggling the existence of an element's attribute in a way similar to <code>Element.classList.toggle</code>. An optional force parameter forces addition or deletion of the attribute depending on the value of force. This makes managing boolean attributes much simpler as the interface doesn't use strings as does <code>Element.setAttribute()</code>.<br><h3>Fetch API: Request.isHistoryNavigation</h3>A boolean property has been added to request objects to indicate whether a particular request is a history navigation. This allows a service worker to know whether a request was due to a back/forward navigation. An example of how this might be used is that a service worker could respond to such a navigation with a cached response.<br><h3>JavaScript APIs</h3>JavaScript has several new APIs:<br><ul>\n<li>The <a href=\"https://developers.google.com/web/updates/2018/07/reportingobserver\">ReportingObserver API</a> provides a JavaScript callback function invoked in response to deprecations and browser interventions. The report can be saved, sent to the server, or or handled using arbitrary JavaScript. This feature is designed to give developers greater insight into the operation of their sites on real-world devices.</li>\n<li>JavaScript arrays are getting <a href=\"https://developers.google.com/web/updates/2018/03/smooshgate\">two new methods</a>. <code>Array.prototype.flat()</code> returns a new array with all sub-array elements concatenated into it recursively up to the specified depth. The sub-array elements become members of the new array. <code>Array.prototype.flatMap()</code> first maps each element using a mapping function, then flattens the result into a new array. This method is functionally equivalent to a map followed by calling <code>flat()</code> with a depth of 1.</li>\n</ul>\n<h3>Keyboard Map API</h3>Some applications such as games assign specific functions to specific physical keys. When the interface references these keys it needs to show either the character displayed on the key, which varies by locale, or the character assigned to the key by an alternate keyboard layout that may have been installed by the user. Because of these layout variations it's sometimes possible for the character shown in the interface to not reference the intended physical key.<br>This new API provides a way to translate <code>KeyboardEvent.code</code> values representing physical keys into correct strings for display to the user. You can find details and examples of this new API in the <a href=\"https://wicg.github.io/keyboard-map/\">specification</a> and the <a href=\"https://github.com/wicg/keyboard-map/blob/master/explainer.md\">explainer</a>.<br><h3>Loader</h3>Support for the <a href=\"https://www.chromestatus.com/feature/5407907378102272\">\"<code>rtt</code>\", \"<code>downlink</code>\", and \"<code>ect</code>\" client hint values</a> and HTTP request headers have been added to Chrome to convey a device's network connection speed to servers. For example, the <code>rtt</code> client hint provides the server with the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.The server could use this serve a downsampled image if the connection speed is slower than expected. These network quality hints provide to the server the same values as provided to a web page by the Network Information APIs <code>navigator.connection.rtt</code>, <code>navigator.connection.downlink</code>, and <code>navigator.connection.effectiveType</code>.<br><h3>Media: Querying encryption scheme support through EME</h3>Some platforms or key systems only support AES-128 in CTR mode, while others only support CBCS mode. Still others are able to support both. A <a href=\"https://developers.google.com/web/updates/2018/08/chrome-69-media-updates#encryption_scheme\">new method</a> allows web developers to query whether a specific encryption scheme is supported by Encrypted Media Extensions (EME).<br><h3>Mid-ligature text selection</h3>Chrome now allows for text to be selected inside ligatures. (A ligature is a combination of two or more letters in a single symbol.) This includes both mouse selection as well as cursor selection in input and textarea elements. We have also changed slightly the way we render text selection to support this change. Parts of text that happen to lie outside the selection area are now rendered with the original style:<br><br><span><span><img height=\"80\" src=\"https://lh6.googleusercontent.com/F12OWRqdd-IgVTPNUqEIH_PV2xj2UH3OpSGamNLeG-jyaEpf-UTXAuWzE0ssX-t40Zp3hCTdv2CYfXxCShhmZKMxIaAGSb3UP2MLe6RdE5EOP5A0hx8a-OLD5u3RVacKJIHBKKjK\" width=\"227\"></span></span><br><em>Selection in a ligature in English.</em><br><img height=\"129\" src=\"https://lh6.googleusercontent.com/a3FDhWClmOnQdmWdnYBWpkdwhQXxJFxtjKkvCem5uur43zpwYvKWP3FLzFEBswn7Maawnxqyl7uwJvO-PN2GcMgdTv4HXN45YsTAFwPwJIkWIuJ4WkuE6wt8hMJuxpweHGQ3Yooh\" width=\"227\"><br><em>Selection in a ligature in Arabic.</em><br><h3>Performance</h3>To avoid leaking information between frames, performance.memory values are currently heavily quantized, and delayed by 20 minutes.<br>If the renderer process is locked to documents from a single site (as in the case of <a href=\"https://security.googleblog.com/2018/07/mitigating-spectre-with-site-isolation.html\">Site Isolation on desktop</a>), we can expose this information with fewer concerns about leaking information between frames. In these cases, we'll not <a href=\"https://www.chromestatus.com/feature/5128919925653504\">return quantized memory consumption information</a>, delayed by 30 seconds. This allows developers to detect performance regressions from user data more easily because the memory measurements will be more accurate and can be taken more frequently.<br><h3>ServiceWorker</h3>Service workers have two improvements:<br><ul>\n<li>\n<code>ServiceWorkerRegistration.update()</code> previously resolved with undefined. <a href=\"https://www.chromestatus.com/feature/5436747060084736\">Now it resolves to the registration object</a> as required by the specification.</li>\n<li>Because of a technical limitation, <code>navigator.serviceWorker</code> previously threw a <code>SecurityError</code> when accessed on an insecure context. After this change, <code><a href=\"https://www.chromestatus.com/feature/4835970390163456\">navigator.serviceWorker</a></code> returns undefined</li>\n</ul>. This aligns with the specification.    <br><h3>Update behavior of CSS Grid Layout percentage row tracks and gutters</h3>In a future release there will be a change to how percentage row tracks and gutters are resolved on grid containers with indefinite height. Currently they behave similar to percentage heights in regular blocks, but going forward they will behave the same as for columns, making them symmetric.<br>Percentages will be ignored when computing intrinsic height (like it happens now) and resolved afterwards against that height. That way both column and row axes will have a symmetric behavior in order to resolve tracks and gutters specified by percentages.<br>In Chrome 69 you'll get a warning in the JavaScript console about this change. If you want to keep the current behavior in Chrome 70 you need to replace your percentage row tracks and gutters in indefinite height grid containers by \"auto\" and \"0px\" respectively.<br><h3>Web Locks API</h3>The Web Locks API allows scripts running in one tab to <a href=\"https://www.chromestatus.com/feature/5712361335816192\">asynchronously acquire a lock</a>, hold it while work is performed, then release it. While held, no other script executing in the same origin can acquire the same lock. A lock represents some potentially shared resource, identified by a name chosen by the web app. For example, if a web app running in multiple tabs wants to ensure that only one tab is syncing to the network, each tab could try to acquire a <code>my_net_sync</code> lock, but only one tab will succeed. <br>An example is shown below. It shows a function called when a lock for <code>my_resource</code> is acquired. <br><br><pre>await navigator.locks.request('my_resource', async lock =&gt; {<br>  const url = await look_up_in_database();<br>  const response = await fetch(url);<br>  const body = await response.text();<br>  await store_body_in_database(body);<br>});<br></pre>\n<br>For more details about the API methods and options, see the <a href=\"https://github.com/inexorabletash/web-locks\">explainer</a> and <a href=\"https://inexorabletash.github.io/web-locks/\">draft specification</a>. <br><h3>Web Authentication now supports CTAP2 FIDO devices</h3>Web Authentication <a href=\"https://www.chromestatus.com/feature/6288375388569600\">adds support for CTAP2 devices</a>, which provide advanced security capabilities such as biometric authentication and resident keys (keys stored on the device). <a href=\"https://www.chromestatus.com/feature/5669923372138496\">The WebAuthentication API</a> formerly only supported Universal 2nd Factor (U2F) devices at the transport layer. This change doesn't alter the API surface itself, but enables richer device interactions via the existing Web Authentication API.<br><h3>WebRTC</h3>WebRTC has two improvements:<br><ul>\n<li>Chrome now supports<a href=\"https://www.chromestatus.com/feature/6675724865896448\"> the <code>RTCRtpParameters.headerExtensions</code></a> dictionary entry which is returned by <code>RTCRtpSender.getParameters()</code>. This is a read-only field that allows inspection of the parameters that are set on a <code>PeerConnection</code> after negotiation. </li>\n<li>The <code>RTCRtpSender</code> and <code>RTCRtpReceiver</code> interfaces now provide the <code><a href=\"https://www.chromestatus.com/feature/6206698196828160\">getCapabilities()</a></code> method</li>\n</ul>which returns the most optimistic view of the capabilities of the system for sending media of the given kind. It does not reserve any resources, ports, or other state but is meant to provide a way to discover the types of capabilities of the browser including which codecs or RTP extensions may be supported.   <br><h2><span>Deprecations and Interoperability Improvements</span></h2>Chrome sometimes deprecates, removes, or changes features to increase interoperability with other browsers. This version of Chrome includes the following such changes. <br><h3>Removal of 'stalled' event from HTMLMediaElements that use Media Source Extensions</h3>Previously, the <code>HTMLMediaElement.stalled</code> event fired when media download has failed to progress for at least 3 seconds. In Media Source Extensions, the web app manages the download and the media element is not aware of its progress. Since some apps append media data in chunks larger than 3 seconds, <code>stalled</code> was being fired at inappropriate times. To solve this, <code>stalled</code> has been <a href=\"https://www.chromestatus.com/feature/6338037575319552\">removed for Media Source Extensions</a>.   <br><h3>Removal of document.createTouchList</h3>The <code><a href=\"https://www.chromestatus.com/feature/5185332291043328\">document.createTouchList()</a></code> method was removed<br>in favor of the <code>Touch()</code> constructor which has been supported since Chrome 48.  <br><h3>The window.confirm() method no longer activates its parent tab</h3>If a document in a background tab calls <code>window.confirm()</code>, it <a href=\"https://www.chromestatus.com/feature/5140698722467840\">returns immediately with <code>false</code></a>, and no dialog is shown to the user. If the tab is active, then the call shows a dialog as normal. Specifically, this removes the ability to use <code>window.confirm()</code> to bring a tab to the front because this is rarely what the user wants.<br><span class=\"post-author\">Posted by Jennifer Apacible</span>\n","enclosure":{},"categories":["beta"],"color":"lightgreen","category":"Chromium Blog","date":"2018-08-02 18:43:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Bringing Google Pay to PaymentRequest","pubDate":"2018-07-26 17:32:00","link":"http://blog.chromium.org/2018/07/bringing-google-pay-to-paymentrequest.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-8045468601359678091","author":"Chrome Blog","thumbnail":"","description":"In September 2016 Chrome launched support for the <a href=\"https://blog.chromium.org/2017/08/chrome-61-beta-javascript-modules.html\">PaymentRequest</a> API, which offers a secure, seamless checkout experience built right into the browser. As part of that launch, Chrome offered support for the <span>basic-card</span> payment method. This allowed users to pay for goods online via PaymentRequest with credit or debit cards stored locally in Chrome or, for signed-in users, stored within their Google Account.<br><br>As of version 70, Chrome will no longer return cards stored in a user’s Google Account as part of the <span>basic-card</span> payment method. To continue getting access to cards stored in a user’s Google Account, developers will need to add support for Google Pay. This change is due to the fact that beginning with version 68, Chrome supports the Payment Handler API, a standards-based way for the browser to communicate with digital payment providers. Google Pay supports this standard.<br><br>Getting started with Google Pay is easy. Visit the <a href=\"http://developers.google.com/pay/api\">developer site</a> for a quick tutorial and review the latest Google Pay brand guidelines for best practices. When you are ready to implement, just follow the detailed <a href=\"https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist\">checklist</a> to test your integration and request production access.<br><br>You can find <a href=\"https://developers.google.com/pay/api/web/support/troubleshooting\">troubleshooting tips</a> for common issues and can <a href=\"https://services.google.com/fb/forms/googlepayAPIsupport/\">contact the Google Pay team</a> if you need any additional help.  Thanks for helping us make payments on the web a great experience for users everywhere.<br><br>Posted by Zach Koch, Product Manager","content":"In September 2016 Chrome launched support for the <a href=\"https://blog.chromium.org/2017/08/chrome-61-beta-javascript-modules.html\">PaymentRequest</a> API, which offers a secure, seamless checkout experience built right into the browser. As part of that launch, Chrome offered support for the <span>basic-card</span> payment method. This allowed users to pay for goods online via PaymentRequest with credit or debit cards stored locally in Chrome or, for signed-in users, stored within their Google Account.<br><br>As of version 70, Chrome will no longer return cards stored in a user’s Google Account as part of the <span>basic-card</span> payment method. To continue getting access to cards stored in a user’s Google Account, developers will need to add support for Google Pay. This change is due to the fact that beginning with version 68, Chrome supports the Payment Handler API, a standards-based way for the browser to communicate with digital payment providers. Google Pay supports this standard.<br><br>Getting started with Google Pay is easy. Visit the <a href=\"http://developers.google.com/pay/api\">developer site</a> for a quick tutorial and review the latest Google Pay brand guidelines for best practices. When you are ready to implement, just follow the detailed <a href=\"https://developers.google.com/pay/api/web/guides/test-and-deploy/integration-checklist\">checklist</a> to test your integration and request production access.<br><br>You can find <a href=\"https://developers.google.com/pay/api/web/support/troubleshooting\">troubleshooting tips</a> for common issues and can <a href=\"https://services.google.com/fb/forms/googlepayAPIsupport/\">contact the Google Pay team</a> if you need any additional help.  Thanks for helping us make payments on the web a great experience for users everywhere.<br><br>Posted by Zach Koch, Product Manager","enclosure":{},"categories":[],"color":"lightgreen","category":"Chromium Blog","date":"2018-07-26 17:32:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Improving extension transparency for users","pubDate":"2018-06-12 17:03:00","link":"http://blog.chromium.org/2018/06/improving-extension-transparency-for.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-9019995214391634560","author":"Chrome Blog","thumbnail":"","description":"<div>We strive to ensure choice and transparency for all Chrome users as they browse the web. Part of this choice is the ability to use the hundreds of thousands of extensions available in the <a href=\"https://chrome.google.com/webstore/category/extensions\">Chrome Web Store</a> to customize the browsing experience in useful and productivity-boosting ways. However, we continue to receive large volumes of complaints from users about unwanted extensions causing their Chrome experience to change unexpectedly — and the majority of these complaints are attributed to confusing or deceptive uses of <a href=\"https://developer.chrome.com/webstore/inline_installation\">inline installation</a> on websites. As we’ve <a href=\"https://blog.chromium.org/2015/08/protecting-users-from-deceptive-inline.html\">attempted</a> to address this problem over the past few years, we’ve learned that the information displayed alongside extensions in the Chrome Web Store plays a critical role in ensuring that users can make informed decisions about whether to install an extension. When installed through the Chrome Web Store, extensions are significantly less likely to be uninstalled or cause user complaints, compared to extensions installed through inline installation. <br><br>Later this summer, inline installation will be retired on all platforms. Going forward, users will only be able to install extensions from within the Chrome Web Store, where they can view all information about an extension’s functionality prior to installing. <br><br>This change will roll out in three phases:  <br><br><ul>\n<li>Starting today, inline installation will be unavailable to all newly published extensions. Extensions first published on June 12, 2018 or later that attempt to call the <span><a href=\"https://developer.chrome.com/extensions/webstore#method-install\">chrome.webstore.install()</a></span> function will automatically redirect the user to the Chrome Web Store in a new tab to complete the installation.</li>\n<li>Starting September 12, 2018, inline installation will be disabled for existing extensions, and users will be automatically redirected to the Chrome Web Store to complete the installation.</li>\n<li>In early December 2018, the inline install API method will be removed from <a href=\"https://www.chromium.org/developers/calendar\">Chrome 71</a>.</li>\n</ul>\n<br><br>If you distribute an extension using inline installation, you will need to update install buttons on your website to link to your extension’s Chrome Web Store page prior to the stable release of <a href=\"https://www.chromium.org/developers/calendar\">Chrome 71</a>. And if you haven’t already, be sure to read up on how to create a <a href=\"https://developer.chrome.com/webstore/best_practices#listing\">high quality store listing</a>, and consider using our <a href=\"https://developer.chrome.com/webstore/branding\">install badge</a> on your site. <br><br>We’re proud of the choices the Chrome Web Store provides users in enhancing their browsing experience. At the same time, it’s crucial that users have robust information about extensions prior to installation, so that they fully understand how their browsing experience will be impacted. We’re confident this change will improve transparency for all users about their extension choices in Chrome. <br><br>Posted by James Wagner, Extensions Platform Product Manager </div>","content":"<div>We strive to ensure choice and transparency for all Chrome users as they browse the web. Part of this choice is the ability to use the hundreds of thousands of extensions available in the <a href=\"https://chrome.google.com/webstore/category/extensions\">Chrome Web Store</a> to customize the browsing experience in useful and productivity-boosting ways. However, we continue to receive large volumes of complaints from users about unwanted extensions causing their Chrome experience to change unexpectedly — and the majority of these complaints are attributed to confusing or deceptive uses of <a href=\"https://developer.chrome.com/webstore/inline_installation\">inline installation</a> on websites. As we’ve <a href=\"https://blog.chromium.org/2015/08/protecting-users-from-deceptive-inline.html\">attempted</a> to address this problem over the past few years, we’ve learned that the information displayed alongside extensions in the Chrome Web Store plays a critical role in ensuring that users can make informed decisions about whether to install an extension. When installed through the Chrome Web Store, extensions are significantly less likely to be uninstalled or cause user complaints, compared to extensions installed through inline installation. <br><br>Later this summer, inline installation will be retired on all platforms. Going forward, users will only be able to install extensions from within the Chrome Web Store, where they can view all information about an extension’s functionality prior to installing. <br><br>This change will roll out in three phases:  <br><br><ul>\n<li>Starting today, inline installation will be unavailable to all newly published extensions. Extensions first published on June 12, 2018 or later that attempt to call the <span><a href=\"https://developer.chrome.com/extensions/webstore#method-install\">chrome.webstore.install()</a></span> function will automatically redirect the user to the Chrome Web Store in a new tab to complete the installation.</li>\n<li>Starting September 12, 2018, inline installation will be disabled for existing extensions, and users will be automatically redirected to the Chrome Web Store to complete the installation.</li>\n<li>In early December 2018, the inline install API method will be removed from <a href=\"https://www.chromium.org/developers/calendar\">Chrome 71</a>.</li>\n</ul>\n<br><br>If you distribute an extension using inline installation, you will need to update install buttons on your website to link to your extension’s Chrome Web Store page prior to the stable release of <a href=\"https://www.chromium.org/developers/calendar\">Chrome 71</a>. And if you haven’t already, be sure to read up on how to create a <a href=\"https://developer.chrome.com/webstore/best_practices#listing\">high quality store listing</a>, and consider using our <a href=\"https://developer.chrome.com/webstore/branding\">install badge</a> on your site. <br><br>We’re proud of the choices the Chrome Web Store provides users in enhancing their browsing experience. At the same time, it’s crucial that users have robust information about extensions prior to installation, so that they fully understand how their browsing experience will be impacted. We’re confident this change will improve transparency for all users about their extension choices in Chrome. <br><br>Posted by James Wagner, Extensions Platform Product Manager </div>","enclosure":{},"categories":[],"color":"lightgreen","category":"Chromium Blog","date":"2018-06-12 17:03:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Chrome 68 Beta: add to home screen, payment handler, page lifecycle","pubDate":"2018-06-07 21:17:00","link":"http://blog.chromium.org/2018/06/chrome-68-beta-add-to-home-screen.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-5933789583742368761","author":"Chrome Blog","thumbnail":"https://lh5.googleusercontent.com/dPlvmGs4OHiLOK5O5604HJOUuTv8TQKAjmrorf8Ou_GeJ-5YbemZzE91katd482IZoqv2tjoWoPSqEJzo7Ft2isJ7mdQap4-d_q5xfVmORUJcoCFttC2BqYWj-ttlzCsVFvvab7J","description":"Unless otherwise noted, changes described below apply to the newest Chrome Beta channel release for Android, Chrome OS, Linux, macOS, and Windows. View a complete list of the features in Chrome 68 on <a href=\"https://www.chromestatus.com/features#milestone%3D67\">ChromeStatus.com</a>. Chrome 68 is beta as of June 7, 2018.<br><h2><span><br></span></h2>\n<h2><span>New add to home screen behavior for progressive web apps</span></h2>We've heard from developers that they want more control over how and when the add to home screen prompt appears. Starting in Chrome 68 on Android, the behavior is changing to provide more control over when the prompt appears. Developers can now provide additional context for their add to home screen experience, and improve the click-through rate.<br><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody>\n<tr><td><img height=\"188\" src=\"https://lh5.googleusercontent.com/dPlvmGs4OHiLOK5O5604HJOUuTv8TQKAjmrorf8Ou_GeJ-5YbemZzE91katd482IZoqv2tjoWoPSqEJzo7Ft2isJ7mdQap4-d_q5xfVmORUJcoCFttC2BqYWj-ttlzCsVFvvab7J\" width=\"320\"></td></tr>\n<tr><td class=\"tr-caption\">Add to home screen dialog</td></tr>\n</tbody></table>\n<span></span><br><br>If a site meets the <a href=\"https://developers.google.com/web/fundamentals/app-install-banners/#criteria\">add to home screen criteria</a>, Chrome will fire a <code>beforeinstallprompt</code> event, and no longer automatically show the add to home screen banner. Instead, when the event has fired, developers can save the event and add a button or other UI element to the app to indicate it can be installed. When the user clicks the install button, developers can call <code>prompt()</code> on the saved <code>beforeinstallprompt</code> event to show the new add to home screen modal dialog. Although the <code>beforeinstallprompt</code> event may be fired without a user gesture, calling <code>prompt()</code> requires one.<br><br><br><pre>let installPromptEvent;<br><br>window.addEventListener('beforeinstallprompt', (event) =&gt; {<br>  // Prevent Chrome &lt;= 67 from automatically showing the prompt<br>  event.preventDefault();<br>  // Stash the event so it can be triggered later.<br>  installPromptEvent = event;<br>  // Update UI notify the user they can add to home screen<br>  document.querySelector('#install-button').disabled = false;<br>});<br><br></pre>\n<br>As a temporary measure to provide developers with time to handle the <code>beforeinstallpromptevent</code> and add an install button to their app, Chrome will show a <a href=\"https://developers.google.com/web/updates/2018/06/a2hs-updates#the_mini-infobar\">mini-infobar</a> the first time the user visits a site that meets the <a href=\"https://developers.google.com/web/fundamentals/app-install-banners/#criteria\">add to home screen criteria</a>. Once dismissed, the mini-infobar will not be shown again until a sufficient amount of time (currently 3 months) has passed.<br><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody>\n<tr><td><img height=\"84\" src=\"https://lh4.googleusercontent.com/Q8_b9dOtwbqjFJZRAIUcVdMWH0hNfQWJyDf_Scbe22qbn6APp6HktlxTAmepkmetmmzpNIu_dq8-nWHnik5GvmBrjkciUtDDkyDh2y636bBpVsX1TyO4TAxY9IvydimTLGmAhkro\" width=\"318\"></td></tr>\n<tr><td class=\"tr-caption\">Add to home screen mini infobar</td></tr>\n</tbody></table>\n<span></span><span></span><br><br>See <a href=\"https://developers.google.com/web/updates/2018/06/a2hs-updates\">Changes to add home screen behavior</a> for complete details, code samples and screenshots of the new UI elements.<br><h2><span>Payment Handler API</span></h2>\n<a href=\"https://www.w3.org/TR/payment-request/\">The Payment Request API</a> brought the web a simpler, faster way to check out online by combining a seamless native-browser UI with a user's preferred form of payment and shipping addresses. <br><br>The just-launched <a href=\"https://www.w3.org/TR/payment-handler/\">Payment Handler API</a> extends the reach of Payment Request by enabling <a href=\"https://developers.google.com/web/updates/2018/06/payment-handler-api\">web-based payment apps</a> to facilitate payments directly within the Payment Request experience.<br><br><br><pre>const request = new PaymentRequest([{<br>  // Your custom payment method identifier comes here<br>  supportedMethods: 'https://bobpay.xyz/pay'<br>}], {<br>  total: {<br>    label: 'total',<br>    amount: { value: '10', currency: 'USD' }<br>  }<br>});</pre>\n<br><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody>\n<tr><td><img height=\"711\" src=\"https://lh3.googleusercontent.com/eE0nGA0tfrrmv8MtNSMx-wuQbYQZgrOhgb8qSU5pMjjxEohvFjHi6As6FTBCMfxxKTesD8RevNoZZZ5_WZXxj71hfoqnTVkVkE2RBeoVFK4uF14JsSjV_pBN3ghErXZktHQRweNw\" width=\"400\"></td></tr>\n<tr><td class=\"tr-caption\"><em>Making a payment through the Payment Request API. \"Pay with BobPay\" is a custom payment method built with the Payment Handler API.</em></td></tr>\n</tbody></table>\n<br><h2><span>Protecting users from unwanted destinations</span></h2>In this version of Chrome we are changing a few user interface behaviors to improve users' experience.<br><h2>Require user gesture for redirects in cross-origin iframes</h2>Unless forbidden by the <code>sandbox</code> attribute, content embedded in an <code>iframe</code> can generally navigate the top-level browsing context to a different website. This functionality is used by many types of websites, including single-sign-on providers and payment processors. Unfortunately, this behavior is also a common abuse vector, redirecting users to unwanted destinations without their knowledge or consent.<br><br>Beginning in Chrome 68, content embedded in an iframe <a href=\"https://www.chromestatus.com/feature/5629582019395584\">will require a user gesture to navigate</a> the top-level browsing context to a different origin. Similar to pop-up blocking, when this protection triggers users will see Chrome UI giving them the option to allow the redirect the continue. <br><br>A demonstration illustrates the behavior. The <a href=\"https://ndossougbe.github.io/web-sandbox/interventions/3p-redirect/\">demo behind this link</a> will exhibit the old behavior in Chrome 67 and early. The improved behavior works in Chrome 68.<br><h2>Block tab-under navigations</h2>A tab-under is when a page both opens a popup to some destination <strong>and</strong> navigates the opener page to some third-party content. Typically this behavior is used to send the user to a desired destination while also creating another tab with an unwanted destination. Similar to pop-ups, <a href=\"https://www.chromestatus.com/feature/5675755719622656\">Chrome will prevent these</a> unwanted navigations and instead show native UI to the user so they can choose whether to follow this redirect to the new direction.<br><h2><span>The Page Lifecycle API</span></h2>Application lifecycle is a key way that modern operating systems manage resources. On Android, iOS and recently Windows, apps can be started and stopped at any time by the platform. This allows these platforms to streamline and reallocate resources where they best benefit the user.<br><br>On the web, there has historically been no such lifecycle, and apps can be alive indefinitely. With large numbers of web apps (and tabs) running, critical resources such as memory, CPU, battery, and network can be oversubscribed, leading to a bad end-user experience.<br><br>In Chrome 68, developers will be able to listen for and respond to system-initiated CPU suspension of backgrounded tabs using the new <code><a href=\"https://github.com/WICG/page-lifecycle/blob/master/README.md#api\">freeze</a></code> and <code>resume</code> events. In cases where a frozen page needs to be discarded to conserve memory, the <code><a href=\"https://github.com/WICG/page-lifecycle/blob/master/README.md#handling-of-discarding-on-next-load\">document.wasDiscarded</a></code> property is now available so developers can restore view state (saved in the <code>freeze</code> event) when the user refocuses the tab and the page is reloaded. Developers wanting to test these events in their own applications can visit <code>chrome://discards</code> to simulate page freezing, resuming, and discarding.<br><br>For more information on the Page Lifecycle API, refer to the <a href=\"https://wicg.github.io/page-lifecycle/spec.html\">specification</a> or the <a href=\"https://github.com/WICG/page-lifecycle\">explainer on GitHub</a>.<br><h2><span>Other features in this release</span></h2>\n<h3>CSS</h3>\n<h4>Accept two values in the overflow shorthand </h4>The <code>overflow</code> shorthand <a href=\"https://www.chromestatus.com/feature/5090725653905408\">will accept two values</a>, making it possible to set the horizontal and vertical overflow to different values. If two values are specified, the first is <code>overflow-x</code> and the second is <code>overflow-y</code>. Changing the shorthand allows developers to specify a single statement where previously two were required.<br><h4>CSS position values with three parts</h4>The <code>object-position</code> and <code>perspective-origin</code> properties <a href=\"https://www.chromestatus.com/feature/5116559680864256\">will no longer accept three-part values</a> like <code>\"top right 20%\"</code>. This also applies for positions in basic shapes and gradients. Valid position values will now always have 1, 2 or 4 parts. Deprecation of 3-part values occurred in Chrome 66.<br><h4>Support 'x' as a resolution unit</h4>\n<a href=\"https://drafts.csswg.org/css-values-4/\">CSS Values and Units Module Level 4</a> defines a new resolution unit called \"dot per pixel\" for support of high-resolution displays. This change adds <code>'x'</code> as a synonym for the existing abbreviation, <code>'dppx'</code>.<br><h4>Unprefix CSS \"grab\" and \"grabbing\" values for cursor property</h4>The CSS values \"grab\" and \"grabbing\" change the mouse cursor to an open hand or closed hand, commonly used to indicate that something can be grabbed or is currently grabbed. Prefixed versions of these properties have been supported since Chrome 1. With this change <a href=\"https://www.chromestatus.com/feature/5575087101050880\">Chrome will support</a> the standard, unprefixed versions of these values.<br><h3>Gamepads</h3>\n<h4>High resolution timestamp for Gamepad</h4>\n<code><a href=\"https://www.chromestatus.com/feature/5751747209330688\">Gamepad.timestamp</a></code> now uses a <code>DOMHighResTimeStamp</code>, a high resolution monotonic time with microsecond resolution. Timestamps are measured as offsets from the <code>PerformanceTiming.navigationStart</code> property.<br><h3>Custom elements</h3>\n<h4>New customElements.upgrade()</h4>This function invokes custom element constructors for custom elements whose constructors are not called yet explicitly. If a custom element is created with the <code>innerHTML</code> setter and its parent node is not connected to a document, the custom element constructor is not called until it's connected. This method explicitly <a href=\"https://www.chromestatus.com/feature/5967337471606784\">allows developers to fully control the timing</a> of custom element constructor calls regardless of connectedness.<br><h3>Input</h3>\n<h4>Keyboard lock</h4>While in fullscreen, <a href=\"https://www.chromestatus.com/feature/5642959835889664\">this API</a> allows apps to receive keys that are normally handled by the system or the browser like <code>Cmd-Tab</code>/<code>Alt-Tab</code>, or <code>Esc</code>. Users can escape keyboard lock (and fullscreen) by holding the <code>Esc</code> key for two seconds.<br><h4>Make PointerEvent.fromElement and PointerEvent.toElement null</h4>To improve consistency with other browsers, <code>PointerEvents</code> for <code>fromElement</code> and <code>toElement</code> fields not follow the <a href=\"https://www.w3.org/TR/pointerevents/\">Pointer Events Level 2</a> spec by <a href=\"https://www.chromestatus.com/feature/5836424855158784\"> always reporting null</a>.<br>In a <code>MouseEvent</code> (from which a <code>PointerEvent</code> inherits these fields), <code>fromElement</code> and <code>toElement</code> are non-standard, and have been inconsistent among major browsers for many years. Moreover, there are standard and consistent alternatives already: <code>target</code> and <code>relatedTarget</code>. <br><h4>Unified touch adjustment</h4>\n<a href=\"https://www.chromestatus.com/feature/4895751150764032\">Touch adjustment</a> changes the <code>TouchEvent</code> and the corresponding <code>PointerEvent</code> target to a best target within the touch area. <code>TouchEvent</code> coordinates will not be changed.<br><h4>Treat long-press as a user gesture</h4>Long-press is now <a href=\"https://www.chromestatus.com/feature/5726389672083456\">considered a user gesture</a> because it indicates user interaction with the page. This allows a web app to call restricted APIs like <code>navigator.vibrate()</code> on long-press to match native behavior.<br><h3>Media</h3>\n<h4>WebAudio: add user selectable automation rate for AudioParams</h4>The <code><a href=\"https://www.chromestatus.com/feature/5164143287992320\">AudioParam.automationRate</a></code><br>attribute allows the user to select whether the <code>AudioParam</code> is either <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioParam\">\"a-rate\" or \"k-rate\"</a>. Most but not all <code>AudioParam</code> attributes allow changing the rate, as given in the spec.  <br>For example, <code>BiquadFilterNode</code> with default \"a-rate\" automation is expensive to compute due to the complex relationship between the parameters and the filter coefficients. If this fast automation is not needed (the most typical case), the parameters can be set to \"k-rate\".<br><h3>ServiceWorker</h3>\n<h4>Improve cache management for service worker scripts</h4>The <a href=\"https://www.google.com/url?q=https://developers.google.com/web/updates/2018/06/fresher-sw&amp;sa=D&amp;ust=1528131689105000&amp;usg=AFQjCNGv9hzzd-Ryd5bLVv_LU4ZRVPHKSw\">HTTP cache will be ignored</a> when requesting updates to the service worker. Requests for <code>importScripts</code> will still go through the HTTP cache. But this is just the default. A new registration option, <code>ServiceWorkerRegistration.updateViaCache</code> is available that offers control over this behavior.<br>Previously, HTTP requests that checked for updates to the service worker were fulfilled by the HTTP cache by default. If a Cache-Control header was inadvertently set on a service worker, then service worker updates could be delayed, and if your service worker contained versioning information for your sites other assets, those updates would also be delayed.<br><h3>WebRTC</h3>\n<h4>RTCRtpSender.getParameters()/setParameters() return and control track encoding</h4>\n<div><div>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters\">getParameters()</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters\">setParameters()</a> methods return or update the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender\">RTCRtpSender</a> object's current parameters for how the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track\">RTCRtpSender.track</a> property is encoded and transmitted to a remote <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver\">RTCRtpReceiver</a>. These methods enable you to change encoding parameters for WebRTC streams such as the maximum transmission bitrate without doing any SDP munging or renegotiation.</div></div>\n<h2><span>Deprecations and interoperability improvements</span></h2>Chrome sometimes deprecates, removes, or changes features to increase interoperability with other browsers. This version of Chrome includes the following such changes. <br><h4>Deprecate and remove negative brightness values in filter</h4>For compliance with specification, filter's <code>brightness()</code> function <a href=\"https://www.chromestatus.com/feature/5708036203085824\">no longer accepts negative values</a>.<br><h4>Remove document.createTouch</h4>The <code>document.createTouch()</code> method <a href=\"https://www.chromestatus.com/feature/5668612064935936\">is being removed</a> because the <code>Touch()</code> constructor has been supported since Chrome 48.<br><h4>Remove Document.selectedStylesheetSet and Document.preferredStylesheetSet</h4>The <code>Document.selectedStylesheetSet</code> and <code>Document.preferredStylesheetSet</code> attributes are <a href=\"https://www.chromestatus.com/feature/6452340664041472\">removed because they are non-standard</a> and only implemented by Chrome and WebKit. The standard versions of these attributes were removed from the spec in 2016.<br><h4>WEBGL_compressed_texture_atc</h4>Previously, Chrome provided the AMD_compressed_ATC_texture formats. Hardware support has dwindled to near-zero, so the extension has been rejected by the WebGL Working Group. <a href=\"https://www.chromestatus.com/feature/5253912718213120\">Support for it has been removed</a>.","content":"Unless otherwise noted, changes described below apply to the newest Chrome Beta channel release for Android, Chrome OS, Linux, macOS, and Windows. View a complete list of the features in Chrome 68 on <a href=\"https://www.chromestatus.com/features#milestone%3D67\">ChromeStatus.com</a>. Chrome 68 is beta as of June 7, 2018.<br><h2><span><br></span></h2>\n<h2><span>New add to home screen behavior for progressive web apps</span></h2>We've heard from developers that they want more control over how and when the add to home screen prompt appears. Starting in Chrome 68 on Android, the behavior is changing to provide more control over when the prompt appears. Developers can now provide additional context for their add to home screen experience, and improve the click-through rate.<br><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody>\n<tr><td><img height=\"188\" src=\"https://lh5.googleusercontent.com/dPlvmGs4OHiLOK5O5604HJOUuTv8TQKAjmrorf8Ou_GeJ-5YbemZzE91katd482IZoqv2tjoWoPSqEJzo7Ft2isJ7mdQap4-d_q5xfVmORUJcoCFttC2BqYWj-ttlzCsVFvvab7J\" width=\"320\"></td></tr>\n<tr><td class=\"tr-caption\">Add to home screen dialog</td></tr>\n</tbody></table>\n<span></span><br><br>If a site meets the <a href=\"https://developers.google.com/web/fundamentals/app-install-banners/#criteria\">add to home screen criteria</a>, Chrome will fire a <code>beforeinstallprompt</code> event, and no longer automatically show the add to home screen banner. Instead, when the event has fired, developers can save the event and add a button or other UI element to the app to indicate it can be installed. When the user clicks the install button, developers can call <code>prompt()</code> on the saved <code>beforeinstallprompt</code> event to show the new add to home screen modal dialog. Although the <code>beforeinstallprompt</code> event may be fired without a user gesture, calling <code>prompt()</code> requires one.<br><br><br><pre>let installPromptEvent;<br><br>window.addEventListener('beforeinstallprompt', (event) =&gt; {<br>  // Prevent Chrome &lt;= 67 from automatically showing the prompt<br>  event.preventDefault();<br>  // Stash the event so it can be triggered later.<br>  installPromptEvent = event;<br>  // Update UI notify the user they can add to home screen<br>  document.querySelector('#install-button').disabled = false;<br>});<br><br></pre>\n<br>As a temporary measure to provide developers with time to handle the <code>beforeinstallpromptevent</code> and add an install button to their app, Chrome will show a <a href=\"https://developers.google.com/web/updates/2018/06/a2hs-updates#the_mini-infobar\">mini-infobar</a> the first time the user visits a site that meets the <a href=\"https://developers.google.com/web/fundamentals/app-install-banners/#criteria\">add to home screen criteria</a>. Once dismissed, the mini-infobar will not be shown again until a sufficient amount of time (currently 3 months) has passed.<br><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody>\n<tr><td><img height=\"84\" src=\"https://lh4.googleusercontent.com/Q8_b9dOtwbqjFJZRAIUcVdMWH0hNfQWJyDf_Scbe22qbn6APp6HktlxTAmepkmetmmzpNIu_dq8-nWHnik5GvmBrjkciUtDDkyDh2y636bBpVsX1TyO4TAxY9IvydimTLGmAhkro\" width=\"318\"></td></tr>\n<tr><td class=\"tr-caption\">Add to home screen mini infobar</td></tr>\n</tbody></table>\n<span></span><span></span><br><br>See <a href=\"https://developers.google.com/web/updates/2018/06/a2hs-updates\">Changes to add home screen behavior</a> for complete details, code samples and screenshots of the new UI elements.<br><h2><span>Payment Handler API</span></h2>\n<a href=\"https://www.w3.org/TR/payment-request/\">The Payment Request API</a> brought the web a simpler, faster way to check out online by combining a seamless native-browser UI with a user's preferred form of payment and shipping addresses. <br><br>The just-launched <a href=\"https://www.w3.org/TR/payment-handler/\">Payment Handler API</a> extends the reach of Payment Request by enabling <a href=\"https://developers.google.com/web/updates/2018/06/payment-handler-api\">web-based payment apps</a> to facilitate payments directly within the Payment Request experience.<br><br><br><pre>const request = new PaymentRequest([{<br>  // Your custom payment method identifier comes here<br>  supportedMethods: 'https://bobpay.xyz/pay'<br>}], {<br>  total: {<br>    label: 'total',<br>    amount: { value: '10', currency: 'USD' }<br>  }<br>});</pre>\n<br><table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\"><tbody>\n<tr><td><img height=\"711\" src=\"https://lh3.googleusercontent.com/eE0nGA0tfrrmv8MtNSMx-wuQbYQZgrOhgb8qSU5pMjjxEohvFjHi6As6FTBCMfxxKTesD8RevNoZZZ5_WZXxj71hfoqnTVkVkE2RBeoVFK4uF14JsSjV_pBN3ghErXZktHQRweNw\" width=\"400\"></td></tr>\n<tr><td class=\"tr-caption\"><em>Making a payment through the Payment Request API. \"Pay with BobPay\" is a custom payment method built with the Payment Handler API.</em></td></tr>\n</tbody></table>\n<br><h2><span>Protecting users from unwanted destinations</span></h2>In this version of Chrome we are changing a few user interface behaviors to improve users' experience.<br><h2>Require user gesture for redirects in cross-origin iframes</h2>Unless forbidden by the <code>sandbox</code> attribute, content embedded in an <code>iframe</code> can generally navigate the top-level browsing context to a different website. This functionality is used by many types of websites, including single-sign-on providers and payment processors. Unfortunately, this behavior is also a common abuse vector, redirecting users to unwanted destinations without their knowledge or consent.<br><br>Beginning in Chrome 68, content embedded in an iframe <a href=\"https://www.chromestatus.com/feature/5629582019395584\">will require a user gesture to navigate</a> the top-level browsing context to a different origin. Similar to pop-up blocking, when this protection triggers users will see Chrome UI giving them the option to allow the redirect the continue. <br><br>A demonstration illustrates the behavior. The <a href=\"https://ndossougbe.github.io/web-sandbox/interventions/3p-redirect/\">demo behind this link</a> will exhibit the old behavior in Chrome 67 and early. The improved behavior works in Chrome 68.<br><h2>Block tab-under navigations</h2>A tab-under is when a page both opens a popup to some destination <strong>and</strong> navigates the opener page to some third-party content. Typically this behavior is used to send the user to a desired destination while also creating another tab with an unwanted destination. Similar to pop-ups, <a href=\"https://www.chromestatus.com/feature/5675755719622656\">Chrome will prevent these</a> unwanted navigations and instead show native UI to the user so they can choose whether to follow this redirect to the new direction.<br><h2><span>The Page Lifecycle API</span></h2>Application lifecycle is a key way that modern operating systems manage resources. On Android, iOS and recently Windows, apps can be started and stopped at any time by the platform. This allows these platforms to streamline and reallocate resources where they best benefit the user.<br><br>On the web, there has historically been no such lifecycle, and apps can be alive indefinitely. With large numbers of web apps (and tabs) running, critical resources such as memory, CPU, battery, and network can be oversubscribed, leading to a bad end-user experience.<br><br>In Chrome 68, developers will be able to listen for and respond to system-initiated CPU suspension of backgrounded tabs using the new <code><a href=\"https://github.com/WICG/page-lifecycle/blob/master/README.md#api\">freeze</a></code> and <code>resume</code> events. In cases where a frozen page needs to be discarded to conserve memory, the <code><a href=\"https://github.com/WICG/page-lifecycle/blob/master/README.md#handling-of-discarding-on-next-load\">document.wasDiscarded</a></code> property is now available so developers can restore view state (saved in the <code>freeze</code> event) when the user refocuses the tab and the page is reloaded. Developers wanting to test these events in their own applications can visit <code>chrome://discards</code> to simulate page freezing, resuming, and discarding.<br><br>For more information on the Page Lifecycle API, refer to the <a href=\"https://wicg.github.io/page-lifecycle/spec.html\">specification</a> or the <a href=\"https://github.com/WICG/page-lifecycle\">explainer on GitHub</a>.<br><h2><span>Other features in this release</span></h2>\n<h3>CSS</h3>\n<h4>Accept two values in the overflow shorthand </h4>The <code>overflow</code> shorthand <a href=\"https://www.chromestatus.com/feature/5090725653905408\">will accept two values</a>, making it possible to set the horizontal and vertical overflow to different values. If two values are specified, the first is <code>overflow-x</code> and the second is <code>overflow-y</code>. Changing the shorthand allows developers to specify a single statement where previously two were required.<br><h4>CSS position values with three parts</h4>The <code>object-position</code> and <code>perspective-origin</code> properties <a href=\"https://www.chromestatus.com/feature/5116559680864256\">will no longer accept three-part values</a> like <code>\"top right 20%\"</code>. This also applies for positions in basic shapes and gradients. Valid position values will now always have 1, 2 or 4 parts. Deprecation of 3-part values occurred in Chrome 66.<br><h4>Support 'x' as a resolution unit</h4>\n<a href=\"https://drafts.csswg.org/css-values-4/\">CSS Values and Units Module Level 4</a> defines a new resolution unit called \"dot per pixel\" for support of high-resolution displays. This change adds <code>'x'</code> as a synonym for the existing abbreviation, <code>'dppx'</code>.<br><h4>Unprefix CSS \"grab\" and \"grabbing\" values for cursor property</h4>The CSS values \"grab\" and \"grabbing\" change the mouse cursor to an open hand or closed hand, commonly used to indicate that something can be grabbed or is currently grabbed. Prefixed versions of these properties have been supported since Chrome 1. With this change <a href=\"https://www.chromestatus.com/feature/5575087101050880\">Chrome will support</a> the standard, unprefixed versions of these values.<br><h3>Gamepads</h3>\n<h4>High resolution timestamp for Gamepad</h4>\n<code><a href=\"https://www.chromestatus.com/feature/5751747209330688\">Gamepad.timestamp</a></code> now uses a <code>DOMHighResTimeStamp</code>, a high resolution monotonic time with microsecond resolution. Timestamps are measured as offsets from the <code>PerformanceTiming.navigationStart</code> property.<br><h3>Custom elements</h3>\n<h4>New customElements.upgrade()</h4>This function invokes custom element constructors for custom elements whose constructors are not called yet explicitly. If a custom element is created with the <code>innerHTML</code> setter and its parent node is not connected to a document, the custom element constructor is not called until it's connected. This method explicitly <a href=\"https://www.chromestatus.com/feature/5967337471606784\">allows developers to fully control the timing</a> of custom element constructor calls regardless of connectedness.<br><h3>Input</h3>\n<h4>Keyboard lock</h4>While in fullscreen, <a href=\"https://www.chromestatus.com/feature/5642959835889664\">this API</a> allows apps to receive keys that are normally handled by the system or the browser like <code>Cmd-Tab</code>/<code>Alt-Tab</code>, or <code>Esc</code>. Users can escape keyboard lock (and fullscreen) by holding the <code>Esc</code> key for two seconds.<br><h4>Make PointerEvent.fromElement and PointerEvent.toElement null</h4>To improve consistency with other browsers, <code>PointerEvents</code> for <code>fromElement</code> and <code>toElement</code> fields not follow the <a href=\"https://www.w3.org/TR/pointerevents/\">Pointer Events Level 2</a> spec by <a href=\"https://www.chromestatus.com/feature/5836424855158784\"> always reporting null</a>.<br>In a <code>MouseEvent</code> (from which a <code>PointerEvent</code> inherits these fields), <code>fromElement</code> and <code>toElement</code> are non-standard, and have been inconsistent among major browsers for many years. Moreover, there are standard and consistent alternatives already: <code>target</code> and <code>relatedTarget</code>. <br><h4>Unified touch adjustment</h4>\n<a href=\"https://www.chromestatus.com/feature/4895751150764032\">Touch adjustment</a> changes the <code>TouchEvent</code> and the corresponding <code>PointerEvent</code> target to a best target within the touch area. <code>TouchEvent</code> coordinates will not be changed.<br><h4>Treat long-press as a user gesture</h4>Long-press is now <a href=\"https://www.chromestatus.com/feature/5726389672083456\">considered a user gesture</a> because it indicates user interaction with the page. This allows a web app to call restricted APIs like <code>navigator.vibrate()</code> on long-press to match native behavior.<br><h3>Media</h3>\n<h4>WebAudio: add user selectable automation rate for AudioParams</h4>The <code><a href=\"https://www.chromestatus.com/feature/5164143287992320\">AudioParam.automationRate</a></code><br>attribute allows the user to select whether the <code>AudioParam</code> is either <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioParam\">\"a-rate\" or \"k-rate\"</a>. Most but not all <code>AudioParam</code> attributes allow changing the rate, as given in the spec.  <br>For example, <code>BiquadFilterNode</code> with default \"a-rate\" automation is expensive to compute due to the complex relationship between the parameters and the filter coefficients. If this fast automation is not needed (the most typical case), the parameters can be set to \"k-rate\".<br><h3>ServiceWorker</h3>\n<h4>Improve cache management for service worker scripts</h4>The <a href=\"https://www.google.com/url?q=https://developers.google.com/web/updates/2018/06/fresher-sw&amp;sa=D&amp;ust=1528131689105000&amp;usg=AFQjCNGv9hzzd-Ryd5bLVv_LU4ZRVPHKSw\">HTTP cache will be ignored</a> when requesting updates to the service worker. Requests for <code>importScripts</code> will still go through the HTTP cache. But this is just the default. A new registration option, <code>ServiceWorkerRegistration.updateViaCache</code> is available that offers control over this behavior.<br>Previously, HTTP requests that checked for updates to the service worker were fulfilled by the HTTP cache by default. If a Cache-Control header was inadvertently set on a service worker, then service worker updates could be delayed, and if your service worker contained versioning information for your sites other assets, those updates would also be delayed.<br><h3>WebRTC</h3>\n<h4>RTCRtpSender.getParameters()/setParameters() return and control track encoding</h4>\n<div><div>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters\">getParameters()</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters\">setParameters()</a> methods return or update the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender\">RTCRtpSender</a> object's current parameters for how the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track\">RTCRtpSender.track</a> property is encoded and transmitted to a remote <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpReceiver\">RTCRtpReceiver</a>. These methods enable you to change encoding parameters for WebRTC streams such as the maximum transmission bitrate without doing any SDP munging or renegotiation.</div></div>\n<h2><span>Deprecations and interoperability improvements</span></h2>Chrome sometimes deprecates, removes, or changes features to increase interoperability with other browsers. This version of Chrome includes the following such changes. <br><h4>Deprecate and remove negative brightness values in filter</h4>For compliance with specification, filter's <code>brightness()</code> function <a href=\"https://www.chromestatus.com/feature/5708036203085824\">no longer accepts negative values</a>.<br><h4>Remove document.createTouch</h4>The <code>document.createTouch()</code> method <a href=\"https://www.chromestatus.com/feature/5668612064935936\">is being removed</a> because the <code>Touch()</code> constructor has been supported since Chrome 48.<br><h4>Remove Document.selectedStylesheetSet and Document.preferredStylesheetSet</h4>The <code>Document.selectedStylesheetSet</code> and <code>Document.preferredStylesheetSet</code> attributes are <a href=\"https://www.chromestatus.com/feature/6452340664041472\">removed because they are non-standard</a> and only implemented by Chrome and WebKit. The standard versions of these attributes were removed from the spec in 2016.<br><h4>WEBGL_compressed_texture_atc</h4>Previously, Chrome provided the AMD_compressed_ATC_texture formats. Hardware support has dwindled to near-zero, so the extension has been rejected by the WebGL Working Group. <a href=\"https://www.chromestatus.com/feature/5253912718213120\">Support for it has been removed</a>.","enclosure":{},"categories":["beta"],"color":"lightgreen","category":"Chromium Blog","date":"2018-06-07 21:17:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Evolving Chrome's security indicators","pubDate":"2018-05-17 16:04:00","link":"http://blog.chromium.org/2018/05/evolving-chromes-security-indicators.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-2328530003783271191","author":"Chrome Blog","thumbnail":"https://4.bp.blogspot.com/-NOXiIl70UqI/Wv18vLtJqjI/AAAAAAAAA6A/8vjHdMA4ico5ZT9F_i7O5_Rg2VE534e-ACLcBGAs/s72-c/pasted%2Bimage%2B0%2B%25283%2529.png","description":"Previously, we posted <a href=\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\">a proposal</a> to mark all HTTP pages as definitively “not secure” and remove secure indicators for HTTPS pages. HTTPS usage on the web has <a href=\"https://transparencyreport.google.com/https/overview\">taken off</a> as we’ve evolved Chrome security indicators. Later this year, we’ll be taking several more steps along this path.<br><br>Users should expect that the web is safe by default, and they’ll be warned when there’s an issue. Since we’ll soon <a href=\"https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html\">start marking</a> all HTTP pages as “not secure”, we’ll step towards removing Chrome’s positive security indicators so that the default unmarked state is secure. Chrome will roll this out over time, starting by removing the “Secure” wording and HTTPS scheme in September 2018 (Chrome 69).<br><br><div class=\"separator\"><a href=\"https://4.bp.blogspot.com/-NOXiIl70UqI/Wv18vLtJqjI/AAAAAAAAA6A/8vjHdMA4ico5ZT9F_i7O5_Rg2VE534e-ACLcBGAs/s1600/pasted%2Bimage%2B0%2B%25283%2529.png\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"310\" data-original-width=\"640\" src=\"https://4.bp.blogspot.com/-NOXiIl70UqI/Wv18vLtJqjI/AAAAAAAAA6A/8vjHdMA4ico5ZT9F_i7O5_Rg2VE534e-ACLcBGAs/s1600/pasted%2Bimage%2B0%2B%25283%2529.png\"></a></div>\n<div>Chrome treatment for HTTPS pages</div>\n<br><br>Previously, HTTP usage was too high to mark all HTTP pages with a strong red warning, but in October 2018 (Chrome 70), we’ll start showing the red “not secure” warning when users enter data on HTTP pages.<br><br><div class=\"separator\"><a href=\"https://3.bp.blogspot.com/-MkJEkHnXcXc/Wv181DQednI/AAAAAAAAA6E/95MwjxqK7awaCgr_Z6xRNWVi0Ztf0-ncACLcBGAs/s1600/Treatment%2Bof%2BHTTP%2BPages%2Bwith%2BUser%2BInput.gif\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"338\" data-original-width=\"544\" src=\"https://3.bp.blogspot.com/-MkJEkHnXcXc/Wv181DQednI/AAAAAAAAA6E/95MwjxqK7awaCgr_Z6xRNWVi0Ztf0-ncACLcBGAs/s1600/Treatment%2Bof%2BHTTP%2BPages%2Bwith%2BUser%2BInput.gif\"></a></div>\n<div>Chrome 70 treatment for HTTP pages with user input</div>\n<br><br>We hope these changes continue to pave the way for a web that’s easy to use safely, by default. HTTPS is cheaper and easier than ever before, and unlocks powerful capabilities -- so don’t wait to migrate to HTTPS! Check out our <a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">set-up guides</a> to get started.<br><br>Posted by Emily Schechter, Product Manager, Chrome Security","content":"Previously, we posted <a href=\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\">a proposal</a> to mark all HTTP pages as definitively “not secure” and remove secure indicators for HTTPS pages. HTTPS usage on the web has <a href=\"https://transparencyreport.google.com/https/overview\">taken off</a> as we’ve evolved Chrome security indicators. Later this year, we’ll be taking several more steps along this path.<br><br>Users should expect that the web is safe by default, and they’ll be warned when there’s an issue. Since we’ll soon <a href=\"https://security.googleblog.com/2018/02/a-secure-web-is-here-to-stay.html\">start marking</a> all HTTP pages as “not secure”, we’ll step towards removing Chrome’s positive security indicators so that the default unmarked state is secure. Chrome will roll this out over time, starting by removing the “Secure” wording and HTTPS scheme in September 2018 (Chrome 69).<br><br><div class=\"separator\"><a href=\"https://4.bp.blogspot.com/-NOXiIl70UqI/Wv18vLtJqjI/AAAAAAAAA6A/8vjHdMA4ico5ZT9F_i7O5_Rg2VE534e-ACLcBGAs/s1600/pasted%2Bimage%2B0%2B%25283%2529.png\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"310\" data-original-width=\"640\" src=\"https://4.bp.blogspot.com/-NOXiIl70UqI/Wv18vLtJqjI/AAAAAAAAA6A/8vjHdMA4ico5ZT9F_i7O5_Rg2VE534e-ACLcBGAs/s1600/pasted%2Bimage%2B0%2B%25283%2529.png\"></a></div>\n<div>Chrome treatment for HTTPS pages</div>\n<br><br>Previously, HTTP usage was too high to mark all HTTP pages with a strong red warning, but in October 2018 (Chrome 70), we’ll start showing the red “not secure” warning when users enter data on HTTP pages.<br><br><div class=\"separator\"><a href=\"https://3.bp.blogspot.com/-MkJEkHnXcXc/Wv181DQednI/AAAAAAAAA6E/95MwjxqK7awaCgr_Z6xRNWVi0Ztf0-ncACLcBGAs/s1600/Treatment%2Bof%2BHTTP%2BPages%2Bwith%2BUser%2BInput.gif\" imageanchor=\"1\"><img border=\"0\" data-original-height=\"338\" data-original-width=\"544\" src=\"https://3.bp.blogspot.com/-MkJEkHnXcXc/Wv181DQednI/AAAAAAAAA6E/95MwjxqK7awaCgr_Z6xRNWVi0Ztf0-ncACLcBGAs/s1600/Treatment%2Bof%2BHTTP%2BPages%2Bwith%2BUser%2BInput.gif\"></a></div>\n<div>Chrome 70 treatment for HTTP pages with user input</div>\n<br><br>We hope these changes continue to pave the way for a web that’s easy to use safely, by default. HTTPS is cheaper and easier than ever before, and unlocks powerful capabilities -- so don’t wait to migrate to HTTPS! Check out our <a href=\"https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https\">set-up guides</a> to get started.<br><br>Posted by Emily Schechter, Product Manager, Chrome Security","enclosure":{"thumbnail":"https://4.bp.blogspot.com/-NOXiIl70UqI/Wv18vLtJqjI/AAAAAAAAA6A/8vjHdMA4ico5ZT9F_i7O5_Rg2VE534e-ACLcBGAs/s72-c/pasted%2Bimage%2B0%2B%25283%2529.png"},"categories":[],"color":"lightgreen","category":"Chromium Blog","date":"2018-05-17 16:04:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"The State of the Web at Google I/O 2018","pubDate":"2018-05-09 00:21:00","link":"http://blog.chromium.org/2018/05/the-state-of-web-at-google-io-2018.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-2421644324573175607","author":"Chrome Blog","thumbnail":"https://img.youtube.com/vi/Ay-mdLMDtbs/default.jpg","description":"The web is a global treasure, and has many strengths we all enjoy. It is a distribution platform like no other, providing people around the world access to a diverse range of content and enabling businesses to reach customers wherever they are. Underpinning the web’s success is its community and a set of fundamentally open standards, which ensures it remains dynamic and available to all.<br><br>From PageRank to Chromium, Google has been deeply invested in the web’s continued success. This week at Google I/O, our annual developer conference, we gave a State of the Union presentation to catalog some of our recent efforts to help the web continue to thrive and work well for everyone. We recap the key themes below, but encourage you to check out all the talks <a href=\"https://www.youtube.com/watch?v=ogfYd705cRs&amp;list=PLOU2XLYxmsIIjoHFYLtwS-_dKrtLhhk_D\">on YouTube</a>.<br><br><div class=\"separator\"></div>\n<br><b>Service Worker</b><br>The introduction of the <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\">Service Worker API</a> is one of the most significant improvements to the web in recent history. It frees developers from the limited lifecycle of pages, working in the background to intercept network requests and handle incoming events to enable web apps to work offline. With service workers your site can receive push notifications, synchronize data in the background, and more. Apple rolled out support for <a href=\"https://webkit.org/blog/8090/workers-at-your-service/\">service workers in Safari 11.1</a> on <a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html\">iOS and MacOS</a> this March and Microsoft Edge <a href=\"https://blogs.windows.com/msedgedev/2018/04/30/edgehtml-17-april-2018-update/\">shipped service workers</a> just last week — <b>meaning that every major modern browser now supports the standard</b>. Using service workers can be a big change to your architecture, so to make it simpler we created <a href=\"https://developers.google.com/web/tools/workbox/\">Workbox</a>, which wraps up many common, powerful service worker patterns into an easy-to-use API. We've just released version 3 of this library, built around modules allowing you to use only the features that you need.<br><br><b>Progressive Web Apps (PWAs)</b><br>Service workers provide the backbone for many of the capabilities of a PWA. Companies around the world, in many different industries, have been seeing incredible success building PWAs. Starbucks, who launched their PWA site last year, saw a 2X increase in their daily active users. In fact, across advertising sites that we measured, <b>when a site switches to a PWA they see on average a mobile conversion rate boost of 20%.</b><br><br>Many early PWAs were focused on mobile, and the benefits now also extend to desktop. Chrome will soon provide support for users to “install” PWAs to their desktop. The site will get its own icon and launch in a standalone window, while retaining powerful features that one expects in a browser like find in page, shareable URLs, Google Cast support, and more. At I/O we demonstrated how Spotify is deploying their rich media experience as a desktop PWA. “Install” support for desktop PWA’s will be coming to ChromeOS in Chrome 67 in early June, and on Windows and macOS later this year.<br><br><div class=\"separator\"></div>\n<br><br><b>WebAssembly</b><br><a href=\"http://webassembly.org/\">WebAssembly</a> enables websites to run high-performance, low-level code written in languages like C or C++, and opens up entirely new classes of content on the web platform. In March, <a href=\"https://web.autocad.com/\">AutoCAD from Autodesk</a> took a 35-year-old-codebase — older than the web itself — and compiled it to run directly inside a browser using WebAssembly. AutoCAD is now just a link away, meaning you can make edits to your CAD drawing directly in a browser, regardless of device or operating system. AutoCAD’s engineering team has a single shared C++ codebase, and when their desktop team makes changes, they are easily integrated into the AutoCAD web app.<br><br>If you’re interested in learning how to port code or write your own, check out the <a href=\"https://codelabs.developers.google.com/codelabs/hour-chipmunk/index.html?index=..%2F..%2Findex#0\">WebAssembly codelab</a>, demonstrating the interplay between C libraries and the DOM. Whether you’re using a complex library written in C, want to bring a new codec into the web platform, or using an engine such as Unity or Unreal Engine, WebAssembly is here to help.<br><br><b>Lighthouse</b><br><a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a> is a tool for analyzing the quality of your website, giving you clear measurements of your site’s performance and guidance for improving your users’ experience. It can be accessed directly from inside Chrome’s DevTools, run from the command-line, or integrated with other development products. In 2018 alone, half a million developers are running Lighthouse against their sites on a regular basis. We know that the web changes fast — Lighthouse can help you stay up-to-date with the latest performance best-practices. Lighthouse 3.0, announced at I/O, will be available to everyone later this week.<br><br>Lighthouse gives you clarity into your site’s load performance in a controlled environment. However, if you want to see how your site performs for real users in the real world, then check out the <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">Chrome User Experience Report</a>. The report now provides origin-level performance metrics for the four million most visited websites. To learn more about how these and other tools can help you get a complete view of your site’s performance, check out our <a href=\"http://g.co/dev/SpeedToolsOverview\">speed tools infographic</a>.<br><br><b>AMP</b><br><a href=\"http://ampproject.org/\">AMP</a> is a web component library and ecosystem for building reliably fast websites with great user experience at scale. <b>There are now over six billion AMP pages from 46 million domains, with a median load time of less than one second from Google Search.</b> Businesses are seeing success with AMP: <a href=\"https://www.aliexpress.com/\">AliExpress</a>, the global online retail marketplace, recently launched a new mobile site as an AMP-driven Progressive Web App. <b>The new site increased their conversion rate for non-search traffic by an incredible 31%.</b><br><br>Content consumption on mobile is changing, with bite-sized, fullscreen storytelling formats becoming increasingly popular. To help meet the needs of web publishers, the AMP project recently announced the development of <a href=\"https://www.ampproject.org/stories/\">AMP stories</a>, a rich set of web components built for mobile-first storytelling. The format is under continued development, and we encourage you to experiment with <a href=\"https://www.ampproject.org/docs/design/visual_story\">building your own stories</a> and give the AMP team your feedback.<br><br><div class=\"separator\"></div>\n<br><br><b>Web Packaging</b><br><a href=\"https://github.com/WICG/webpackage\">Web Packaging</a> is a set of emerging technologies that we believe will redefine how web content is distributed on the web and shared between users. It allows publishers to bundle their content for distribution by other parties, while keeping the integrity guarantees of HTTPS. As part of exploring the <a href=\"https://tools.ietf.org/html/draft-yasskin-webpackage-use-cases-01#section-2\">novel use cases</a> enabled by Web Packaging, we realized that there was an interesting opportunity for AMP. Through collaboration with the AMP team and the web community, we were able to design a solution that allows AMP documents to retain the publisher's original URL when served from the AMP cache.<br><br>As a showcase of our efforts, AMP project collaborators <a href=\"https://www.foodnetwork.com/\">Food Network</a> and <a href=\"https://www.pinterest.com/\">Pinterest</a> have built demos of Web Packaging, such as the one below. If you are curious to learn more, the AMP team <a href=\"https://amphtml.wordpress.com/2018/05/08/a-first-look-at-using-web-packaging-to-improve-amp-urls/\">wrote an article that goes into more detail</a> about how Web Packaging benefits users and publishers. Beyond the AMP application, we are excited about what Web Packaging technologies will enable and are looking forward to refine our thinking with your help.<br><br><div class=\"separator\"><a href=\"https://3.bp.blogspot.com/-ua60cq2bCcY/WvI6e9w8jUI/AAAAAAAAA5o/OFVlSZWZgRQZ4QkrXrHZUvYw0a42k18vgCLcBGAs/s1600/unnamed%2B%25281%2529.gif\" imageanchor=\"1\"><img data-original-height=\"786\" data-original-width=\"394\" height=\"320\" src=\"https://3.bp.blogspot.com/-ua60cq2bCcY/WvI6e9w8jUI/AAAAAAAAA5o/OFVlSZWZgRQZ4QkrXrHZUvYw0a42k18vgCLcBGAs/s320/unnamed%2B%25281%2529.gif\" width=\"160\"></a></div>\n<div>A demo using Web Packaging with an AMP page from Google Search</div>\n<br><b>Polymer</b><br>Polymer is a JavaScript library that helps you create custom reusable web components to share with other developers or combine to build performant, maintainable apps. At I/O we launched version 3.0 of the library, which makes some significant upgrades to the Polymer ecosystem. We’ve completed support for using npm as the package management system and ES6 modules as the unit of composition, making it easy to use Polymer-based web components alongside your other favorite web development tools and frameworks.<br><br>We’ve also introduced <a href=\"https://github.com/Polymer/lit-element\">LitElement</a>, a new web component base-class that combines the expressive power of <a href=\"https://github.com/Polymer/lit-html\">Lit-HTML</a> with web components to make it even easier to create lightweight, reactive components using a modern and expressive templating syntax.<br><br>We’re also releasing the <a href=\"https://github.com/Polymer/pwa-starter-kit\">PWA Starter Kit</a>, a comprehensive starting point for building web component-driven PWAs that are fast, reliable, responsive, themable, and score top marks in our Lighthouse PWA and performance criteria.<br><br><b>Angular</b><br>At I/O this year the Angular team gave an overview of the growth of the community, and touched on some of the exciting <a href=\"https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4\">new capabilities that have landed across the core framework, CLI, and Angular Material library in version 6</a>. Angular is used by millions of developers and has built up a huge amount of momentum and a fantastic ecosystem. New commands released in version 6 like `ng update` and `ng add` will keep your application up to date and help developers move faster as the Angular team continues to balance stability and innovation.<br><br>The Angular team also gave a sneak peek at some of the improvements they are making under the hood of Angular with <a href=\"https://github.com/angular/angular/issues/21706\">Project Ivy</a>. This will make Angular simpler to debug and faster to compile and run, in a way that works with existing applications. The team showed demonstrated the utility of these improvements in the form of a small Hello World application where the Angular features that weren't used were automatically removed from the application's JavaScript bundle.<br><br><br><br>Our mission at Google and in Chrome is to work with the community to create experiences that are fast, integrated, reliable, and engaging. We’re excited by the powerful new capabilities that have come to the open web platform, and the comprehensive set of tools that enable you to rapidly build high quality sites for your users. To stay up to date on the latest advancements in the web, visit our <a href=\"https://developers.google.com/web/\">developer portal</a> or check out the talks from this year’s I/O on the <a href=\"https://www.youtube.com/user/GoogleDevelopers\">Google Developers YouTube channel</a>. And we’d love to see you at the upcoming <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit</a> later this year.<br><br>Posted by Malte Ubl and Ben Galbraith<br><div><br></div>\n","content":"The web is a global treasure, and has many strengths we all enjoy. It is a distribution platform like no other, providing people around the world access to a diverse range of content and enabling businesses to reach customers wherever they are. Underpinning the web’s success is its community and a set of fundamentally open standards, which ensures it remains dynamic and available to all.<br><br>From PageRank to Chromium, Google has been deeply invested in the web’s continued success. This week at Google I/O, our annual developer conference, we gave a State of the Union presentation to catalog some of our recent efforts to help the web continue to thrive and work well for everyone. We recap the key themes below, but encourage you to check out all the talks <a href=\"https://www.youtube.com/watch?v=ogfYd705cRs&amp;list=PLOU2XLYxmsIIjoHFYLtwS-_dKrtLhhk_D\">on YouTube</a>.<br><br><div class=\"separator\"></div>\n<br><b>Service Worker</b><br>The introduction of the <a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\">Service Worker API</a> is one of the most significant improvements to the web in recent history. It frees developers from the limited lifecycle of pages, working in the background to intercept network requests and handle incoming events to enable web apps to work offline. With service workers your site can receive push notifications, synchronize data in the background, and more. Apple rolled out support for <a href=\"https://webkit.org/blog/8090/workers-at-your-service/\">service workers in Safari 11.1</a> on <a href=\"https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_11_1.html\">iOS and MacOS</a> this March and Microsoft Edge <a href=\"https://blogs.windows.com/msedgedev/2018/04/30/edgehtml-17-april-2018-update/\">shipped service workers</a> just last week — <b>meaning that every major modern browser now supports the standard</b>. Using service workers can be a big change to your architecture, so to make it simpler we created <a href=\"https://developers.google.com/web/tools/workbox/\">Workbox</a>, which wraps up many common, powerful service worker patterns into an easy-to-use API. We've just released version 3 of this library, built around modules allowing you to use only the features that you need.<br><br><b>Progressive Web Apps (PWAs)</b><br>Service workers provide the backbone for many of the capabilities of a PWA. Companies around the world, in many different industries, have been seeing incredible success building PWAs. Starbucks, who launched their PWA site last year, saw a 2X increase in their daily active users. In fact, across advertising sites that we measured, <b>when a site switches to a PWA they see on average a mobile conversion rate boost of 20%.</b><br><br>Many early PWAs were focused on mobile, and the benefits now also extend to desktop. Chrome will soon provide support for users to “install” PWAs to their desktop. The site will get its own icon and launch in a standalone window, while retaining powerful features that one expects in a browser like find in page, shareable URLs, Google Cast support, and more. At I/O we demonstrated how Spotify is deploying their rich media experience as a desktop PWA. “Install” support for desktop PWA’s will be coming to ChromeOS in Chrome 67 in early June, and on Windows and macOS later this year.<br><br><div class=\"separator\"></div>\n<br><br><b>WebAssembly</b><br><a href=\"http://webassembly.org/\">WebAssembly</a> enables websites to run high-performance, low-level code written in languages like C or C++, and opens up entirely new classes of content on the web platform. In March, <a href=\"https://web.autocad.com/\">AutoCAD from Autodesk</a> took a 35-year-old-codebase — older than the web itself — and compiled it to run directly inside a browser using WebAssembly. AutoCAD is now just a link away, meaning you can make edits to your CAD drawing directly in a browser, regardless of device or operating system. AutoCAD’s engineering team has a single shared C++ codebase, and when their desktop team makes changes, they are easily integrated into the AutoCAD web app.<br><br>If you’re interested in learning how to port code or write your own, check out the <a href=\"https://codelabs.developers.google.com/codelabs/hour-chipmunk/index.html?index=..%2F..%2Findex#0\">WebAssembly codelab</a>, demonstrating the interplay between C libraries and the DOM. Whether you’re using a complex library written in C, want to bring a new codec into the web platform, or using an engine such as Unity or Unreal Engine, WebAssembly is here to help.<br><br><b>Lighthouse</b><br><a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a> is a tool for analyzing the quality of your website, giving you clear measurements of your site’s performance and guidance for improving your users’ experience. It can be accessed directly from inside Chrome’s DevTools, run from the command-line, or integrated with other development products. In 2018 alone, half a million developers are running Lighthouse against their sites on a regular basis. We know that the web changes fast — Lighthouse can help you stay up-to-date with the latest performance best-practices. Lighthouse 3.0, announced at I/O, will be available to everyone later this week.<br><br>Lighthouse gives you clarity into your site’s load performance in a controlled environment. However, if you want to see how your site performs for real users in the real world, then check out the <a href=\"https://developers.google.com/web/tools/chrome-user-experience-report/\">Chrome User Experience Report</a>. The report now provides origin-level performance metrics for the four million most visited websites. To learn more about how these and other tools can help you get a complete view of your site’s performance, check out our <a href=\"http://g.co/dev/SpeedToolsOverview\">speed tools infographic</a>.<br><br><b>AMP</b><br><a href=\"http://ampproject.org/\">AMP</a> is a web component library and ecosystem for building reliably fast websites with great user experience at scale. <b>There are now over six billion AMP pages from 46 million domains, with a median load time of less than one second from Google Search.</b> Businesses are seeing success with AMP: <a href=\"https://www.aliexpress.com/\">AliExpress</a>, the global online retail marketplace, recently launched a new mobile site as an AMP-driven Progressive Web App. <b>The new site increased their conversion rate for non-search traffic by an incredible 31%.</b><br><br>Content consumption on mobile is changing, with bite-sized, fullscreen storytelling formats becoming increasingly popular. To help meet the needs of web publishers, the AMP project recently announced the development of <a href=\"https://www.ampproject.org/stories/\">AMP stories</a>, a rich set of web components built for mobile-first storytelling. The format is under continued development, and we encourage you to experiment with <a href=\"https://www.ampproject.org/docs/design/visual_story\">building your own stories</a> and give the AMP team your feedback.<br><br><div class=\"separator\"></div>\n<br><br><b>Web Packaging</b><br><a href=\"https://github.com/WICG/webpackage\">Web Packaging</a> is a set of emerging technologies that we believe will redefine how web content is distributed on the web and shared between users. It allows publishers to bundle their content for distribution by other parties, while keeping the integrity guarantees of HTTPS. As part of exploring the <a href=\"https://tools.ietf.org/html/draft-yasskin-webpackage-use-cases-01#section-2\">novel use cases</a> enabled by Web Packaging, we realized that there was an interesting opportunity for AMP. Through collaboration with the AMP team and the web community, we were able to design a solution that allows AMP documents to retain the publisher's original URL when served from the AMP cache.<br><br>As a showcase of our efforts, AMP project collaborators <a href=\"https://www.foodnetwork.com/\">Food Network</a> and <a href=\"https://www.pinterest.com/\">Pinterest</a> have built demos of Web Packaging, such as the one below. If you are curious to learn more, the AMP team <a href=\"https://amphtml.wordpress.com/2018/05/08/a-first-look-at-using-web-packaging-to-improve-amp-urls/\">wrote an article that goes into more detail</a> about how Web Packaging benefits users and publishers. Beyond the AMP application, we are excited about what Web Packaging technologies will enable and are looking forward to refine our thinking with your help.<br><br><div class=\"separator\"><a href=\"https://3.bp.blogspot.com/-ua60cq2bCcY/WvI6e9w8jUI/AAAAAAAAA5o/OFVlSZWZgRQZ4QkrXrHZUvYw0a42k18vgCLcBGAs/s1600/unnamed%2B%25281%2529.gif\" imageanchor=\"1\"><img data-original-height=\"786\" data-original-width=\"394\" height=\"320\" src=\"https://3.bp.blogspot.com/-ua60cq2bCcY/WvI6e9w8jUI/AAAAAAAAA5o/OFVlSZWZgRQZ4QkrXrHZUvYw0a42k18vgCLcBGAs/s320/unnamed%2B%25281%2529.gif\" width=\"160\"></a></div>\n<div>A demo using Web Packaging with an AMP page from Google Search</div>\n<br><b>Polymer</b><br>Polymer is a JavaScript library that helps you create custom reusable web components to share with other developers or combine to build performant, maintainable apps. At I/O we launched version 3.0 of the library, which makes some significant upgrades to the Polymer ecosystem. We’ve completed support for using npm as the package management system and ES6 modules as the unit of composition, making it easy to use Polymer-based web components alongside your other favorite web development tools and frameworks.<br><br>We’ve also introduced <a href=\"https://github.com/Polymer/lit-element\">LitElement</a>, a new web component base-class that combines the expressive power of <a href=\"https://github.com/Polymer/lit-html\">Lit-HTML</a> with web components to make it even easier to create lightweight, reactive components using a modern and expressive templating syntax.<br><br>We’re also releasing the <a href=\"https://github.com/Polymer/pwa-starter-kit\">PWA Starter Kit</a>, a comprehensive starting point for building web component-driven PWAs that are fast, reliable, responsive, themable, and score top marks in our Lighthouse PWA and performance criteria.<br><br><b>Angular</b><br>At I/O this year the Angular team gave an overview of the growth of the community, and touched on some of the exciting <a href=\"https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4\">new capabilities that have landed across the core framework, CLI, and Angular Material library in version 6</a>. Angular is used by millions of developers and has built up a huge amount of momentum and a fantastic ecosystem. New commands released in version 6 like `ng update` and `ng add` will keep your application up to date and help developers move faster as the Angular team continues to balance stability and innovation.<br><br>The Angular team also gave a sneak peek at some of the improvements they are making under the hood of Angular with <a href=\"https://github.com/angular/angular/issues/21706\">Project Ivy</a>. This will make Angular simpler to debug and faster to compile and run, in a way that works with existing applications. The team showed demonstrated the utility of these improvements in the form of a small Hello World application where the Angular features that weren't used were automatically removed from the application's JavaScript bundle.<br><br><br><br>Our mission at Google and in Chrome is to work with the community to create experiences that are fast, integrated, reliable, and engaging. We’re excited by the powerful new capabilities that have come to the open web platform, and the comprehensive set of tools that enable you to rapidly build high quality sites for your users. To stay up to date on the latest advancements in the web, visit our <a href=\"https://developers.google.com/web/\">developer portal</a> or check out the talks from this year’s I/O on the <a href=\"https://www.youtube.com/user/GoogleDevelopers\">Google Developers YouTube channel</a>. And we’d love to see you at the upcoming <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit</a> later this year.<br><br>Posted by Malte Ubl and Ben Galbraith<br><div><br></div>\n","enclosure":{"thumbnail":"https://img.youtube.com/vi/Ay-mdLMDtbs/default.jpg"},"categories":[],"color":"lightgreen","category":"Chromium Blog","date":"2018-05-09 00:21:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Hiding inline SVG icons from screen readers","pubDate":"2016-09-29 22:00:00","link":"http://www.456bereastreet.com/archive/201609/hiding_inline_svg_icons_from_screen_readers/","guid":"http://www.456bereastreet.com/archive/201609/hiding_inline_svg_icons_from_screen_readers/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">Icon fonts are finally being phased out in favour of a technology that’s more fit for purpose: <a href=\"https://www.w3.org/TR/SVG/\">SVG</a>. There are many tutorials and guides that describe different ways in which you can use SVG icons, which is great. I do however see an issue related to accessibility pop up now and again, so I’d like to share a little tip about that.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201609/hiding_inline_svg_icons_from_screen_readers/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/svg/\" rel=\"tag\">SVG</a>, <a href=\"http://www.456bereastreet.com/archive/categories/accessibility/\" rel=\"tag\">Accessibility</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=DktFeYoh4Eg:W6b6gILwRRU:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=DktFeYoh4Eg:W6b6gILwRRU:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/DktFeYoh4Eg\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">Icon fonts are finally being phased out in favour of a technology that’s more fit for purpose: <a href=\"https://www.w3.org/TR/SVG/\">SVG</a>. There are many tutorials and guides that describe different ways in which you can use SVG icons, which is great. I do however see an issue related to accessibility pop up now and again, so I’d like to share a little tip about that.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201609/hiding_inline_svg_icons_from_screen_readers/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/svg/\" rel=\"tag\">SVG</a>, <a href=\"http://www.456bereastreet.com/archive/categories/accessibility/\" rel=\"tag\">Accessibility</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=DktFeYoh4Eg:W6b6gILwRRU:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=DktFeYoh4Eg:W6b6gILwRRU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=DktFeYoh4Eg:W6b6gILwRRU:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/DktFeYoh4Eg\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["SVG","Accessibility"],"color":"violet","category":"456 Berea Street","date":"2016-09-29 22:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Linting CSS with stylelint","pubDate":"2016-04-02 22:00:00","link":"http://www.456bereastreet.com/archive/201604/linting_css_with_stylelint/","guid":"http://www.456bereastreet.com/archive/201604/linting_css_with_stylelint/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">I like to keep my CSS tidy and consistently formatted. One of the tools I use to help with that is <a href=\"http://stylelint.io/\">stylelint</a>. If anyone’s curious, this post explains how I configure it.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201604/linting_css_with_stylelint/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Ft0Ax6F8x_Q:KETXrEywJWU:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Ft0Ax6F8x_Q:KETXrEywJWU:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/Ft0Ax6F8x_Q\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">I like to keep my CSS tidy and consistently formatted. One of the tools I use to help with that is <a href=\"http://stylelint.io/\">stylelint</a>. If anyone’s curious, this post explains how I configure it.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201604/linting_css_with_stylelint/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Ft0Ax6F8x_Q:KETXrEywJWU:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Ft0Ax6F8x_Q:KETXrEywJWU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Ft0Ax6F8x_Q:KETXrEywJWU:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/Ft0Ax6F8x_Q\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS"],"color":"violet","category":"456 Berea Street","date":"2016-04-02 22:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Why I don’t use CSS preprocessors","pubDate":"2016-03-26 23:00:00","link":"http://www.456bereastreet.com/archive/201603/why_i_dont_use_css_preprocessors/","guid":"http://www.456bereastreet.com/archive/201603/why_i_dont_use_css_preprocessors/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">Whenever I mention that I don’t use CSS preprocessors I tend to get strange looks from people who cannot imagine writing CSS without Sass. And so I have to defend my choice and explain why, over and over. Some people will understand, most won’t. Or they don’t want to. But here’s an attempt to explain my reasoning.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201603/why_i_dont_use_css_preprocessors/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=tdIuE3R7Yqo:pHq779e_YAQ:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=tdIuE3R7Yqo:pHq779e_YAQ:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/tdIuE3R7Yqo\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">Whenever I mention that I don’t use CSS preprocessors I tend to get strange looks from people who cannot imagine writing CSS without Sass. And so I have to defend my choice and explain why, over and over. Some people will understand, most won’t. Or they don’t want to. But here’s an attempt to explain my reasoning.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201603/why_i_dont_use_css_preprocessors/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=tdIuE3R7Yqo:pHq779e_YAQ:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=tdIuE3R7Yqo:pHq779e_YAQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=tdIuE3R7Yqo:pHq779e_YAQ:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/tdIuE3R7Yqo\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS"],"color":"violet","category":"456 Berea Street","date":"2016-03-26 23:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Cutting down on vendor prefixes","pubDate":"2013-11-13 00:00:00","link":"http://www.456bereastreet.com/archive/201311/cutting_down_on_vendor_prefixes/","guid":"http://www.456bereastreet.com/archive/201311/cutting_down_on_vendor_prefixes/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">Most web developers currently use <a href=\"http://www.w3.org/TR/CSS2/syndata.html#vendor-keywords\">vendor prefixes</a> in CSS to enable certain features in some browsers. That’s fine, but sometimes I see code examples and prefix-adding tools that go a bit overboard with the support and add every possible prefix that has ever been in use (and sometimes even ones that were never used). I think there are a bunch of CSS properties that we can safely stop using vendor prefixes for, or at least considerably cut down on the number of prefixes.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201311/cutting_down_on_vendor_prefixes/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Mvt6Y69OAZ8:AQe767t5xXk:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Mvt6Y69OAZ8:AQe767t5xXk:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/Mvt6Y69OAZ8\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">Most web developers currently use <a href=\"http://www.w3.org/TR/CSS2/syndata.html#vendor-keywords\">vendor prefixes</a> in CSS to enable certain features in some browsers. That’s fine, but sometimes I see code examples and prefix-adding tools that go a bit overboard with the support and add every possible prefix that has ever been in use (and sometimes even ones that were never used). I think there are a bunch of CSS properties that we can safely stop using vendor prefixes for, or at least considerably cut down on the number of prefixes.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201311/cutting_down_on_vendor_prefixes/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Mvt6Y69OAZ8:AQe767t5xXk:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=Mvt6Y69OAZ8:AQe767t5xXk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=Mvt6Y69OAZ8:AQe767t5xXk:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/Mvt6Y69OAZ8\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS"],"color":"violet","category":"456 Berea Street","date":"2013-11-13 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Full-width justified vertically centered navbar","pubDate":"2013-10-13 00:00:00","link":"http://www.456bereastreet.com/archive/201310/full-width_justified_vertically_centered_navbar/","guid":"http://www.456bereastreet.com/archive/201310/full-width_justified_vertically_centered_navbar/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">In a couple of recent projects I’ve faced designs where the main navigation bar gave me more trouble than usual. These are the prerequisites that make the problem tricky to solve:</p>\n\n<ul>\n<li>The navbar is full-width and the links have to fill up the entire width regardless of how many of them there are</li>\n\t<li>The text in each link needs to be vertically centered and wrap to multiple lines if necessary</li>\n\t<li>The entire area of each item in the navbar needs to be clickable</li>\n</ul>\n<p>After exploring lots of different methods I’ve found two solutions to the problem. As is often the case, both have their drawbacks and you need to choose which compromise to make.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201310/full-width_justified_vertically_centered_navbar/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>, <a href=\"http://www.456bereastreet.com/archive/categories/javascript/\" rel=\"tag\">JavaScript</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=_oC5zMgRAlc:5dr0Aa3PoVY:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=_oC5zMgRAlc:5dr0Aa3PoVY:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/_oC5zMgRAlc\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">In a couple of recent projects I’ve faced designs where the main navigation bar gave me more trouble than usual. These are the prerequisites that make the problem tricky to solve:</p>\n\n<ul>\n<li>The navbar is full-width and the links have to fill up the entire width regardless of how many of them there are</li>\n\t<li>The text in each link needs to be vertically centered and wrap to multiple lines if necessary</li>\n\t<li>The entire area of each item in the navbar needs to be clickable</li>\n</ul>\n<p>After exploring lots of different methods I’ve found two solutions to the problem. As is often the case, both have their drawbacks and you need to choose which compromise to make.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201310/full-width_justified_vertically_centered_navbar/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>, <a href=\"http://www.456bereastreet.com/archive/categories/javascript/\" rel=\"tag\">JavaScript</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=_oC5zMgRAlc:5dr0Aa3PoVY:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=_oC5zMgRAlc:5dr0Aa3PoVY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=_oC5zMgRAlc:5dr0Aa3PoVY:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/_oC5zMgRAlc\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS","JavaScript"],"color":"violet","category":"456 Berea Street","date":"2013-10-13 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Responsive scrollable tables","pubDate":"2013-09-21 00:00:00","link":"http://www.456bereastreet.com/archive/201309/responsive_scrollable_tables/","guid":"http://www.456bereastreet.com/archive/201309/responsive_scrollable_tables/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">Over six years ago I wrote a short post about <a href=\"http://www.456bereastreet.com/archive/200704/how_to_prevent_html_tables_from_becoming_too_wide/\">preventing HTML tables from becoming too wide</a>. The solutions I offered in that post involve using <code>table-layout:fixed</code> to lock down the width of tables. While that may work in some cases, it often will not be very pleasant to use.</p>\n\n<p>Since I wrote that post, many, many small screen devices that you can use to browse the web have been released, which means that the risk of people encountering a data table that is too wide to fit their browser window is greater than ever. There are already several different strategies for dealing with data tables on small screens, involving things like flipping tables, hiding columns, rearranging data cells, and making over-wide tables scrollable. See <a href=\"http://css-tricks.com/responsive-data-table-roundup/\">Responsive Data Table Roundup</a> at CSS-Tricks for some examples.</p>\n\n<p>Every technique for making tables flexible (or “responsive”) that I have seen comes with its own set of drawbacks. That’s expected really – I don’t think this is a problem that can be solved perfectly, so we have to compromise somehow. But I do think that one of the simplest and least inelegant ways to handle data tables is to make them horizontally scrollable when necessary, and so I thought I’d describe how I do that.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201309/responsive_scrollable_tables/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>, <a href=\"http://www.456bereastreet.com/archive/categories/javascript/\" rel=\"tag\">JavaScript</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=LrlxiOIPNZ8:fd-vPjEAmNs:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=LrlxiOIPNZ8:fd-vPjEAmNs:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/LrlxiOIPNZ8\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">Over six years ago I wrote a short post about <a href=\"http://www.456bereastreet.com/archive/200704/how_to_prevent_html_tables_from_becoming_too_wide/\">preventing HTML tables from becoming too wide</a>. The solutions I offered in that post involve using <code>table-layout:fixed</code> to lock down the width of tables. While that may work in some cases, it often will not be very pleasant to use.</p>\n\n<p>Since I wrote that post, many, many small screen devices that you can use to browse the web have been released, which means that the risk of people encountering a data table that is too wide to fit their browser window is greater than ever. There are already several different strategies for dealing with data tables on small screens, involving things like flipping tables, hiding columns, rearranging data cells, and making over-wide tables scrollable. See <a href=\"http://css-tricks.com/responsive-data-table-roundup/\">Responsive Data Table Roundup</a> at CSS-Tricks for some examples.</p>\n\n<p>Every technique for making tables flexible (or “responsive”) that I have seen comes with its own set of drawbacks. That’s expected really – I don’t think this is a problem that can be solved perfectly, so we have to compromise somehow. But I do think that one of the simplest and least inelegant ways to handle data tables is to make them horizontally scrollable when necessary, and so I thought I’d describe how I do that.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201309/responsive_scrollable_tables/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>, <a href=\"http://www.456bereastreet.com/archive/categories/javascript/\" rel=\"tag\">JavaScript</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=LrlxiOIPNZ8:fd-vPjEAmNs:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=LrlxiOIPNZ8:fd-vPjEAmNs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=LrlxiOIPNZ8:fd-vPjEAmNs:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/LrlxiOIPNZ8\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS","JavaScript"],"color":"violet","category":"456 Berea Street","date":"2013-09-21 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Height in percent when parent has min-height and no height","pubDate":"2013-06-28 00:00:00","link":"http://www.456bereastreet.com/archive/201306/height_in_percent_when_parent_has_min-height_and_no_height/","guid":"http://www.456bereastreet.com/archive/201306/height_in_percent_when_parent_has_min-height_and_no_height/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">When trying to force an element to always extend to the height of its parent I ran into some peculiar browser behaviour that I thought was worth mentioning. Here’s the situation:</p>\n\n<ul>\n<li>The parent element has a <code>min-height</code> specified (in pixels), but no <code>height</code>\n</li>\n\t<li>The child’s <code>height</code> is set to <code>100%</code>\n</li>\n</ul>\n<p>I was expecting the child to get the same height as its parent, but that is not what happens. What happens instead may well be according to <a href=\"http://www.w3.org/TR/CSS2/visudet.html#the-height-property\">the CSS 2.1 Specification</a>, but a bit nonintuitive, at least to me.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201306/height_in_percent_when_parent_has_min-height_and_no_height/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5E0tFs2ikew:pRufpQZZbK4:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5E0tFs2ikew:pRufpQZZbK4:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/5E0tFs2ikew\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">When trying to force an element to always extend to the height of its parent I ran into some peculiar browser behaviour that I thought was worth mentioning. Here’s the situation:</p>\n\n<ul>\n<li>The parent element has a <code>min-height</code> specified (in pixels), but no <code>height</code>\n</li>\n\t<li>The child’s <code>height</code> is set to <code>100%</code>\n</li>\n</ul>\n<p>I was expecting the child to get the same height as its parent, but that is not what happens. What happens instead may well be according to <a href=\"http://www.w3.org/TR/CSS2/visudet.html#the-height-property\">the CSS 2.1 Specification</a>, but a bit nonintuitive, at least to me.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201306/height_in_percent_when_parent_has_min-height_and_no_height/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5E0tFs2ikew:pRufpQZZbK4:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5E0tFs2ikew:pRufpQZZbK4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5E0tFs2ikew:pRufpQZZbK4:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/5E0tFs2ikew\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS"],"color":"violet","category":"456 Berea Street","date":"2013-06-28 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"How to proportionally scale images that have dimension attributes","pubDate":"2013-06-13 00:00:00","link":"http://www.456bereastreet.com/archive/201306/how_to_proportionally_scale_images_that_have_dimension_attributes/","guid":"http://www.456bereastreet.com/archive/201306/how_to_proportionally_scale_images_that_have_dimension_attributes/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">Allowing images to scale along with their container is an important part of responsive web design (and was so even before the term “responsive web design” existed). It’s really quite easy – all you need to do is give the image a width (or max-width) in percent.</p>\n<p>This will prevent any <code>img</code> element from getting wider than its container. If the container is narrower than the image, the image will scale down. But there is a catch.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201306/how_to_proportionally_scale_images_that_have_dimension_attributes/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5K2_wD4HVnU:inMdjMjQ9Uk:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5K2_wD4HVnU:inMdjMjQ9Uk:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/5K2_wD4HVnU\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">Allowing images to scale along with their container is an important part of responsive web design (and was so even before the term “responsive web design” existed). It’s really quite easy – all you need to do is give the image a width (or max-width) in percent.</p>\n<p>This will prevent any <code>img</code> element from getting wider than its container. If the container is narrower than the image, the image will scale down. But there is a catch.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201306/how_to_proportionally_scale_images_that_have_dimension_attributes/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5K2_wD4HVnU:inMdjMjQ9Uk:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5K2_wD4HVnU:inMdjMjQ9Uk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5K2_wD4HVnU:inMdjMjQ9Uk:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/5K2_wD4HVnU\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS"],"color":"violet","category":"456 Berea Street","date":"2013-06-13 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Firefox and the magical text-overflow:ellipsis z-index","pubDate":"2013-05-31 00:00:00","link":"http://www.456bereastreet.com/archive/201305/firefox_and_the_magical_text-overflowellipsis_z-index/","guid":"http://www.456bereastreet.com/archive/201305/firefox_and_the_magical_text-overflowellipsis_z-index/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">A while ago I received a strange bug report for a site I’d been working on. The report mentioned dots appearing on top of a dropdown menu when it was expanded. I had a look in Safari, could not see any dots, but then tried Firefox. And sure enough, there were sets of three dots in the dropdown menu.</p>\n\n<p>It didn’t take long to find the cause, fortunately. Just below the dropdown menu was a list of news items whose <code>text-overflow</code> value was set to <code>ellipsis</code>. The dots in the dropdown menu were the ellipsis characters peeking through, or being rendered on top of, the dropdown’s background.</p>\n\n<p>After checking in a lot of different browsers I can only replicate this in Firefox. Apparently the ellipsis rendered by <code>text-overflow</code> gets a z-index that is higher than the element it is applied to. It also appears above any absolutely or relatively positioned elements that come before the element with <code>text-overflow</code> in the source order, unless those elements have a <code>z-index</code> value greater than 0. </p>\n<p><a href=\"http://www.456bereastreet.com/archive/201305/firefox_and_the_magical_text-overflowellipsis_z-index/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>, <a href=\"http://www.456bereastreet.com/archive/categories/browsers/\" rel=\"tag\">Browsers</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=O8kckNc4d4g:vrxseFxJI48:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=O8kckNc4d4g:vrxseFxJI48:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/O8kckNc4d4g\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">A while ago I received a strange bug report for a site I’d been working on. The report mentioned dots appearing on top of a dropdown menu when it was expanded. I had a look in Safari, could not see any dots, but then tried Firefox. And sure enough, there were sets of three dots in the dropdown menu.</p>\n\n<p>It didn’t take long to find the cause, fortunately. Just below the dropdown menu was a list of news items whose <code>text-overflow</code> value was set to <code>ellipsis</code>. The dots in the dropdown menu were the ellipsis characters peeking through, or being rendered on top of, the dropdown’s background.</p>\n\n<p>After checking in a lot of different browsers I can only replicate this in Firefox. Apparently the ellipsis rendered by <code>text-overflow</code> gets a z-index that is higher than the element it is applied to. It also appears above any absolutely or relatively positioned elements that come before the element with <code>text-overflow</code> in the source order, unless those elements have a <code>z-index</code> value greater than 0. </p>\n<p><a href=\"http://www.456bereastreet.com/archive/201305/firefox_and_the_magical_text-overflowellipsis_z-index/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>, <a href=\"http://www.456bereastreet.com/archive/categories/browsers/\" rel=\"tag\">Browsers</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=O8kckNc4d4g:vrxseFxJI48:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=O8kckNc4d4g:vrxseFxJI48:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=O8kckNc4d4g:vrxseFxJI48:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/O8kckNc4d4g\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS","Browsers"],"color":"violet","category":"456 Berea Street","date":"2013-05-31 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Replacing images when printing","pubDate":"2013-05-14 00:00:00","link":"http://www.456bereastreet.com/archive/201305/replacing_images_when_printing/","guid":"http://www.456bereastreet.com/archive/201305/replacing_images_when_printing/","author":"Roger Johansson","thumbnail":"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI","description":"\n<p class=\"preamble\">It isn’t all that uncommon that, after you’ve polished your print stylesheet to make a site look well on paper as well as on screen, you realise that the logo really doesn’t look its best. It may look blurry or pixelated on paper due to having a pixel density intended for screen viewing, of course. But even worse, its edges may look ugly or it may actually be invisible because whatever is behind it when viewed on screen isn’t printed.</p>\n\n<p>Applying a background colour to the logo image or its containing element in the print CSS isn’t going to help either since most browsers by default do not print backgrounds at all. If you can’t change the image used for screen so that it will look good in print as well, you need to somehow make browsers use a different image when printing. One way of doing that is by using <a href=\"http://www.w3.org/TR/CSS21/generate.html\">CSS generated content</a>.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201305/replacing_images_when_printing/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5WXf-_vNKyM:BCcg3oKiNF0:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5WXf-_vNKyM:BCcg3oKiNF0:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/5WXf-_vNKyM\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"preamble\">It isn’t all that uncommon that, after you’ve polished your print stylesheet to make a site look well on paper as well as on screen, you realise that the logo really doesn’t look its best. It may look blurry or pixelated on paper due to having a pixel density intended for screen viewing, of course. But even worse, its edges may look ugly or it may actually be invisible because whatever is behind it when viewed on screen isn’t printed.</p>\n\n<p>Applying a background colour to the logo image or its containing element in the print CSS isn’t going to help either since most browsers by default do not print backgrounds at all. If you can’t change the image used for screen so that it will look good in print as well, you need to somehow make browsers use a different image when printing. One way of doing that is by using <a href=\"http://www.w3.org/TR/CSS21/generate.html\">CSS generated content</a>.</p>\n<p><a href=\"http://www.456bereastreet.com/archive/201305/replacing_images_when_printing/\">Read full post</a></p>\n<p>Posted in <a href=\"http://www.456bereastreet.com/archive/categories/css/\" rel=\"tag\">CSS</a>.</p>\n<p>Copyright © <a href=\"http://www.456bereastreet.com/\">Roger Johansson</a></p>\n<div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=I9og5sOYxJI\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:bcOpcFrp8Mo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?d=bcOpcFrp8Mo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5WXf-_vNKyM:BCcg3oKiNF0:F7zBnMyn0Lo\" border=\"0\"></a> <a href=\"http://feeds.feedburner.com/~ff/456bereastreet?a=5WXf-_vNKyM:BCcg3oKiNF0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/456bereastreet?i=5WXf-_vNKyM:BCcg3oKiNF0:gIN9vFwOqvQ\" border=\"0\"></a>\n</div>\n<img src=\"http://feeds.feedburner.com/~r/456bereastreet/~4/5WXf-_vNKyM\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":["CSS"],"color":"violet","category":"456 Berea Street","date":"2013-05-14 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Linkbait 41","pubDate":"2018-06-12 15:28:36","link":"http://www.quirksmode.org/blog/archives/2018/06/linkbait_41.html","guid":"http://www.quirksmode.org/blog/archives/2018/06/linkbait_41.html","author":"","thumbnail":"","description":"\n<p>Friends edition. Lots of articles by people I’ve known for ages. Not sure why; probably just a coincidence.</p>\n\n<ul class=\"linkbait\">\n<li>The Big Z <a href=\"https://alistapart.com/article/cult-of-the-complex\" class=\"external\">deplores</a> the cult of the complex. \n<blockquote>\n<p>in a field where young straight white dudes take an overwhelming majority of the jobs (including most of the management jobs) it’s perhaps to be expected that web making has lately become something of a dick measuring competition.</p>\n</blockquote>\nBefore you diss him (and me) as an old fart who isn’t keeping up with the times, please consider the following question: At which time can we start to safely say that people who just cram frameworks into everything they make are too set in their ways and can’t keep up with the latest trends? Two years? Three? Five?</li>\n\n<li>Brad <a href=\"http://bradfrost.com/blog/post/i-dunno/\" class=\"external\">takes a middle position</a> between those who applaud the shiny new and those who deplore it, by asking (rather testily? or is that just my imagination?) why both sides treat a simple “I don’t understand X” as fodder for their view of web development. (I am guilty as charged, I’m afraid.)</li>\n\n\n<li>Jeremy <a href=\"https://adactio.com/journal/13964\" class=\"external\">hopes</a> AMP will drive itself to extinction.\n<blockquote>\n<p>If anything, I’ve noticed publishers using the existence of their AMP pages as a justification for just letting their “regular” pages put on weight.</p>\n</blockquote>\nand\n<blockquote>\n<p>I wish that AMP were being marketed more like a temporary polyfill. And as with any polyfill, I look forward to the day when AMP is no longer necesssary.</p>\n</blockquote>\n</li>\n\n<li>Rachel wrote a <a href=\"https://www.smashingmagazine.com/2018/05/guide-css-layout/\" class=\"external\">massive guide</a> to CSS layout. I’ll have to study it closely if I ever write the CSS book for JavaScripters. I did not know about <code>display: flow-root</code>.</li>\n\n\n<li>Ethan <a href=\"https://ethanmarcotte.com/wrote/wwwatch/\" class=\"external\">is a little excited</a> about Safari (or, at least, WebKit) coming to the Apple Watch. So am I. It’ll be interesting to see how they solved the low-memory and small-screen issues. Ethan’s article contains a lot of useful links.</li>\n\n<li>I’m not excited about yet another meta tag, though — see <a href=\"https://erikrunyon.com/2018/06/designing-web-content-for-watchos/\" class=\"external\">Erik Runyon’s article </a> for the details. I wish we could have left it at the existing one, but of course web designers didn’t make their old sites fit for 272px, which appears to be the ideal layout viewport width of the smallest watch.</li>\n\n<li>Tim <a href=\"https://timkadlec.com/remembers/2018-06-06-web-watch/\" class=\"external\">adds some performance notes</a>:\n<blockquote>\n<p>The median site sends about 351kb of compressed JavaScript to “mobile” devices according to HTTP Archive. That’s roughly 1.7-2.4MB of uncompressed JavaScript the browser has to parse, compile, and execute. That little S3 processor is going to struggle if we try to serve anything close to the amount of JavaScript that we serve to everything else.</p>\n</blockquote>\nUse AMP? (Just kidding)<br>\nWe can hope that this will drastically drop average JS usage, but it probably won’t.</li>\n\n<li>The inimitable Lin Clark wrote cartoon introductions to <a href=\"https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/\" class=\"external\">DNS over HTTPS</a> and <a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\" class=\"external\">ES modules</a>.</li>\n\n<li>A very useful <a href=\"https://medium.com/@iBrews/standalone-vr-a-developers-review-1bb69feb6dcc\" class=\"external\">overview</a> of current VR sets, including their browsers and WebVR support.</li>\n\n<li>Speaking of which, <a href=\"https://www.teslarati.com/tesla-faster-browser-old-mcu-model-s-x/\" class=\"external\">Tesla updated its browser</a>. It’s not a cutting-edge one, judging by the HTML5 Tests screenshots, but I can see why disabling video in a car browser might be a good idea.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","content":"\n<p>Friends edition. Lots of articles by people I’ve known for ages. Not sure why; probably just a coincidence.</p>\n\n<ul class=\"linkbait\">\n<li>The Big Z <a href=\"https://alistapart.com/article/cult-of-the-complex\" class=\"external\">deplores</a> the cult of the complex. \n<blockquote>\n<p>in a field where young straight white dudes take an overwhelming majority of the jobs (including most of the management jobs) it’s perhaps to be expected that web making has lately become something of a dick measuring competition.</p>\n</blockquote>\nBefore you diss him (and me) as an old fart who isn’t keeping up with the times, please consider the following question: At which time can we start to safely say that people who just cram frameworks into everything they make are too set in their ways and can’t keep up with the latest trends? Two years? Three? Five?</li>\n\n<li>Brad <a href=\"http://bradfrost.com/blog/post/i-dunno/\" class=\"external\">takes a middle position</a> between those who applaud the shiny new and those who deplore it, by asking (rather testily? or is that just my imagination?) why both sides treat a simple “I don’t understand X” as fodder for their view of web development. (I am guilty as charged, I’m afraid.)</li>\n\n\n<li>Jeremy <a href=\"https://adactio.com/journal/13964\" class=\"external\">hopes</a> AMP will drive itself to extinction.\n<blockquote>\n<p>If anything, I’ve noticed publishers using the existence of their AMP pages as a justification for just letting their “regular” pages put on weight.</p>\n</blockquote>\nand\n<blockquote>\n<p>I wish that AMP were being marketed more like a temporary polyfill. And as with any polyfill, I look forward to the day when AMP is no longer necesssary.</p>\n</blockquote>\n</li>\n\n<li>Rachel wrote a <a href=\"https://www.smashingmagazine.com/2018/05/guide-css-layout/\" class=\"external\">massive guide</a> to CSS layout. I’ll have to study it closely if I ever write the CSS book for JavaScripters. I did not know about <code>display: flow-root</code>.</li>\n\n\n<li>Ethan <a href=\"https://ethanmarcotte.com/wrote/wwwatch/\" class=\"external\">is a little excited</a> about Safari (or, at least, WebKit) coming to the Apple Watch. So am I. It’ll be interesting to see how they solved the low-memory and small-screen issues. Ethan’s article contains a lot of useful links.</li>\n\n<li>I’m not excited about yet another meta tag, though — see <a href=\"https://erikrunyon.com/2018/06/designing-web-content-for-watchos/\" class=\"external\">Erik Runyon’s article </a> for the details. I wish we could have left it at the existing one, but of course web designers didn’t make their old sites fit for 272px, which appears to be the ideal layout viewport width of the smallest watch.</li>\n\n<li>Tim <a href=\"https://timkadlec.com/remembers/2018-06-06-web-watch/\" class=\"external\">adds some performance notes</a>:\n<blockquote>\n<p>The median site sends about 351kb of compressed JavaScript to “mobile” devices according to HTTP Archive. That’s roughly 1.7-2.4MB of uncompressed JavaScript the browser has to parse, compile, and execute. That little S3 processor is going to struggle if we try to serve anything close to the amount of JavaScript that we serve to everything else.</p>\n</blockquote>\nUse AMP? (Just kidding)<br>\nWe can hope that this will drastically drop average JS usage, but it probably won’t.</li>\n\n<li>The inimitable Lin Clark wrote cartoon introductions to <a href=\"https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/\" class=\"external\">DNS over HTTPS</a> and <a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\" class=\"external\">ES modules</a>.</li>\n\n<li>A very useful <a href=\"https://medium.com/@iBrews/standalone-vr-a-developers-review-1bb69feb6dcc\" class=\"external\">overview</a> of current VR sets, including their browsers and WebVR support.</li>\n\n<li>Speaking of which, <a href=\"https://www.teslarati.com/tesla-faster-browser-old-mcu-model-s-x/\" class=\"external\">Tesla updated its browser</a>. It’s not a cutting-edge one, judging by the HTML5 Tests screenshots, but I can see why disabling video in a car browser might be a good idea.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","enclosure":{},"categories":["Linkbait"],"color":"darkgray","category":"QuirksBlog","date":"2018-06-12 15:28:36","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"performance.now() conference,8/9 November, Amsterdam","pubDate":"2018-06-05 10:23:48","link":"http://www.quirksmode.org/blog/archives/2018/06/performancenow.html","guid":"http://www.quirksmode.org/blog/archives/2018/06/performancenow.html","author":"","thumbnail":"http://www.quirksmode.org/blog/pix/performance_logo.svg","description":"\n<p>It’s always a nail-bitingly tense few months after you decide to create a new conference hoping it’s going to be a success. We decided to inflict this tension on ourselves once again with our latest venture: <a href=\"https://perfnow.nl/\" class=\"external\">performance.now()</a>.</p>\n\n<p>Conceived during a dinner with <a href=\"https://timkadlec.com/\" class=\"external\">Tim Kadlec</a> over a year ago, nurtured by Tim’s good graces as well as <a href=\"http://www.quirksmode.org/blog/\" https: class=\"external\">Steve Souders’s</a>, its every whim served by <a href=\"https://krijnhoetmer.nl/\" class=\"external\">Krijn</a> and me, <code>performance.now()</code> is a two-day one-track front-end performance conference in Amsterdam on 8th and 9th of November.</p>\n\n<p><a href=\"https://perfnow.nl/\" class=\"external\"><img width=\"100%\" src=\"http://www.quirksmode.org/blog/pix/performance_logo.svg\" alt=\"performance.now() logo\"></a></p>\n\n<p>(And no, we don’t have the obvious domain name. We’d love to get it, but <code>.now</code> domain sales haven’t started yet.)</p>\n\n<p>Our speakers will treat topics including JavaScript, CSS, PWAs &amp; AMP, responsive design, image optimization, performance budgets, frameworks, monitoring, browsers, mobile devices, custom fonts, and perceived performance.</p>\n\n<p>Who are our speakers? Glad you asked.\n<a href=\"https://csswizardry.com/\" class=\"external\">Harry Roberts</a>,\n<a href=\"https://tammyeverts.wordpress.com/\" class=\"external\">Tammy Everts</a>,\n<a href=\"https://twitter.com/szynszyliszys\" class=\"external\">Anna Migas</a>, and\n<a href=\"https://www.zachleat.com/web/\" class=\"external\">Zach Leatherman</a>.\nNot convinced?\n<a href=\"https://trib.tv/\" class=\"external\">Andrew Betts</a>,\n<a href=\"https://www.paulirish.com/\" class=\"external\">Paul Irish</a>, and\n<a href=\"https://twitter.com/thisNatasha\" class=\"external\">Natasha Rooney</a>.\nNeed more? <a href=\"https://blog.yoav.ws/\" class=\"external\">Yoav Weiss</a> and <a href=\"http://sylormiller.com/\" class=\"external\">Katie Sylor-Miller</a>. And of course Steve Souders and Tim Kadlec — why let them go to waste when they’re involved anyway? And there are five more speakers as yet to be announced. The <a href=\"https://perfnow.nl/speakers\" class=\"external\">speaker page</a> will be updated as soon as we’ve got something to share.</p>\n\n<p>We would not be able to put on this show without support from our sponsors, currently <a href=\"https://speedcurve.com/\" class=\"external\">SpeedCurve</a>,\n<a href=\"https://www.catchpoint.com/\" class=\"external\">Catchpoint</a>,\n<a href=\"https://www.filamentgroup.com/\" class=\"external\">Filament Group</a>, and <a href=\"https://www.varnish-software.com/\" class=\"external\">Varnish Software</a>. We hope to be able to announce more sponsors shortly.</p>\n\n<p><a href=\"https://perfnow.nl/register\" class=\"external\">Tickets</a> are €550 + VAT (early birds have already sold out). Lunch and post-conference drinks included. Nice weather <strong>not</strong> included; this is November in Amsterdam, after all. But we’ll survive.</p>\n\n<p>Will we see you at performance.now()?</p>\n","content":"\n<p>It’s always a nail-bitingly tense few months after you decide to create a new conference hoping it’s going to be a success. We decided to inflict this tension on ourselves once again with our latest venture: <a href=\"https://perfnow.nl/\" class=\"external\">performance.now()</a>.</p>\n\n<p>Conceived during a dinner with <a href=\"https://timkadlec.com/\" class=\"external\">Tim Kadlec</a> over a year ago, nurtured by Tim’s good graces as well as <a href=\"http://www.quirksmode.org/blog/\" https: class=\"external\">Steve Souders’s</a>, its every whim served by <a href=\"https://krijnhoetmer.nl/\" class=\"external\">Krijn</a> and me, <code>performance.now()</code> is a two-day one-track front-end performance conference in Amsterdam on 8th and 9th of November.</p>\n\n<p><a href=\"https://perfnow.nl/\" class=\"external\"><img width=\"100%\" src=\"http://www.quirksmode.org/blog/pix/performance_logo.svg\" alt=\"performance.now() logo\"></a></p>\n\n<p>(And no, we don’t have the obvious domain name. We’d love to get it, but <code>.now</code> domain sales haven’t started yet.)</p>\n\n<p>Our speakers will treat topics including JavaScript, CSS, PWAs &amp; AMP, responsive design, image optimization, performance budgets, frameworks, monitoring, browsers, mobile devices, custom fonts, and perceived performance.</p>\n\n<p>Who are our speakers? Glad you asked.\n<a href=\"https://csswizardry.com/\" class=\"external\">Harry Roberts</a>,\n<a href=\"https://tammyeverts.wordpress.com/\" class=\"external\">Tammy Everts</a>,\n<a href=\"https://twitter.com/szynszyliszys\" class=\"external\">Anna Migas</a>, and\n<a href=\"https://www.zachleat.com/web/\" class=\"external\">Zach Leatherman</a>.\nNot convinced?\n<a href=\"https://trib.tv/\" class=\"external\">Andrew Betts</a>,\n<a href=\"https://www.paulirish.com/\" class=\"external\">Paul Irish</a>, and\n<a href=\"https://twitter.com/thisNatasha\" class=\"external\">Natasha Rooney</a>.\nNeed more? <a href=\"https://blog.yoav.ws/\" class=\"external\">Yoav Weiss</a> and <a href=\"http://sylormiller.com/\" class=\"external\">Katie Sylor-Miller</a>. And of course Steve Souders and Tim Kadlec — why let them go to waste when they’re involved anyway? And there are five more speakers as yet to be announced. The <a href=\"https://perfnow.nl/speakers\" class=\"external\">speaker page</a> will be updated as soon as we’ve got something to share.</p>\n\n<p>We would not be able to put on this show without support from our sponsors, currently <a href=\"https://speedcurve.com/\" class=\"external\">SpeedCurve</a>,\n<a href=\"https://www.catchpoint.com/\" class=\"external\">Catchpoint</a>,\n<a href=\"https://www.filamentgroup.com/\" class=\"external\">Filament Group</a>, and <a href=\"https://www.varnish-software.com/\" class=\"external\">Varnish Software</a>. We hope to be able to announce more sponsors shortly.</p>\n\n<p><a href=\"https://perfnow.nl/register\" class=\"external\">Tickets</a> are €550 + VAT (early birds have already sold out). Lunch and post-conference drinks included. Nice weather <strong>not</strong> included; this is November in Amsterdam, after all. But we’ll survive.</p>\n\n<p>Will we see you at performance.now()?</p>\n","enclosure":{},"categories":["Conferences"],"color":"darkgray","category":"QuirksBlog","date":"2018-06-05 10:23:48","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Linkbait 40","pubDate":"2018-05-29 11:38:20","link":"http://www.quirksmode.org/blog/archives/2018/05/linkbait_40.html","guid":"http://www.quirksmode.org/blog/archives/2018/05/linkbait_40.html","author":"","thumbnail":"","description":"\n<p>A CSS-heavy edition. I’m doing research for my possible new book, and I need to know more about what people don’t like about CSS. So there’s a lot on that topic.</p>\n\n<ul class=\"linkbait\">\n<li>\n<a href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2018-results\" class=\"external\">The Front-End Tooling Survey 2018 - Results</a>. Which front-end tools are used most, and are best-known? Personally I’m most interested in the CSS tools the article opens with, but there’s also JavaScript, where Vue overtook Angular.</li>\n\n<li>\n<a href=\"https://www.joeforshaw.com/blog/css-the-bad-bits-and-how-to-avoid-them\" class=\"external\">CSS: the bad bits</a>. Starts with the global scope, of course. Joe’s solution of choice is BEM. Agree or disagree with him on the solution, CSS global scope is not always good.<br>Continues with many more useful notes. Very useful for understanding what JavaScript developers dislike about CSS.</li>\n\n<li>Very interesting <a href=\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/\" class=\"external\">article</a> by Adam Wathan, where he starts doubting the separation of structure and presentation. Money quote:\n<blockquote>\n<p>My markup wasn't concerned with styling decisions, but my CSS was very concerned with my markup structure.</p>\n</blockquote>\nThere is some truth here, and I must admit I’ve started doubting the strict separation of structure, presentation, and behaviour we made popular in web development all those many years ago. I need some time to assimilate all of this, since I spent most of 2000-2004 telling web developers to strictly separate their concerns. Now ... maybe it’s time to revisit that.<br>\nFood for thought.</li>\n\n\n<li>A lengthy <a href=\"https://www.smashingmagazine.com/2018/05/css-custom-properties-strategy-guide/\" class=\"external\">guide</a> to using CSS custom properties, either in a Sass context or not. I especially like the heading “Don’t Be Too Clever.” You can do amazingly complex things with custom properties, but it’s not always a good idea. For instance, you can calculate font sizes and widths and such at runtime, but that might eat up too much valuable processor time. So calculate the values beforehand and let the browser switch between them.</li>\n\n<li>Brad Frost on <a href=\"http://bradfrost.com/blog/post/css-architecture-for-design-systems/\" class=\"external\">CSS architecture for design systems</a>. He, too, inserts BEM into his solution, so I guess there must be something good there.</li>\n\n<li>And while we’re on this topic, here’s <a href=\"https://cssguidelin.es/#css-selectors\" class=\"external\">Harry Roberts’s CSS guidelines</a>. Not exactly new, but still important.</li>\n\n<li>\n<a href=\"https://float-layout.glitch.me/\" class=\"external\">How browsers position floats</a>. A technical breakdown of what happens when you float elements. With interactive example.</li>\n\n<li>A breakdown of <a href=\"https://pineco.de/css-important-and-what-we-can-use-for-it/\" class=\"external\">CSS !important</a> and what we can use it for.<br>\nDoesn’t really treat my favourite use case: figuring out if you have a cascade problem. If styles mysteriously don’t show up, I add <code>!important</code>. If they do show up now, I have a cascade problem. If they still don’t, something else is going on. Useful debugging information. Afterwards I <strong>remove</strong> the <code>!important</code> and fix my code.</li>\n\n\n<li>\n<a href=\"https://stratechery.com/2018/the-end-of-windows/\" class=\"external\">Interesting breakdown</a> of how Microsoft CEO Nadella shifted from a Windows Everywhere strategy to a Services, Not Devices strategy. It took him five years because in the short term Windows mattered a lot to Microsoft clients.\n<blockquote>\n<p>[Office for iPad was] an easy win that symbolized the exact shift in mindset Microsoft needed: non-Windows platforms would be targets for Microsoft services, not competitors for Windows.</p>\n</blockquote>\nTrue. Right now, what Microsoft could do to target non-Windows platforms is porting Edge to Android and creating a competitor for Google Services. Now <em>that</em> would be interesting. Still, it’s a huge investment and so far it doesn’t appear to be forthcoming.</li>\n\n<li>We always assumed that smartphones would entirely replace feature phones in the long run. <a href=\"https://www.valuewalk.com/2018/05/feature-phone-ios-vs-android-report/\" class=\"external\">This report</a>, however, finds that feature phone traffic is actually going up in India, where both iOS and Android lose market share. This share is picked up by the new FirefoxOS-based KaiOS feature phone system, which, according to this report, has already overtaken iOS in India.<br>\nInteresting times are here again? In any case I badly need a Nokia 8110, which runs KaiOS.</li>\n\n\n\n<li>\n<a href=\"https://blogs.harvard.edu/doc/2018/05/12/gdpr/\" class=\"external\">GDRP and ads</a>. According to this article, the new European GDPR (you know, the reason you got so many mails last week) is going to pop the adtech bubble. Doc Searls distinguishes between the ads themselves, which are not necessarily evil or bad, and adtech, which purports to connect the right ads to the right people, but mysteriously doesn’t and (my interpretation!) is so in awe of its own cleverness that it ignores the ad-blocker writing on the wall.</li>\n\n<li>\n<code>null &gt;= 0</code> evaluates to <code>true</code> in JavaScript. Why? Abinav Seelan <a href=\"https://blog.campvanilla.com/javascript-the-curious-case-of-null-0-7b131644e274\" class=\"external\">explains</a>.</li>\n\n<li>Brian Rinaldi <a href=\"https://www.remotesynthesis.com/blog/full-stack-developer\" class=\"external\">argues against</a> the job title “full-stack developer” by giving a lengthy list of things these developers are supposed to know. No one can be a specialist in all of these areas, and I’m not sure we need a lot of generalists who know a little bit about everything.<br>\nSo don’t call yourself a full-stack developer. You can’t be.</li>\n\n<li>Dave Winer on why <a href=\"http://scripting.com/2018/05/10/133513.html\" class=\"external\">the Internet is going the wrong way</a>.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","content":"\n<p>A CSS-heavy edition. I’m doing research for my possible new book, and I need to know more about what people don’t like about CSS. So there’s a lot on that topic.</p>\n\n<ul class=\"linkbait\">\n<li>\n<a href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2018-results\" class=\"external\">The Front-End Tooling Survey 2018 - Results</a>. Which front-end tools are used most, and are best-known? Personally I’m most interested in the CSS tools the article opens with, but there’s also JavaScript, where Vue overtook Angular.</li>\n\n<li>\n<a href=\"https://www.joeforshaw.com/blog/css-the-bad-bits-and-how-to-avoid-them\" class=\"external\">CSS: the bad bits</a>. Starts with the global scope, of course. Joe’s solution of choice is BEM. Agree or disagree with him on the solution, CSS global scope is not always good.<br>Continues with many more useful notes. Very useful for understanding what JavaScript developers dislike about CSS.</li>\n\n<li>Very interesting <a href=\"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/\" class=\"external\">article</a> by Adam Wathan, where he starts doubting the separation of structure and presentation. Money quote:\n<blockquote>\n<p>My markup wasn't concerned with styling decisions, but my CSS was very concerned with my markup structure.</p>\n</blockquote>\nThere is some truth here, and I must admit I’ve started doubting the strict separation of structure, presentation, and behaviour we made popular in web development all those many years ago. I need some time to assimilate all of this, since I spent most of 2000-2004 telling web developers to strictly separate their concerns. Now ... maybe it’s time to revisit that.<br>\nFood for thought.</li>\n\n\n<li>A lengthy <a href=\"https://www.smashingmagazine.com/2018/05/css-custom-properties-strategy-guide/\" class=\"external\">guide</a> to using CSS custom properties, either in a Sass context or not. I especially like the heading “Don’t Be Too Clever.” You can do amazingly complex things with custom properties, but it’s not always a good idea. For instance, you can calculate font sizes and widths and such at runtime, but that might eat up too much valuable processor time. So calculate the values beforehand and let the browser switch between them.</li>\n\n<li>Brad Frost on <a href=\"http://bradfrost.com/blog/post/css-architecture-for-design-systems/\" class=\"external\">CSS architecture for design systems</a>. He, too, inserts BEM into his solution, so I guess there must be something good there.</li>\n\n<li>And while we’re on this topic, here’s <a href=\"https://cssguidelin.es/#css-selectors\" class=\"external\">Harry Roberts’s CSS guidelines</a>. Not exactly new, but still important.</li>\n\n<li>\n<a href=\"https://float-layout.glitch.me/\" class=\"external\">How browsers position floats</a>. A technical breakdown of what happens when you float elements. With interactive example.</li>\n\n<li>A breakdown of <a href=\"https://pineco.de/css-important-and-what-we-can-use-for-it/\" class=\"external\">CSS !important</a> and what we can use it for.<br>\nDoesn’t really treat my favourite use case: figuring out if you have a cascade problem. If styles mysteriously don’t show up, I add <code>!important</code>. If they do show up now, I have a cascade problem. If they still don’t, something else is going on. Useful debugging information. Afterwards I <strong>remove</strong> the <code>!important</code> and fix my code.</li>\n\n\n<li>\n<a href=\"https://stratechery.com/2018/the-end-of-windows/\" class=\"external\">Interesting breakdown</a> of how Microsoft CEO Nadella shifted from a Windows Everywhere strategy to a Services, Not Devices strategy. It took him five years because in the short term Windows mattered a lot to Microsoft clients.\n<blockquote>\n<p>[Office for iPad was] an easy win that symbolized the exact shift in mindset Microsoft needed: non-Windows platforms would be targets for Microsoft services, not competitors for Windows.</p>\n</blockquote>\nTrue. Right now, what Microsoft could do to target non-Windows platforms is porting Edge to Android and creating a competitor for Google Services. Now <em>that</em> would be interesting. Still, it’s a huge investment and so far it doesn’t appear to be forthcoming.</li>\n\n<li>We always assumed that smartphones would entirely replace feature phones in the long run. <a href=\"https://www.valuewalk.com/2018/05/feature-phone-ios-vs-android-report/\" class=\"external\">This report</a>, however, finds that feature phone traffic is actually going up in India, where both iOS and Android lose market share. This share is picked up by the new FirefoxOS-based KaiOS feature phone system, which, according to this report, has already overtaken iOS in India.<br>\nInteresting times are here again? In any case I badly need a Nokia 8110, which runs KaiOS.</li>\n\n\n\n<li>\n<a href=\"https://blogs.harvard.edu/doc/2018/05/12/gdpr/\" class=\"external\">GDRP and ads</a>. According to this article, the new European GDPR (you know, the reason you got so many mails last week) is going to pop the adtech bubble. Doc Searls distinguishes between the ads themselves, which are not necessarily evil or bad, and adtech, which purports to connect the right ads to the right people, but mysteriously doesn’t and (my interpretation!) is so in awe of its own cleverness that it ignores the ad-blocker writing on the wall.</li>\n\n<li>\n<code>null &gt;= 0</code> evaluates to <code>true</code> in JavaScript. Why? Abinav Seelan <a href=\"https://blog.campvanilla.com/javascript-the-curious-case-of-null-0-7b131644e274\" class=\"external\">explains</a>.</li>\n\n<li>Brian Rinaldi <a href=\"https://www.remotesynthesis.com/blog/full-stack-developer\" class=\"external\">argues against</a> the job title “full-stack developer” by giving a lengthy list of things these developers are supposed to know. No one can be a specialist in all of these areas, and I’m not sure we need a lot of generalists who know a little bit about everything.<br>\nSo don’t call yourself a full-stack developer. You can’t be.</li>\n\n<li>Dave Winer on why <a href=\"http://scripting.com/2018/05/10/133513.html\" class=\"external\">the Internet is going the wrong way</a>.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","enclosure":{},"categories":["Linkbait"],"color":"darkgray","category":"QuirksBlog","date":"2018-05-29 11:38:20","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"New speakers, devrels, and videos","pubDate":"2018-05-08 12:54:39","link":"http://www.quirksmode.org/blog/archives/2018/05/new_speakers_de.html","guid":"http://www.quirksmode.org/blog/archives/2018/05/new_speakers_de.html","author":"","thumbnail":"","description":"\n<p>When selecting speakers for our conferences we always hunt for a video of a prospective speaker, unless we’ve seen them for ourselves in the flesh. If we cannot find a video, we do not invite the speaker, since we cannot guarantee to our audience that they are excellent presenters. Not all conferences do so, but we do.</p>\n\n<p>For some new speakers this is a bit of a hurdle. Not an insurmountable one —  some local meet-ups and most conferences record their sessions — but it’s still an extra step. Local meet-up organisers take note: recording the sessions would be a huge service for your speakers — if you have the budget.</p>\n\n<p>That was not what I wanted to talk about today, though. In the past months we conferred with quite a few developer relations departments about <a href=\"https://cssday.nl/\" class=\"external\">CSS Day</a> and <a href=\"https://perfnow.nl/\" class=\"external\">performance.now()</a>, and they all proposed a speaker that they didn’t have a video of. So we said No.</p>\n\n<p>For developer relations departments, whose job it is to get their people to speak at conferences, this is a far more serious oversight than for individuals.</p>\n\n<p>So my advice to developer relations departments is to organise a local meet-up, get all their unknown speakers to speak, record all sessions, and put them online. I mean, they must have the budget to do that once, right? It would be a great gift to conference organisers around the world, even to those that do not require videos.</p>\n\n<p>And while you’re at it, hey, also invite that one local speaker that you think should get more conference invitations.</p>\n","content":"\n<p>When selecting speakers for our conferences we always hunt for a video of a prospective speaker, unless we’ve seen them for ourselves in the flesh. If we cannot find a video, we do not invite the speaker, since we cannot guarantee to our audience that they are excellent presenters. Not all conferences do so, but we do.</p>\n\n<p>For some new speakers this is a bit of a hurdle. Not an insurmountable one —  some local meet-ups and most conferences record their sessions — but it’s still an extra step. Local meet-up organisers take note: recording the sessions would be a huge service for your speakers — if you have the budget.</p>\n\n<p>That was not what I wanted to talk about today, though. In the past months we conferred with quite a few developer relations departments about <a href=\"https://cssday.nl/\" class=\"external\">CSS Day</a> and <a href=\"https://perfnow.nl/\" class=\"external\">performance.now()</a>, and they all proposed a speaker that they didn’t have a video of. So we said No.</p>\n\n<p>For developer relations departments, whose job it is to get their people to speak at conferences, this is a far more serious oversight than for individuals.</p>\n\n<p>So my advice to developer relations departments is to organise a local meet-up, get all their unknown speakers to speak, record all sessions, and put them online. I mean, they must have the budget to do that once, right? It would be a great gift to conference organisers around the world, even to those that do not require videos.</p>\n\n<p>And while you’re at it, hey, also invite that one local speaker that you think should get more conference invitations.</p>\n","enclosure":{},"categories":["Conferences"],"color":"darkgray","category":"QuirksBlog","date":"2018-05-08 12:54:39","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Why is not using the CSS cascade a problem?","pubDate":"2018-04-17 13:45:19","link":"http://www.quirksmode.org/blog/archives/2018/04/css_global_scop.html","guid":"http://www.quirksmode.org/blog/archives/2018/04/css_global_scop.html","author":"","thumbnail":"","description":"\n<p>When I announced I was going to write something for JavaScript developers who don't understand CSS, plenty of people (including <a href=\"https://twitter.com/adactio/status/982287530929225729\" class=\"external\">Jeremy</a>) said that the Cascading &amp; Inheritance chapter would be crucial, since so many JS developers didn’t seem to understand it.</p>\n\n<p>At first I agreed, but later I started to harbour some doubts, which is the reason I’m writing this piece.</p>\n\n<p>As far as I can see, the problem is not that JavaScript developers do not understand the cascade, the problem is that they do not desire to use it. But is this really a problem?</p>\n\n<h3>Global scope</h3>\n\n<p>CSS only has a global scope. A <code>button.primary</code> rule affects all buttons with that class on the entire page. This is the strength of the cascade. In a recent project I spent half an hour with the designer defining a primary, secondary, and tertiary button/link class. That was time well-spent: both of us could drop buttons into the code from that time on, and their styles would just work.</p>\n\n<p>JavaScripters have learned to dislike and distrust the global scope, however. Although this is an excellent idea in JavaScript, so the theory goes, it makes a lot less sense in CSS, since part of the strength of CSS is exactly its cascade-induced global scope. Therefore JavaScripters do not like CSS; see, for instance, <a href=\"https://www.joeforshaw.com/blog/css-the-bad-bits-and-how-to-avoid-them\" class=\"external\">CSS: the bad bits</a>, which opens prominently with complaints about the global scope.</p>\n\n<p>But don’t JavaScripters see the advantages of the CSS cascade? Aren’t they ignoring part of what makes CSS so powerful?</p>\n\n<h3>Local scope</h3>\n\n<p>Well, yes and no. To return to my earlier primary button example, it makes excellent sense in a relatively simple site like the one we were making. It starts making less sense when you want to drop not a single button, but an entire component, which might include a button, but needs the button style to conform to the component style. In that case you want to make sure that general styles don’t influence the component’s button. You want your CSS to be local in scope.</p>\n\n<p>None of this is particularly surprising, and I have no doubt that my readers have figured this out for themselves and hit on the remarkable solution of using both global and local styles, depending on the exact nature of their project. As <a href=\"https://twitter.com/sonniesedge/status/984327424719585281\" class=\"external\">Charlie Owen said</a>:</p>\n\n<blockquote>\n<p>I hear people making out that scoped and cascade are incompatible. But using the cascade just means (to me) making use of the global aspects of CSS. Set your default block level margins, your typography, etc high up. Then each component can scope anything extra.</p>\n</blockquote>\n\n<p>So far so good. This, as far as I can see, is the correct solution to the problem.</p>\n\n<h3>What’s the problem?</h3>\n\n<p>But what am I to make of the complaints about JavaScripters not understanding the cascade? I think they understand it perfectly fine; they just decide not to use it.</p>\n\n<p>So I don’t think there’s really a problem here. Still, I decided to write this piece and ask this question because I might overlook something.</p>\n\n<p>So what’s the problem with JavaScript developers and the cascade beyond them overlooking some use cases for global styles, wrapped up as they are in making everything local? Could someone please explain?</p>\n\n<p>Thanks.</p>\n","content":"\n<p>When I announced I was going to write something for JavaScript developers who don't understand CSS, plenty of people (including <a href=\"https://twitter.com/adactio/status/982287530929225729\" class=\"external\">Jeremy</a>) said that the Cascading &amp; Inheritance chapter would be crucial, since so many JS developers didn’t seem to understand it.</p>\n\n<p>At first I agreed, but later I started to harbour some doubts, which is the reason I’m writing this piece.</p>\n\n<p>As far as I can see, the problem is not that JavaScript developers do not understand the cascade, the problem is that they do not desire to use it. But is this really a problem?</p>\n\n<h3>Global scope</h3>\n\n<p>CSS only has a global scope. A <code>button.primary</code> rule affects all buttons with that class on the entire page. This is the strength of the cascade. In a recent project I spent half an hour with the designer defining a primary, secondary, and tertiary button/link class. That was time well-spent: both of us could drop buttons into the code from that time on, and their styles would just work.</p>\n\n<p>JavaScripters have learned to dislike and distrust the global scope, however. Although this is an excellent idea in JavaScript, so the theory goes, it makes a lot less sense in CSS, since part of the strength of CSS is exactly its cascade-induced global scope. Therefore JavaScripters do not like CSS; see, for instance, <a href=\"https://www.joeforshaw.com/blog/css-the-bad-bits-and-how-to-avoid-them\" class=\"external\">CSS: the bad bits</a>, which opens prominently with complaints about the global scope.</p>\n\n<p>But don’t JavaScripters see the advantages of the CSS cascade? Aren’t they ignoring part of what makes CSS so powerful?</p>\n\n<h3>Local scope</h3>\n\n<p>Well, yes and no. To return to my earlier primary button example, it makes excellent sense in a relatively simple site like the one we were making. It starts making less sense when you want to drop not a single button, but an entire component, which might include a button, but needs the button style to conform to the component style. In that case you want to make sure that general styles don’t influence the component’s button. You want your CSS to be local in scope.</p>\n\n<p>None of this is particularly surprising, and I have no doubt that my readers have figured this out for themselves and hit on the remarkable solution of using both global and local styles, depending on the exact nature of their project. As <a href=\"https://twitter.com/sonniesedge/status/984327424719585281\" class=\"external\">Charlie Owen said</a>:</p>\n\n<blockquote>\n<p>I hear people making out that scoped and cascade are incompatible. But using the cascade just means (to me) making use of the global aspects of CSS. Set your default block level margins, your typography, etc high up. Then each component can scope anything extra.</p>\n</blockquote>\n\n<p>So far so good. This, as far as I can see, is the correct solution to the problem.</p>\n\n<h3>What’s the problem?</h3>\n\n<p>But what am I to make of the complaints about JavaScripters not understanding the cascade? I think they understand it perfectly fine; they just decide not to use it.</p>\n\n<p>So I don’t think there’s really a problem here. Still, I decided to write this piece and ask this question because I might overlook something.</p>\n\n<p>So what’s the problem with JavaScript developers and the cascade beyond them overlooking some use cases for global styles, wrapped up as they are in making everything local? Could someone please explain?</p>\n\n<p>Thanks.</p>\n","enclosure":{},"categories":["Coding techniques"],"color":"darkgray","category":"QuirksBlog","date":"2018-04-17 13:45:19","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Know JS online event","pubDate":"2018-04-02 15:24:26","link":"http://www.quirksmode.org/blog/archives/2018/04/know_js_online.html","guid":"http://www.quirksmode.org/blog/archives/2018/04/know_js_online.html","author":"","thumbnail":"","description":"\n<p>On 13th of April the inaugural <a href=\"https://knowjs.org/\" class=\"external\">Know JS</a> online conference takes place. I’m tangentially involved, though I will not speak. The conference is online, and runs from 9am to 6pm Eastern on 13th of April. You can attend from the comforts of your own house.</p>\n\n<p>Know JS is a fairly special type of online conference. Four speakers,\n<a href=\"https://twitter.com/getify\" class=\"external\">Kyle Simpson</a>,\n<a href=\"https://twitter.com/biancagando\" class=\"external\">Bianca Gandolfo</a>,\n<a href=\"https://kentcdodds.com/\" class=\"external\">Kent C. Dodds</a>,\nand <a href=\"https://jemyoung.com/about/\" class=\"external\">Jem Young</a>,\nwill give not a conference talk, but a full two-hour workshop about a topic of their choice. By buying a ticket you get access to all four of these workshops.</p>\n\n<p>In addition, all four speakers will release a pre-recorded short presentation that sets the tone for their workshops, and these presentations will be available for anyone, not just for ticket holders. They will be <a href=\"https://knowjs.org/\" class=\"external\">published</a> as they come in, starting today.</p>\n\n<p><a href=\"https://certifiedfreshevents.com/events/knowjs-2018/\" class=\"external\">Tickets</a> are $299, and we decided to cap their number at 50, so that some sort of live interaction between the attendee (that’s you!) and the teacher is possible.</p>\n\n<p>This is a fairly unique type of conference, and credit wholly goes to Kyle, who came up with the idea. His fellow organisers, <a href=\"https://www.remotesynthesis.com/\" class=\"external\">Brian Rinaldi</a> and me, thought this was a very interesting take that we should try. So here we are, trying it.</p>\n\n<p>This project started with Brian and me meeting in Sofia, and since we’re both conference organisers the conversation quickly turned to conference organising. We found that both of us would like to run a JavaScript event that was not focused on one or more of the popular framenworks, but instead on the language itself. We feel this topic is somewhat underrepresented in today’s conference cycle.</p>\n\n<p>We decided to get Kyle Simpson on board, and our thoughts started to run toward an online event. Although all three of us would prefer a real conference, we weren’t sure how well the topic would be received. So we’re testing the waters, as it were, and if this event is a success, we’ll probably make the jump to an offline conference, ideally with editions in the States and in Europe.</p>\n\n<p>We’ll see what happens next. But if you’re interested in JavaScript the language, please take a good look at what we’re offering.</p>\n","content":"\n<p>On 13th of April the inaugural <a href=\"https://knowjs.org/\" class=\"external\">Know JS</a> online conference takes place. I’m tangentially involved, though I will not speak. The conference is online, and runs from 9am to 6pm Eastern on 13th of April. You can attend from the comforts of your own house.</p>\n\n<p>Know JS is a fairly special type of online conference. Four speakers,\n<a href=\"https://twitter.com/getify\" class=\"external\">Kyle Simpson</a>,\n<a href=\"https://twitter.com/biancagando\" class=\"external\">Bianca Gandolfo</a>,\n<a href=\"https://kentcdodds.com/\" class=\"external\">Kent C. Dodds</a>,\nand <a href=\"https://jemyoung.com/about/\" class=\"external\">Jem Young</a>,\nwill give not a conference talk, but a full two-hour workshop about a topic of their choice. By buying a ticket you get access to all four of these workshops.</p>\n\n<p>In addition, all four speakers will release a pre-recorded short presentation that sets the tone for their workshops, and these presentations will be available for anyone, not just for ticket holders. They will be <a href=\"https://knowjs.org/\" class=\"external\">published</a> as they come in, starting today.</p>\n\n<p><a href=\"https://certifiedfreshevents.com/events/knowjs-2018/\" class=\"external\">Tickets</a> are $299, and we decided to cap their number at 50, so that some sort of live interaction between the attendee (that’s you!) and the teacher is possible.</p>\n\n<p>This is a fairly unique type of conference, and credit wholly goes to Kyle, who came up with the idea. His fellow organisers, <a href=\"https://www.remotesynthesis.com/\" class=\"external\">Brian Rinaldi</a> and me, thought this was a very interesting take that we should try. So here we are, trying it.</p>\n\n<p>This project started with Brian and me meeting in Sofia, and since we’re both conference organisers the conversation quickly turned to conference organising. We found that both of us would like to run a JavaScript event that was not focused on one or more of the popular framenworks, but instead on the language itself. We feel this topic is somewhat underrepresented in today’s conference cycle.</p>\n\n<p>We decided to get Kyle Simpson on board, and our thoughts started to run toward an online event. Although all three of us would prefer a real conference, we weren’t sure how well the topic would be received. So we’re testing the waters, as it were, and if this event is a success, we’ll probably make the jump to an offline conference, ideally with editions in the States and in Europe.</p>\n\n<p>We’ll see what happens next. But if you’re interested in JavaScript the language, please take a good look at what we’re offering.</p>\n","enclosure":{},"categories":["Conferences"],"color":"darkgray","category":"QuirksBlog","date":"2018-04-02 15:24:26","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Linkbait 39","pubDate":"2018-03-20 11:31:57","link":"http://www.quirksmode.org/blog/archives/2018/03/linkbait_39.html","guid":"http://www.quirksmode.org/blog/archives/2018/03/linkbait_39.html","author":"","thumbnail":"","description":"\n<p>More like a link-late, but here it finally is.</p>\n\n<ul class=\"linkbait\">\n<li>Tim Kadlec takes a look at <a href=\"https://timkadlec.com/remembers/2018-03-19-how-fast-is-amp-really/\" class=\"external\">how fast AMP really is</a>, spurred on by Ferdy Christiant’s research that we <a href=\"http://www.quirksmode.org/blog/archives/2018/02/linkbait_37.html\">featured</a> earlier. Tim concludes that the main performance benefit comes from AMP pages being served from Google’s CDN. Other than that AMP pages are mildly more performant than non-AMP pages, mostly because it arranges some optimizations and resource loading for you. The cost, however, is a slightly slower Start Render time, because the scripts that arrange all those optimizations and loading have to run before the AMP page is ready to be shown.\n<blockquote>\n<p>Right now, the incentives being placed on AMP content seem to be accomplishing exactly what you would think: they’re incentivizing AMP, not performance.</p>\n</blockquote>\n</li>\n\n<li>Steve Yegge <a href=\"https://medium.com/@steve.yegge/who-will-steal-android-from-google-af3622b6252e\" class=\"external\">shares his thoughts</a> on the current state of Android. While Google still retains control over Android itself, it may be losing its grip on important auxiliaries:\n<blockquote>\n<p>We’ve seen that there are at least three coordinated types of attack happening in different dimensions: The developer ecosystem (React Native and friends), the store (Amazon’s app store and Cyanogen’s rumored successor), and the lightweight in-app marketplaces (Facebook and WeChat, so far). Google’s reactions to each of these threats so far have been… well, let’s just say they’re still on top. For now.</p>\n</blockquote>\nDoes that matter? Yes, for tech shops it does.\n<blockquote>\n<p>If you think there’s any risk at all that Google might lose control of Android, then your best bet is to use a cross-platform framework, because it hedges your bet via improved portability.</p>\n</blockquote>\nReact Native, in other words. If it can survive the current storm aimed against Facebook — but it probably can, because it can always be spun off.</li>\n\n<li>\n<a href=\"https://mtlynch.io/why-i-quit-google/\" class=\"external\">Why I quit Google</a> is an interesting article about self-defeating “objective” promotion criteria at Google.</li>\n\n<li>Steve Faulkner <a href=\"https://developer.paciellogroup.com/blog/2018/03/short-note-on-what-css-display-properties-do-to-table-semantics/\" class=\"external\">clarifies</a> how the HTML/CSS DOM, which can be changed by, among others, the flexbox <code>order</code> property, isn’t reflected in the browser’s accessibility tree. This is a reaction to <a href=\"http://www.quirksmode.org/blog/archives/2018/02/linkbait_38.html\">last time’s discussion</a> about CSS variable use for table sorting.</li>\n\n<li>Chris Coyier shows how to make <a href=\"https://css-tricks.com/notched-boxes/\" class=\"external\">notched boxes</a> in kind-of Battlestar Galactica style. Nice.</li>\n\n<li>\n<a href=\"https://codeburst.io/taming-huge-collections-of-dom-nodes-bebafdba332\" class=\"external\">Excellent article</a> on dealing with huge collections of DOM nodes — think tables with 1,000 rows. Vanilla JavaScript remains by far the best option performance-wise. Also, don’t bother optimising your core JavaScript loops and stuff — instead, optimise DOM handling. Clear DOM subtrees through <code>innerHTML</code>. On the other hand, don’t destroy nodes you may need later on — re-building them is way more expensive than keeping them around in memory.<br>And no, this is nothing new. Ten years ago I would have given the same advice. But it’s good to know that the old rules are still being supported by the current data.</li>\n\n\n<li>\n<a href=\"https://twitter.com/awbjs/status/969638933469392896\" class=\"external\">Food for thought</a>:\n<blockquote>\n<p>I’m beginning to think JS may be bifurcating into two largely disjoint communities. The “sw engineers” comfortable with pre-deployment tool chains and the “explorers” who want \"live programming\" tools </p>\n</blockquote>\nI’m not 100% sure what Allen means by live programmers, and when I wanted to ask them I hit on <a href=\"https://twitter.com/ppk/status/975093870185865216\" class=\"external\">my own definition</a> and tweeted that instead.<br>I think that the big split in JavaScript land is between those who firmly keep their eyes on browsers as our development platforms, and those who want to abstract away browsers.<br>And yes, I think the first group is right and the second one is wrong, and that the second one will run into problems due to not understanding the platforms it’s creating software for.</li>\n\n<li>\n<a href=\"https://www.thoughtworks.com/insights/blog/dividing-frontend-backend-antipattern\" class=\"external\">This article</a> calls the front-end/back-end division an antipattern. While I disagree with that premise, most of the article treats how back-enders look down on front-enders, and why that attitude should end — which is something I agree with.\n<blockquote>\n<p>Frontend engineers now solve the same kinds of problems as their backend counterparts, using the same kinds of solutions, and it is harmful to continue arbitrarily dividing us.</p>\n<p>To be clear, I’m not saying that we all need to be experts in everything. [...] While it is perfectly valid to dislike a particular technology, such as CSS, the industry's culture of contempt for frontend work feeds into the outdated divide between frontend and backend, and detracts from building fast-moving, competitive teams and companies.</p>\n</blockquote>\nSuch as CSS. Thar’s a problem I’ll have to get back to one of these days.<br>Pointing out that front-end can be as complex as back-end, and doing so in a back-ender-friendly way, is a good idea. Still, the article manages to ignore browsers as a developer platform entirely, despite the fact that mentioning them would have made its point even stronger. But maybe back-enders don’t want to hear about browsers because they’re terrified of them.</li>\n<li>According to <a href=\"https://medium.com/@tobie/is-patronage-a-sustainable-solution-to-open-source-sustainability-332e5c302909\" class=\"external\">Tobie Langel</a> contributing to OSS has ROI roughly equal to using OSS. Twenty years ago large companies were leery of using it; now they're leery of contributing to open source. So we have to convince them.</li>\n\n<li>Insights and data, baby! The <a href=\"https://insights.stackoverflow.com/survey/2018/\" class=\"external\">StackOverflow developer survey</a> and the <a href=\"https://designcensus.org/\" class=\"external\">Design Census</a> have been released. These surveys always yield interesting data.</li>\n\n\n\n<li>Seems like <a href=\"https://www.healthiq.com/careers\" class=\"external\">an awful place to work</a> for the health-unconscious such as myself.</li>\n\n<li>\n<a href=\"https://www.youtube.com/watch?v=FvfCsws1K4Q\" class=\"external\">Chronicles of Crime</a> is a board game that incorporates an app, VR, and QR codes. Apps and VR have been done before in board games — the wonderful <a href=\"https://boardgamegeek.com/boardgame/161970/alchemists\" class=\"external\">Alchemists</a> was the poster child for apps in games — but as far as I know nobody yet combined them (i.e. let the app do more than just show VR), and nobody yet added QR codes, which are supposed to be a dying technology.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","content":"\n<p>More like a link-late, but here it finally is.</p>\n\n<ul class=\"linkbait\">\n<li>Tim Kadlec takes a look at <a href=\"https://timkadlec.com/remembers/2018-03-19-how-fast-is-amp-really/\" class=\"external\">how fast AMP really is</a>, spurred on by Ferdy Christiant’s research that we <a href=\"http://www.quirksmode.org/blog/archives/2018/02/linkbait_37.html\">featured</a> earlier. Tim concludes that the main performance benefit comes from AMP pages being served from Google’s CDN. Other than that AMP pages are mildly more performant than non-AMP pages, mostly because it arranges some optimizations and resource loading for you. The cost, however, is a slightly slower Start Render time, because the scripts that arrange all those optimizations and loading have to run before the AMP page is ready to be shown.\n<blockquote>\n<p>Right now, the incentives being placed on AMP content seem to be accomplishing exactly what you would think: they’re incentivizing AMP, not performance.</p>\n</blockquote>\n</li>\n\n<li>Steve Yegge <a href=\"https://medium.com/@steve.yegge/who-will-steal-android-from-google-af3622b6252e\" class=\"external\">shares his thoughts</a> on the current state of Android. While Google still retains control over Android itself, it may be losing its grip on important auxiliaries:\n<blockquote>\n<p>We’ve seen that there are at least three coordinated types of attack happening in different dimensions: The developer ecosystem (React Native and friends), the store (Amazon’s app store and Cyanogen’s rumored successor), and the lightweight in-app marketplaces (Facebook and WeChat, so far). Google’s reactions to each of these threats so far have been… well, let’s just say they’re still on top. For now.</p>\n</blockquote>\nDoes that matter? Yes, for tech shops it does.\n<blockquote>\n<p>If you think there’s any risk at all that Google might lose control of Android, then your best bet is to use a cross-platform framework, because it hedges your bet via improved portability.</p>\n</blockquote>\nReact Native, in other words. If it can survive the current storm aimed against Facebook — but it probably can, because it can always be spun off.</li>\n\n<li>\n<a href=\"https://mtlynch.io/why-i-quit-google/\" class=\"external\">Why I quit Google</a> is an interesting article about self-defeating “objective” promotion criteria at Google.</li>\n\n<li>Steve Faulkner <a href=\"https://developer.paciellogroup.com/blog/2018/03/short-note-on-what-css-display-properties-do-to-table-semantics/\" class=\"external\">clarifies</a> how the HTML/CSS DOM, which can be changed by, among others, the flexbox <code>order</code> property, isn’t reflected in the browser’s accessibility tree. This is a reaction to <a href=\"http://www.quirksmode.org/blog/archives/2018/02/linkbait_38.html\">last time’s discussion</a> about CSS variable use for table sorting.</li>\n\n<li>Chris Coyier shows how to make <a href=\"https://css-tricks.com/notched-boxes/\" class=\"external\">notched boxes</a> in kind-of Battlestar Galactica style. Nice.</li>\n\n<li>\n<a href=\"https://codeburst.io/taming-huge-collections-of-dom-nodes-bebafdba332\" class=\"external\">Excellent article</a> on dealing with huge collections of DOM nodes — think tables with 1,000 rows. Vanilla JavaScript remains by far the best option performance-wise. Also, don’t bother optimising your core JavaScript loops and stuff — instead, optimise DOM handling. Clear DOM subtrees through <code>innerHTML</code>. On the other hand, don’t destroy nodes you may need later on — re-building them is way more expensive than keeping them around in memory.<br>And no, this is nothing new. Ten years ago I would have given the same advice. But it’s good to know that the old rules are still being supported by the current data.</li>\n\n\n<li>\n<a href=\"https://twitter.com/awbjs/status/969638933469392896\" class=\"external\">Food for thought</a>:\n<blockquote>\n<p>I’m beginning to think JS may be bifurcating into two largely disjoint communities. The “sw engineers” comfortable with pre-deployment tool chains and the “explorers” who want \"live programming\" tools </p>\n</blockquote>\nI’m not 100% sure what Allen means by live programmers, and when I wanted to ask them I hit on <a href=\"https://twitter.com/ppk/status/975093870185865216\" class=\"external\">my own definition</a> and tweeted that instead.<br>I think that the big split in JavaScript land is between those who firmly keep their eyes on browsers as our development platforms, and those who want to abstract away browsers.<br>And yes, I think the first group is right and the second one is wrong, and that the second one will run into problems due to not understanding the platforms it’s creating software for.</li>\n\n<li>\n<a href=\"https://www.thoughtworks.com/insights/blog/dividing-frontend-backend-antipattern\" class=\"external\">This article</a> calls the front-end/back-end division an antipattern. While I disagree with that premise, most of the article treats how back-enders look down on front-enders, and why that attitude should end — which is something I agree with.\n<blockquote>\n<p>Frontend engineers now solve the same kinds of problems as their backend counterparts, using the same kinds of solutions, and it is harmful to continue arbitrarily dividing us.</p>\n<p>To be clear, I’m not saying that we all need to be experts in everything. [...] While it is perfectly valid to dislike a particular technology, such as CSS, the industry's culture of contempt for frontend work feeds into the outdated divide between frontend and backend, and detracts from building fast-moving, competitive teams and companies.</p>\n</blockquote>\nSuch as CSS. Thar’s a problem I’ll have to get back to one of these days.<br>Pointing out that front-end can be as complex as back-end, and doing so in a back-ender-friendly way, is a good idea. Still, the article manages to ignore browsers as a developer platform entirely, despite the fact that mentioning them would have made its point even stronger. But maybe back-enders don’t want to hear about browsers because they’re terrified of them.</li>\n<li>According to <a href=\"https://medium.com/@tobie/is-patronage-a-sustainable-solution-to-open-source-sustainability-332e5c302909\" class=\"external\">Tobie Langel</a> contributing to OSS has ROI roughly equal to using OSS. Twenty years ago large companies were leery of using it; now they're leery of contributing to open source. So we have to convince them.</li>\n\n<li>Insights and data, baby! The <a href=\"https://insights.stackoverflow.com/survey/2018/\" class=\"external\">StackOverflow developer survey</a> and the <a href=\"https://designcensus.org/\" class=\"external\">Design Census</a> have been released. These surveys always yield interesting data.</li>\n\n\n\n<li>Seems like <a href=\"https://www.healthiq.com/careers\" class=\"external\">an awful place to work</a> for the health-unconscious such as myself.</li>\n\n<li>\n<a href=\"https://www.youtube.com/watch?v=FvfCsws1K4Q\" class=\"external\">Chronicles of Crime</a> is a board game that incorporates an app, VR, and QR codes. Apps and VR have been done before in board games — the wonderful <a href=\"https://boardgamegeek.com/boardgame/161970/alchemists\" class=\"external\">Alchemists</a> was the poster child for apps in games — but as far as I know nobody yet combined them (i.e. let the app do more than just show VR), and nobody yet added QR codes, which are supposed to be a dying technology.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","enclosure":{},"categories":["Linkbait"],"color":"darkgray","category":"QuirksBlog","date":"2018-03-20 11:31:57","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Linkbait 38","pubDate":"2018-02-27 16:16:42","link":"http://www.quirksmode.org/blog/archives/2018/02/linkbait_38.html","guid":"http://www.quirksmode.org/blog/archives/2018/02/linkbait_38.html","author":"","thumbnail":"","description":"\n<p>The missing links.</p>\n\n<ul class=\"linkbait\">\n<li>Elegant and simple <a href=\"https://meyerweb.com/eric/thoughts/2018/02/21/displaying-css-breakpoint-information-with-generated-content/\" class=\"external\">solution</a> by Mr. M. that shows breakpoint information during website development. So simple that it surprises me this isn’t being used widely yet.<br>\nEmil Björklund <a href=\"https://thatemil.com/blog/2018/02/23/custom-properties-breakpoint-debugging/\" class=\"external\">adds a slight twist</a> and a few notes.</li>\n\n<li>VERY cute <a href=\"https://codepen.io/dsenneff/pen/QajVxO\" class=\"external\">animated avatar</a>. Simple, subtle, efficient animations FTW!</li>\n\n<li>Excellent <a href=\"https://www.chenhuijing.com/blog/how-i-design-with-css-grid/\" class=\"external\">article about designing with grids</a>. Not exactly a tutorial; more like a showcase of how to bring all those grid elements together to form a nice, and above all non-standard site design.</li>\n\n<li>Lea has a <a href=\"https://leaverou.github.io/talks/intro/\" class=\"external\">new talk</a>: an introduction to web development for CS students. It contains <a href=\"https://leaverou.github.io/talks/intro/#context-quiz\" class=\"external\">a JavaScript context quiz</a> (I had only two errors), and highlights <a href=\"http://cssgridgarden.com/\" class=\"external\">CSS Grid Garden</a>, where you can learn grid, and <a href=\"https://flukeout.github.io/\" class=\"external\">a CSS Selector challenge</a> with plates, bento boxes, apples, and more.</li>\n\n<li>Good <a href=\"https://alistapart.com/article/owning-the-role-of-the-front-end-developer\" class=\"external\">piece</a> by Ronald Méndez on ALA about earning a seat at the table as a front-end engineer. His early steps mirror the ones I made about ten years earlier: the biggest change was me just sitting down with graphic designers to go over their work before showing it to clients. This worked amazingly, as Ronald also found.<br>\nAnyway, worth a read if you feel under-appreciated as a web developer.</li>\n\n<li>Stuart <a href=\"https://www.kryogenix.org/days/2018/02/20/collecting-user-data-while-protecting-user-privacy/\" class=\"external\">muses about collecting data</a>, and shows that it’s possible to collect meaningful data without compromising individual users’ privacy. The trick is that users should <strong>lie</strong>. Not all the time, and not all the users, but you should ask a certain percentage of your users to lie.<br>\nIf, say, 10% of Chrome users say they use Firefox and 10% of Firefox users say they use Chrome, the aggregate browser use statistics remain roughly the same, but you cannot say with certainty which browser an individual is using.\n\n</li>\n<li>Roman Koramov published <a href=\"http://kizu.ru/en/blog/variable-order/\" class=\"external\">a truly eye-opening use of CSS variables</a> for making a sortable table. No JavaScript needed.<br>\nUnfortunately, <a href=\"https://twitter.com/kizmarh/status/966799245104877569\" class=\"external\">the technique causes accessibility issues</a> because screen readers cannot follow CSS order — just DOM order. So they ignore the sorting.<br>\nIt <a href=\"https://twitter.com/ppk/status/966803292033552385\" class=\"external\">seems to me</a> we can invoke progressive enhancement for some problems. Table isn’t sorted? Pity; it works OK enough without being sorted. Patrick Lauke <a href=\"https://twitter.com/patrick_h_lauke/status/966805750021611520\" class=\"external\">disagreed</a>, but I feel he’s arguing strictly from a worst-case scenario.<br>\nAnyway, make up your own mind — as long as you remember CSS variables are awesome.</li>\n\n<li>Frank Chimero <a href=\"https://frankchimero.com/writing/everything-easy-is-hard-again/\" class=\"external\">defines spaghetti toolchains</a>. I wish I thought of that term.\n<blockquote>\n<p>simply npm your webpack via grunt with vue babel or bower to react asdfjkl;lkdhgxdlciuhw</p>\n<p>[...] Last month, I had to install a package manager to install a package manager. That’s when I closed my laptop and slowly backed away from it. We’re a long way from the CSS Zen Garden where I started.</p>\n<p>If you go talk to a senior software developer, you’ll probably hear them complain about spaghetti code. [...] while I can’t identify spaghetti code as a designer, I sure as hell know about spaghetti workflows and spaghetti toolchains. It feels like we’re there now on the web.</p>\n</blockquote>\n</li>\n\n<li>Chris Coyier <a href=\"https://css-tricks.com/complexity/\" class=\"external\">reacts</a> to that article. He doesn’t exactly disagree, but points out that the web is a big place, and while some sites don’t need complexity, others do.\n\n<blockquote>\n<p>Developers generally aren't asked to innovate on the business and product side. They build what they are told to, so they use their smarts to innovate on their own tools.</p>\n</blockquote>\nAnd\n<blockquote>\n<p>We talk about complexity, but it's all opt-in. A wonderfully useful (and simple) website of a decade ago remains wonderfully useful and simple. Fortunately for all involved, the web, thus far, has taken compatibility quite seriously. Old websites don't just break.</p>\n</blockquote>\nWhat I’m afraid of, though, is that today a simple website is regarded as a sub-optimal solution. A website has to opt into everything the web has to offer, or ... well, I’m not sure why, but there must be a huge downside to not making it complex.</li>\n\n<li>\n<a href=\"https://www.wired.com/story/how-trump-conquered-facebookwithout-russian-ads\" class=\"external\">An inside look</a> at Facebook in the 2016 campaign, and more in general the way it sells ads, with controversial ads getting a discount.\n<blockquote>\n<p>The Trump and Clinton campaigns bid ruthlessly for the same online real estate in front of the same swing-state voters. But because Trump used provocative content to stoke social media buzz, and he was better able to drive likes, comments, and shares than Clinton, his bids received a boost from Facebook’s click model, effectively winning him more media for less money.</p>\n</blockquote>\nNo Russians necessary. The Russian involvement existed, but it was <a href=\"http://www.quirksmode.org/blog/archives/2017/05/why_the_politic.html\">hyped up</a> by the tech caste in order to show that technology was still magic, and was gratefully accepted by “moderate” right-wing voters wishing to be absolved from Trump — and possibly hardcore Clinton supporters wanting to shift blame away from her.<br>\nAs Matt Yglesias <a href=\"https://twitter.com/mattyglesias/status/968513084989104128\" class=\"external\">said</a>:\n<blockquote>\n<p>Given that Trump’s strongest support is among the least-online generation we should be a little skeptical of attributing anything to digital wizardry.</p>\n</blockquote>\n</li>\n\n<li>Jeremy <a href=\"https://adactio.com/journal/13498\" class=\"external\">continues</a> last week’s <a href=\"http://www.quirksmode.org/blog/archives/2018/02/linkbait_37.html\">AMP discussion</a> with the fundamental question: should we countenance companies’ power over the web, even if they mostly use their power for good?\n<blockquote>\n<p>One of my greatest fears for the web is that building it becomes the domain of a professional priesthood. Anything that raises the bar to writing some HTML or CSS makes me very worried. Usually it’s toolchains that make things more complex, but in this case the barrier to entry is being brought right into the browser itself.</p>\n<p>[...] some CSS will be off-limits until they meet the entry requirements of HTTPS …even though CSS and HTTPS have literally nothing to do with one another. [...]</p>\n<p>No doubt Mozilla (and the W3C Technical Architecture Group) believe that they are doing the right thing. [...] They believe that, in this particular case, the ends justify the means.</p>\n<p>I strongly disagree.</p>\n</blockquote>\n\n</li>\n<li>Interesting <a href=\"https://twitter.com/i/moments/887721492972175360?lang=en\" class=\"external\">examples of AR</a> by Luke Wroblewski.</li>\n\n<li>Samsung puts on its first own web conference, <a href=\"https://samsungcreate.com/\" class=\"external\">Samsung Create</a>. I approve of browser makers setting up their own conferences. It makes the engineers accessible to web developers, and allows both sides to find out what the other is thinking. Also, I approve of more browser vendors, since it helps diversity. Pity the conference is in San Francisco; let’s hope for a European edition. Also a pity there’s not much more information yet.</li>\n\n<li>And Tomi gives us the <a href=\"http://communities-dominate.blogs.com/brands/2018/02/smartphone-stats-full-year-2017-top-10-os-installed-base-and-everything-else-you-ever-wanted.html\" class=\"external\">definitive 2017 smartphone stats</a>.\n<ol>\n<li>Samsung</li>\n\t<li>BBK</li>\n\t<li>Apple</li>\n</ol>\nWTF is BBK? Read the article; was new for me, too.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","content":"\n<p>The missing links.</p>\n\n<ul class=\"linkbait\">\n<li>Elegant and simple <a href=\"https://meyerweb.com/eric/thoughts/2018/02/21/displaying-css-breakpoint-information-with-generated-content/\" class=\"external\">solution</a> by Mr. M. that shows breakpoint information during website development. So simple that it surprises me this isn’t being used widely yet.<br>\nEmil Björklund <a href=\"https://thatemil.com/blog/2018/02/23/custom-properties-breakpoint-debugging/\" class=\"external\">adds a slight twist</a> and a few notes.</li>\n\n<li>VERY cute <a href=\"https://codepen.io/dsenneff/pen/QajVxO\" class=\"external\">animated avatar</a>. Simple, subtle, efficient animations FTW!</li>\n\n<li>Excellent <a href=\"https://www.chenhuijing.com/blog/how-i-design-with-css-grid/\" class=\"external\">article about designing with grids</a>. Not exactly a tutorial; more like a showcase of how to bring all those grid elements together to form a nice, and above all non-standard site design.</li>\n\n<li>Lea has a <a href=\"https://leaverou.github.io/talks/intro/\" class=\"external\">new talk</a>: an introduction to web development for CS students. It contains <a href=\"https://leaverou.github.io/talks/intro/#context-quiz\" class=\"external\">a JavaScript context quiz</a> (I had only two errors), and highlights <a href=\"http://cssgridgarden.com/\" class=\"external\">CSS Grid Garden</a>, where you can learn grid, and <a href=\"https://flukeout.github.io/\" class=\"external\">a CSS Selector challenge</a> with plates, bento boxes, apples, and more.</li>\n\n<li>Good <a href=\"https://alistapart.com/article/owning-the-role-of-the-front-end-developer\" class=\"external\">piece</a> by Ronald Méndez on ALA about earning a seat at the table as a front-end engineer. His early steps mirror the ones I made about ten years earlier: the biggest change was me just sitting down with graphic designers to go over their work before showing it to clients. This worked amazingly, as Ronald also found.<br>\nAnyway, worth a read if you feel under-appreciated as a web developer.</li>\n\n<li>Stuart <a href=\"https://www.kryogenix.org/days/2018/02/20/collecting-user-data-while-protecting-user-privacy/\" class=\"external\">muses about collecting data</a>, and shows that it’s possible to collect meaningful data without compromising individual users’ privacy. The trick is that users should <strong>lie</strong>. Not all the time, and not all the users, but you should ask a certain percentage of your users to lie.<br>\nIf, say, 10% of Chrome users say they use Firefox and 10% of Firefox users say they use Chrome, the aggregate browser use statistics remain roughly the same, but you cannot say with certainty which browser an individual is using.\n\n</li>\n<li>Roman Koramov published <a href=\"http://kizu.ru/en/blog/variable-order/\" class=\"external\">a truly eye-opening use of CSS variables</a> for making a sortable table. No JavaScript needed.<br>\nUnfortunately, <a href=\"https://twitter.com/kizmarh/status/966799245104877569\" class=\"external\">the technique causes accessibility issues</a> because screen readers cannot follow CSS order — just DOM order. So they ignore the sorting.<br>\nIt <a href=\"https://twitter.com/ppk/status/966803292033552385\" class=\"external\">seems to me</a> we can invoke progressive enhancement for some problems. Table isn’t sorted? Pity; it works OK enough without being sorted. Patrick Lauke <a href=\"https://twitter.com/patrick_h_lauke/status/966805750021611520\" class=\"external\">disagreed</a>, but I feel he’s arguing strictly from a worst-case scenario.<br>\nAnyway, make up your own mind — as long as you remember CSS variables are awesome.</li>\n\n<li>Frank Chimero <a href=\"https://frankchimero.com/writing/everything-easy-is-hard-again/\" class=\"external\">defines spaghetti toolchains</a>. I wish I thought of that term.\n<blockquote>\n<p>simply npm your webpack via grunt with vue babel or bower to react asdfjkl;lkdhgxdlciuhw</p>\n<p>[...] Last month, I had to install a package manager to install a package manager. That’s when I closed my laptop and slowly backed away from it. We’re a long way from the CSS Zen Garden where I started.</p>\n<p>If you go talk to a senior software developer, you’ll probably hear them complain about spaghetti code. [...] while I can’t identify spaghetti code as a designer, I sure as hell know about spaghetti workflows and spaghetti toolchains. It feels like we’re there now on the web.</p>\n</blockquote>\n</li>\n\n<li>Chris Coyier <a href=\"https://css-tricks.com/complexity/\" class=\"external\">reacts</a> to that article. He doesn’t exactly disagree, but points out that the web is a big place, and while some sites don’t need complexity, others do.\n\n<blockquote>\n<p>Developers generally aren't asked to innovate on the business and product side. They build what they are told to, so they use their smarts to innovate on their own tools.</p>\n</blockquote>\nAnd\n<blockquote>\n<p>We talk about complexity, but it's all opt-in. A wonderfully useful (and simple) website of a decade ago remains wonderfully useful and simple. Fortunately for all involved, the web, thus far, has taken compatibility quite seriously. Old websites don't just break.</p>\n</blockquote>\nWhat I’m afraid of, though, is that today a simple website is regarded as a sub-optimal solution. A website has to opt into everything the web has to offer, or ... well, I’m not sure why, but there must be a huge downside to not making it complex.</li>\n\n<li>\n<a href=\"https://www.wired.com/story/how-trump-conquered-facebookwithout-russian-ads\" class=\"external\">An inside look</a> at Facebook in the 2016 campaign, and more in general the way it sells ads, with controversial ads getting a discount.\n<blockquote>\n<p>The Trump and Clinton campaigns bid ruthlessly for the same online real estate in front of the same swing-state voters. But because Trump used provocative content to stoke social media buzz, and he was better able to drive likes, comments, and shares than Clinton, his bids received a boost from Facebook’s click model, effectively winning him more media for less money.</p>\n</blockquote>\nNo Russians necessary. The Russian involvement existed, but it was <a href=\"http://www.quirksmode.org/blog/archives/2017/05/why_the_politic.html\">hyped up</a> by the tech caste in order to show that technology was still magic, and was gratefully accepted by “moderate” right-wing voters wishing to be absolved from Trump — and possibly hardcore Clinton supporters wanting to shift blame away from her.<br>\nAs Matt Yglesias <a href=\"https://twitter.com/mattyglesias/status/968513084989104128\" class=\"external\">said</a>:\n<blockquote>\n<p>Given that Trump’s strongest support is among the least-online generation we should be a little skeptical of attributing anything to digital wizardry.</p>\n</blockquote>\n</li>\n\n<li>Jeremy <a href=\"https://adactio.com/journal/13498\" class=\"external\">continues</a> last week’s <a href=\"http://www.quirksmode.org/blog/archives/2018/02/linkbait_37.html\">AMP discussion</a> with the fundamental question: should we countenance companies’ power over the web, even if they mostly use their power for good?\n<blockquote>\n<p>One of my greatest fears for the web is that building it becomes the domain of a professional priesthood. Anything that raises the bar to writing some HTML or CSS makes me very worried. Usually it’s toolchains that make things more complex, but in this case the barrier to entry is being brought right into the browser itself.</p>\n<p>[...] some CSS will be off-limits until they meet the entry requirements of HTTPS …even though CSS and HTTPS have literally nothing to do with one another. [...]</p>\n<p>No doubt Mozilla (and the W3C Technical Architecture Group) believe that they are doing the right thing. [...] They believe that, in this particular case, the ends justify the means.</p>\n<p>I strongly disagree.</p>\n</blockquote>\n\n</li>\n<li>Interesting <a href=\"https://twitter.com/i/moments/887721492972175360?lang=en\" class=\"external\">examples of AR</a> by Luke Wroblewski.</li>\n\n<li>Samsung puts on its first own web conference, <a href=\"https://samsungcreate.com/\" class=\"external\">Samsung Create</a>. I approve of browser makers setting up their own conferences. It makes the engineers accessible to web developers, and allows both sides to find out what the other is thinking. Also, I approve of more browser vendors, since it helps diversity. Pity the conference is in San Francisco; let’s hope for a European edition. Also a pity there’s not much more information yet.</li>\n\n<li>And Tomi gives us the <a href=\"http://communities-dominate.blogs.com/brands/2018/02/smartphone-stats-full-year-2017-top-10-os-installed-base-and-everything-else-you-ever-wanted.html\" class=\"external\">definitive 2017 smartphone stats</a>.\n<ol>\n<li>Samsung</li>\n\t<li>BBK</li>\n\t<li>Apple</li>\n</ol>\nWTF is BBK? Read the article; was new for me, too.</li>\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","enclosure":{},"categories":["Linkbait"],"color":"darkgray","category":"QuirksBlog","date":"2018-02-27 16:16:42","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Linkbait 37","pubDate":"2018-02-20 11:46:22","link":"http://www.quirksmode.org/blog/archives/2018/02/linkbait_37.html","guid":"http://www.quirksmode.org/blog/archives/2018/02/linkbait_37.html","author":"","thumbnail":"","description":"\n<p>We are an equal opportunity linkbait. Last week we bashed Facebook; this week we bash Google.</p>\n\n<ul class=\"linkbait\">\n<li>\n<a href=\"https://timkadlec.com/remembers/2018-02-14-the-two-faces-of-amp/\" class=\"external\">Tim Kadlec on AMP</a> — again.\n<blockquote>\n<p>The web community has stated over and over again that we’re not comfortable with Google incentivizing the use of AMP with search engine carrots. In response, Google has provided yet another search engine carrot for AMP.<br>\nThis wouldn’t bother me if AMP was open about what it is: a tool for folks to optimize their search engine placement. But of course, that’s not the claim. The claim is that AMP is “for the open web.”</p>\n</blockquote>\nThe fact that Google tries to use our ideology is one thing. The fact that we continue to fall for it is quite another.\n<blockquote>\n<p>Why a subset of HTML you ask? Well, mostly because web developers suck at their jobs and have loaded the web with a ton of JavaScript no one wants. Can't fault Google for wanting to change that. That part I can support. The less JavaScript the better.</p>\n</blockquote>\nAnd here we’re back smack bang in the middle of the problem. Today’s average web developer doesn’t have the faintest clue what he’s doing and can’t do it anyway without sixteen libraries and frameworks. Solve that problem and AMP goes away.<br>\n(Masculine pronoun used deliberately, and if there were a white pronoun I’d also have used it. I more and more think that frameworks and libraries are the things mediocre white men need to survive in today’s front-end world.)</li>\n\n<li>It’s useful to post a repeat link to an older The Register article that calls for <a href=\"https://www.theregister.co.uk/2017/05/19/open_source_insider_google_amp_bad_bad_bad/\" class=\"external\">killing AMP before it kills us</a>.\n<blockquote>\n<p>Except that, hilariously, to create an AMP page you have to load a, wait for it, yes a JavaScript file from Google. Pinboard founder Maciej Cegłowski already <a href=\"http://idlewords.com/amp_static.html\" class=\"external\">recreated</a> the Google AMP demo page without the Google AMP JavaScript and, unsurprisingly, it's faster than Google's version.</p>\n</blockquote>\nand\n<blockquote>\n<p>If we reject AMP, AMP dies.</p>\n</blockquote>\nIn order to reject AMP we need to tone down significantly on the frameworks. Could happen, but right now it’s not happening.\n</li>\n\n<li>Ferdy Christiant agrees with the performance findings. He <a href=\"https://ferdychristant.com/amp-the-missing-controversy-3b424031047\" class=\"external\">studied AMP’s performance profile</a> (supposedly its biggest advantage) and found that his test AMP page is not noticeably faster than a regular web page. Also, he found that AMP is effectively preloading assets for a better perceived performance. If your goal is to improve perceived performance, this is a clever idea. Ferdy adds, however, that this gives Google, owner of the world’s most important search, an unfair advantage, especially since it does not run this preloading trick on non-AMP pages, while I suppose it could if it wanted to.</li>\n\n<li>Luke Stevens <a href=\"https://twitter.com/lukestevens/status/963905902171402240\" class=\"external\">feels</a> Google is forking the web. This is reinforced by the news that <a href=\"https://github.com/ampproject/amphtml/issues/13471\" class=\"external\">AMP will now get a JavaScript component</a> as well; something that was purposely omitted so far. But it will of course be a special type of JavaScript that (only?) offers simple DOM methods that are ’sanitized” by the AMP app itself.<br>\nIn other words, a subset of JavaScript that will (surprise!) turn out to be not enough for AMP developers, who will either demand more and thus import the web’s performance problems to AMP, or leave AMP altogether, which leads to a win for the web.<br>\nIn any case, it makes it less and less clear what AMP is supposed to be a solution to. And  people have tried and failed to fork the web so often that I am not terribly worried right now.</li>\n\n<li>Mike Monteiro <a href=\"https://medium.com/@monteiro/designs-lost-generation-ac7289549017\" class=\"external\">calls for</a> some sort of licensing for designers. This is an interesting idea, but from experience with attempting the same on the front-end side I’ll warn him it’s an uphill battle. On the other hand, my attempt was more than ten years ago, and meanwhile the world has changed.<br>\nWhile discussing this article I had an idea: how would designers and back-end developers feel about front-end certification? Would they think it’s a good idea?<br>\nDesigners who agree with Mike should ask themselves something similar: would developers care? Possibly, I’d say.</li>\n\n<li>\n<a href=\"https://medium.com/kpcc-labs/patterns-for-writing-manageable-css-without-a-framework-109779743c41\" class=\"external\">Patterns for writing manageable CSS without a framework</a>. Simple, solid, sensible advice for managing your CSS. From a purely visual standpoint you can achieve the same by using a CSS framework, but\n<blockquote>\n<p>My preference for manually writing layout styles is to reduce dependencies, write less-complicated markup (not littered with wrappers and generic class names), and retain the greatest control possible. By writing my own layout system, I can make exceptions for certain cases without relying on “overrides”. When there are edge cases, exceptions can be easily made without hideous hacks upon CSS written by someone else.</p>\n</blockquote>\nMakes sense.</li>\n\n<li>Turns out Mozilla created a <a href=\"https://hacks.mozilla.org/2018/02/mdn-browser-compatibility-data/\" class=\"external\">JSON feed for browser compatibility data</a>. Interesting idea; I toyed with it ages ago but was too <del>lazy</del> busy to actually implement it.<br>\nAs far as I know, except for individual MDN pages, there is no interface yet where you can easily access the information (yeah, I know I could write one myself, but time constraints, and my profound lack of experience with GitHub).<br>\nStill, excellent idea, as long as the data is valid. I occasionally have beef with MDN data, and I also think they do not cover enough browsers. UC and Opera Mini, for instance, are missing. <em>World wide</em> web, remember?<br>\n(Via <a href=\"http://grochtdreis.de/weblog/2018/02/19/linkfutter-767/\" class=\"external\">Jens Grochtdreis</a>)</li>\n\n\n<li>A <em>very</em> neat trick: CSS-only sortable tables. <a href=\"http://kizu.ru/en/blog/variable-order/\" class=\"external\">Say again?</a> CSS only? Yup.<br>\nHow? By clever use of CSS variables. Read and make your head explode with possibilities.</li>\n\n<li>For the mobile history buffs among us: a long <a href=\"https://www.theregister.co.uk/2018/02/15/elop_and_the_fall_of_nokia_revisited/\" class=\"external\">look back</a> at the fall of Nokia during the tenure of Stephen Elop, drawn mainly from Finnish inside sources.</li>\n\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","content":"\n<p>We are an equal opportunity linkbait. Last week we bashed Facebook; this week we bash Google.</p>\n\n<ul class=\"linkbait\">\n<li>\n<a href=\"https://timkadlec.com/remembers/2018-02-14-the-two-faces-of-amp/\" class=\"external\">Tim Kadlec on AMP</a> — again.\n<blockquote>\n<p>The web community has stated over and over again that we’re not comfortable with Google incentivizing the use of AMP with search engine carrots. In response, Google has provided yet another search engine carrot for AMP.<br>\nThis wouldn’t bother me if AMP was open about what it is: a tool for folks to optimize their search engine placement. But of course, that’s not the claim. The claim is that AMP is “for the open web.”</p>\n</blockquote>\nThe fact that Google tries to use our ideology is one thing. The fact that we continue to fall for it is quite another.\n<blockquote>\n<p>Why a subset of HTML you ask? Well, mostly because web developers suck at their jobs and have loaded the web with a ton of JavaScript no one wants. Can't fault Google for wanting to change that. That part I can support. The less JavaScript the better.</p>\n</blockquote>\nAnd here we’re back smack bang in the middle of the problem. Today’s average web developer doesn’t have the faintest clue what he’s doing and can’t do it anyway without sixteen libraries and frameworks. Solve that problem and AMP goes away.<br>\n(Masculine pronoun used deliberately, and if there were a white pronoun I’d also have used it. I more and more think that frameworks and libraries are the things mediocre white men need to survive in today’s front-end world.)</li>\n\n<li>It’s useful to post a repeat link to an older The Register article that calls for <a href=\"https://www.theregister.co.uk/2017/05/19/open_source_insider_google_amp_bad_bad_bad/\" class=\"external\">killing AMP before it kills us</a>.\n<blockquote>\n<p>Except that, hilariously, to create an AMP page you have to load a, wait for it, yes a JavaScript file from Google. Pinboard founder Maciej Cegłowski already <a href=\"http://idlewords.com/amp_static.html\" class=\"external\">recreated</a> the Google AMP demo page without the Google AMP JavaScript and, unsurprisingly, it's faster than Google's version.</p>\n</blockquote>\nand\n<blockquote>\n<p>If we reject AMP, AMP dies.</p>\n</blockquote>\nIn order to reject AMP we need to tone down significantly on the frameworks. Could happen, but right now it’s not happening.\n</li>\n\n<li>Ferdy Christiant agrees with the performance findings. He <a href=\"https://ferdychristant.com/amp-the-missing-controversy-3b424031047\" class=\"external\">studied AMP’s performance profile</a> (supposedly its biggest advantage) and found that his test AMP page is not noticeably faster than a regular web page. Also, he found that AMP is effectively preloading assets for a better perceived performance. If your goal is to improve perceived performance, this is a clever idea. Ferdy adds, however, that this gives Google, owner of the world’s most important search, an unfair advantage, especially since it does not run this preloading trick on non-AMP pages, while I suppose it could if it wanted to.</li>\n\n<li>Luke Stevens <a href=\"https://twitter.com/lukestevens/status/963905902171402240\" class=\"external\">feels</a> Google is forking the web. This is reinforced by the news that <a href=\"https://github.com/ampproject/amphtml/issues/13471\" class=\"external\">AMP will now get a JavaScript component</a> as well; something that was purposely omitted so far. But it will of course be a special type of JavaScript that (only?) offers simple DOM methods that are ’sanitized” by the AMP app itself.<br>\nIn other words, a subset of JavaScript that will (surprise!) turn out to be not enough for AMP developers, who will either demand more and thus import the web’s performance problems to AMP, or leave AMP altogether, which leads to a win for the web.<br>\nIn any case, it makes it less and less clear what AMP is supposed to be a solution to. And  people have tried and failed to fork the web so often that I am not terribly worried right now.</li>\n\n<li>Mike Monteiro <a href=\"https://medium.com/@monteiro/designs-lost-generation-ac7289549017\" class=\"external\">calls for</a> some sort of licensing for designers. This is an interesting idea, but from experience with attempting the same on the front-end side I’ll warn him it’s an uphill battle. On the other hand, my attempt was more than ten years ago, and meanwhile the world has changed.<br>\nWhile discussing this article I had an idea: how would designers and back-end developers feel about front-end certification? Would they think it’s a good idea?<br>\nDesigners who agree with Mike should ask themselves something similar: would developers care? Possibly, I’d say.</li>\n\n<li>\n<a href=\"https://medium.com/kpcc-labs/patterns-for-writing-manageable-css-without-a-framework-109779743c41\" class=\"external\">Patterns for writing manageable CSS without a framework</a>. Simple, solid, sensible advice for managing your CSS. From a purely visual standpoint you can achieve the same by using a CSS framework, but\n<blockquote>\n<p>My preference for manually writing layout styles is to reduce dependencies, write less-complicated markup (not littered with wrappers and generic class names), and retain the greatest control possible. By writing my own layout system, I can make exceptions for certain cases without relying on “overrides”. When there are edge cases, exceptions can be easily made without hideous hacks upon CSS written by someone else.</p>\n</blockquote>\nMakes sense.</li>\n\n<li>Turns out Mozilla created a <a href=\"https://hacks.mozilla.org/2018/02/mdn-browser-compatibility-data/\" class=\"external\">JSON feed for browser compatibility data</a>. Interesting idea; I toyed with it ages ago but was too <del>lazy</del> busy to actually implement it.<br>\nAs far as I know, except for individual MDN pages, there is no interface yet where you can easily access the information (yeah, I know I could write one myself, but time constraints, and my profound lack of experience with GitHub).<br>\nStill, excellent idea, as long as the data is valid. I occasionally have beef with MDN data, and I also think they do not cover enough browsers. UC and Opera Mini, for instance, are missing. <em>World wide</em> web, remember?<br>\n(Via <a href=\"http://grochtdreis.de/weblog/2018/02/19/linkfutter-767/\" class=\"external\">Jens Grochtdreis</a>)</li>\n\n\n<li>A <em>very</em> neat trick: CSS-only sortable tables. <a href=\"http://kizu.ru/en/blog/variable-order/\" class=\"external\">Say again?</a> CSS only? Yup.<br>\nHow? By clever use of CSS variables. Read and make your head explode with possibilities.</li>\n\n<li>For the mobile history buffs among us: a long <a href=\"https://www.theregister.co.uk/2018/02/15/elop_and_the_fall_of_nokia_revisited/\" class=\"external\">look back</a> at the fall of Nokia during the tenure of Stephen Elop, drawn mainly from Finnish inside sources.</li>\n\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","enclosure":{},"categories":["Linkbait"],"color":"darkgray","category":"QuirksBlog","date":"2018-02-20 11:46:22","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Linkbait 36","pubDate":"2018-02-13 10:32:54","link":"http://www.quirksmode.org/blog/archives/2018/02/linkbait_36.html","guid":"http://www.quirksmode.org/blog/archives/2018/02/linkbait_36.html","author":"","thumbnail":"","description":"\n<p>Facebook-bashing edition. (I’m merely quoting other people’s bashing, mind you.)</p>\n\n<ul class=\"linkbait\">\n<li>An <a href=\"https://www.browseemall.com/Blog/index.php/2015/04/21/cross-browser-testing-solutions-the-ultimate-guide/\" class=\"external\">overview of browser testing services</a> because you deserve to test on IE9 and older Chromes.</li>\n\n<li>Ada <a href=\"https://medium.com/samsung-internet-dev/how-i-built-a-game-in-a-week-5810b1197686\" class=\"external\">built a game</a> in a week using tools currently available on the web. She wrote a report, and introduces many new tools in the\nprocess.</li>\n\n<li>\n<a href=\"https://twitter.com/FremyCompany/status/963217111911813120\" class=\"external\">Bad if true</a>: W3C uses browser detects.\n<blockquote>\n<p>Are you aware that since Edge enabled Upgrade-Insecure-Request on our internal builds, we cannot reach any spec because we get redirected from https to http, which we upgrade to https, and loop? If we masquerade our user agent to Chrome's one all works fine.</p>\n</blockquote>\n</li>\n\n<li>Something that interests me a lot lately: <a href=\"https://www.chenhuijing.com/blog/teaching-css-grid-to-newcomers/\" class=\"external\">Teaching CSS Grid to newcomers</a>. Well, not specifically Grid in my case, but this article has some excellent ideas and notions about <em>why</em> techies find CSS so complicated, and how to explain it to them.\n<blockquote>\n<p>Water, for explaining the cascading, global nature of CSS versus the modular, encapsulated nature of most traditional programming languages. Like, traditional programming paradigms treat functions discretely, like stones you can pick up, but CSS is like water, which flows and cannot be controlled, only shaped.</p>\n</blockquote>\nAnd the author, Hui Jing Chen, is coming to speak at <a href=\"https://cssday.nl/\" class=\"external\">CSS Day</a>, which is also kind of cool because I can quiz her in person.\n</li>\n\n<li>\n<a href=\"https://www.wired.com/story/inside-facebook-mark-zuckerberg-2-years-of-hell\" class=\"external\">High drama</a> in time-honoured American fashion about Facebook having a terrible two years. Facebook once was Shiny and Golden; now it’s Hideous and Dark. The truth lies somewhere in the middle, but this article ignores that for obvious clickbait reasons.<br>\nMuch more important is the fact that Facebook-bashing has now reached serious momentum. I think that’s healthy. See also the next few items.</li>\n\n<li>A <a href=\"https://reutersinstitute.politics.ox.ac.uk/our-research/measuring-reach-fake-news-and-online-disinformation-europe\" class=\"external\">study of fake news sites in France and Italy</a>. It turns out the problem is somewhat less serious than was assumed; the fake news sites themselves see only very modest numbers of visitors (the most popular reached 3.5% of the online population). The real problem lies with Facebook, where some fake news items generate more interactions that real news items.<br>\nFacebook is the problem (and Twitter, too, I suppose, but to a lesser degree). That’s something I already assumed, but it’s very good to have it confirmed by research.<br>\nSo what are we going to do about it? Block Facebook? It’s too early for that, but the option must be on some internal lists higher up in the EU. If Facebook refuses to take action, we should.</li>\n\n<li>An anti-capitalist <a href=\"https://eand.co/the-revolt-against-silicon-valleys-failed-dream-1bf94546a9e2\" class=\"external\">look at tech’s trust problem</a>.\n<blockquote>\n<p>But tech appears to have no net positive uses whatsoever. Can it?</p>\n</blockquote>\nThis is somewhat disingenious: we have become <em>accustomed</em> to tech benefits, and the problem is more that its rate of benefit production has fallen while we’ve become more aware of its drawbacks. Still, close off the Internet and you’ll have a much worse popular revolt on your hands.<br>\nDon’t get me wrong — I think the tech giants being taken down a notch is a good thing, but as technologists we have to be careful to define <em>what</em> tech we need to ditch: ads and their tracking mechanisms, the artificial stupidity that selects your Facebook/Google news — as well as, on the non-tech side, the inability to <em>pay for</em> services such as Facebook and Twitter.\n<blockquote>\n<p>Tech’s challenge was never to remake capitalism all over again — only harder, crueller, meaner, even more harmful. It was to shift beyond it.</p>\n</blockquote>\nI don’t buy this — at least, not entirely. Big tech and the neoliberal movement were born simultaneously in the early nineties, and early tech served as a shining example of neoliberalism while gladly accepting the money. I don’t think tech was ever meant to shift beyond capitalism — the only example I can think of is everything on the web being free of charge, and that was the worst mistake tech ever made, causing, among other things, ad tracking and fake news spread by Facebook’s artificial stupidity.<br>\nStill, food for thought.</li>\n\n<li>Remember Facebook Instant Articles that was going to revolutionise news content online? It <a href=\"https://www.cjr.org/tow_center/are-facebook-instant-articles-worth-it.php\" class=\"external\">turns out</a> that more than half of the original 2015 partners have meanwhile abandoned it — and these are not the smallest names in newspaper publishing, either. Apparently it doesn’t work. Also, Facebooks’s announce algorithm change I mentioned in <a href=\"http://www.quirksmode.org/blog/archives/2018/01/linkbait_34.html\">34</a> is not going to help here.</li>\n\n<li>Unilever is threatening to pull its ads from Facebook and Google (<a href=\"https://www.theguardian.com/media/2018/feb/12/marmite-unilever-ads-facebook-google\" class=\"external\">Guardian</a>; <a href=\"https://www.nrc.nl/nieuws/2018/02/12/unilever-dreigt-met-stoppen-advertenties-op-facebook-en-google-a1591882\" class=\"external\">NRC</a>) because those companies do not remove posts that “create division in society and promote anger and hate.”<br>\nUnilever is in fact not the first food/personal care multinational to do so: big competitor Procter &amp; Gamble <a href=\"https://inews.co.uk/news/media/trust-traditional-media-rises-theres-crisis-confidence-advertising/\" class=\"external\">did the same</a> about a year ago. Also in that last article: the tech giants have a trust problem right now, while trust in traditional journalism is increasing.</li>\n\n<li>\n<a href=\"https://www.politico.eu/article/europe-data-protection-privacy-standards-gdpr-general-protection-data-regulation/\" class=\"external\">How the EU is exporting</a> its data and privacy regulations to the rest of the world. It’s the EU that’s setting the standard here; not the US, which is more meh about regulations and privacy, especially under the current administration.<br>\nHaving sane leaders is a major competitive advantage right now.<br>\nOn the other hand, the EU regulations are more-or-less forced onto some countries, who could do with a little less neocolonial paternalism. On the gripping hand, the most important quoted example of such countries, South Africa, is not one that has a great trust in its own government, with Zuma about to resign. So maybe an enforced bit of regulation would be good for it nonetheless?<br>\nConundrums, conundrums.</li>\n\n<li>According to Google, <a href=\"https://www.axios.com/exclusive-2-publishers-initially-affected-by-chrome-ad-blocker-1517872626-ee000779-1b6e-4d39-ab07-a845545d71c7.html\" class=\"external\">1% of publishers will be affected</a> by the upcoming selective Chrome ad blocker. To be honest I didn’t know Google was working on this, and I think it’s a good idea — especially in order to force internet advertisers to adapt or die.</li>\n\n<li>An older game, but a rather good one, on <a href=\"http://ncase.me/trust/\" class=\"external\">the evolution of trust</a>. Makes you play the game in order to understand trust/distrust strategies.</li>\n\n<li>\n<a href=\"https://blog.toggl.com/build-horse-programming/\" class=\"external\">How to build a horse</a> with various programming languages. JavaScript: the backbone came out angular, so the horse is paralyzed. Perfect summary.</li>\n\n<li>\n<a href=\"https://medium.com/@dfeldman/your-users-are-irrational-b0e90ae39d1f\" class=\"external\">Your users are irrational</a>. Interesting read about how people can trick our fast intuitive brain into doing things without thinking, or, even more interesting, how to get our fast intuitive brain to start up our slow logical brain. And how all that applies to designing websites or apps.</li>\n\n<li>Something that interests me as a conference organiser: <a href=\"https://medium.com/@mwichary/name-badges-the-unsung-conference-heroes-db6fa0925c5b\" class=\"external\">Name badges, the unsung conference heroes</a>. We did some thinking about name badges years ago (see the <a href=\"http://www.quirksmode.org/coh/caring.html#link18\">summary</a>), but this article contains several interesting new ideas, notably adding interests to the badge in order to facilitate conversations.</li>\n\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","content":"\n<p>Facebook-bashing edition. (I’m merely quoting other people’s bashing, mind you.)</p>\n\n<ul class=\"linkbait\">\n<li>An <a href=\"https://www.browseemall.com/Blog/index.php/2015/04/21/cross-browser-testing-solutions-the-ultimate-guide/\" class=\"external\">overview of browser testing services</a> because you deserve to test on IE9 and older Chromes.</li>\n\n<li>Ada <a href=\"https://medium.com/samsung-internet-dev/how-i-built-a-game-in-a-week-5810b1197686\" class=\"external\">built a game</a> in a week using tools currently available on the web. She wrote a report, and introduces many new tools in the\nprocess.</li>\n\n<li>\n<a href=\"https://twitter.com/FremyCompany/status/963217111911813120\" class=\"external\">Bad if true</a>: W3C uses browser detects.\n<blockquote>\n<p>Are you aware that since Edge enabled Upgrade-Insecure-Request on our internal builds, we cannot reach any spec because we get redirected from https to http, which we upgrade to https, and loop? If we masquerade our user agent to Chrome's one all works fine.</p>\n</blockquote>\n</li>\n\n<li>Something that interests me a lot lately: <a href=\"https://www.chenhuijing.com/blog/teaching-css-grid-to-newcomers/\" class=\"external\">Teaching CSS Grid to newcomers</a>. Well, not specifically Grid in my case, but this article has some excellent ideas and notions about <em>why</em> techies find CSS so complicated, and how to explain it to them.\n<blockquote>\n<p>Water, for explaining the cascading, global nature of CSS versus the modular, encapsulated nature of most traditional programming languages. Like, traditional programming paradigms treat functions discretely, like stones you can pick up, but CSS is like water, which flows and cannot be controlled, only shaped.</p>\n</blockquote>\nAnd the author, Hui Jing Chen, is coming to speak at <a href=\"https://cssday.nl/\" class=\"external\">CSS Day</a>, which is also kind of cool because I can quiz her in person.\n</li>\n\n<li>\n<a href=\"https://www.wired.com/story/inside-facebook-mark-zuckerberg-2-years-of-hell\" class=\"external\">High drama</a> in time-honoured American fashion about Facebook having a terrible two years. Facebook once was Shiny and Golden; now it’s Hideous and Dark. The truth lies somewhere in the middle, but this article ignores that for obvious clickbait reasons.<br>\nMuch more important is the fact that Facebook-bashing has now reached serious momentum. I think that’s healthy. See also the next few items.</li>\n\n<li>A <a href=\"https://reutersinstitute.politics.ox.ac.uk/our-research/measuring-reach-fake-news-and-online-disinformation-europe\" class=\"external\">study of fake news sites in France and Italy</a>. It turns out the problem is somewhat less serious than was assumed; the fake news sites themselves see only very modest numbers of visitors (the most popular reached 3.5% of the online population). The real problem lies with Facebook, where some fake news items generate more interactions that real news items.<br>\nFacebook is the problem (and Twitter, too, I suppose, but to a lesser degree). That’s something I already assumed, but it’s very good to have it confirmed by research.<br>\nSo what are we going to do about it? Block Facebook? It’s too early for that, but the option must be on some internal lists higher up in the EU. If Facebook refuses to take action, we should.</li>\n\n<li>An anti-capitalist <a href=\"https://eand.co/the-revolt-against-silicon-valleys-failed-dream-1bf94546a9e2\" class=\"external\">look at tech’s trust problem</a>.\n<blockquote>\n<p>But tech appears to have no net positive uses whatsoever. Can it?</p>\n</blockquote>\nThis is somewhat disingenious: we have become <em>accustomed</em> to tech benefits, and the problem is more that its rate of benefit production has fallen while we’ve become more aware of its drawbacks. Still, close off the Internet and you’ll have a much worse popular revolt on your hands.<br>\nDon’t get me wrong — I think the tech giants being taken down a notch is a good thing, but as technologists we have to be careful to define <em>what</em> tech we need to ditch: ads and their tracking mechanisms, the artificial stupidity that selects your Facebook/Google news — as well as, on the non-tech side, the inability to <em>pay for</em> services such as Facebook and Twitter.\n<blockquote>\n<p>Tech’s challenge was never to remake capitalism all over again — only harder, crueller, meaner, even more harmful. It was to shift beyond it.</p>\n</blockquote>\nI don’t buy this — at least, not entirely. Big tech and the neoliberal movement were born simultaneously in the early nineties, and early tech served as a shining example of neoliberalism while gladly accepting the money. I don’t think tech was ever meant to shift beyond capitalism — the only example I can think of is everything on the web being free of charge, and that was the worst mistake tech ever made, causing, among other things, ad tracking and fake news spread by Facebook’s artificial stupidity.<br>\nStill, food for thought.</li>\n\n<li>Remember Facebook Instant Articles that was going to revolutionise news content online? It <a href=\"https://www.cjr.org/tow_center/are-facebook-instant-articles-worth-it.php\" class=\"external\">turns out</a> that more than half of the original 2015 partners have meanwhile abandoned it — and these are not the smallest names in newspaper publishing, either. Apparently it doesn’t work. Also, Facebooks’s announce algorithm change I mentioned in <a href=\"http://www.quirksmode.org/blog/archives/2018/01/linkbait_34.html\">34</a> is not going to help here.</li>\n\n<li>Unilever is threatening to pull its ads from Facebook and Google (<a href=\"https://www.theguardian.com/media/2018/feb/12/marmite-unilever-ads-facebook-google\" class=\"external\">Guardian</a>; <a href=\"https://www.nrc.nl/nieuws/2018/02/12/unilever-dreigt-met-stoppen-advertenties-op-facebook-en-google-a1591882\" class=\"external\">NRC</a>) because those companies do not remove posts that “create division in society and promote anger and hate.”<br>\nUnilever is in fact not the first food/personal care multinational to do so: big competitor Procter &amp; Gamble <a href=\"https://inews.co.uk/news/media/trust-traditional-media-rises-theres-crisis-confidence-advertising/\" class=\"external\">did the same</a> about a year ago. Also in that last article: the tech giants have a trust problem right now, while trust in traditional journalism is increasing.</li>\n\n<li>\n<a href=\"https://www.politico.eu/article/europe-data-protection-privacy-standards-gdpr-general-protection-data-regulation/\" class=\"external\">How the EU is exporting</a> its data and privacy regulations to the rest of the world. It’s the EU that’s setting the standard here; not the US, which is more meh about regulations and privacy, especially under the current administration.<br>\nHaving sane leaders is a major competitive advantage right now.<br>\nOn the other hand, the EU regulations are more-or-less forced onto some countries, who could do with a little less neocolonial paternalism. On the gripping hand, the most important quoted example of such countries, South Africa, is not one that has a great trust in its own government, with Zuma about to resign. So maybe an enforced bit of regulation would be good for it nonetheless?<br>\nConundrums, conundrums.</li>\n\n<li>According to Google, <a href=\"https://www.axios.com/exclusive-2-publishers-initially-affected-by-chrome-ad-blocker-1517872626-ee000779-1b6e-4d39-ab07-a845545d71c7.html\" class=\"external\">1% of publishers will be affected</a> by the upcoming selective Chrome ad blocker. To be honest I didn’t know Google was working on this, and I think it’s a good idea — especially in order to force internet advertisers to adapt or die.</li>\n\n<li>An older game, but a rather good one, on <a href=\"http://ncase.me/trust/\" class=\"external\">the evolution of trust</a>. Makes you play the game in order to understand trust/distrust strategies.</li>\n\n<li>\n<a href=\"https://blog.toggl.com/build-horse-programming/\" class=\"external\">How to build a horse</a> with various programming languages. JavaScript: the backbone came out angular, so the horse is paralyzed. Perfect summary.</li>\n\n<li>\n<a href=\"https://medium.com/@dfeldman/your-users-are-irrational-b0e90ae39d1f\" class=\"external\">Your users are irrational</a>. Interesting read about how people can trick our fast intuitive brain into doing things without thinking, or, even more interesting, how to get our fast intuitive brain to start up our slow logical brain. And how all that applies to designing websites or apps.</li>\n\n<li>Something that interests me as a conference organiser: <a href=\"https://medium.com/@mwichary/name-badges-the-unsung-conference-heroes-db6fa0925c5b\" class=\"external\">Name badges, the unsung conference heroes</a>. We did some thinking about name badges years ago (see the <a href=\"http://www.quirksmode.org/coh/caring.html#link18\">summary</a>), but this article contains several interesting new ideas, notably adding interests to the badge in order to facilitate conversations.</li>\n\n\n<li>Have a tip for the next Linkbait? Or a comment on this one? <a href=\"http://www.quirksmode.org/contact.html\">Let me know</a> (or <a href=\"https://twitter.com/ppk\" class=\"external\">here</a> or <a href=\"https://mastodon.social/@ppk\" class=\"external\">here</a>).</li>\n\n</ul>\n","enclosure":{},"categories":["Linkbait"],"color":"darkgray","category":"QuirksBlog","date":"2018-02-13 10:32:54","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Designing Progressive Web Apps","pubDate":"2018-08-28 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/IASkks3GXu4/entry.asp","guid":"95725f2fcf7b3e51612754e522397683","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/IASkks3GXu4","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">The Case for Progressive Web Apps</a> presentation at An Event Apart in Chicago, Jason Grigsby walked through the process of building Progressive Web Apps for your Web experiences and how to go about it. Here's my notes from his talk: \n</p>\n<ul>\n<li>Progressive Web Apps (PWAs) are getting a lot of attention and positive stories about their impact are coming out. <ahref>PWA Stats tracks many of these case studies. These sorts of examples are getting noticed by CEOs who demand teams build PWAs today.</ahref>\n</li>\n<li>A PWA is a set of technologies designed to make faster, more capable Web sites. They load fast, are available online, are secure, can be accessed from your home screen,  have push notifications, and more.</li>\n<li>But how can we define Progressive Web Apps? PWAs are Web sites enhanced by three things: https, service worker, and a  manifest file.</li>\n<li>HTTPS is increasingly required for browsers and APIs. Eventually Chrome will highlight sites that are not on https as \"insecure\".</li>\n<li>Service Workers allow Web sites to declare how network requests and the cache are handled. This ability to cache things allows us to build sites that are much faster. With service workers we can deliver near instant and offline experiences.</li>\n<li>A Web manifest is a JSON file that delivers some attributes about a Web site. Browsers use these files to make decisions on what to do with your site (like add to home page).</li>\n<li>Are PWAs any different than well-built Web sites? Not really, but the term helps get people excited and build toward best practices on the Web.</li>\n<li>PWAs are often trojan horses for performance. They help enforce fast experiences.</li>\n</ul>\n<h2>Feels Like a Native App</h2>\n<ul>\n<li>Does your organization have a Web site? Do you make money off your Web site? If so, you probably need a Progressive Web Site.</li>\n<li>Not every customer will have your native app installed. A better Web experience will help you reach people who don't. For many people this will be their first experience with your company, so you should make it as good as possible.</li>\n<li>Getting people to install and keep using native apps is difficult. App stores can also change their policies and interfaces which could negatively impact your native app.</li>\n<li>The Web can do much more than we think, the Web has APIs to access location, do fast payments using fingerprint identification, push notifications, and more.</li>\n<li>What should we use to design PWAs? Native app styles or Web styles? How much does your design match the platform? You can set up PWAs to use different system fonts for iOS and Android, should you? For now, we should define our own design and be consistent across different OSs.</li>\n<li>What impact does going \"chrome-less\" have on our PWAs? You loose back buttons, menu controls, system controls. Browsers provide us with a lot of useful features and adding them back is difficult. Especially navigation via the back button is complex. So in most cases, you should avoid going full screen.</li>\n<li>While not every person will add your PWA to their home screen, every person will \"install\" your PWA via the service worker.</li>\n<li>An app shell model allows you put your common UI (header, footer, nav, etc.) into the app cache. This makes the first loading experience feel a lot faster. Should you app shell or not? If you have architected as a single page app, this is possible but otherwise might not be worth the effort.</li>\n<li>Animating transitions can help with way-finding and polish on the Web. This gives Web sites even more personality.</li>\n</ul>\n<h2>Installation and Discovery</h2>\n<ul>\n<li>Using a Web manifest file, allows you specify a number of declarations for your app. In addition to name, icon, and even theme colors.</li>\n<li>Once you have a PWA built and a manifest file, browsers will being prompting people to install your Web site. Some Browsers have subtle \"add\" actions. Other use more explicit banner prompts. \"Add to home screen\" banners are only displayed when they make sense (certain level of use).</li>\n<li>Developers can request these banners to come up when appropriate. You'll want to trigger these where people are mostly likely to install. (like checkout)</li>\n<li>Microsoft is putting (explicitly and implicitly) PWAs within their app store. Search results may also start highlighting PWAs.</li>\n<li>You can use Trusted Web Activity or PhoneGap to wrap native shells around your PWA to put them into Android and iOS app stores.</li>\n</ul>\n<h2>Offline Mode</h2>\n<ul>\n<li>Your Web site would benefit from offline support. Service Workers enable you to cache assets on your device to load PWAs quickly and to decide what should be available offline.</li>\n<li>You can develop offline pages and/or cache pages people viewed before.</li>\n<li>If you do cache pages, make it clear what data hasn't been updated because it is not available offline.</li>\n<li>You can give people control over what gets cached and what doesn't. So they can decide what they want available for offline viewing.</li>\n<li>If you enable offline interactions, be explicit what interactivity is available and what isn't.</li>\n</ul>\n<h2>Push Notifications</h2>\n<ul>\n<li>Push notifications can help you increase engagement. You can send notifications via a Web browser using PWAs.</li>\n<li>Personal push notifications work best but are difficult to do right. Generic notifications won't be as effective.</li>\n<li>Don't immediately ask people for push notification permissions. Find the right time and place to ask people to turn them on. Make sure you give people control, if you'd don't they can kill them using browser controls.</li>\n<li>In the next version of Chrome, Google will make push notification dialogs blocking (can't be dismissed) so people have to decide if they want notifications on or off. This also requires you to ask for permissions at the right time.</li>\n</ul>\n<h2>Beyond Progressive Web Apps</h2>\n<ul>\n<li>Auto-login with credential management APIs allows you to sign into a site using stored credentials. This streamlines the login process.</li>\n<li>Apple Pay on the Web converged with the Web Payment API so there's one way to use stored payment info on the Web.</li>\n<li>These next gen capabilities are not part of PWAs but make sense within PWAs.</li>\n</ul>\n<h2>How to Implement PWAs</h2>\n<ul>\n<li>Building PWAs is a progressive process, it can be a series of incremental updates that all make sense on their own. As a result, you can have an iterative roadmap.</li>\n<li>Benchmark and measure your improvements so you can use that data to get buy-in for further projects.</li>\n<li>Assess your current Web site's technology. If things aren't reasonably fast to begin with, you need to address that first. If your site is not usable on mobile, start there first.</li>\n<li>Begin  by building a baseline PWA (manifest, https, etc.) and then add front-end additions and larger initiatives like payment request and credential api later.</li>\n<li>Every step on the path toward a PWAS make sense on their own. You should encrypt your Web sites. You should make your Web site fast. These are all just steps along the way.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/IASkks3GXu4\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">The Case for Progressive Web Apps</a> presentation at An Event Apart in Chicago, Jason Grigsby walked through the process of building Progressive Web Apps for your Web experiences and how to go about it. Here's my notes from his talk: \n</p>\n<ul>\n<li>Progressive Web Apps (PWAs) are getting a lot of attention and positive stories about their impact are coming out. <ahref>PWA Stats tracks many of these case studies. These sorts of examples are getting noticed by CEOs who demand teams build PWAs today.</ahref>\n</li>\n<li>A PWA is a set of technologies designed to make faster, more capable Web sites. They load fast, are available online, are secure, can be accessed from your home screen,  have push notifications, and more.</li>\n<li>But how can we define Progressive Web Apps? PWAs are Web sites enhanced by three things: https, service worker, and a  manifest file.</li>\n<li>HTTPS is increasingly required for browsers and APIs. Eventually Chrome will highlight sites that are not on https as \"insecure\".</li>\n<li>Service Workers allow Web sites to declare how network requests and the cache are handled. This ability to cache things allows us to build sites that are much faster. With service workers we can deliver near instant and offline experiences.</li>\n<li>A Web manifest is a JSON file that delivers some attributes about a Web site. Browsers use these files to make decisions on what to do with your site (like add to home page).</li>\n<li>Are PWAs any different than well-built Web sites? Not really, but the term helps get people excited and build toward best practices on the Web.</li>\n<li>PWAs are often trojan horses for performance. They help enforce fast experiences.</li>\n</ul>\n<h2>Feels Like a Native App</h2>\n<ul>\n<li>Does your organization have a Web site? Do you make money off your Web site? If so, you probably need a Progressive Web Site.</li>\n<li>Not every customer will have your native app installed. A better Web experience will help you reach people who don't. For many people this will be their first experience with your company, so you should make it as good as possible.</li>\n<li>Getting people to install and keep using native apps is difficult. App stores can also change their policies and interfaces which could negatively impact your native app.</li>\n<li>The Web can do much more than we think, the Web has APIs to access location, do fast payments using fingerprint identification, push notifications, and more.</li>\n<li>What should we use to design PWAs? Native app styles or Web styles? How much does your design match the platform? You can set up PWAs to use different system fonts for iOS and Android, should you? For now, we should define our own design and be consistent across different OSs.</li>\n<li>What impact does going \"chrome-less\" have on our PWAs? You loose back buttons, menu controls, system controls. Browsers provide us with a lot of useful features and adding them back is difficult. Especially navigation via the back button is complex. So in most cases, you should avoid going full screen.</li>\n<li>While not every person will add your PWA to their home screen, every person will \"install\" your PWA via the service worker.</li>\n<li>An app shell model allows you put your common UI (header, footer, nav, etc.) into the app cache. This makes the first loading experience feel a lot faster. Should you app shell or not? If you have architected as a single page app, this is possible but otherwise might not be worth the effort.</li>\n<li>Animating transitions can help with way-finding and polish on the Web. This gives Web sites even more personality.</li>\n</ul>\n<h2>Installation and Discovery</h2>\n<ul>\n<li>Using a Web manifest file, allows you specify a number of declarations for your app. In addition to name, icon, and even theme colors.</li>\n<li>Once you have a PWA built and a manifest file, browsers will being prompting people to install your Web site. Some Browsers have subtle \"add\" actions. Other use more explicit banner prompts. \"Add to home screen\" banners are only displayed when they make sense (certain level of use).</li>\n<li>Developers can request these banners to come up when appropriate. You'll want to trigger these where people are mostly likely to install. (like checkout)</li>\n<li>Microsoft is putting (explicitly and implicitly) PWAs within their app store. Search results may also start highlighting PWAs.</li>\n<li>You can use Trusted Web Activity or PhoneGap to wrap native shells around your PWA to put them into Android and iOS app stores.</li>\n</ul>\n<h2>Offline Mode</h2>\n<ul>\n<li>Your Web site would benefit from offline support. Service Workers enable you to cache assets on your device to load PWAs quickly and to decide what should be available offline.</li>\n<li>You can develop offline pages and/or cache pages people viewed before.</li>\n<li>If you do cache pages, make it clear what data hasn't been updated because it is not available offline.</li>\n<li>You can give people control over what gets cached and what doesn't. So they can decide what they want available for offline viewing.</li>\n<li>If you enable offline interactions, be explicit what interactivity is available and what isn't.</li>\n</ul>\n<h2>Push Notifications</h2>\n<ul>\n<li>Push notifications can help you increase engagement. You can send notifications via a Web browser using PWAs.</li>\n<li>Personal push notifications work best but are difficult to do right. Generic notifications won't be as effective.</li>\n<li>Don't immediately ask people for push notification permissions. Find the right time and place to ask people to turn them on. Make sure you give people control, if you'd don't they can kill them using browser controls.</li>\n<li>In the next version of Chrome, Google will make push notification dialogs blocking (can't be dismissed) so people have to decide if they want notifications on or off. This also requires you to ask for permissions at the right time.</li>\n</ul>\n<h2>Beyond Progressive Web Apps</h2>\n<ul>\n<li>Auto-login with credential management APIs allows you to sign into a site using stored credentials. This streamlines the login process.</li>\n<li>Apple Pay on the Web converged with the Web Payment API so there's one way to use stored payment info on the Web.</li>\n<li>These next gen capabilities are not part of PWAs but make sense within PWAs.</li>\n</ul>\n<h2>How to Implement PWAs</h2>\n<ul>\n<li>Building PWAs is a progressive process, it can be a series of incremental updates that all make sense on their own. As a result, you can have an iterative roadmap.</li>\n<li>Benchmark and measure your improvements so you can use that data to get buy-in for further projects.</li>\n<li>Assess your current Web site's technology. If things aren't reasonably fast to begin with, you need to address that first. If your site is not usable on mobile, start there first.</li>\n<li>Begin  by building a baseline PWA (manifest, https, etc.) and then add front-end additions and larger initiatives like payment request and credential api later.</li>\n<li>Every step on the path toward a PWAS make sense on their own. You should encrypt your Web sites. You should make your Web site fast. These are all just steps along the way.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/IASkks3GXu4\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-08-28 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Data Basics","pubDate":"2018-08-28 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/pCauTCpqhSQ/entry.asp","guid":"0d0bb6958f14017ceb7580b64d26849b","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/pCauTCpqhSQ","description":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Data Basics</a> presentation at An Event Apart in Chicago, Laura Martini walked through common issues teams face when working with data and how to get around/work with them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Today there's lots of data available to teams for making decisions but it can hard to know what to use and how.</li>\n<li>Data tools have gotten much better and more useful. Don't underestimate yourself, you can use these tools to learn.</li>\n<li>Google Analytics: The old way of looking at data is based on sessions are composed of page views and clicks with timestamps. The new way is looking at users with events. Events can be much more granular and cover more of people's behaviors than page views and clicks.</li>\n<li>Different data can be stored in different systems so it can be hard to get a complete picture of what is happening across platforms and experiences. Journey maps are one way to understand traffic between apps.</li>\n<li>You can do things with data that don't scale. Some visualizations can give you a sense of what is happening without being completely precise. Example: a quantified journey map can show you where to focus.</li>\n<li>Individual users can also be good data sources. Zooming in allows you to learn things you can't in aggregate. Tools like Fullstory replays exactly what people did on your Website. These kinds of human-centric sessions can be more engaging/convincing than aggregate measures.</li>\n<li>Data freshness changes how people use it in their workflows. Having real-time data or predictive tools allows you to monitor and adapt as insights come in.</li>\n<li>How do you know what questions to ask of your data? HEART framework: happiness, engagement, adoptions, retention, and task success. Start with your goals, decide what is an indicator of success of your goals, then instrument that.</li>\n<li>To decide which part of the customer journey to measure, start by laying it all out.</li>\n<li>There's a number of good go-to solutions for answering questions like: funnel analysis (shows you possible improvements) or focus on user groups and split them into a test &amp; control (allows you to test predictions).\n</li>\n<li>The <a href=\"http://www.evanmiller.org/ab-testing/sample-size.html\">Sample Size Calculator</a> gives you a way to determine what size audience you need for your tests.</li>\n<li>Quantitative data is a good tool for understanding what is happening but it won't tell you why. For that, you often need to turn to qualitative data (talking to people). You can ask people with in-context small surveys and similar techniques.</li>\n<li>Often the hardest part of using data is getting people on the same page and caring about the metrics. Try turning data insights into a shared activity, bet on results. Make it fun.</li>\n<li>Dashboards surface data people care about but you need to come together as a team to decide what is important. Having user-centric metrics in your dashboards shows you care about user behavior.</li>\n<li>Data can be used for good and bad. Proceed with caution when using data and be mindful where and how you collect it.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/pCauTCpqhSQ\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Data Basics</a> presentation at An Event Apart in Chicago, Laura Martini walked through common issues teams face when working with data and how to get around/work with them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Today there's lots of data available to teams for making decisions but it can hard to know what to use and how.</li>\n<li>Data tools have gotten much better and more useful. Don't underestimate yourself, you can use these tools to learn.</li>\n<li>Google Analytics: The old way of looking at data is based on sessions are composed of page views and clicks with timestamps. The new way is looking at users with events. Events can be much more granular and cover more of people's behaviors than page views and clicks.</li>\n<li>Different data can be stored in different systems so it can be hard to get a complete picture of what is happening across platforms and experiences. Journey maps are one way to understand traffic between apps.</li>\n<li>You can do things with data that don't scale. Some visualizations can give you a sense of what is happening without being completely precise. Example: a quantified journey map can show you where to focus.</li>\n<li>Individual users can also be good data sources. Zooming in allows you to learn things you can't in aggregate. Tools like Fullstory replays exactly what people did on your Website. These kinds of human-centric sessions can be more engaging/convincing than aggregate measures.</li>\n<li>Data freshness changes how people use it in their workflows. Having real-time data or predictive tools allows you to monitor and adapt as insights come in.</li>\n<li>How do you know what questions to ask of your data? HEART framework: happiness, engagement, adoptions, retention, and task success. Start with your goals, decide what is an indicator of success of your goals, then instrument that.</li>\n<li>To decide which part of the customer journey to measure, start by laying it all out.</li>\n<li>There's a number of good go-to solutions for answering questions like: funnel analysis (shows you possible improvements) or focus on user groups and split them into a test &amp; control (allows you to test predictions).\n</li>\n<li>The <a href=\"http://www.evanmiller.org/ab-testing/sample-size.html\">Sample Size Calculator</a> gives you a way to determine what size audience you need for your tests.</li>\n<li>Quantitative data is a good tool for understanding what is happening but it won't tell you why. For that, you often need to turn to qualitative data (talking to people). You can ask people with in-context small surveys and similar techniques.</li>\n<li>Often the hardest part of using data is getting people on the same page and caring about the metrics. Try turning data insights into a shared activity, bet on results. Make it fun.</li>\n<li>Dashboards surface data people care about but you need to come together as a team to decide what is important. Having user-centric metrics in your dashboards shows you care about user behavior.</li>\n<li>Data can be used for good and bad. Proceed with caution when using data and be mindful where and how you collect it.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/pCauTCpqhSQ\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-08-28 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Content Performance Quotient","pubDate":"2018-08-27 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/7s58Io3fqLY/entry.asp","guid":"816f03fdc18394d0d515d5f4dc8bc0e6","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/7s58Io3fqLY","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">Beyond Engagement: the Content Performance Quotient</a> presentation at An Event Apart in Chicago, Jeffrey Zeldman introduced a new metric for tracking how well Web sites are performing. Here's my notes from his talk: \n</p>\n<ul>\n<li>The number one stakeholder request for Web sites is engagement: we need people using our services more. But is it the right metric for all these situations?</li>\n<li>For some apps, engagement is clearly the right thing to measure. Think Instagram, long-form articles, or gaming sites. For others, more time spent might be a sign of customer frustration.</li>\n<li>Most of the Web sites we work on are like customer service desks where we want to give people what they need and get them on their way. For these experiences, speed of usefulness should matter more than engagement.</li>\n<li>Content Performance Quotient (Design CPQ) is a measure of how quickly we can get the right content to solve the customer's problem. The CPQ is a goal to iterate against and aim for the shortest distance between problem &amp; solution. It tracks your value to the customer by measuring the speed of usefulness. </li>\n<li>Pretty garbage: when a Web site looks good but doesn't help anyone. Garbage in a delightfully responsive grid is still garbage. A lot of a Web designer's job is bridging the gap between what clients say they need and what their customers actually need.</li>\n<li>Marlboro's advertising company (in the 50s) rethought TV commercials by removing all the copy and focusing on conveying emotions. They went from commercials typically full of text to just ten words focused on their message.</li>\n<li>Mobile is a great forcing function to re-evaluate our content. Because you can't fit everything on a small screen, you need to make decisions about what matters most.</li>\n<li>Slash your architecture and shrink your content. Ask: \"why do we need this?\" Compare all your content to the goals you've established. Design should be intentional. Have purpose-driven design and purpose-driven content. If your design isn't going somewhere, it is going nowhere.</li>\n<li>We can't always have meetings where everybody wins. We need to argue for the customer and that means not everyone in our meetings will get what they want. Purpose needs to drive our collaborations not individual agendas, which usually leak into our Web site designs.</li>\n<li>It’s easy to give every stakeholder what they want. We've enabled this through Content Management Systems (CMS) that allow everyone to publish to the site. Don't take the easy way out. It’s harder to do the right thing. Harder for us, but better for the customer &amp; bottom line.</li>\n<li>Understanding the customer journey allows us to put the right content in the right place. Start with the most important interaction and build out from there. Focus on key interactions and build out from there. Sometimes the right place for your content isn't your Website -for video it could be YouTube or Vimeo.</li>\n<li>Customers come to our sites with a purpose. Anything that gets in the way of that is a distraction. Constantly iterate on content to remove the cruft and surface what's needed. You can start with a content inventory to audit what is in your site, but most of this content is probably out of date and irrelevant. So being in a state of constant iteration works better.</li>\n<li>When you want people to go deeper and engage, to slow down... scannability, which is good for transactions, can be bad for thoughtful content. Instead slow people down with bigger type, better typographic hierarchy, more whitespace.</li>\n<li>Which sites should be slow? If the site is delivering content for the good of the general public, the presentation should enable slow, careful reading. If it’s designed to promote our business or help a customer get an answer to her question, it must be designed for speed of relevancy.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/7s58Io3fqLY\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">Beyond Engagement: the Content Performance Quotient</a> presentation at An Event Apart in Chicago, Jeffrey Zeldman introduced a new metric for tracking how well Web sites are performing. Here's my notes from his talk: \n</p>\n<ul>\n<li>The number one stakeholder request for Web sites is engagement: we need people using our services more. But is it the right metric for all these situations?</li>\n<li>For some apps, engagement is clearly the right thing to measure. Think Instagram, long-form articles, or gaming sites. For others, more time spent might be a sign of customer frustration.</li>\n<li>Most of the Web sites we work on are like customer service desks where we want to give people what they need and get them on their way. For these experiences, speed of usefulness should matter more than engagement.</li>\n<li>Content Performance Quotient (Design CPQ) is a measure of how quickly we can get the right content to solve the customer's problem. The CPQ is a goal to iterate against and aim for the shortest distance between problem &amp; solution. It tracks your value to the customer by measuring the speed of usefulness. </li>\n<li>Pretty garbage: when a Web site looks good but doesn't help anyone. Garbage in a delightfully responsive grid is still garbage. A lot of a Web designer's job is bridging the gap between what clients say they need and what their customers actually need.</li>\n<li>Marlboro's advertising company (in the 50s) rethought TV commercials by removing all the copy and focusing on conveying emotions. They went from commercials typically full of text to just ten words focused on their message.</li>\n<li>Mobile is a great forcing function to re-evaluate our content. Because you can't fit everything on a small screen, you need to make decisions about what matters most.</li>\n<li>Slash your architecture and shrink your content. Ask: \"why do we need this?\" Compare all your content to the goals you've established. Design should be intentional. Have purpose-driven design and purpose-driven content. If your design isn't going somewhere, it is going nowhere.</li>\n<li>We can't always have meetings where everybody wins. We need to argue for the customer and that means not everyone in our meetings will get what they want. Purpose needs to drive our collaborations not individual agendas, which usually leak into our Web site designs.</li>\n<li>It’s easy to give every stakeholder what they want. We've enabled this through Content Management Systems (CMS) that allow everyone to publish to the site. Don't take the easy way out. It’s harder to do the right thing. Harder for us, but better for the customer &amp; bottom line.</li>\n<li>Understanding the customer journey allows us to put the right content in the right place. Start with the most important interaction and build out from there. Focus on key interactions and build out from there. Sometimes the right place for your content isn't your Website -for video it could be YouTube or Vimeo.</li>\n<li>Customers come to our sites with a purpose. Anything that gets in the way of that is a distraction. Constantly iterate on content to remove the cruft and surface what's needed. You can start with a content inventory to audit what is in your site, but most of this content is probably out of date and irrelevant. So being in a state of constant iteration works better.</li>\n<li>When you want people to go deeper and engage, to slow down... scannability, which is good for transactions, can be bad for thoughtful content. Instead slow people down with bigger type, better typographic hierarchy, more whitespace.</li>\n<li>Which sites should be slow? If the site is delivering content for the good of the general public, the presentation should enable slow, careful reading. If it’s designed to promote our business or help a customer get an answer to her question, it must be designed for speed of relevancy.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/7s58Io3fqLY\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-08-27 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Full-Featured Art Direction","pubDate":"2018-08-27 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/Isbinsp--98/entry.asp","guid":"219945f5012da48f90917004b3752626","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/Isbinsp--98","description":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Full-Featured Art Direction for the Web</a> presentation at An Event Apart in Chicago, Mina Markham shared her approach to building Web pages that work across a variety of browsers, devices and locales. Here's my notes from her talk: \n</p>\n<ul>\n<li>Full-featured art direction is progressively enhanced, localized for a particular user, yet inclusive of all visitors and locations.</li>\n<li>Start with the most basic minimal viable experience for the user and move up from there. Semantic markup is your best baseline. Annotate a Web site design with HTML structure: H1, H2, H3, etc. From there, gradually add CSS to style the minimal viable experience. If everything else fails, this is what the user will see. It may be the bare minimum but it works.</li>\n<li>Feature queries in CSS are supported in most browsers other than IE 11. We can use these to set styles based on what browsers support. For instance, modular font scaling allows you to update overall sizing of text in a layout. Feature Query checker allows you to see what things look like when a CSS query is not present.</li>\n<li>Localization is not just text translation. Other elements in the UI, like images, may need to be adjusted as well. You can use attributes like :lang() pseudoclass to include language specific design elements in your layout.</li>\n<li>Inclusive art direction ensures people can make use of our Web sites on various devices and in various locations. Don't remove default behaviors in Web browsers. Instead adjust these to better integrate with your site's design.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/Isbinsp--98\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Full-Featured Art Direction for the Web</a> presentation at An Event Apart in Chicago, Mina Markham shared her approach to building Web pages that work across a variety of browsers, devices and locales. Here's my notes from her talk: \n</p>\n<ul>\n<li>Full-featured art direction is progressively enhanced, localized for a particular user, yet inclusive of all visitors and locations.</li>\n<li>Start with the most basic minimal viable experience for the user and move up from there. Semantic markup is your best baseline. Annotate a Web site design with HTML structure: H1, H2, H3, etc. From there, gradually add CSS to style the minimal viable experience. If everything else fails, this is what the user will see. It may be the bare minimum but it works.</li>\n<li>Feature queries in CSS are supported in most browsers other than IE 11. We can use these to set styles based on what browsers support. For instance, modular font scaling allows you to update overall sizing of text in a layout. Feature Query checker allows you to see what things look like when a CSS query is not present.</li>\n<li>Localization is not just text translation. Other elements in the UI, like images, may need to be adjusted as well. You can use attributes like :lang() pseudoclass to include language specific design elements in your layout.</li>\n<li>Inclusive art direction ensures people can make use of our Web sites on various devices and in various locations. Don't remove default behaviors in Web browsers. Instead adjust these to better integrate with your site's design.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/Isbinsp--98\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-08-27 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"What Can Bike Sharing Apps Teach Us About Mobile On-boarding Design?","pubDate":"2018-07-23 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/qMeocWY9Ycc/entry.asp","guid":"ff2c4060a0e9fbbfe2d3500e0c572577","author":"info@lukew.com","thumbnail":"http://static.lukew.com/onboarding_hellobike.png","description":"\n<p class=\"feature\">Given the <a href=\"https://www.slideshare.net/asymco/toward-micromobility-the-low-end-disruption-of-transportation\">proliferation</a> of bike/scooter sharing services these days, I thought it would be interesting to compare the mobile app on-boarding experiences of the ones I could access. To do so, I went through the new customer flow for six of these services.</p>\n\n<p>While the mobile on-boarding I experienced across these services looked really similar, the end result differed dramatically -from me abandoning the process to walking away a delighted customer. Understanding how product design impacted these outcomes is critical for anyone trying to grow a new mobile business.\n</p>\n\n<h2>Applying Design Patterns</h2>\n<p>My first encounter with bike sharing, appropriately, was in Amsterdam. I was outside the city center for a meeting and encountered a rack of Hello-Bikes. So why not bike back to my hotel in town? Here’s what happened when I tried.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_hellobike_2x.png\"><img src=\"http://static.lukew.com/onboarding_hellobike.png\" srcset=\"http://static.lukew.com/onboarding_hellobike.png, http://static.lukew.com/onboarding_hellobike_2x.png 2x\" alt=\"Hello-Bike app mobile on-boarding process\"></a>\n</p>\n\n<p>Hello-Bike’s mobile on-boarding consists of several common patterns: a splash screen, a sign-up form, terms and conditions, and a tutorial. Though widely used, starting the design process off with these types of patterns often results in a flow that seems right in mock-ups or wireframes but fails to solve actual customer needs.\n</p>\n\n<p>The designer thinks: “I know what an on-boarding flow is. It’s a splash screen, a sign-up screen and a tutorial people can swipe through.” The resulting customer experience in filling in form fields, scrolling through 17 screens of terms &amp; conditions (yes, you are required to scroll through all of them), granting location permissions (because “background location-tracking is required”), and skipping through 6 tutorial screens featuring critical knowledge like “Welcome to Hello-Bike.”\n</p>\n\n<p>After maneuvering through all this, I found out there were no docking stations in central Amsterdam because of <a href=\"https://www.citylab.com/transportation/2017/08/amsterdam-fights-back-against-rogue-bike-share/535791/\">government regulation</a>. So I actually couldn’t use the Hello-Bike service to ride to my hotel. Starting the design process from the perspective of the customer would likely have revealed the importance of communicating these kinds of constraints up front. Starting by selecting design patterns would not.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Set expectations appropriately, so potential customers don’t end a lengthy sign-up process in disappointment or frustration.</li>\n<li>While convenient, design patterns are no substitute for understanding and designing with your customers &amp; their goals top of mind.</li>\n</ul>\n<h2>Having Desktop Bias</h2>\n<p>While modern mobile devices have been around for over ten years, desktop devices have had at least 3x more time to influence and bias our approach to software design. That’s why it’s not surprising to see desktop design concepts permeate mobile apps. In the case of Jump’s mobile on-boarding, they are all over the place.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_jump_2x.png\"><img src=\"http://static.lukew.com/onboarding_jump.png\" srcset=\"http://static.lukew.com/onboarding_jump.png, http://static.lukew.com/onboarding_jump_2x.png 2x\" alt=\"Jump mobile app on-boarding process\"></a>\n</p>\n\n<p>Following the obligatory splash screen, Jump animates through a series of safety tips calling out the unique features of electric bikes. Unfortunately, so many steps follow these tips that I can’t imagine anyone remembering them when they are finally allowed to ride one of Jump’s electric bikes.\n</p>\n\n<p>Next up are a series of permission dialogs for access to Motion &amp; Fitness and Location data. Both requests are accompanied by explanatory text that suggests Jump needs access to this information in order to “gather data about how electric bikes affect travel patterns.” Sounds like a good thing for Jump, but it’s not clear why customers should participate or even care.\n</p>\n\n<p>This mindset permeates the rest of Jump’s on-boarding as well: choose one of our bike “networks”, select one of our plans, verify your phone number, pick a 7 character password with numbers and uppercase letters, agree to our terms and conditions, put money into one of our accounts, etc. After ten steps of doing things for Jump and seeing no progress toward actually riding a bike, I abandoned at the “Enter Credit Card” step. \n</p>\n\n<p>Perhaps someone at Jump heard completion rates for forms go up when you place each question on a separate screen (I’ve seen no evidence of this), but the cumulative effect of going through a desktop-design influenced <a href=\"https://www.lukew.com/ff/entry.asp?1579\">e-commerce checkout flow</a> one step at a time on my phone was quite painful.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Make sure your customers always feel like they are making progress toward their goals, not yours.</li>\n<li>Desktop paradigms often aren’t a great fit for mobile. For instance, do you really need a checkout form? As we’ll see later, no.</li>\n</ul>\n<h2>Right Time, Right Place</h2>\n<p>After abandoning the bike-sharing process with both Hello-Bike and Jump, I had my first successful on-boarding with Spin. That’s not to say there wasn’t a lot of room for improvement. With mobile on-boarding it’s not just <strong>what</strong> we ask people to do it’s also <strong>when</strong> we ask them to do it. Spin starts off with a tutorial, which explains they are smart, I can park anywhere, and scanning a bike’s QR code will let me ride it.</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_spin_2x.png\"><img src=\"http://static.lukew.com/onboarding_spin.png\" srcset=\"http://static.lukew.com/onboarding_spin.png, http://static.lukew.com/onboarding_spin_2x.png 2x\" alt=\"Spin mobile app on-boarding process\"></a>\n</p>\n \n<p>Turns out that’s not entirely true as I needed to give them my email address, create a password, provide location permissions, and agree to three separate terms of service. It’s only after this gauntlet, that I’m actually able to scan the QR code on the bike in front of me. Why couldn’t we just have started the process there? \n</p>\n\n<p>It is worth noting, however, that Spin provides much better <a hrewf=\"https://www.lukew.com/ff/entry.asp?1928\">explanations</a> for its permission requests. When requesting location permissions, Hello-Bike told me: “background-location tracking is required” and Jump explained I could help them “gather data about how electric bikes affect travel patterns.” Spin, on the other hand, explained they use location to help me find pick-up and drop off points. They also explained they needed camera permissions so I can scan the QR code on a bike to unlock it.\n</p>\n\n<p>After I did, my next step was to reload my Spin account, with the only reloading option being $5. This immediately felt odd as the bike ride itself was advertised as $1. So if I never rode another Spin bike again, they had 4 more dollars from me... hmmmm. On a positive note, Spin integrated with Apple Pay which meant I simply had to tap a button on the side of my phone to approve payment. No checkout forms, shopping carts, or credit card entry forms required. See? We can do things in a mobile-native vs. desktop way.\n</p>\n\n<p>Following the payment process, I was greeted with a another tutorial (these things sure are popular huh? too bad most people skip through them). This time 4 screens told me about parking requirements. But wait… didn’t the first tutorial tell me I could park anywhere? Next Spin asked to send me notifications with no explanation as to why I should agree. So I didn’t.\n</p>\n\n<p>Once I rode the bike and got to my destination, I received a ride summary that told me my ride was free. That’s much appreciated but it left me asking again… couldn’t we have started there?\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>When you surface information to customers is critical. Spin could have told me my ride was free well before asking me to fill my account with a minimum of $5. And their Parking tutorial was probably more appropriate after my ride when parking my bike, not before it.</li>\n<li>Get people to your core value as soon as possible, but not sooner. It took 7 steps before I was able to scan the bike in front of me and 9 more steps before I could actually ride it. Every step that keeps customers from experiencing what makes you great, leaves them wondering why you’re not.</li>\n</ul>\n<h2>Tricky, Tricky</h2>\n<p>By now, Ofo’s mobile on-boarding process will seem familiar: location and notification permission asks without any useful explanations, an up-front tutorial, a phone number verification flow, a camera permission ask, and more.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_ofo_2x.png\"><img src=\"http://static.lukew.com/onboarding_ofo.png\" srcset=\"http://static.lukew.com/onboarding_ofo.png, http://static.lukew.com/onboarding_ofo_2x.png 2x\" alt=\"Ofo mobile app on-boarding process\"></a>\n</p>\n\n<p>For many mobile apps, phone number verification can replace the need for more traditional desktop computer influenced sign-up process that require people to enter their first and last names, email addresses, passwords, and more into a series of form fields. When you’re on a phone, all you need to verify it’s you is your phone number.\n</p> \n\n<p>With this simplified account creation process, Ofo could have had me on my way with a quick QR code scan. But instead I got a subscription service promotion that suggested I could try the service for free. After tapping the “Try it Free” button, however, I ended up on a Choose your Plan page. It was only when I used the small back arrows (tricky, tricky) that I made it back to the QR code unlock process which let me ride the Ofo bike in front of me with no charge.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Mobile device capabilities allow us to rethink how people can accomplish tasks. For instance, instead of multiple step sign-up forms, a two step phone verification process can establish someone’s account much quicker by using what mobile devices do well.</li>\n<li>While companies have revenue and growth needs, unclear flows and UI entrapments are not the way to build long-term customer loyalty and growth. You may trick some people into subscribing to your service but they won’t like you for it.</li>\n</ul>\n<h2>But Why?</h2>\n<p>Starting Bird’s mobile on-boarding gave me high hopes that I had finally found a streamlined customer-centric process that delivered on the promise of fast &amp; easy last-mile transportation (or micro-mobility, if you must).</p>\n\n<p>Things started out typically, a splash screen, an email form field, a location permission ask, but then moved right to scanning the  QR code of the scooter in front of me and asking me to pay the $1 required to get started. Great, I thought… I’ll be riding in no time as I instantly made it through Apple Pay’s confirmation screen.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_bird_2x.png\"><img src=\"http://static.lukew.com/onboarding_bird.png\" srcset=\"http://static.lukew.com/onboarding_bird.png, http://static.lukew.com/onboarding_bird_2x.png 2x\" alt=\"Bird mobile app on-boarding process\"></a>\n</p>\n\n<p>As a quick aside, integrating native payment platforms can really accelerate the payment process and increase conversion. Hotel Tonight <a href=\"https://www.slideshare.net/kendrickapp/hotel-tonight-mobile\">saw</a> a 26% increase in conversion with Apple Pay and Wish used A/B testing to <a href=\"https://stripe.com/docs/apple-pay/best-practices\">uncover</a> a 2X conversion increase when they added Apple Pay support. Turns out people do prefer to just look (Face ID) or tap (Touch ID) to pay for things on their phones instead of entering credit card or banking account details into mobile keyboards.\n</p>\n\n<p>But back to Bird... I scanned the QR code and authorized Apple Pay. Time to ride right? Not quite. Next I was asked to scan the front of my drivers’ license with no explanation of why. Odd, but I assumed it was a legal/safety thing and despite having a lot of privacy reservations got through it. Or so I thought because after this I had to scan the back of my drivers’ license, scroll through all 15 screens of a rental agreement, and tick off 6 checkboxes saying I agreed to wear a helmet, not ride downhill, and was over 18 (can’t they get that from my driver’s license?).\n</p>\n\n<p>Then it was back to scanning the QR code again, turning down notification permissions, and slogging through a 4 screen tutorial which ended with even more rules. The whole process left me feeling the legal department had taken over control of Bird’s first time customer experience: rental contracts, local rules, driver’s license verifications, etc. -really not in line with the company’s brand message of “enjoy the ride”. I left being intimated by it.</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Rules and regulations do exist but mobile on-boarding flows shouldn’t be driven by them. There’s effective ways to balance legal requirements and customer experience. Push hard to find them.</li>\n<li>When asking for personal (especially highly personal) information, explain why. Even just a sentence about why I had to scan my driver’s license would have helped me immensely with Bird’s process.</li>\n</ul>\n<h2>Core Value, ASAP</h2>\n<p>By now, we’ve seen how very similar companies can end up with very different mobile on-boarding designs and results. So how can companies balance all the requirements and steps involved in bike-sharing and still deliver a great first-time experience? By always looking at things from the perspective of your customer. Which Lime, while not perfect, does.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_lime2_2x.png\"><img src=\"http://static.lukew.com/onboarding_lime2.png\" srcset=\"http://static.lukew.com/onboarding_lime2.png, http://static.lukew.com/onboarding_lime2_2x.png 2x\" alt=\"Lime mobile app on-boarding process\"></a>\n</p>\n\n<p>Lime doesn’t bother with a splash screen showing you their logo as a first step. Instead they tell you upfront that they know why you’re here with a large headline stating: “Start Riding Now”. Awesome. That’s what I’ve been trying to do this whole time. On this same screen are two streamlined sign-up options: phone number verification (which makes use of native device capabilities) and Facebook -both aimed at getting you started right away.\n</p>\n\n<p>Next, Lime takes the time to explain why they are asking for location permissions with the clearest copy we’ve seen in all these examples: “to find nearby bikes and scooters”. Sadly, they don’t apply this same level of clarification to the next permission ask for Notifications. But smartly, they use <a href=\"https://www.lukew.com/ff/entry.asp?1928\">a double dialog solution</a> and if you say no (which I did), they try again with more clarity.\n</p>\n\n<p>It’s become almost standard practice to just ask for notification permissions up front in mobile apps because up to 40% of people will just give them to you. So many apps figure, why not ask? Lots of people will say no but we’ll get some people saying yes. Personally, I feel this is an opportunity to improve for Lime.\n</p>\n\n<p>Ignoring the notifications prompt, the rest of Lime’s on-boarding process is fast and efficient: scan the QR code (once again with a clear explanation of why camera permissions are needed), authorize Apple Pay to pay for your ride. Lime doesn’t either bother to provide other payment options. They know the user experience and conversion benefits of Apple Pay and rely on it exclusively.\n</p>\n\n<p>And… that’s it. I’m riding. No tutorial! Shocking I know, but they do offer one on the map screen if you’d like to learn more before riding. User choice, not company requirement. \n</p>\n\n<p>In their mobile on-boarding, Lime deftly navigated a number of significant hurdles: account set-up/verification, location &amp; camera permissions and payment -the minimum amount necessary to ride and nothing more. They did so by explaining how each of these steps got me closer to my goal of riding and worked hard to minimize their requirements, often relying on native mobile functionality to make things as fast and easy as possible.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>It’s not about you, it’s about your customer. Put your customer’s goals front and center in your mobile on-boarding process. It starts from the first screen (i.e. “Start Riding Now”)</li>\n<li>Lean into mobile-native solutions: phone verification, integrated payments, and more.</li>\n</ul>\n<h2>More On On-boarding</h2>\n<p>For a deeper look into mobile on-boarding design, check out this 20 minute segment of my Mobile design and data presentation at Google Conversions this year:\n\n</p>\n<div class=\"videobox\"></div>\n\nYou can also read Casey Winter’s <a href=\"https://news.greylock.com/why-onboarding-is-the-most-crucial-part-of-your-growth-strategy-8f9ad3ec8d5e\">article about on-boarding</a>, which does a great job outlining the concept of getting people to your company’s core value as fast as possible, but not faster.\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/qMeocWY9Ycc\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">Given the <a href=\"https://www.slideshare.net/asymco/toward-micromobility-the-low-end-disruption-of-transportation\">proliferation</a> of bike/scooter sharing services these days, I thought it would be interesting to compare the mobile app on-boarding experiences of the ones I could access. To do so, I went through the new customer flow for six of these services.</p>\n\n<p>While the mobile on-boarding I experienced across these services looked really similar, the end result differed dramatically -from me abandoning the process to walking away a delighted customer. Understanding how product design impacted these outcomes is critical for anyone trying to grow a new mobile business.\n</p>\n\n<h2>Applying Design Patterns</h2>\n<p>My first encounter with bike sharing, appropriately, was in Amsterdam. I was outside the city center for a meeting and encountered a rack of Hello-Bikes. So why not bike back to my hotel in town? Here’s what happened when I tried.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_hellobike_2x.png\"><img src=\"http://static.lukew.com/onboarding_hellobike.png\" srcset=\"http://static.lukew.com/onboarding_hellobike.png, http://static.lukew.com/onboarding_hellobike_2x.png 2x\" alt=\"Hello-Bike app mobile on-boarding process\"></a>\n</p>\n\n<p>Hello-Bike’s mobile on-boarding consists of several common patterns: a splash screen, a sign-up form, terms and conditions, and a tutorial. Though widely used, starting the design process off with these types of patterns often results in a flow that seems right in mock-ups or wireframes but fails to solve actual customer needs.\n</p>\n\n<p>The designer thinks: “I know what an on-boarding flow is. It’s a splash screen, a sign-up screen and a tutorial people can swipe through.” The resulting customer experience in filling in form fields, scrolling through 17 screens of terms &amp; conditions (yes, you are required to scroll through all of them), granting location permissions (because “background location-tracking is required”), and skipping through 6 tutorial screens featuring critical knowledge like “Welcome to Hello-Bike.”\n</p>\n\n<p>After maneuvering through all this, I found out there were no docking stations in central Amsterdam because of <a href=\"https://www.citylab.com/transportation/2017/08/amsterdam-fights-back-against-rogue-bike-share/535791/\">government regulation</a>. So I actually couldn’t use the Hello-Bike service to ride to my hotel. Starting the design process from the perspective of the customer would likely have revealed the importance of communicating these kinds of constraints up front. Starting by selecting design patterns would not.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Set expectations appropriately, so potential customers don’t end a lengthy sign-up process in disappointment or frustration.</li>\n<li>While convenient, design patterns are no substitute for understanding and designing with your customers &amp; their goals top of mind.</li>\n</ul>\n<h2>Having Desktop Bias</h2>\n<p>While modern mobile devices have been around for over ten years, desktop devices have had at least 3x more time to influence and bias our approach to software design. That’s why it’s not surprising to see desktop design concepts permeate mobile apps. In the case of Jump’s mobile on-boarding, they are all over the place.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_jump_2x.png\"><img src=\"http://static.lukew.com/onboarding_jump.png\" srcset=\"http://static.lukew.com/onboarding_jump.png, http://static.lukew.com/onboarding_jump_2x.png 2x\" alt=\"Jump mobile app on-boarding process\"></a>\n</p>\n\n<p>Following the obligatory splash screen, Jump animates through a series of safety tips calling out the unique features of electric bikes. Unfortunately, so many steps follow these tips that I can’t imagine anyone remembering them when they are finally allowed to ride one of Jump’s electric bikes.\n</p>\n\n<p>Next up are a series of permission dialogs for access to Motion &amp; Fitness and Location data. Both requests are accompanied by explanatory text that suggests Jump needs access to this information in order to “gather data about how electric bikes affect travel patterns.” Sounds like a good thing for Jump, but it’s not clear why customers should participate or even care.\n</p>\n\n<p>This mindset permeates the rest of Jump’s on-boarding as well: choose one of our bike “networks”, select one of our plans, verify your phone number, pick a 7 character password with numbers and uppercase letters, agree to our terms and conditions, put money into one of our accounts, etc. After ten steps of doing things for Jump and seeing no progress toward actually riding a bike, I abandoned at the “Enter Credit Card” step. \n</p>\n\n<p>Perhaps someone at Jump heard completion rates for forms go up when you place each question on a separate screen (I’ve seen no evidence of this), but the cumulative effect of going through a desktop-design influenced <a href=\"https://www.lukew.com/ff/entry.asp?1579\">e-commerce checkout flow</a> one step at a time on my phone was quite painful.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Make sure your customers always feel like they are making progress toward their goals, not yours.</li>\n<li>Desktop paradigms often aren’t a great fit for mobile. For instance, do you really need a checkout form? As we’ll see later, no.</li>\n</ul>\n<h2>Right Time, Right Place</h2>\n<p>After abandoning the bike-sharing process with both Hello-Bike and Jump, I had my first successful on-boarding with Spin. That’s not to say there wasn’t a lot of room for improvement. With mobile on-boarding it’s not just <strong>what</strong> we ask people to do it’s also <strong>when</strong> we ask them to do it. Spin starts off with a tutorial, which explains they are smart, I can park anywhere, and scanning a bike’s QR code will let me ride it.</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_spin_2x.png\"><img src=\"http://static.lukew.com/onboarding_spin.png\" srcset=\"http://static.lukew.com/onboarding_spin.png, http://static.lukew.com/onboarding_spin_2x.png 2x\" alt=\"Spin mobile app on-boarding process\"></a>\n</p>\n \n<p>Turns out that’s not entirely true as I needed to give them my email address, create a password, provide location permissions, and agree to three separate terms of service. It’s only after this gauntlet, that I’m actually able to scan the QR code on the bike in front of me. Why couldn’t we just have started the process there? \n</p>\n\n<p>It is worth noting, however, that Spin provides much better <a hrewf=\"https://www.lukew.com/ff/entry.asp?1928\">explanations</a> for its permission requests. When requesting location permissions, Hello-Bike told me: “background-location tracking is required” and Jump explained I could help them “gather data about how electric bikes affect travel patterns.” Spin, on the other hand, explained they use location to help me find pick-up and drop off points. They also explained they needed camera permissions so I can scan the QR code on a bike to unlock it.\n</p>\n\n<p>After I did, my next step was to reload my Spin account, with the only reloading option being $5. This immediately felt odd as the bike ride itself was advertised as $1. So if I never rode another Spin bike again, they had 4 more dollars from me... hmmmm. On a positive note, Spin integrated with Apple Pay which meant I simply had to tap a button on the side of my phone to approve payment. No checkout forms, shopping carts, or credit card entry forms required. See? We can do things in a mobile-native vs. desktop way.\n</p>\n\n<p>Following the payment process, I was greeted with a another tutorial (these things sure are popular huh? too bad most people skip through them). This time 4 screens told me about parking requirements. But wait… didn’t the first tutorial tell me I could park anywhere? Next Spin asked to send me notifications with no explanation as to why I should agree. So I didn’t.\n</p>\n\n<p>Once I rode the bike and got to my destination, I received a ride summary that told me my ride was free. That’s much appreciated but it left me asking again… couldn’t we have started there?\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>When you surface information to customers is critical. Spin could have told me my ride was free well before asking me to fill my account with a minimum of $5. And their Parking tutorial was probably more appropriate after my ride when parking my bike, not before it.</li>\n<li>Get people to your core value as soon as possible, but not sooner. It took 7 steps before I was able to scan the bike in front of me and 9 more steps before I could actually ride it. Every step that keeps customers from experiencing what makes you great, leaves them wondering why you’re not.</li>\n</ul>\n<h2>Tricky, Tricky</h2>\n<p>By now, Ofo’s mobile on-boarding process will seem familiar: location and notification permission asks without any useful explanations, an up-front tutorial, a phone number verification flow, a camera permission ask, and more.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_ofo_2x.png\"><img src=\"http://static.lukew.com/onboarding_ofo.png\" srcset=\"http://static.lukew.com/onboarding_ofo.png, http://static.lukew.com/onboarding_ofo_2x.png 2x\" alt=\"Ofo mobile app on-boarding process\"></a>\n</p>\n\n<p>For many mobile apps, phone number verification can replace the need for more traditional desktop computer influenced sign-up process that require people to enter their first and last names, email addresses, passwords, and more into a series of form fields. When you’re on a phone, all you need to verify it’s you is your phone number.\n</p> \n\n<p>With this simplified account creation process, Ofo could have had me on my way with a quick QR code scan. But instead I got a subscription service promotion that suggested I could try the service for free. After tapping the “Try it Free” button, however, I ended up on a Choose your Plan page. It was only when I used the small back arrows (tricky, tricky) that I made it back to the QR code unlock process which let me ride the Ofo bike in front of me with no charge.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Mobile device capabilities allow us to rethink how people can accomplish tasks. For instance, instead of multiple step sign-up forms, a two step phone verification process can establish someone’s account much quicker by using what mobile devices do well.</li>\n<li>While companies have revenue and growth needs, unclear flows and UI entrapments are not the way to build long-term customer loyalty and growth. You may trick some people into subscribing to your service but they won’t like you for it.</li>\n</ul>\n<h2>But Why?</h2>\n<p>Starting Bird’s mobile on-boarding gave me high hopes that I had finally found a streamlined customer-centric process that delivered on the promise of fast &amp; easy last-mile transportation (or micro-mobility, if you must).</p>\n\n<p>Things started out typically, a splash screen, an email form field, a location permission ask, but then moved right to scanning the  QR code of the scooter in front of me and asking me to pay the $1 required to get started. Great, I thought… I’ll be riding in no time as I instantly made it through Apple Pay’s confirmation screen.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_bird_2x.png\"><img src=\"http://static.lukew.com/onboarding_bird.png\" srcset=\"http://static.lukew.com/onboarding_bird.png, http://static.lukew.com/onboarding_bird_2x.png 2x\" alt=\"Bird mobile app on-boarding process\"></a>\n</p>\n\n<p>As a quick aside, integrating native payment platforms can really accelerate the payment process and increase conversion. Hotel Tonight <a href=\"https://www.slideshare.net/kendrickapp/hotel-tonight-mobile\">saw</a> a 26% increase in conversion with Apple Pay and Wish used A/B testing to <a href=\"https://stripe.com/docs/apple-pay/best-practices\">uncover</a> a 2X conversion increase when they added Apple Pay support. Turns out people do prefer to just look (Face ID) or tap (Touch ID) to pay for things on their phones instead of entering credit card or banking account details into mobile keyboards.\n</p>\n\n<p>But back to Bird... I scanned the QR code and authorized Apple Pay. Time to ride right? Not quite. Next I was asked to scan the front of my drivers’ license with no explanation of why. Odd, but I assumed it was a legal/safety thing and despite having a lot of privacy reservations got through it. Or so I thought because after this I had to scan the back of my drivers’ license, scroll through all 15 screens of a rental agreement, and tick off 6 checkboxes saying I agreed to wear a helmet, not ride downhill, and was over 18 (can’t they get that from my driver’s license?).\n</p>\n\n<p>Then it was back to scanning the QR code again, turning down notification permissions, and slogging through a 4 screen tutorial which ended with even more rules. The whole process left me feeling the legal department had taken over control of Bird’s first time customer experience: rental contracts, local rules, driver’s license verifications, etc. -really not in line with the company’s brand message of “enjoy the ride”. I left being intimated by it.</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Rules and regulations do exist but mobile on-boarding flows shouldn’t be driven by them. There’s effective ways to balance legal requirements and customer experience. Push hard to find them.</li>\n<li>When asking for personal (especially highly personal) information, explain why. Even just a sentence about why I had to scan my driver’s license would have helped me immensely with Bird’s process.</li>\n</ul>\n<h2>Core Value, ASAP</h2>\n<p>By now, we’ve seen how very similar companies can end up with very different mobile on-boarding designs and results. So how can companies balance all the requirements and steps involved in bike-sharing and still deliver a great first-time experience? By always looking at things from the perspective of your customer. Which Lime, while not perfect, does.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_lime2_2x.png\"><img src=\"http://static.lukew.com/onboarding_lime2.png\" srcset=\"http://static.lukew.com/onboarding_lime2.png, http://static.lukew.com/onboarding_lime2_2x.png 2x\" alt=\"Lime mobile app on-boarding process\"></a>\n</p>\n\n<p>Lime doesn’t bother with a splash screen showing you their logo as a first step. Instead they tell you upfront that they know why you’re here with a large headline stating: “Start Riding Now”. Awesome. That’s what I’ve been trying to do this whole time. On this same screen are two streamlined sign-up options: phone number verification (which makes use of native device capabilities) and Facebook -both aimed at getting you started right away.\n</p>\n\n<p>Next, Lime takes the time to explain why they are asking for location permissions with the clearest copy we’ve seen in all these examples: “to find nearby bikes and scooters”. Sadly, they don’t apply this same level of clarification to the next permission ask for Notifications. But smartly, they use <a href=\"https://www.lukew.com/ff/entry.asp?1928\">a double dialog solution</a> and if you say no (which I did), they try again with more clarity.\n</p>\n\n<p>It’s become almost standard practice to just ask for notification permissions up front in mobile apps because up to 40% of people will just give them to you. So many apps figure, why not ask? Lots of people will say no but we’ll get some people saying yes. Personally, I feel this is an opportunity to improve for Lime.\n</p>\n\n<p>Ignoring the notifications prompt, the rest of Lime’s on-boarding process is fast and efficient: scan the QR code (once again with a clear explanation of why camera permissions are needed), authorize Apple Pay to pay for your ride. Lime doesn’t either bother to provide other payment options. They know the user experience and conversion benefits of Apple Pay and rely on it exclusively.\n</p>\n\n<p>And… that’s it. I’m riding. No tutorial! Shocking I know, but they do offer one on the map screen if you’d like to learn more before riding. User choice, not company requirement. \n</p>\n\n<p>In their mobile on-boarding, Lime deftly navigated a number of significant hurdles: account set-up/verification, location &amp; camera permissions and payment -the minimum amount necessary to ride and nothing more. They did so by explaining how each of these steps got me closer to my goal of riding and worked hard to minimize their requirements, often relying on native mobile functionality to make things as fast and easy as possible.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>It’s not about you, it’s about your customer. Put your customer’s goals front and center in your mobile on-boarding process. It starts from the first screen (i.e. “Start Riding Now”)</li>\n<li>Lean into mobile-native solutions: phone verification, integrated payments, and more.</li>\n</ul>\n<h2>More On On-boarding</h2>\n<p>For a deeper look into mobile on-boarding design, check out this 20 minute segment of my Mobile design and data presentation at Google Conversions this year:\n\n</p>\n<div class=\"videobox\"></div>\n\nYou can also read Casey Winter’s <a href=\"https://news.greylock.com/why-onboarding-is-the-most-crucial-part-of-your-growth-strategy-8f9ad3ec8d5e\">article about on-boarding</a>, which does a great job outlining the concept of getting people to your company’s core value as fast as possible, but not faster.\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/qMeocWY9Ycc\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-07-23 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Video: Mobile Planet","pubDate":"2018-05-29 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/4E3UodHl2eY/entry.asp","guid":"e03bc4d799513a277779676c747fb630","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/4E3UodHl2eY","description":"\n<p class=\"feature\">For the past six years, I've presented a walkthrough of the latest mobile data and design insights and solutions I've been exploring at <a href=\"https://www.youtube.com/playlist?list=PLMEOqDSoPMSU2wlfJMERFOZJwMLmhyx90\">Google's Conversions event</a> in Dublin. This year's video recording is now live.</p>\n\n<div class=\"videobox\"></div>\n\n<p>This year's presentation is a data-informed big picture view of our mobile planet, how to design products for it, and why covering on-boarding, performance, touch gestures, and more.</p>\n\n<h2>All Annual Sessions:</h2>\n<ul>\n<li>Conversions@Google 2018 session on our <a href=\"https://www.lukew.com/ff/entry.asp?1994\">Mobile Planet</a>\n</li>\n<li>Conversions@Google 2017 (November) session on <a href=\"https://www.lukew.com/ff/entry.asp?1982\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2017 (April) session on <a href=\"https://www.lukew.com/ff/entry.asp?1973\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2016 session on <a href=\"https://www.lukew.com/ff/entry.asp?1962\">Obvious Always Wins</a>\n</li>\n<li>Conversions@Google 2015 session on <a href=\"https://www.lukew.com/ff/entry.asp?1949\">Screen Time</a>\n</li>\n<li>Conversions@Google 2014 session on <a href=\"https://www.lukew.com/ff/entry.asp?1936\">Mobile Design Now</a>\n</li>\n<li>Conversions@Google 2013 session on <a href=\"https://www.youtube.com/watch?v=DSye2bcl2Lg&amp;index=2&amp;list=PLMEOqDSoPMSV6jWnwxaAlcuuA0gVRGAuy\">One Design for a Multi-Device Web</a>\n</li>\n</ul>\n<p>Big thanks to the <a href=\"https://www.youtube.com/channel/UClGSSyDNPuqaRMUyPru1w4Q\">Conversions@Google</a> team for making these sessions available to all.</p>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/4E3UodHl2eY\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">For the past six years, I've presented a walkthrough of the latest mobile data and design insights and solutions I've been exploring at <a href=\"https://www.youtube.com/playlist?list=PLMEOqDSoPMSU2wlfJMERFOZJwMLmhyx90\">Google's Conversions event</a> in Dublin. This year's video recording is now live.</p>\n\n<div class=\"videobox\"></div>\n\n<p>This year's presentation is a data-informed big picture view of our mobile planet, how to design products for it, and why covering on-boarding, performance, touch gestures, and more.</p>\n\n<h2>All Annual Sessions:</h2>\n<ul>\n<li>Conversions@Google 2018 session on our <a href=\"https://www.lukew.com/ff/entry.asp?1994\">Mobile Planet</a>\n</li>\n<li>Conversions@Google 2017 (November) session on <a href=\"https://www.lukew.com/ff/entry.asp?1982\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2017 (April) session on <a href=\"https://www.lukew.com/ff/entry.asp?1973\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2016 session on <a href=\"https://www.lukew.com/ff/entry.asp?1962\">Obvious Always Wins</a>\n</li>\n<li>Conversions@Google 2015 session on <a href=\"https://www.lukew.com/ff/entry.asp?1949\">Screen Time</a>\n</li>\n<li>Conversions@Google 2014 session on <a href=\"https://www.lukew.com/ff/entry.asp?1936\">Mobile Design Now</a>\n</li>\n<li>Conversions@Google 2013 session on <a href=\"https://www.youtube.com/watch?v=DSye2bcl2Lg&amp;index=2&amp;list=PLMEOqDSoPMSV6jWnwxaAlcuuA0gVRGAuy\">One Design for a Multi-Device Web</a>\n</li>\n</ul>\n<p>Big thanks to the <a href=\"https://www.youtube.com/channel/UClGSSyDNPuqaRMUyPru1w4Q\">Conversions@Google</a> team for making these sessions available to all.</p>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/4E3UodHl2eY\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-05-29 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Google Conversions: Highlights","pubDate":"2018-05-15 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/6FFMdYaADIE/entry.asp","guid":"756c4d93a40ec61c6def1dd2f4a5de19","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/6FFMdYaADIE","description":"\n<p class=\"feature\">Across several presentations at <a href=\"https://events.withgoogle.com/conversionsgoogle-9/agenda/#content\">Google Conversions</a> in Dublin, several speakers shared insights and best practices for conversion rate optimization. Here's a few highlights: \n</p>\n<h2>Confirmation Bias - Michael Aagaard</h2>\n<ul>\n<li>In the 18th century, tobacco smoke was considered very good for your heart and lungs. In particular tobacco enemas were quite popular so much that they were placed along the banks of the river Thames to help drowning victims. This is an example of confirmation bias at work.</li>\n<li>Confirmation biases is our tendency to accept evidence we agree with at face value and dismiss information we don't agree with unless the evidence is overwhelming. Confirmation biases limits our ability to seek out and uncover the truth.</li>\n<li>Torturing data: if you torture any data long enough it will confess to anything. High levels of correlation between things don't imply causation. We have to be careful to not see what we want in data.</li>\n<li>Stopping A/B tests when they show the impact we want is an example of confirmation bias. Instead, let them run for an appropriate amount of time. Over time, tests are likely to show much less effects.</li>\n<li>How to overcome confirmation bias: accept the fact that you could be wrong, seek out a different perspective. Find people who talk to customers/users. They have a bias toward end users.</li>\n<li>Don't test your ideas, do detective work to find out what customers need and how they talk about it. Then your A/B test is simply the final test at the end to see if you did your detective work well.</li>\n</ul>\n<h2>CRO - Lina Hansson</h2>\n<ul>\n<li>Celebrate the discovery of weak spots. Don't take it as failure but instead be happy when you find something that can be improved.</li>\n<li>The biggest missed opportunity in conversion rate optimization is usability testing. Move away from opinions and instead use user testing to identify issues.</li>\n<li>A common pain point across retail sites is find-ability: both search and browse. When we move to mobile, many sites remove their top categories list in order to fit on smaller screens. This creates discoverability issues. One of the first things retail sites should test is adding categories visibly on their home page.</li>\n<li>Value propositions for companies are usually cut for mobile. Instead of removing them, redesign them to make them work on mobile.</li>\n<li>People can be classified into four behavior types. Methodical people read completely and analyze before making decisions. Humanistic people react strongly to the opinions of others. Competitive people move quickly and expect things to work. Spontaneous people are emotional and fast-paced. You can design experiences that are appropriate for each of these behavior types.</li>\n<li>The companies that solve checkout on mobile are the ones that will win.</li>\n</ul>\n<h2>Meaningful Data - Simo Ahava</h2>\n<ul>\n<li>It's quite simple to get a service like Google Analytics set up but how do we use these tools to really understand what we're doing. How can data become meaningful?</li>\n<li>Tactics (tool expertise) without a strategy (business expertise) are just party tricks and a strategy without tactics is just talk. What brings the two together is agility.</li>\n<li>Tools must be customized for your organization's needs. We are not trying to optimize metrics but our businesses. Default metrics and reports need to be adjusted to work with your specific needs.</li>\n</ul>\n<h2>Landing Pages - Anna Potanin</h2>\n<ul>\n<li>Designers want to do their best and create unique interfaces but making things for the Web often requires understanding and using conventions. Only apply a unique visual design after you have followed best practices.</li>\n<li>3 things all retail sites should have on their landing and home pages: call to action, value propositions, and visuals.</li>\n<li>The more prominent you make your search bar, the more searches you get. Why do you want to do this? Conversion rates are usually much higher for people who search</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/6FFMdYaADIE\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">Across several presentations at <a href=\"https://events.withgoogle.com/conversionsgoogle-9/agenda/#content\">Google Conversions</a> in Dublin, several speakers shared insights and best practices for conversion rate optimization. Here's a few highlights: \n</p>\n<h2>Confirmation Bias - Michael Aagaard</h2>\n<ul>\n<li>In the 18th century, tobacco smoke was considered very good for your heart and lungs. In particular tobacco enemas were quite popular so much that they were placed along the banks of the river Thames to help drowning victims. This is an example of confirmation bias at work.</li>\n<li>Confirmation biases is our tendency to accept evidence we agree with at face value and dismiss information we don't agree with unless the evidence is overwhelming. Confirmation biases limits our ability to seek out and uncover the truth.</li>\n<li>Torturing data: if you torture any data long enough it will confess to anything. High levels of correlation between things don't imply causation. We have to be careful to not see what we want in data.</li>\n<li>Stopping A/B tests when they show the impact we want is an example of confirmation bias. Instead, let them run for an appropriate amount of time. Over time, tests are likely to show much less effects.</li>\n<li>How to overcome confirmation bias: accept the fact that you could be wrong, seek out a different perspective. Find people who talk to customers/users. They have a bias toward end users.</li>\n<li>Don't test your ideas, do detective work to find out what customers need and how they talk about it. Then your A/B test is simply the final test at the end to see if you did your detective work well.</li>\n</ul>\n<h2>CRO - Lina Hansson</h2>\n<ul>\n<li>Celebrate the discovery of weak spots. Don't take it as failure but instead be happy when you find something that can be improved.</li>\n<li>The biggest missed opportunity in conversion rate optimization is usability testing. Move away from opinions and instead use user testing to identify issues.</li>\n<li>A common pain point across retail sites is find-ability: both search and browse. When we move to mobile, many sites remove their top categories list in order to fit on smaller screens. This creates discoverability issues. One of the first things retail sites should test is adding categories visibly on their home page.</li>\n<li>Value propositions for companies are usually cut for mobile. Instead of removing them, redesign them to make them work on mobile.</li>\n<li>People can be classified into four behavior types. Methodical people read completely and analyze before making decisions. Humanistic people react strongly to the opinions of others. Competitive people move quickly and expect things to work. Spontaneous people are emotional and fast-paced. You can design experiences that are appropriate for each of these behavior types.</li>\n<li>The companies that solve checkout on mobile are the ones that will win.</li>\n</ul>\n<h2>Meaningful Data - Simo Ahava</h2>\n<ul>\n<li>It's quite simple to get a service like Google Analytics set up but how do we use these tools to really understand what we're doing. How can data become meaningful?</li>\n<li>Tactics (tool expertise) without a strategy (business expertise) are just party tricks and a strategy without tactics is just talk. What brings the two together is agility.</li>\n<li>Tools must be customized for your organization's needs. We are not trying to optimize metrics but our businesses. Default metrics and reports need to be adjusted to work with your specific needs.</li>\n</ul>\n<h2>Landing Pages - Anna Potanin</h2>\n<ul>\n<li>Designers want to do their best and create unique interfaces but making things for the Web often requires understanding and using conventions. Only apply a unique visual design after you have followed best practices.</li>\n<li>3 things all retail sites should have on their landing and home pages: call to action, value propositions, and visuals.</li>\n<li>The more prominent you make your search bar, the more searches you get. Why do you want to do this? Conversion rates are usually much higher for people who search</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/6FFMdYaADIE\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-05-15 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: The Way of the Web","pubDate":"2018-04-03 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/t1ukcNH6C_8/entry.asp","guid":"8aa211eebb0d165f31ea38937519695a","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/t1ukcNH6C_8","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">The Way of the Web</a> presentation at An Event Apart in Seattle, Jeremy Keith discussed building for the Web today and how to manage the rate of change of technologies and tools for Web development. Here's my notes from his talk: \n</p>\n<ul>\n<li>Science fiction is not about predicting the future, it is about looking at the concerns we have today and projecting them forward. Novels are empathy machines. You can really get into what the characters were feeling/experiencing and thereby share their concerns.</li>\n<li>While science fiction books get some things right about the future, they also have blind spots. For instance, people went to phone booths instead of carrying mobile phones. In the present we have a future that was almost beyond what was predicted in seminal works of science fiction.</li>\n<li>With where technology is today and what is possible, are we in a utopia or a dystopia? Are we excited or afraid of technology's possibilities. What makes the difference? Why are we excited about some technologies and apprehensive about others?</li>\n<li>Working on the Web can be overwhelming as we have to endure constant changes in technology and processes. When that rate of change is especially steep, things get worse.</li>\n<li>Stewart Brand's pace layers outline the rate of change of everything from people to buildings. Fashion changes quickly, culture changes slowly, and that's good. We get apprehensive when things that should move slow start changing too quickly. Example: quick changes in government are usually revolutions.</li>\n<li>The materials of the Web (HTML, CSS, and Javascript) move slow and are more stable, they are lower pace layers. The tools of the Web move much faster and are more subject to change.</li>\n<li>If a technology helps the developer but not the end user, there's a balance that needs to be understood. Is the trade-off of developer convenience worth a large download for users?</li>\n<li>We can map Web technologies to pace layers. The bottom layer is the Internet (TCP/IP). This hasn't changed in decades and you don't want it to change. HTTP is the protocol layer above this and is changes very slowly, which is appropriate. URLs are the layer above, which change often but probably shouldn't. HTML and CSS are changing much more quickly but still not as fast as Javascript.</li>\n<li>Every week there is a new Javascript library, which is where the Web feels apprehensive. Ideas get vetted out in Javascript and when they stabilize, they move down to HTML and CSS. It's ok that Javascript changes quickly -it needs to in order to work out new ideas.</li>\n<li>You can choose to build single page Web sites in Javascript only. Going directly to URLs and HTTP. However this sets up a works great or doesn't work model. The power of the Web is that we have different levels of \"working\", a continuum. Everybody gets something with these in-between levels of experience.</li>\n<li>The rule of least power: \"choose the language of least power to accomplish something\" It's not as powerful, but much more stable. Instead of doing everything in Javascript, see what can be done in HTML and CSS first.</li>  \n<li>The Web favors ubiquity over consistency. You can get to the content but it may not look the same to everyone. Start with the simplest element (like a select) and gradually apply styling/code to layer on additional enhancements.</li>\n<li>This mode of building for the Web isn't just for simple sites. Even \"complex\" sites can be broken down into simpler elements. There's actually a continuum between simple and complex.</li>\n<li>Progressive Web apps are Web sites that add HTTPS, a Web app manifest, and a service worker. This layering of technology allows sites to not only run securely but also offline.</li>\n<li>People want browser features to be supported everywhere before they start using them, but that's not how it works. You can start using these elements now even if they only have partial support and get the benefits where they're available.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/t1ukcNH6C_8\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">The Way of the Web</a> presentation at An Event Apart in Seattle, Jeremy Keith discussed building for the Web today and how to manage the rate of change of technologies and tools for Web development. Here's my notes from his talk: \n</p>\n<ul>\n<li>Science fiction is not about predicting the future, it is about looking at the concerns we have today and projecting them forward. Novels are empathy machines. You can really get into what the characters were feeling/experiencing and thereby share their concerns.</li>\n<li>While science fiction books get some things right about the future, they also have blind spots. For instance, people went to phone booths instead of carrying mobile phones. In the present we have a future that was almost beyond what was predicted in seminal works of science fiction.</li>\n<li>With where technology is today and what is possible, are we in a utopia or a dystopia? Are we excited or afraid of technology's possibilities. What makes the difference? Why are we excited about some technologies and apprehensive about others?</li>\n<li>Working on the Web can be overwhelming as we have to endure constant changes in technology and processes. When that rate of change is especially steep, things get worse.</li>\n<li>Stewart Brand's pace layers outline the rate of change of everything from people to buildings. Fashion changes quickly, culture changes slowly, and that's good. We get apprehensive when things that should move slow start changing too quickly. Example: quick changes in government are usually revolutions.</li>\n<li>The materials of the Web (HTML, CSS, and Javascript) move slow and are more stable, they are lower pace layers. The tools of the Web move much faster and are more subject to change.</li>\n<li>If a technology helps the developer but not the end user, there's a balance that needs to be understood. Is the trade-off of developer convenience worth a large download for users?</li>\n<li>We can map Web technologies to pace layers. The bottom layer is the Internet (TCP/IP). This hasn't changed in decades and you don't want it to change. HTTP is the protocol layer above this and is changes very slowly, which is appropriate. URLs are the layer above, which change often but probably shouldn't. HTML and CSS are changing much more quickly but still not as fast as Javascript.</li>\n<li>Every week there is a new Javascript library, which is where the Web feels apprehensive. Ideas get vetted out in Javascript and when they stabilize, they move down to HTML and CSS. It's ok that Javascript changes quickly -it needs to in order to work out new ideas.</li>\n<li>You can choose to build single page Web sites in Javascript only. Going directly to URLs and HTTP. However this sets up a works great or doesn't work model. The power of the Web is that we have different levels of \"working\", a continuum. Everybody gets something with these in-between levels of experience.</li>\n<li>The rule of least power: \"choose the language of least power to accomplish something\" It's not as powerful, but much more stable. Instead of doing everything in Javascript, see what can be done in HTML and CSS first.</li>  \n<li>The Web favors ubiquity over consistency. You can get to the content but it may not look the same to everyone. Start with the simplest element (like a select) and gradually apply styling/code to layer on additional enhancements.</li>\n<li>This mode of building for the Web isn't just for simple sites. Even \"complex\" sites can be broken down into simpler elements. There's actually a continuum between simple and complex.</li>\n<li>Progressive Web apps are Web sites that add HTTPS, a Web app manifest, and a service worker. This layering of technology allows sites to not only run securely but also offline.</li>\n<li>People want browser features to be supported everywhere before they start using them, but that's not how it works. You can start using these elements now even if they only have partial support and get the benefits where they're available.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/t1ukcNH6C_8\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-04-03 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Performance as User Experience","pubDate":"2018-04-03 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/E8y5ruHnspA/entry.asp","guid":"509e9519f55cf6921972398e06cccecf","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/E8y5ruHnspA","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">Performance as User Experience</a> presentation at An Event Apart in Seattle, Aaron Gustafson shared a number of ways to optimize Web page performance. Here's my notes from his talk: \n</p>\n<ul>\n<li>Our jobs as designers is to reduce friction for our users. Poor performance causes friction and can negatively impact key metrics like conversion and revenue.</li>\n<li>How do Web pages load: when you enter an address in a URL bar, a DNS look-up replies with an IP address, then there's a TCP handshake followed by the actual request for files/data, once there's a response the browser can actually do something.</li>\n<li>Once the browser gets a response, it can assemble the document object, the render tree, layout, paint, and finally load. CSS and Javascript can delay this process and sometimes cause it to run again.</li>\n</ul>\n<h2>Steps for better performance</h2>\n<ul>\n<li>Use native features whenever possible. They are effectively free. Semantic elements not only reduce bytes but also contain attributes that provide a lot of functionality like placeholder, autocomplete, autocorrect, type, etc. System fonts can help reduce the need for custom font downloads. Font stacks can cover fallback issues.</li>\n<li>Only include assets you actually need. Every tool has a cost, make sure you are really using enough of each tool to justify that cost. Chances are the tool you are trying to use is already on a CDN and you can use resource hints to speed up the download process. But downloading isn't everything as Javascript frameworks also take time to execute, which is slower than native JS processing.</li>\n<li>Optimize everything. Task runners like Grunt and Gulp can help automate optimizations of Javascript, CSS and HTML. Minify and pre-compress all your files.</li>\n<li>Think about when you load assets. If you have Javascript files divided into modules, you can defer functions you won't need until the after the DOM is loaded. The async attribute also allows you to load files when it makes the most sense. Just make sure you don't hit any race conditions if some of your Javascript files have dependencies on others.</li>\n<li>Why so many different files? Under HTTP1, each resources was requested sequentially. Now with HTTP2, you set a single connection and then stream in resources as needed.</li>\n<li>Consider how you load assets. Start simple by loading just your default (often mobile) CSS file. You can add a media query as a threshold for loading more advanced CSS in browsers than can render it. Conditional comments (which only work in IE8 and below) can either load or hide elements from older browsers. Similar techniques can be used to conditionally load images and animations (via SVG support).</li>\n<li>Only load assets when they add value. Not every article needs an image, think twice before you include it. Images are 53% of the average web page and very expensive size-wise. If you need an image, use the right format. GIFs ae good for solid colors, JPGs for photographs, PNGs are JPG alternatives with alpha transparency, WebPs are note well supported but optimized in many ways.</li>\n<li>Images can be optimized by removing color, blurring parts of images, resizing, compressing, and using appropriate formats. We can use the picture element to add WebP images in browsers that support them. Remember to put your smallest files first, because the first one that works is what gets used.</li>\n<li>Every choice we  make affects our  users’ experiences. Let’s spend our time to save it for our users.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/E8y5ruHnspA\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">Performance as User Experience</a> presentation at An Event Apart in Seattle, Aaron Gustafson shared a number of ways to optimize Web page performance. Here's my notes from his talk: \n</p>\n<ul>\n<li>Our jobs as designers is to reduce friction for our users. Poor performance causes friction and can negatively impact key metrics like conversion and revenue.</li>\n<li>How do Web pages load: when you enter an address in a URL bar, a DNS look-up replies with an IP address, then there's a TCP handshake followed by the actual request for files/data, once there's a response the browser can actually do something.</li>\n<li>Once the browser gets a response, it can assemble the document object, the render tree, layout, paint, and finally load. CSS and Javascript can delay this process and sometimes cause it to run again.</li>\n</ul>\n<h2>Steps for better performance</h2>\n<ul>\n<li>Use native features whenever possible. They are effectively free. Semantic elements not only reduce bytes but also contain attributes that provide a lot of functionality like placeholder, autocomplete, autocorrect, type, etc. System fonts can help reduce the need for custom font downloads. Font stacks can cover fallback issues.</li>\n<li>Only include assets you actually need. Every tool has a cost, make sure you are really using enough of each tool to justify that cost. Chances are the tool you are trying to use is already on a CDN and you can use resource hints to speed up the download process. But downloading isn't everything as Javascript frameworks also take time to execute, which is slower than native JS processing.</li>\n<li>Optimize everything. Task runners like Grunt and Gulp can help automate optimizations of Javascript, CSS and HTML. Minify and pre-compress all your files.</li>\n<li>Think about when you load assets. If you have Javascript files divided into modules, you can defer functions you won't need until the after the DOM is loaded. The async attribute also allows you to load files when it makes the most sense. Just make sure you don't hit any race conditions if some of your Javascript files have dependencies on others.</li>\n<li>Why so many different files? Under HTTP1, each resources was requested sequentially. Now with HTTP2, you set a single connection and then stream in resources as needed.</li>\n<li>Consider how you load assets. Start simple by loading just your default (often mobile) CSS file. You can add a media query as a threshold for loading more advanced CSS in browsers than can render it. Conditional comments (which only work in IE8 and below) can either load or hide elements from older browsers. Similar techniques can be used to conditionally load images and animations (via SVG support).</li>\n<li>Only load assets when they add value. Not every article needs an image, think twice before you include it. Images are 53% of the average web page and very expensive size-wise. If you need an image, use the right format. GIFs ae good for solid colors, JPGs for photographs, PNGs are JPG alternatives with alpha transparency, WebPs are note well supported but optimized in many ways.</li>\n<li>Images can be optimized by removing color, blurring parts of images, resizing, compressing, and using appropriate formats. We can use the picture element to add WebP images in browsers that support them. Remember to put your smallest files first, because the first one that works is what gets used.</li>\n<li>Every choice we  make affects our  users’ experiences. Let’s spend our time to save it for our users.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/E8y5ruHnspA\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-04-03 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Navigating Team Friction","pubDate":"2018-04-03 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/FOCmxyc00RA/entry.asp","guid":"c852a627e7840cbc87b7c4a59069343b","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/FOCmxyc00RA","description":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/seattle-2018\">Navigating Team Friction</a> presentation at An Event Apart in Seattle, Lara Hogan discussed what causes teams at work to have issues and how to address them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Teams of people are amazing. Its a privilege to work together with people to make things.</li>\n<li>Bruce Tuckman found a series of stages that groups of people go through: forming (comes together in a new state), storming (some friction emerges), norming (clarity begins to emerge), performing (effective state). This is a cycle that repeats itself regularly.</li>\n<li>Storming is a natural part of team dynamics but it does create friction. You need to be able to move past the friction in order to focus on what actually matters.</li>\n<li>It can take a while for managers to identify and resolve points of friction. So what can team members do to address the issue earlier on?</li>\n</ul>\n<h2>Core Needs</h2>\n<ul>\n<li>Everyone transforms into different versions of themselves sometimes. The rationale part of our brains isn't always in control. Instead, we may be reacting to fear and/or threats that put us into fight or flight mode. These reactions come from more than use physical safety and shelter needs.</li>\n<li>Modern humans have several core needs. First, people need to belong to a group or community. Second, people need to make improvements and/or progress (for team, company, or personally). Third, people need to be able to make choices about their work -they need flexibility, and decision-making capabilities. Fourth, people need access to equal resources, information, and fairness. Fifth, people require some amount of predictability in their work days. Lastly, people need to feel their work matters -they need recognition and visibility for work.</li>\n<li>The BICEPS model (the needs above) gives you a way to assess what could be causing team friction.</li>\n<li>As an example, moving desks are a great example of why people react emotionally to seemingly sound rationale decisions. They impact belonging, choice, predictability, etc. but do so differently for different people. To address these issues, try to identify the core need being effected.</li>\n<li>To find which core needs are being impacted, look at the types of resistance you are seeing. Doubt: asking lots of questions/debating the issue. Avoid: not showing up. Fight: people create arguments against the issue. Bond: go to friends &amp; peers to find support. Escape-route: changing roles, leaving company to avoid the threat.</li>\n</ul>\n<h2>Communication Style</h2>\n<ul>\n<li>When you spot some signals, ask open questions (which are different than yes/no questions). This helps you understand which core needs are being threatened on the team. Then you can figure out how to address the issue.</li>\n<li>Reflect on the dynamics of the room, what are they thinking and/or worried about? Be aware of your medium: what words, body language are you using?</li>\n<li>When you make an ask of someone, consider if they can act on what you are saying. Don't tear things down, try to elevate the conversation by being transparent.</li>\n<li>Assume everyone has the best intentions at work and try to empathize with what other people may be going through.</li>\n<li>Listen to learn: stay genuinely curious. Operate under the assumption that you don't know the whole story. Be excited to have your mind changed, it helps you learn and grow.</li>\n<li>Humans aren't great at feedback but we can get better. Good feedback is specific and actionable. This kind of feedback helps us improve and grow.</li>\n<li>Structure your feedback as: observation of a behavior (just the facts)+ impact of that behavior (share how you feel) + question or request. Write it out first to make sure it's communicating what you want.</li>\n<li>It's ok to cause some friction, that's a natural part of working together. But know how you can move past it.</li>\n</ul>\n<h2>Prevention</h2>\n<ul>\n<li>Retrospectives allow people to know their feelings have been heard. Name friction points in these meetings to acknowledge what didn't work.</li>\n<li>Team charters and docs can helps align people's work against a common vision and clear responsibilities.</li>\n<li>The absence of trust is the source of most team dysfunctions. How do you get these issues surfaced within a team? Determine if you agree or disagree with decisions and whether or not you can commit to a decision.</li>\n<li>If/when you need to go to HR or leadership, state what's been tried and what you think could help now. Be prepared that they may take a different action after weighing the situation.\n</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/FOCmxyc00RA\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/seattle-2018\">Navigating Team Friction</a> presentation at An Event Apart in Seattle, Lara Hogan discussed what causes teams at work to have issues and how to address them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Teams of people are amazing. Its a privilege to work together with people to make things.</li>\n<li>Bruce Tuckman found a series of stages that groups of people go through: forming (comes together in a new state), storming (some friction emerges), norming (clarity begins to emerge), performing (effective state). This is a cycle that repeats itself regularly.</li>\n<li>Storming is a natural part of team dynamics but it does create friction. You need to be able to move past the friction in order to focus on what actually matters.</li>\n<li>It can take a while for managers to identify and resolve points of friction. So what can team members do to address the issue earlier on?</li>\n</ul>\n<h2>Core Needs</h2>\n<ul>\n<li>Everyone transforms into different versions of themselves sometimes. The rationale part of our brains isn't always in control. Instead, we may be reacting to fear and/or threats that put us into fight or flight mode. These reactions come from more than use physical safety and shelter needs.</li>\n<li>Modern humans have several core needs. First, people need to belong to a group or community. Second, people need to make improvements and/or progress (for team, company, or personally). Third, people need to be able to make choices about their work -they need flexibility, and decision-making capabilities. Fourth, people need access to equal resources, information, and fairness. Fifth, people require some amount of predictability in their work days. Lastly, people need to feel their work matters -they need recognition and visibility for work.</li>\n<li>The BICEPS model (the needs above) gives you a way to assess what could be causing team friction.</li>\n<li>As an example, moving desks are a great example of why people react emotionally to seemingly sound rationale decisions. They impact belonging, choice, predictability, etc. but do so differently for different people. To address these issues, try to identify the core need being effected.</li>\n<li>To find which core needs are being impacted, look at the types of resistance you are seeing. Doubt: asking lots of questions/debating the issue. Avoid: not showing up. Fight: people create arguments against the issue. Bond: go to friends &amp; peers to find support. Escape-route: changing roles, leaving company to avoid the threat.</li>\n</ul>\n<h2>Communication Style</h2>\n<ul>\n<li>When you spot some signals, ask open questions (which are different than yes/no questions). This helps you understand which core needs are being threatened on the team. Then you can figure out how to address the issue.</li>\n<li>Reflect on the dynamics of the room, what are they thinking and/or worried about? Be aware of your medium: what words, body language are you using?</li>\n<li>When you make an ask of someone, consider if they can act on what you are saying. Don't tear things down, try to elevate the conversation by being transparent.</li>\n<li>Assume everyone has the best intentions at work and try to empathize with what other people may be going through.</li>\n<li>Listen to learn: stay genuinely curious. Operate under the assumption that you don't know the whole story. Be excited to have your mind changed, it helps you learn and grow.</li>\n<li>Humans aren't great at feedback but we can get better. Good feedback is specific and actionable. This kind of feedback helps us improve and grow.</li>\n<li>Structure your feedback as: observation of a behavior (just the facts)+ impact of that behavior (share how you feel) + question or request. Write it out first to make sure it's communicating what you want.</li>\n<li>It's ok to cause some friction, that's a natural part of working together. But know how you can move past it.</li>\n</ul>\n<h2>Prevention</h2>\n<ul>\n<li>Retrospectives allow people to know their feelings have been heard. Name friction points in these meetings to acknowledge what didn't work.</li>\n<li>Team charters and docs can helps align people's work against a common vision and clear responsibilities.</li>\n<li>The absence of trust is the source of most team dysfunctions. How do you get these issues surfaced within a team? Determine if you agree or disagree with decisions and whether or not you can commit to a decision.</li>\n<li>If/when you need to go to HR or leadership, state what's been tried and what you think could help now. Be prepared that they may take a different action after weighing the situation.\n</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/FOCmxyc00RA\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"pink","category":"LukeW | Digital","date":"2018-04-03 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Designing Progressive Web Apps","pubDate":"2018-08-28 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/IASkks3GXu4/entry.asp","guid":"95725f2fcf7b3e51612754e522397683","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/IASkks3GXu4","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">The Case for Progressive Web Apps</a> presentation at An Event Apart in Chicago, Jason Grigsby walked through the process of building Progressive Web Apps for your Web experiences and how to go about it. Here's my notes from his talk: \n</p>\n<ul>\n<li>Progressive Web Apps (PWAs) are getting a lot of attention and positive stories about their impact are coming out. <ahref>PWA Stats tracks many of these case studies. These sorts of examples are getting noticed by CEOs who demand teams build PWAs today.</ahref>\n</li>\n<li>A PWA is a set of technologies designed to make faster, more capable Web sites. They load fast, are available online, are secure, can be accessed from your home screen,  have push notifications, and more.</li>\n<li>But how can we define Progressive Web Apps? PWAs are Web sites enhanced by three things: https, service worker, and a  manifest file.</li>\n<li>HTTPS is increasingly required for browsers and APIs. Eventually Chrome will highlight sites that are not on https as \"insecure\".</li>\n<li>Service Workers allow Web sites to declare how network requests and the cache are handled. This ability to cache things allows us to build sites that are much faster. With service workers we can deliver near instant and offline experiences.</li>\n<li>A Web manifest is a JSON file that delivers some attributes about a Web site. Browsers use these files to make decisions on what to do with your site (like add to home page).</li>\n<li>Are PWAs any different than well-built Web sites? Not really, but the term helps get people excited and build toward best practices on the Web.</li>\n<li>PWAs are often trojan horses for performance. They help enforce fast experiences.</li>\n</ul>\n<h2>Feels Like a Native App</h2>\n<ul>\n<li>Does your organization have a Web site? Do you make money off your Web site? If so, you probably need a Progressive Web Site.</li>\n<li>Not every customer will have your native app installed. A better Web experience will help you reach people who don't. For many people this will be their first experience with your company, so you should make it as good as possible.</li>\n<li>Getting people to install and keep using native apps is difficult. App stores can also change their policies and interfaces which could negatively impact your native app.</li>\n<li>The Web can do much more than we think, the Web has APIs to access location, do fast payments using fingerprint identification, push notifications, and more.</li>\n<li>What should we use to design PWAs? Native app styles or Web styles? How much does your design match the platform? You can set up PWAs to use different system fonts for iOS and Android, should you? For now, we should define our own design and be consistent across different OSs.</li>\n<li>What impact does going \"chrome-less\" have on our PWAs? You loose back buttons, menu controls, system controls. Browsers provide us with a lot of useful features and adding them back is difficult. Especially navigation via the back button is complex. So in most cases, you should avoid going full screen.</li>\n<li>While not every person will add your PWA to their home screen, every person will \"install\" your PWA via the service worker.</li>\n<li>An app shell model allows you put your common UI (header, footer, nav, etc.) into the app cache. This makes the first loading experience feel a lot faster. Should you app shell or not? If you have architected as a single page app, this is possible but otherwise might not be worth the effort.</li>\n<li>Animating transitions can help with way-finding and polish on the Web. This gives Web sites even more personality.</li>\n</ul>\n<h2>Installation and Discovery</h2>\n<ul>\n<li>Using a Web manifest file, allows you specify a number of declarations for your app. In addition to name, icon, and even theme colors.</li>\n<li>Once you have a PWA built and a manifest file, browsers will being prompting people to install your Web site. Some Browsers have subtle \"add\" actions. Other use more explicit banner prompts. \"Add to home screen\" banners are only displayed when they make sense (certain level of use).</li>\n<li>Developers can request these banners to come up when appropriate. You'll want to trigger these where people are mostly likely to install. (like checkout)</li>\n<li>Microsoft is putting (explicitly and implicitly) PWAs within their app store. Search results may also start highlighting PWAs.</li>\n<li>You can use Trusted Web Activity or PhoneGap to wrap native shells around your PWA to put them into Android and iOS app stores.</li>\n</ul>\n<h2>Offline Mode</h2>\n<ul>\n<li>Your Web site would benefit from offline support. Service Workers enable you to cache assets on your device to load PWAs quickly and to decide what should be available offline.</li>\n<li>You can develop offline pages and/or cache pages people viewed before.</li>\n<li>If you do cache pages, make it clear what data hasn't been updated because it is not available offline.</li>\n<li>You can give people control over what gets cached and what doesn't. So they can decide what they want available for offline viewing.</li>\n<li>If you enable offline interactions, be explicit what interactivity is available and what isn't.</li>\n</ul>\n<h2>Push Notifications</h2>\n<ul>\n<li>Push notifications can help you increase engagement. You can send notifications via a Web browser using PWAs.</li>\n<li>Personal push notifications work best but are difficult to do right. Generic notifications won't be as effective.</li>\n<li>Don't immediately ask people for push notification permissions. Find the right time and place to ask people to turn them on. Make sure you give people control, if you'd don't they can kill them using browser controls.</li>\n<li>In the next version of Chrome, Google will make push notification dialogs blocking (can't be dismissed) so people have to decide if they want notifications on or off. This also requires you to ask for permissions at the right time.</li>\n</ul>\n<h2>Beyond Progressive Web Apps</h2>\n<ul>\n<li>Auto-login with credential management APIs allows you to sign into a site using stored credentials. This streamlines the login process.</li>\n<li>Apple Pay on the Web converged with the Web Payment API so there's one way to use stored payment info on the Web.</li>\n<li>These next gen capabilities are not part of PWAs but make sense within PWAs.</li>\n</ul>\n<h2>How to Implement PWAs</h2>\n<ul>\n<li>Building PWAs is a progressive process, it can be a series of incremental updates that all make sense on their own. As a result, you can have an iterative roadmap.</li>\n<li>Benchmark and measure your improvements so you can use that data to get buy-in for further projects.</li>\n<li>Assess your current Web site's technology. If things aren't reasonably fast to begin with, you need to address that first. If your site is not usable on mobile, start there first.</li>\n<li>Begin  by building a baseline PWA (manifest, https, etc.) and then add front-end additions and larger initiatives like payment request and credential api later.</li>\n<li>Every step on the path toward a PWAS make sense on their own. You should encrypt your Web sites. You should make your Web site fast. These are all just steps along the way.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/IASkks3GXu4\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">The Case for Progressive Web Apps</a> presentation at An Event Apart in Chicago, Jason Grigsby walked through the process of building Progressive Web Apps for your Web experiences and how to go about it. Here's my notes from his talk: \n</p>\n<ul>\n<li>Progressive Web Apps (PWAs) are getting a lot of attention and positive stories about their impact are coming out. <ahref>PWA Stats tracks many of these case studies. These sorts of examples are getting noticed by CEOs who demand teams build PWAs today.</ahref>\n</li>\n<li>A PWA is a set of technologies designed to make faster, more capable Web sites. They load fast, are available online, are secure, can be accessed from your home screen,  have push notifications, and more.</li>\n<li>But how can we define Progressive Web Apps? PWAs are Web sites enhanced by three things: https, service worker, and a  manifest file.</li>\n<li>HTTPS is increasingly required for browsers and APIs. Eventually Chrome will highlight sites that are not on https as \"insecure\".</li>\n<li>Service Workers allow Web sites to declare how network requests and the cache are handled. This ability to cache things allows us to build sites that are much faster. With service workers we can deliver near instant and offline experiences.</li>\n<li>A Web manifest is a JSON file that delivers some attributes about a Web site. Browsers use these files to make decisions on what to do with your site (like add to home page).</li>\n<li>Are PWAs any different than well-built Web sites? Not really, but the term helps get people excited and build toward best practices on the Web.</li>\n<li>PWAs are often trojan horses for performance. They help enforce fast experiences.</li>\n</ul>\n<h2>Feels Like a Native App</h2>\n<ul>\n<li>Does your organization have a Web site? Do you make money off your Web site? If so, you probably need a Progressive Web Site.</li>\n<li>Not every customer will have your native app installed. A better Web experience will help you reach people who don't. For many people this will be their first experience with your company, so you should make it as good as possible.</li>\n<li>Getting people to install and keep using native apps is difficult. App stores can also change their policies and interfaces which could negatively impact your native app.</li>\n<li>The Web can do much more than we think, the Web has APIs to access location, do fast payments using fingerprint identification, push notifications, and more.</li>\n<li>What should we use to design PWAs? Native app styles or Web styles? How much does your design match the platform? You can set up PWAs to use different system fonts for iOS and Android, should you? For now, we should define our own design and be consistent across different OSs.</li>\n<li>What impact does going \"chrome-less\" have on our PWAs? You loose back buttons, menu controls, system controls. Browsers provide us with a lot of useful features and adding them back is difficult. Especially navigation via the back button is complex. So in most cases, you should avoid going full screen.</li>\n<li>While not every person will add your PWA to their home screen, every person will \"install\" your PWA via the service worker.</li>\n<li>An app shell model allows you put your common UI (header, footer, nav, etc.) into the app cache. This makes the first loading experience feel a lot faster. Should you app shell or not? If you have architected as a single page app, this is possible but otherwise might not be worth the effort.</li>\n<li>Animating transitions can help with way-finding and polish on the Web. This gives Web sites even more personality.</li>\n</ul>\n<h2>Installation and Discovery</h2>\n<ul>\n<li>Using a Web manifest file, allows you specify a number of declarations for your app. In addition to name, icon, and even theme colors.</li>\n<li>Once you have a PWA built and a manifest file, browsers will being prompting people to install your Web site. Some Browsers have subtle \"add\" actions. Other use more explicit banner prompts. \"Add to home screen\" banners are only displayed when they make sense (certain level of use).</li>\n<li>Developers can request these banners to come up when appropriate. You'll want to trigger these where people are mostly likely to install. (like checkout)</li>\n<li>Microsoft is putting (explicitly and implicitly) PWAs within their app store. Search results may also start highlighting PWAs.</li>\n<li>You can use Trusted Web Activity or PhoneGap to wrap native shells around your PWA to put them into Android and iOS app stores.</li>\n</ul>\n<h2>Offline Mode</h2>\n<ul>\n<li>Your Web site would benefit from offline support. Service Workers enable you to cache assets on your device to load PWAs quickly and to decide what should be available offline.</li>\n<li>You can develop offline pages and/or cache pages people viewed before.</li>\n<li>If you do cache pages, make it clear what data hasn't been updated because it is not available offline.</li>\n<li>You can give people control over what gets cached and what doesn't. So they can decide what they want available for offline viewing.</li>\n<li>If you enable offline interactions, be explicit what interactivity is available and what isn't.</li>\n</ul>\n<h2>Push Notifications</h2>\n<ul>\n<li>Push notifications can help you increase engagement. You can send notifications via a Web browser using PWAs.</li>\n<li>Personal push notifications work best but are difficult to do right. Generic notifications won't be as effective.</li>\n<li>Don't immediately ask people for push notification permissions. Find the right time and place to ask people to turn them on. Make sure you give people control, if you'd don't they can kill them using browser controls.</li>\n<li>In the next version of Chrome, Google will make push notification dialogs blocking (can't be dismissed) so people have to decide if they want notifications on or off. This also requires you to ask for permissions at the right time.</li>\n</ul>\n<h2>Beyond Progressive Web Apps</h2>\n<ul>\n<li>Auto-login with credential management APIs allows you to sign into a site using stored credentials. This streamlines the login process.</li>\n<li>Apple Pay on the Web converged with the Web Payment API so there's one way to use stored payment info on the Web.</li>\n<li>These next gen capabilities are not part of PWAs but make sense within PWAs.</li>\n</ul>\n<h2>How to Implement PWAs</h2>\n<ul>\n<li>Building PWAs is a progressive process, it can be a series of incremental updates that all make sense on their own. As a result, you can have an iterative roadmap.</li>\n<li>Benchmark and measure your improvements so you can use that data to get buy-in for further projects.</li>\n<li>Assess your current Web site's technology. If things aren't reasonably fast to begin with, you need to address that first. If your site is not usable on mobile, start there first.</li>\n<li>Begin  by building a baseline PWA (manifest, https, etc.) and then add front-end additions and larger initiatives like payment request and credential api later.</li>\n<li>Every step on the path toward a PWAS make sense on their own. You should encrypt your Web sites. You should make your Web site fast. These are all just steps along the way.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/IASkks3GXu4\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-08-28 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Data Basics","pubDate":"2018-08-28 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/pCauTCpqhSQ/entry.asp","guid":"0d0bb6958f14017ceb7580b64d26849b","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/pCauTCpqhSQ","description":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Data Basics</a> presentation at An Event Apart in Chicago, Laura Martini walked through common issues teams face when working with data and how to get around/work with them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Today there's lots of data available to teams for making decisions but it can hard to know what to use and how.</li>\n<li>Data tools have gotten much better and more useful. Don't underestimate yourself, you can use these tools to learn.</li>\n<li>Google Analytics: The old way of looking at data is based on sessions are composed of page views and clicks with timestamps. The new way is looking at users with events. Events can be much more granular and cover more of people's behaviors than page views and clicks.</li>\n<li>Different data can be stored in different systems so it can be hard to get a complete picture of what is happening across platforms and experiences. Journey maps are one way to understand traffic between apps.</li>\n<li>You can do things with data that don't scale. Some visualizations can give you a sense of what is happening without being completely precise. Example: a quantified journey map can show you where to focus.</li>\n<li>Individual users can also be good data sources. Zooming in allows you to learn things you can't in aggregate. Tools like Fullstory replays exactly what people did on your Website. These kinds of human-centric sessions can be more engaging/convincing than aggregate measures.</li>\n<li>Data freshness changes how people use it in their workflows. Having real-time data or predictive tools allows you to monitor and adapt as insights come in.</li>\n<li>How do you know what questions to ask of your data? HEART framework: happiness, engagement, adoptions, retention, and task success. Start with your goals, decide what is an indicator of success of your goals, then instrument that.</li>\n<li>To decide which part of the customer journey to measure, start by laying it all out.</li>\n<li>There's a number of good go-to solutions for answering questions like: funnel analysis (shows you possible improvements) or focus on user groups and split them into a test &amp; control (allows you to test predictions).\n</li>\n<li>The <a href=\"http://www.evanmiller.org/ab-testing/sample-size.html\">Sample Size Calculator</a> gives you a way to determine what size audience you need for your tests.</li>\n<li>Quantitative data is a good tool for understanding what is happening but it won't tell you why. For that, you often need to turn to qualitative data (talking to people). You can ask people with in-context small surveys and similar techniques.</li>\n<li>Often the hardest part of using data is getting people on the same page and caring about the metrics. Try turning data insights into a shared activity, bet on results. Make it fun.</li>\n<li>Dashboards surface data people care about but you need to come together as a team to decide what is important. Having user-centric metrics in your dashboards shows you care about user behavior.</li>\n<li>Data can be used for good and bad. Proceed with caution when using data and be mindful where and how you collect it.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/pCauTCpqhSQ\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Data Basics</a> presentation at An Event Apart in Chicago, Laura Martini walked through common issues teams face when working with data and how to get around/work with them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Today there's lots of data available to teams for making decisions but it can hard to know what to use and how.</li>\n<li>Data tools have gotten much better and more useful. Don't underestimate yourself, you can use these tools to learn.</li>\n<li>Google Analytics: The old way of looking at data is based on sessions are composed of page views and clicks with timestamps. The new way is looking at users with events. Events can be much more granular and cover more of people's behaviors than page views and clicks.</li>\n<li>Different data can be stored in different systems so it can be hard to get a complete picture of what is happening across platforms and experiences. Journey maps are one way to understand traffic between apps.</li>\n<li>You can do things with data that don't scale. Some visualizations can give you a sense of what is happening without being completely precise. Example: a quantified journey map can show you where to focus.</li>\n<li>Individual users can also be good data sources. Zooming in allows you to learn things you can't in aggregate. Tools like Fullstory replays exactly what people did on your Website. These kinds of human-centric sessions can be more engaging/convincing than aggregate measures.</li>\n<li>Data freshness changes how people use it in their workflows. Having real-time data or predictive tools allows you to monitor and adapt as insights come in.</li>\n<li>How do you know what questions to ask of your data? HEART framework: happiness, engagement, adoptions, retention, and task success. Start with your goals, decide what is an indicator of success of your goals, then instrument that.</li>\n<li>To decide which part of the customer journey to measure, start by laying it all out.</li>\n<li>There's a number of good go-to solutions for answering questions like: funnel analysis (shows you possible improvements) or focus on user groups and split them into a test &amp; control (allows you to test predictions).\n</li>\n<li>The <a href=\"http://www.evanmiller.org/ab-testing/sample-size.html\">Sample Size Calculator</a> gives you a way to determine what size audience you need for your tests.</li>\n<li>Quantitative data is a good tool for understanding what is happening but it won't tell you why. For that, you often need to turn to qualitative data (talking to people). You can ask people with in-context small surveys and similar techniques.</li>\n<li>Often the hardest part of using data is getting people on the same page and caring about the metrics. Try turning data insights into a shared activity, bet on results. Make it fun.</li>\n<li>Dashboards surface data people care about but you need to come together as a team to decide what is important. Having user-centric metrics in your dashboards shows you care about user behavior.</li>\n<li>Data can be used for good and bad. Proceed with caution when using data and be mindful where and how you collect it.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/pCauTCpqhSQ\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-08-28 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Content Performance Quotient","pubDate":"2018-08-27 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/7s58Io3fqLY/entry.asp","guid":"816f03fdc18394d0d515d5f4dc8bc0e6","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/7s58Io3fqLY","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">Beyond Engagement: the Content Performance Quotient</a> presentation at An Event Apart in Chicago, Jeffrey Zeldman introduced a new metric for tracking how well Web sites are performing. Here's my notes from his talk: \n</p>\n<ul>\n<li>The number one stakeholder request for Web sites is engagement: we need people using our services more. But is it the right metric for all these situations?</li>\n<li>For some apps, engagement is clearly the right thing to measure. Think Instagram, long-form articles, or gaming sites. For others, more time spent might be a sign of customer frustration.</li>\n<li>Most of the Web sites we work on are like customer service desks where we want to give people what they need and get them on their way. For these experiences, speed of usefulness should matter more than engagement.</li>\n<li>Content Performance Quotient (Design CPQ) is a measure of how quickly we can get the right content to solve the customer's problem. The CPQ is a goal to iterate against and aim for the shortest distance between problem &amp; solution. It tracks your value to the customer by measuring the speed of usefulness. </li>\n<li>Pretty garbage: when a Web site looks good but doesn't help anyone. Garbage in a delightfully responsive grid is still garbage. A lot of a Web designer's job is bridging the gap between what clients say they need and what their customers actually need.</li>\n<li>Marlboro's advertising company (in the 50s) rethought TV commercials by removing all the copy and focusing on conveying emotions. They went from commercials typically full of text to just ten words focused on their message.</li>\n<li>Mobile is a great forcing function to re-evaluate our content. Because you can't fit everything on a small screen, you need to make decisions about what matters most.</li>\n<li>Slash your architecture and shrink your content. Ask: \"why do we need this?\" Compare all your content to the goals you've established. Design should be intentional. Have purpose-driven design and purpose-driven content. If your design isn't going somewhere, it is going nowhere.</li>\n<li>We can't always have meetings where everybody wins. We need to argue for the customer and that means not everyone in our meetings will get what they want. Purpose needs to drive our collaborations not individual agendas, which usually leak into our Web site designs.</li>\n<li>It’s easy to give every stakeholder what they want. We've enabled this through Content Management Systems (CMS) that allow everyone to publish to the site. Don't take the easy way out. It’s harder to do the right thing. Harder for us, but better for the customer &amp; bottom line.</li>\n<li>Understanding the customer journey allows us to put the right content in the right place. Start with the most important interaction and build out from there. Focus on key interactions and build out from there. Sometimes the right place for your content isn't your Website -for video it could be YouTube or Vimeo.</li>\n<li>Customers come to our sites with a purpose. Anything that gets in the way of that is a distraction. Constantly iterate on content to remove the cruft and surface what's needed. You can start with a content inventory to audit what is in your site, but most of this content is probably out of date and irrelevant. So being in a state of constant iteration works better.</li>\n<li>When you want people to go deeper and engage, to slow down... scannability, which is good for transactions, can be bad for thoughtful content. Instead slow people down with bigger type, better typographic hierarchy, more whitespace.</li>\n<li>Which sites should be slow? If the site is delivering content for the good of the general public, the presentation should enable slow, careful reading. If it’s designed to promote our business or help a customer get an answer to her question, it must be designed for speed of relevancy.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/7s58Io3fqLY\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/chicago-2018\">Beyond Engagement: the Content Performance Quotient</a> presentation at An Event Apart in Chicago, Jeffrey Zeldman introduced a new metric for tracking how well Web sites are performing. Here's my notes from his talk: \n</p>\n<ul>\n<li>The number one stakeholder request for Web sites is engagement: we need people using our services more. But is it the right metric for all these situations?</li>\n<li>For some apps, engagement is clearly the right thing to measure. Think Instagram, long-form articles, or gaming sites. For others, more time spent might be a sign of customer frustration.</li>\n<li>Most of the Web sites we work on are like customer service desks where we want to give people what they need and get them on their way. For these experiences, speed of usefulness should matter more than engagement.</li>\n<li>Content Performance Quotient (Design CPQ) is a measure of how quickly we can get the right content to solve the customer's problem. The CPQ is a goal to iterate against and aim for the shortest distance between problem &amp; solution. It tracks your value to the customer by measuring the speed of usefulness. </li>\n<li>Pretty garbage: when a Web site looks good but doesn't help anyone. Garbage in a delightfully responsive grid is still garbage. A lot of a Web designer's job is bridging the gap between what clients say they need and what their customers actually need.</li>\n<li>Marlboro's advertising company (in the 50s) rethought TV commercials by removing all the copy and focusing on conveying emotions. They went from commercials typically full of text to just ten words focused on their message.</li>\n<li>Mobile is a great forcing function to re-evaluate our content. Because you can't fit everything on a small screen, you need to make decisions about what matters most.</li>\n<li>Slash your architecture and shrink your content. Ask: \"why do we need this?\" Compare all your content to the goals you've established. Design should be intentional. Have purpose-driven design and purpose-driven content. If your design isn't going somewhere, it is going nowhere.</li>\n<li>We can't always have meetings where everybody wins. We need to argue for the customer and that means not everyone in our meetings will get what they want. Purpose needs to drive our collaborations not individual agendas, which usually leak into our Web site designs.</li>\n<li>It’s easy to give every stakeholder what they want. We've enabled this through Content Management Systems (CMS) that allow everyone to publish to the site. Don't take the easy way out. It’s harder to do the right thing. Harder for us, but better for the customer &amp; bottom line.</li>\n<li>Understanding the customer journey allows us to put the right content in the right place. Start with the most important interaction and build out from there. Focus on key interactions and build out from there. Sometimes the right place for your content isn't your Website -for video it could be YouTube or Vimeo.</li>\n<li>Customers come to our sites with a purpose. Anything that gets in the way of that is a distraction. Constantly iterate on content to remove the cruft and surface what's needed. You can start with a content inventory to audit what is in your site, but most of this content is probably out of date and irrelevant. So being in a state of constant iteration works better.</li>\n<li>When you want people to go deeper and engage, to slow down... scannability, which is good for transactions, can be bad for thoughtful content. Instead slow people down with bigger type, better typographic hierarchy, more whitespace.</li>\n<li>Which sites should be slow? If the site is delivering content for the good of the general public, the presentation should enable slow, careful reading. If it’s designed to promote our business or help a customer get an answer to her question, it must be designed for speed of relevancy.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/7s58Io3fqLY\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-08-27 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Full-Featured Art Direction","pubDate":"2018-08-27 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/Isbinsp--98/entry.asp","guid":"219945f5012da48f90917004b3752626","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/Isbinsp--98","description":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Full-Featured Art Direction for the Web</a> presentation at An Event Apart in Chicago, Mina Markham shared her approach to building Web pages that work across a variety of browsers, devices and locales. Here's my notes from her talk: \n</p>\n<ul>\n<li>Full-featured art direction is progressively enhanced, localized for a particular user, yet inclusive of all visitors and locations.</li>\n<li>Start with the most basic minimal viable experience for the user and move up from there. Semantic markup is your best baseline. Annotate a Web site design with HTML structure: H1, H2, H3, etc. From there, gradually add CSS to style the minimal viable experience. If everything else fails, this is what the user will see. It may be the bare minimum but it works.</li>\n<li>Feature queries in CSS are supported in most browsers other than IE 11. We can use these to set styles based on what browsers support. For instance, modular font scaling allows you to update overall sizing of text in a layout. Feature Query checker allows you to see what things look like when a CSS query is not present.</li>\n<li>Localization is not just text translation. Other elements in the UI, like images, may need to be adjusted as well. You can use attributes like :lang() pseudoclass to include language specific design elements in your layout.</li>\n<li>Inclusive art direction ensures people can make use of our Web sites on various devices and in various locations. Don't remove default behaviors in Web browsers. Instead adjust these to better integrate with your site's design.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/Isbinsp--98\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/chicago-2018\">Full-Featured Art Direction for the Web</a> presentation at An Event Apart in Chicago, Mina Markham shared her approach to building Web pages that work across a variety of browsers, devices and locales. Here's my notes from her talk: \n</p>\n<ul>\n<li>Full-featured art direction is progressively enhanced, localized for a particular user, yet inclusive of all visitors and locations.</li>\n<li>Start with the most basic minimal viable experience for the user and move up from there. Semantic markup is your best baseline. Annotate a Web site design with HTML structure: H1, H2, H3, etc. From there, gradually add CSS to style the minimal viable experience. If everything else fails, this is what the user will see. It may be the bare minimum but it works.</li>\n<li>Feature queries in CSS are supported in most browsers other than IE 11. We can use these to set styles based on what browsers support. For instance, modular font scaling allows you to update overall sizing of text in a layout. Feature Query checker allows you to see what things look like when a CSS query is not present.</li>\n<li>Localization is not just text translation. Other elements in the UI, like images, may need to be adjusted as well. You can use attributes like :lang() pseudoclass to include language specific design elements in your layout.</li>\n<li>Inclusive art direction ensures people can make use of our Web sites on various devices and in various locations. Don't remove default behaviors in Web browsers. Instead adjust these to better integrate with your site's design.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/Isbinsp--98\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-08-27 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"What Can Bike Sharing Apps Teach Us About Mobile On-boarding Design?","pubDate":"2018-07-23 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/qMeocWY9Ycc/entry.asp","guid":"ff2c4060a0e9fbbfe2d3500e0c572577","author":"info@lukew.com","thumbnail":"http://static.lukew.com/onboarding_hellobike.png","description":"\n<p class=\"feature\">Given the <a href=\"https://www.slideshare.net/asymco/toward-micromobility-the-low-end-disruption-of-transportation\">proliferation</a> of bike/scooter sharing services these days, I thought it would be interesting to compare the mobile app on-boarding experiences of the ones I could access. To do so, I went through the new customer flow for six of these services.</p>\n\n<p>While the mobile on-boarding I experienced across these services looked really similar, the end result differed dramatically -from me abandoning the process to walking away a delighted customer. Understanding how product design impacted these outcomes is critical for anyone trying to grow a new mobile business.\n</p>\n\n<h2>Applying Design Patterns</h2>\n<p>My first encounter with bike sharing, appropriately, was in Amsterdam. I was outside the city center for a meeting and encountered a rack of Hello-Bikes. So why not bike back to my hotel in town? Here’s what happened when I tried.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_hellobike_2x.png\"><img src=\"http://static.lukew.com/onboarding_hellobike.png\" srcset=\"http://static.lukew.com/onboarding_hellobike.png, http://static.lukew.com/onboarding_hellobike_2x.png 2x\" alt=\"Hello-Bike app mobile on-boarding process\"></a>\n</p>\n\n<p>Hello-Bike’s mobile on-boarding consists of several common patterns: a splash screen, a sign-up form, terms and conditions, and a tutorial. Though widely used, starting the design process off with these types of patterns often results in a flow that seems right in mock-ups or wireframes but fails to solve actual customer needs.\n</p>\n\n<p>The designer thinks: “I know what an on-boarding flow is. It’s a splash screen, a sign-up screen and a tutorial people can swipe through.” The resulting customer experience in filling in form fields, scrolling through 17 screens of terms &amp; conditions (yes, you are required to scroll through all of them), granting location permissions (because “background location-tracking is required”), and skipping through 6 tutorial screens featuring critical knowledge like “Welcome to Hello-Bike.”\n</p>\n\n<p>After maneuvering through all this, I found out there were no docking stations in central Amsterdam because of <a href=\"https://www.citylab.com/transportation/2017/08/amsterdam-fights-back-against-rogue-bike-share/535791/\">government regulation</a>. So I actually couldn’t use the Hello-Bike service to ride to my hotel. Starting the design process from the perspective of the customer would likely have revealed the importance of communicating these kinds of constraints up front. Starting by selecting design patterns would not.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Set expectations appropriately, so potential customers don’t end a lengthy sign-up process in disappointment or frustration.</li>\n<li>While convenient, design patterns are no substitute for understanding and designing with your customers &amp; their goals top of mind.</li>\n</ul>\n<h2>Having Desktop Bias</h2>\n<p>While modern mobile devices have been around for over ten years, desktop devices have had at least 3x more time to influence and bias our approach to software design. That’s why it’s not surprising to see desktop design concepts permeate mobile apps. In the case of Jump’s mobile on-boarding, they are all over the place.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_jump_2x.png\"><img src=\"http://static.lukew.com/onboarding_jump.png\" srcset=\"http://static.lukew.com/onboarding_jump.png, http://static.lukew.com/onboarding_jump_2x.png 2x\" alt=\"Jump mobile app on-boarding process\"></a>\n</p>\n\n<p>Following the obligatory splash screen, Jump animates through a series of safety tips calling out the unique features of electric bikes. Unfortunately, so many steps follow these tips that I can’t imagine anyone remembering them when they are finally allowed to ride one of Jump’s electric bikes.\n</p>\n\n<p>Next up are a series of permission dialogs for access to Motion &amp; Fitness and Location data. Both requests are accompanied by explanatory text that suggests Jump needs access to this information in order to “gather data about how electric bikes affect travel patterns.” Sounds like a good thing for Jump, but it’s not clear why customers should participate or even care.\n</p>\n\n<p>This mindset permeates the rest of Jump’s on-boarding as well: choose one of our bike “networks”, select one of our plans, verify your phone number, pick a 7 character password with numbers and uppercase letters, agree to our terms and conditions, put money into one of our accounts, etc. After ten steps of doing things for Jump and seeing no progress toward actually riding a bike, I abandoned at the “Enter Credit Card” step. \n</p>\n\n<p>Perhaps someone at Jump heard completion rates for forms go up when you place each question on a separate screen (I’ve seen no evidence of this), but the cumulative effect of going through a desktop-design influenced <a href=\"https://www.lukew.com/ff/entry.asp?1579\">e-commerce checkout flow</a> one step at a time on my phone was quite painful.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Make sure your customers always feel like they are making progress toward their goals, not yours.</li>\n<li>Desktop paradigms often aren’t a great fit for mobile. For instance, do you really need a checkout form? As we’ll see later, no.</li>\n</ul>\n<h2>Right Time, Right Place</h2>\n<p>After abandoning the bike-sharing process with both Hello-Bike and Jump, I had my first successful on-boarding with Spin. That’s not to say there wasn’t a lot of room for improvement. With mobile on-boarding it’s not just <strong>what</strong> we ask people to do it’s also <strong>when</strong> we ask them to do it. Spin starts off with a tutorial, which explains they are smart, I can park anywhere, and scanning a bike’s QR code will let me ride it.</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_spin_2x.png\"><img src=\"http://static.lukew.com/onboarding_spin.png\" srcset=\"http://static.lukew.com/onboarding_spin.png, http://static.lukew.com/onboarding_spin_2x.png 2x\" alt=\"Spin mobile app on-boarding process\"></a>\n</p>\n \n<p>Turns out that’s not entirely true as I needed to give them my email address, create a password, provide location permissions, and agree to three separate terms of service. It’s only after this gauntlet, that I’m actually able to scan the QR code on the bike in front of me. Why couldn’t we just have started the process there? \n</p>\n\n<p>It is worth noting, however, that Spin provides much better <a hrewf=\"https://www.lukew.com/ff/entry.asp?1928\">explanations</a> for its permission requests. When requesting location permissions, Hello-Bike told me: “background-location tracking is required” and Jump explained I could help them “gather data about how electric bikes affect travel patterns.” Spin, on the other hand, explained they use location to help me find pick-up and drop off points. They also explained they needed camera permissions so I can scan the QR code on a bike to unlock it.\n</p>\n\n<p>After I did, my next step was to reload my Spin account, with the only reloading option being $5. This immediately felt odd as the bike ride itself was advertised as $1. So if I never rode another Spin bike again, they had 4 more dollars from me... hmmmm. On a positive note, Spin integrated with Apple Pay which meant I simply had to tap a button on the side of my phone to approve payment. No checkout forms, shopping carts, or credit card entry forms required. See? We can do things in a mobile-native vs. desktop way.\n</p>\n\n<p>Following the payment process, I was greeted with a another tutorial (these things sure are popular huh? too bad most people skip through them). This time 4 screens told me about parking requirements. But wait… didn’t the first tutorial tell me I could park anywhere? Next Spin asked to send me notifications with no explanation as to why I should agree. So I didn’t.\n</p>\n\n<p>Once I rode the bike and got to my destination, I received a ride summary that told me my ride was free. That’s much appreciated but it left me asking again… couldn’t we have started there?\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>When you surface information to customers is critical. Spin could have told me my ride was free well before asking me to fill my account with a minimum of $5. And their Parking tutorial was probably more appropriate after my ride when parking my bike, not before it.</li>\n<li>Get people to your core value as soon as possible, but not sooner. It took 7 steps before I was able to scan the bike in front of me and 9 more steps before I could actually ride it. Every step that keeps customers from experiencing what makes you great, leaves them wondering why you’re not.</li>\n</ul>\n<h2>Tricky, Tricky</h2>\n<p>By now, Ofo’s mobile on-boarding process will seem familiar: location and notification permission asks without any useful explanations, an up-front tutorial, a phone number verification flow, a camera permission ask, and more.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_ofo_2x.png\"><img src=\"http://static.lukew.com/onboarding_ofo.png\" srcset=\"http://static.lukew.com/onboarding_ofo.png, http://static.lukew.com/onboarding_ofo_2x.png 2x\" alt=\"Ofo mobile app on-boarding process\"></a>\n</p>\n\n<p>For many mobile apps, phone number verification can replace the need for more traditional desktop computer influenced sign-up process that require people to enter their first and last names, email addresses, passwords, and more into a series of form fields. When you’re on a phone, all you need to verify it’s you is your phone number.\n</p> \n\n<p>With this simplified account creation process, Ofo could have had me on my way with a quick QR code scan. But instead I got a subscription service promotion that suggested I could try the service for free. After tapping the “Try it Free” button, however, I ended up on a Choose your Plan page. It was only when I used the small back arrows (tricky, tricky) that I made it back to the QR code unlock process which let me ride the Ofo bike in front of me with no charge.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Mobile device capabilities allow us to rethink how people can accomplish tasks. For instance, instead of multiple step sign-up forms, a two step phone verification process can establish someone’s account much quicker by using what mobile devices do well.</li>\n<li>While companies have revenue and growth needs, unclear flows and UI entrapments are not the way to build long-term customer loyalty and growth. You may trick some people into subscribing to your service but they won’t like you for it.</li>\n</ul>\n<h2>But Why?</h2>\n<p>Starting Bird’s mobile on-boarding gave me high hopes that I had finally found a streamlined customer-centric process that delivered on the promise of fast &amp; easy last-mile transportation (or micro-mobility, if you must).</p>\n\n<p>Things started out typically, a splash screen, an email form field, a location permission ask, but then moved right to scanning the  QR code of the scooter in front of me and asking me to pay the $1 required to get started. Great, I thought… I’ll be riding in no time as I instantly made it through Apple Pay’s confirmation screen.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_bird_2x.png\"><img src=\"http://static.lukew.com/onboarding_bird.png\" srcset=\"http://static.lukew.com/onboarding_bird.png, http://static.lukew.com/onboarding_bird_2x.png 2x\" alt=\"Bird mobile app on-boarding process\"></a>\n</p>\n\n<p>As a quick aside, integrating native payment platforms can really accelerate the payment process and increase conversion. Hotel Tonight <a href=\"https://www.slideshare.net/kendrickapp/hotel-tonight-mobile\">saw</a> a 26% increase in conversion with Apple Pay and Wish used A/B testing to <a href=\"https://stripe.com/docs/apple-pay/best-practices\">uncover</a> a 2X conversion increase when they added Apple Pay support. Turns out people do prefer to just look (Face ID) or tap (Touch ID) to pay for things on their phones instead of entering credit card or banking account details into mobile keyboards.\n</p>\n\n<p>But back to Bird... I scanned the QR code and authorized Apple Pay. Time to ride right? Not quite. Next I was asked to scan the front of my drivers’ license with no explanation of why. Odd, but I assumed it was a legal/safety thing and despite having a lot of privacy reservations got through it. Or so I thought because after this I had to scan the back of my drivers’ license, scroll through all 15 screens of a rental agreement, and tick off 6 checkboxes saying I agreed to wear a helmet, not ride downhill, and was over 18 (can’t they get that from my driver’s license?).\n</p>\n\n<p>Then it was back to scanning the QR code again, turning down notification permissions, and slogging through a 4 screen tutorial which ended with even more rules. The whole process left me feeling the legal department had taken over control of Bird’s first time customer experience: rental contracts, local rules, driver’s license verifications, etc. -really not in line with the company’s brand message of “enjoy the ride”. I left being intimated by it.</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Rules and regulations do exist but mobile on-boarding flows shouldn’t be driven by them. There’s effective ways to balance legal requirements and customer experience. Push hard to find them.</li>\n<li>When asking for personal (especially highly personal) information, explain why. Even just a sentence about why I had to scan my driver’s license would have helped me immensely with Bird’s process.</li>\n</ul>\n<h2>Core Value, ASAP</h2>\n<p>By now, we’ve seen how very similar companies can end up with very different mobile on-boarding designs and results. So how can companies balance all the requirements and steps involved in bike-sharing and still deliver a great first-time experience? By always looking at things from the perspective of your customer. Which Lime, while not perfect, does.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_lime2_2x.png\"><img src=\"http://static.lukew.com/onboarding_lime2.png\" srcset=\"http://static.lukew.com/onboarding_lime2.png, http://static.lukew.com/onboarding_lime2_2x.png 2x\" alt=\"Lime mobile app on-boarding process\"></a>\n</p>\n\n<p>Lime doesn’t bother with a splash screen showing you their logo as a first step. Instead they tell you upfront that they know why you’re here with a large headline stating: “Start Riding Now”. Awesome. That’s what I’ve been trying to do this whole time. On this same screen are two streamlined sign-up options: phone number verification (which makes use of native device capabilities) and Facebook -both aimed at getting you started right away.\n</p>\n\n<p>Next, Lime takes the time to explain why they are asking for location permissions with the clearest copy we’ve seen in all these examples: “to find nearby bikes and scooters”. Sadly, they don’t apply this same level of clarification to the next permission ask for Notifications. But smartly, they use <a href=\"https://www.lukew.com/ff/entry.asp?1928\">a double dialog solution</a> and if you say no (which I did), they try again with more clarity.\n</p>\n\n<p>It’s become almost standard practice to just ask for notification permissions up front in mobile apps because up to 40% of people will just give them to you. So many apps figure, why not ask? Lots of people will say no but we’ll get some people saying yes. Personally, I feel this is an opportunity to improve for Lime.\n</p>\n\n<p>Ignoring the notifications prompt, the rest of Lime’s on-boarding process is fast and efficient: scan the QR code (once again with a clear explanation of why camera permissions are needed), authorize Apple Pay to pay for your ride. Lime doesn’t either bother to provide other payment options. They know the user experience and conversion benefits of Apple Pay and rely on it exclusively.\n</p>\n\n<p>And… that’s it. I’m riding. No tutorial! Shocking I know, but they do offer one on the map screen if you’d like to learn more before riding. User choice, not company requirement. \n</p>\n\n<p>In their mobile on-boarding, Lime deftly navigated a number of significant hurdles: account set-up/verification, location &amp; camera permissions and payment -the minimum amount necessary to ride and nothing more. They did so by explaining how each of these steps got me closer to my goal of riding and worked hard to minimize their requirements, often relying on native mobile functionality to make things as fast and easy as possible.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>It’s not about you, it’s about your customer. Put your customer’s goals front and center in your mobile on-boarding process. It starts from the first screen (i.e. “Start Riding Now”)</li>\n<li>Lean into mobile-native solutions: phone verification, integrated payments, and more.</li>\n</ul>\n<h2>More On On-boarding</h2>\n<p>For a deeper look into mobile on-boarding design, check out this 20 minute segment of my Mobile design and data presentation at Google Conversions this year:\n\n</p>\n<div class=\"videobox\"></div>\n\nYou can also read Casey Winter’s <a href=\"https://news.greylock.com/why-onboarding-is-the-most-crucial-part-of-your-growth-strategy-8f9ad3ec8d5e\">article about on-boarding</a>, which does a great job outlining the concept of getting people to your company’s core value as fast as possible, but not faster.\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/qMeocWY9Ycc\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">Given the <a href=\"https://www.slideshare.net/asymco/toward-micromobility-the-low-end-disruption-of-transportation\">proliferation</a> of bike/scooter sharing services these days, I thought it would be interesting to compare the mobile app on-boarding experiences of the ones I could access. To do so, I went through the new customer flow for six of these services.</p>\n\n<p>While the mobile on-boarding I experienced across these services looked really similar, the end result differed dramatically -from me abandoning the process to walking away a delighted customer. Understanding how product design impacted these outcomes is critical for anyone trying to grow a new mobile business.\n</p>\n\n<h2>Applying Design Patterns</h2>\n<p>My first encounter with bike sharing, appropriately, was in Amsterdam. I was outside the city center for a meeting and encountered a rack of Hello-Bikes. So why not bike back to my hotel in town? Here’s what happened when I tried.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_hellobike_2x.png\"><img src=\"http://static.lukew.com/onboarding_hellobike.png\" srcset=\"http://static.lukew.com/onboarding_hellobike.png, http://static.lukew.com/onboarding_hellobike_2x.png 2x\" alt=\"Hello-Bike app mobile on-boarding process\"></a>\n</p>\n\n<p>Hello-Bike’s mobile on-boarding consists of several common patterns: a splash screen, a sign-up form, terms and conditions, and a tutorial. Though widely used, starting the design process off with these types of patterns often results in a flow that seems right in mock-ups or wireframes but fails to solve actual customer needs.\n</p>\n\n<p>The designer thinks: “I know what an on-boarding flow is. It’s a splash screen, a sign-up screen and a tutorial people can swipe through.” The resulting customer experience in filling in form fields, scrolling through 17 screens of terms &amp; conditions (yes, you are required to scroll through all of them), granting location permissions (because “background location-tracking is required”), and skipping through 6 tutorial screens featuring critical knowledge like “Welcome to Hello-Bike.”\n</p>\n\n<p>After maneuvering through all this, I found out there were no docking stations in central Amsterdam because of <a href=\"https://www.citylab.com/transportation/2017/08/amsterdam-fights-back-against-rogue-bike-share/535791/\">government regulation</a>. So I actually couldn’t use the Hello-Bike service to ride to my hotel. Starting the design process from the perspective of the customer would likely have revealed the importance of communicating these kinds of constraints up front. Starting by selecting design patterns would not.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Set expectations appropriately, so potential customers don’t end a lengthy sign-up process in disappointment or frustration.</li>\n<li>While convenient, design patterns are no substitute for understanding and designing with your customers &amp; their goals top of mind.</li>\n</ul>\n<h2>Having Desktop Bias</h2>\n<p>While modern mobile devices have been around for over ten years, desktop devices have had at least 3x more time to influence and bias our approach to software design. That’s why it’s not surprising to see desktop design concepts permeate mobile apps. In the case of Jump’s mobile on-boarding, they are all over the place.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_jump_2x.png\"><img src=\"http://static.lukew.com/onboarding_jump.png\" srcset=\"http://static.lukew.com/onboarding_jump.png, http://static.lukew.com/onboarding_jump_2x.png 2x\" alt=\"Jump mobile app on-boarding process\"></a>\n</p>\n\n<p>Following the obligatory splash screen, Jump animates through a series of safety tips calling out the unique features of electric bikes. Unfortunately, so many steps follow these tips that I can’t imagine anyone remembering them when they are finally allowed to ride one of Jump’s electric bikes.\n</p>\n\n<p>Next up are a series of permission dialogs for access to Motion &amp; Fitness and Location data. Both requests are accompanied by explanatory text that suggests Jump needs access to this information in order to “gather data about how electric bikes affect travel patterns.” Sounds like a good thing for Jump, but it’s not clear why customers should participate or even care.\n</p>\n\n<p>This mindset permeates the rest of Jump’s on-boarding as well: choose one of our bike “networks”, select one of our plans, verify your phone number, pick a 7 character password with numbers and uppercase letters, agree to our terms and conditions, put money into one of our accounts, etc. After ten steps of doing things for Jump and seeing no progress toward actually riding a bike, I abandoned at the “Enter Credit Card” step. \n</p>\n\n<p>Perhaps someone at Jump heard completion rates for forms go up when you place each question on a separate screen (I’ve seen no evidence of this), but the cumulative effect of going through a desktop-design influenced <a href=\"https://www.lukew.com/ff/entry.asp?1579\">e-commerce checkout flow</a> one step at a time on my phone was quite painful.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Make sure your customers always feel like they are making progress toward their goals, not yours.</li>\n<li>Desktop paradigms often aren’t a great fit for mobile. For instance, do you really need a checkout form? As we’ll see later, no.</li>\n</ul>\n<h2>Right Time, Right Place</h2>\n<p>After abandoning the bike-sharing process with both Hello-Bike and Jump, I had my first successful on-boarding with Spin. That’s not to say there wasn’t a lot of room for improvement. With mobile on-boarding it’s not just <strong>what</strong> we ask people to do it’s also <strong>when</strong> we ask them to do it. Spin starts off with a tutorial, which explains they are smart, I can park anywhere, and scanning a bike’s QR code will let me ride it.</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_spin_2x.png\"><img src=\"http://static.lukew.com/onboarding_spin.png\" srcset=\"http://static.lukew.com/onboarding_spin.png, http://static.lukew.com/onboarding_spin_2x.png 2x\" alt=\"Spin mobile app on-boarding process\"></a>\n</p>\n \n<p>Turns out that’s not entirely true as I needed to give them my email address, create a password, provide location permissions, and agree to three separate terms of service. It’s only after this gauntlet, that I’m actually able to scan the QR code on the bike in front of me. Why couldn’t we just have started the process there? \n</p>\n\n<p>It is worth noting, however, that Spin provides much better <a hrewf=\"https://www.lukew.com/ff/entry.asp?1928\">explanations</a> for its permission requests. When requesting location permissions, Hello-Bike told me: “background-location tracking is required” and Jump explained I could help them “gather data about how electric bikes affect travel patterns.” Spin, on the other hand, explained they use location to help me find pick-up and drop off points. They also explained they needed camera permissions so I can scan the QR code on a bike to unlock it.\n</p>\n\n<p>After I did, my next step was to reload my Spin account, with the only reloading option being $5. This immediately felt odd as the bike ride itself was advertised as $1. So if I never rode another Spin bike again, they had 4 more dollars from me... hmmmm. On a positive note, Spin integrated with Apple Pay which meant I simply had to tap a button on the side of my phone to approve payment. No checkout forms, shopping carts, or credit card entry forms required. See? We can do things in a mobile-native vs. desktop way.\n</p>\n\n<p>Following the payment process, I was greeted with a another tutorial (these things sure are popular huh? too bad most people skip through them). This time 4 screens told me about parking requirements. But wait… didn’t the first tutorial tell me I could park anywhere? Next Spin asked to send me notifications with no explanation as to why I should agree. So I didn’t.\n</p>\n\n<p>Once I rode the bike and got to my destination, I received a ride summary that told me my ride was free. That’s much appreciated but it left me asking again… couldn’t we have started there?\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>When you surface information to customers is critical. Spin could have told me my ride was free well before asking me to fill my account with a minimum of $5. And their Parking tutorial was probably more appropriate after my ride when parking my bike, not before it.</li>\n<li>Get people to your core value as soon as possible, but not sooner. It took 7 steps before I was able to scan the bike in front of me and 9 more steps before I could actually ride it. Every step that keeps customers from experiencing what makes you great, leaves them wondering why you’re not.</li>\n</ul>\n<h2>Tricky, Tricky</h2>\n<p>By now, Ofo’s mobile on-boarding process will seem familiar: location and notification permission asks without any useful explanations, an up-front tutorial, a phone number verification flow, a camera permission ask, and more.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_ofo_2x.png\"><img src=\"http://static.lukew.com/onboarding_ofo.png\" srcset=\"http://static.lukew.com/onboarding_ofo.png, http://static.lukew.com/onboarding_ofo_2x.png 2x\" alt=\"Ofo mobile app on-boarding process\"></a>\n</p>\n\n<p>For many mobile apps, phone number verification can replace the need for more traditional desktop computer influenced sign-up process that require people to enter their first and last names, email addresses, passwords, and more into a series of form fields. When you’re on a phone, all you need to verify it’s you is your phone number.\n</p> \n\n<p>With this simplified account creation process, Ofo could have had me on my way with a quick QR code scan. But instead I got a subscription service promotion that suggested I could try the service for free. After tapping the “Try it Free” button, however, I ended up on a Choose your Plan page. It was only when I used the small back arrows (tricky, tricky) that I made it back to the QR code unlock process which let me ride the Ofo bike in front of me with no charge.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Mobile device capabilities allow us to rethink how people can accomplish tasks. For instance, instead of multiple step sign-up forms, a two step phone verification process can establish someone’s account much quicker by using what mobile devices do well.</li>\n<li>While companies have revenue and growth needs, unclear flows and UI entrapments are not the way to build long-term customer loyalty and growth. You may trick some people into subscribing to your service but they won’t like you for it.</li>\n</ul>\n<h2>But Why?</h2>\n<p>Starting Bird’s mobile on-boarding gave me high hopes that I had finally found a streamlined customer-centric process that delivered on the promise of fast &amp; easy last-mile transportation (or micro-mobility, if you must).</p>\n\n<p>Things started out typically, a splash screen, an email form field, a location permission ask, but then moved right to scanning the  QR code of the scooter in front of me and asking me to pay the $1 required to get started. Great, I thought… I’ll be riding in no time as I instantly made it through Apple Pay’s confirmation screen.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_bird_2x.png\"><img src=\"http://static.lukew.com/onboarding_bird.png\" srcset=\"http://static.lukew.com/onboarding_bird.png, http://static.lukew.com/onboarding_bird_2x.png 2x\" alt=\"Bird mobile app on-boarding process\"></a>\n</p>\n\n<p>As a quick aside, integrating native payment platforms can really accelerate the payment process and increase conversion. Hotel Tonight <a href=\"https://www.slideshare.net/kendrickapp/hotel-tonight-mobile\">saw</a> a 26% increase in conversion with Apple Pay and Wish used A/B testing to <a href=\"https://stripe.com/docs/apple-pay/best-practices\">uncover</a> a 2X conversion increase when they added Apple Pay support. Turns out people do prefer to just look (Face ID) or tap (Touch ID) to pay for things on their phones instead of entering credit card or banking account details into mobile keyboards.\n</p>\n\n<p>But back to Bird... I scanned the QR code and authorized Apple Pay. Time to ride right? Not quite. Next I was asked to scan the front of my drivers’ license with no explanation of why. Odd, but I assumed it was a legal/safety thing and despite having a lot of privacy reservations got through it. Or so I thought because after this I had to scan the back of my drivers’ license, scroll through all 15 screens of a rental agreement, and tick off 6 checkboxes saying I agreed to wear a helmet, not ride downhill, and was over 18 (can’t they get that from my driver’s license?).\n</p>\n\n<p>Then it was back to scanning the QR code again, turning down notification permissions, and slogging through a 4 screen tutorial which ended with even more rules. The whole process left me feeling the legal department had taken over control of Bird’s first time customer experience: rental contracts, local rules, driver’s license verifications, etc. -really not in line with the company’s brand message of “enjoy the ride”. I left being intimated by it.</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>Rules and regulations do exist but mobile on-boarding flows shouldn’t be driven by them. There’s effective ways to balance legal requirements and customer experience. Push hard to find them.</li>\n<li>When asking for personal (especially highly personal) information, explain why. Even just a sentence about why I had to scan my driver’s license would have helped me immensely with Bird’s process.</li>\n</ul>\n<h2>Core Value, ASAP</h2>\n<p>By now, we’ve seen how very similar companies can end up with very different mobile on-boarding designs and results. So how can companies balance all the requirements and steps involved in bike-sharing and still deliver a great first-time experience? By always looking at things from the perspective of your customer. Which Lime, while not perfect, does.\n</p>\n\n<p><a href=\"http://static.lukew.com/onboarding_lime2_2x.png\"><img src=\"http://static.lukew.com/onboarding_lime2.png\" srcset=\"http://static.lukew.com/onboarding_lime2.png, http://static.lukew.com/onboarding_lime2_2x.png 2x\" alt=\"Lime mobile app on-boarding process\"></a>\n</p>\n\n<p>Lime doesn’t bother with a splash screen showing you their logo as a first step. Instead they tell you upfront that they know why you’re here with a large headline stating: “Start Riding Now”. Awesome. That’s what I’ve been trying to do this whole time. On this same screen are two streamlined sign-up options: phone number verification (which makes use of native device capabilities) and Facebook -both aimed at getting you started right away.\n</p>\n\n<p>Next, Lime takes the time to explain why they are asking for location permissions with the clearest copy we’ve seen in all these examples: “to find nearby bikes and scooters”. Sadly, they don’t apply this same level of clarification to the next permission ask for Notifications. But smartly, they use <a href=\"https://www.lukew.com/ff/entry.asp?1928\">a double dialog solution</a> and if you say no (which I did), they try again with more clarity.\n</p>\n\n<p>It’s become almost standard practice to just ask for notification permissions up front in mobile apps because up to 40% of people will just give them to you. So many apps figure, why not ask? Lots of people will say no but we’ll get some people saying yes. Personally, I feel this is an opportunity to improve for Lime.\n</p>\n\n<p>Ignoring the notifications prompt, the rest of Lime’s on-boarding process is fast and efficient: scan the QR code (once again with a clear explanation of why camera permissions are needed), authorize Apple Pay to pay for your ride. Lime doesn’t either bother to provide other payment options. They know the user experience and conversion benefits of Apple Pay and rely on it exclusively.\n</p>\n\n<p>And… that’s it. I’m riding. No tutorial! Shocking I know, but they do offer one on the map screen if you’d like to learn more before riding. User choice, not company requirement. \n</p>\n\n<p>In their mobile on-boarding, Lime deftly navigated a number of significant hurdles: account set-up/verification, location &amp; camera permissions and payment -the minimum amount necessary to ride and nothing more. They did so by explaining how each of these steps got me closer to my goal of riding and worked hard to minimize their requirements, often relying on native mobile functionality to make things as fast and easy as possible.\n</p>\n\n<em>Lessons Learned:</em>\n<ul>\n<li>It’s not about you, it’s about your customer. Put your customer’s goals front and center in your mobile on-boarding process. It starts from the first screen (i.e. “Start Riding Now”)</li>\n<li>Lean into mobile-native solutions: phone verification, integrated payments, and more.</li>\n</ul>\n<h2>More On On-boarding</h2>\n<p>For a deeper look into mobile on-boarding design, check out this 20 minute segment of my Mobile design and data presentation at Google Conversions this year:\n\n</p>\n<div class=\"videobox\"></div>\n\nYou can also read Casey Winter’s <a href=\"https://news.greylock.com/why-onboarding-is-the-most-crucial-part-of-your-growth-strategy-8f9ad3ec8d5e\">article about on-boarding</a>, which does a great job outlining the concept of getting people to your company’s core value as fast as possible, but not faster.\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/qMeocWY9Ycc\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-07-23 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Video: Mobile Planet","pubDate":"2018-05-29 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/4E3UodHl2eY/entry.asp","guid":"e03bc4d799513a277779676c747fb630","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/4E3UodHl2eY","description":"\n<p class=\"feature\">For the past six years, I've presented a walkthrough of the latest mobile data and design insights and solutions I've been exploring at <a href=\"https://www.youtube.com/playlist?list=PLMEOqDSoPMSU2wlfJMERFOZJwMLmhyx90\">Google's Conversions event</a> in Dublin. This year's video recording is now live.</p>\n\n<div class=\"videobox\"></div>\n\n<p>This year's presentation is a data-informed big picture view of our mobile planet, how to design products for it, and why covering on-boarding, performance, touch gestures, and more.</p>\n\n<h2>All Annual Sessions:</h2>\n<ul>\n<li>Conversions@Google 2018 session on our <a href=\"https://www.lukew.com/ff/entry.asp?1994\">Mobile Planet</a>\n</li>\n<li>Conversions@Google 2017 (November) session on <a href=\"https://www.lukew.com/ff/entry.asp?1982\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2017 (April) session on <a href=\"https://www.lukew.com/ff/entry.asp?1973\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2016 session on <a href=\"https://www.lukew.com/ff/entry.asp?1962\">Obvious Always Wins</a>\n</li>\n<li>Conversions@Google 2015 session on <a href=\"https://www.lukew.com/ff/entry.asp?1949\">Screen Time</a>\n</li>\n<li>Conversions@Google 2014 session on <a href=\"https://www.lukew.com/ff/entry.asp?1936\">Mobile Design Now</a>\n</li>\n<li>Conversions@Google 2013 session on <a href=\"https://www.youtube.com/watch?v=DSye2bcl2Lg&amp;index=2&amp;list=PLMEOqDSoPMSV6jWnwxaAlcuuA0gVRGAuy\">One Design for a Multi-Device Web</a>\n</li>\n</ul>\n<p>Big thanks to the <a href=\"https://www.youtube.com/channel/UClGSSyDNPuqaRMUyPru1w4Q\">Conversions@Google</a> team for making these sessions available to all.</p>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/4E3UodHl2eY\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">For the past six years, I've presented a walkthrough of the latest mobile data and design insights and solutions I've been exploring at <a href=\"https://www.youtube.com/playlist?list=PLMEOqDSoPMSU2wlfJMERFOZJwMLmhyx90\">Google's Conversions event</a> in Dublin. This year's video recording is now live.</p>\n\n<div class=\"videobox\"></div>\n\n<p>This year's presentation is a data-informed big picture view of our mobile planet, how to design products for it, and why covering on-boarding, performance, touch gestures, and more.</p>\n\n<h2>All Annual Sessions:</h2>\n<ul>\n<li>Conversions@Google 2018 session on our <a href=\"https://www.lukew.com/ff/entry.asp?1994\">Mobile Planet</a>\n</li>\n<li>Conversions@Google 2017 (November) session on <a href=\"https://www.lukew.com/ff/entry.asp?1982\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2017 (April) session on <a href=\"https://www.lukew.com/ff/entry.asp?1973\">Mobile in The Future</a>\n</li>\n<li>Conversions@Google 2016 session on <a href=\"https://www.lukew.com/ff/entry.asp?1962\">Obvious Always Wins</a>\n</li>\n<li>Conversions@Google 2015 session on <a href=\"https://www.lukew.com/ff/entry.asp?1949\">Screen Time</a>\n</li>\n<li>Conversions@Google 2014 session on <a href=\"https://www.lukew.com/ff/entry.asp?1936\">Mobile Design Now</a>\n</li>\n<li>Conversions@Google 2013 session on <a href=\"https://www.youtube.com/watch?v=DSye2bcl2Lg&amp;index=2&amp;list=PLMEOqDSoPMSV6jWnwxaAlcuuA0gVRGAuy\">One Design for a Multi-Device Web</a>\n</li>\n</ul>\n<p>Big thanks to the <a href=\"https://www.youtube.com/channel/UClGSSyDNPuqaRMUyPru1w4Q\">Conversions@Google</a> team for making these sessions available to all.</p>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/4E3UodHl2eY\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-05-29 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Google Conversions: Highlights","pubDate":"2018-05-15 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/6FFMdYaADIE/entry.asp","guid":"756c4d93a40ec61c6def1dd2f4a5de19","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/6FFMdYaADIE","description":"\n<p class=\"feature\">Across several presentations at <a href=\"https://events.withgoogle.com/conversionsgoogle-9/agenda/#content\">Google Conversions</a> in Dublin, several speakers shared insights and best practices for conversion rate optimization. Here's a few highlights: \n</p>\n<h2>Confirmation Bias - Michael Aagaard</h2>\n<ul>\n<li>In the 18th century, tobacco smoke was considered very good for your heart and lungs. In particular tobacco enemas were quite popular so much that they were placed along the banks of the river Thames to help drowning victims. This is an example of confirmation bias at work.</li>\n<li>Confirmation biases is our tendency to accept evidence we agree with at face value and dismiss information we don't agree with unless the evidence is overwhelming. Confirmation biases limits our ability to seek out and uncover the truth.</li>\n<li>Torturing data: if you torture any data long enough it will confess to anything. High levels of correlation between things don't imply causation. We have to be careful to not see what we want in data.</li>\n<li>Stopping A/B tests when they show the impact we want is an example of confirmation bias. Instead, let them run for an appropriate amount of time. Over time, tests are likely to show much less effects.</li>\n<li>How to overcome confirmation bias: accept the fact that you could be wrong, seek out a different perspective. Find people who talk to customers/users. They have a bias toward end users.</li>\n<li>Don't test your ideas, do detective work to find out what customers need and how they talk about it. Then your A/B test is simply the final test at the end to see if you did your detective work well.</li>\n</ul>\n<h2>CRO - Lina Hansson</h2>\n<ul>\n<li>Celebrate the discovery of weak spots. Don't take it as failure but instead be happy when you find something that can be improved.</li>\n<li>The biggest missed opportunity in conversion rate optimization is usability testing. Move away from opinions and instead use user testing to identify issues.</li>\n<li>A common pain point across retail sites is find-ability: both search and browse. When we move to mobile, many sites remove their top categories list in order to fit on smaller screens. This creates discoverability issues. One of the first things retail sites should test is adding categories visibly on their home page.</li>\n<li>Value propositions for companies are usually cut for mobile. Instead of removing them, redesign them to make them work on mobile.</li>\n<li>People can be classified into four behavior types. Methodical people read completely and analyze before making decisions. Humanistic people react strongly to the opinions of others. Competitive people move quickly and expect things to work. Spontaneous people are emotional and fast-paced. You can design experiences that are appropriate for each of these behavior types.</li>\n<li>The companies that solve checkout on mobile are the ones that will win.</li>\n</ul>\n<h2>Meaningful Data - Simo Ahava</h2>\n<ul>\n<li>It's quite simple to get a service like Google Analytics set up but how do we use these tools to really understand what we're doing. How can data become meaningful?</li>\n<li>Tactics (tool expertise) without a strategy (business expertise) are just party tricks and a strategy without tactics is just talk. What brings the two together is agility.</li>\n<li>Tools must be customized for your organization's needs. We are not trying to optimize metrics but our businesses. Default metrics and reports need to be adjusted to work with your specific needs.</li>\n</ul>\n<h2>Landing Pages - Anna Potanin</h2>\n<ul>\n<li>Designers want to do their best and create unique interfaces but making things for the Web often requires understanding and using conventions. Only apply a unique visual design after you have followed best practices.</li>\n<li>3 things all retail sites should have on their landing and home pages: call to action, value propositions, and visuals.</li>\n<li>The more prominent you make your search bar, the more searches you get. Why do you want to do this? Conversion rates are usually much higher for people who search</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/6FFMdYaADIE\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">Across several presentations at <a href=\"https://events.withgoogle.com/conversionsgoogle-9/agenda/#content\">Google Conversions</a> in Dublin, several speakers shared insights and best practices for conversion rate optimization. Here's a few highlights: \n</p>\n<h2>Confirmation Bias - Michael Aagaard</h2>\n<ul>\n<li>In the 18th century, tobacco smoke was considered very good for your heart and lungs. In particular tobacco enemas were quite popular so much that they were placed along the banks of the river Thames to help drowning victims. This is an example of confirmation bias at work.</li>\n<li>Confirmation biases is our tendency to accept evidence we agree with at face value and dismiss information we don't agree with unless the evidence is overwhelming. Confirmation biases limits our ability to seek out and uncover the truth.</li>\n<li>Torturing data: if you torture any data long enough it will confess to anything. High levels of correlation between things don't imply causation. We have to be careful to not see what we want in data.</li>\n<li>Stopping A/B tests when they show the impact we want is an example of confirmation bias. Instead, let them run for an appropriate amount of time. Over time, tests are likely to show much less effects.</li>\n<li>How to overcome confirmation bias: accept the fact that you could be wrong, seek out a different perspective. Find people who talk to customers/users. They have a bias toward end users.</li>\n<li>Don't test your ideas, do detective work to find out what customers need and how they talk about it. Then your A/B test is simply the final test at the end to see if you did your detective work well.</li>\n</ul>\n<h2>CRO - Lina Hansson</h2>\n<ul>\n<li>Celebrate the discovery of weak spots. Don't take it as failure but instead be happy when you find something that can be improved.</li>\n<li>The biggest missed opportunity in conversion rate optimization is usability testing. Move away from opinions and instead use user testing to identify issues.</li>\n<li>A common pain point across retail sites is find-ability: both search and browse. When we move to mobile, many sites remove their top categories list in order to fit on smaller screens. This creates discoverability issues. One of the first things retail sites should test is adding categories visibly on their home page.</li>\n<li>Value propositions for companies are usually cut for mobile. Instead of removing them, redesign them to make them work on mobile.</li>\n<li>People can be classified into four behavior types. Methodical people read completely and analyze before making decisions. Humanistic people react strongly to the opinions of others. Competitive people move quickly and expect things to work. Spontaneous people are emotional and fast-paced. You can design experiences that are appropriate for each of these behavior types.</li>\n<li>The companies that solve checkout on mobile are the ones that will win.</li>\n</ul>\n<h2>Meaningful Data - Simo Ahava</h2>\n<ul>\n<li>It's quite simple to get a service like Google Analytics set up but how do we use these tools to really understand what we're doing. How can data become meaningful?</li>\n<li>Tactics (tool expertise) without a strategy (business expertise) are just party tricks and a strategy without tactics is just talk. What brings the two together is agility.</li>\n<li>Tools must be customized for your organization's needs. We are not trying to optimize metrics but our businesses. Default metrics and reports need to be adjusted to work with your specific needs.</li>\n</ul>\n<h2>Landing Pages - Anna Potanin</h2>\n<ul>\n<li>Designers want to do their best and create unique interfaces but making things for the Web often requires understanding and using conventions. Only apply a unique visual design after you have followed best practices.</li>\n<li>3 things all retail sites should have on their landing and home pages: call to action, value propositions, and visuals.</li>\n<li>The more prominent you make your search bar, the more searches you get. Why do you want to do this? Conversion rates are usually much higher for people who search</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/6FFMdYaADIE\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-05-15 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: The Way of the Web","pubDate":"2018-04-03 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/t1ukcNH6C_8/entry.asp","guid":"8aa211eebb0d165f31ea38937519695a","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/t1ukcNH6C_8","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">The Way of the Web</a> presentation at An Event Apart in Seattle, Jeremy Keith discussed building for the Web today and how to manage the rate of change of technologies and tools for Web development. Here's my notes from his talk: \n</p>\n<ul>\n<li>Science fiction is not about predicting the future, it is about looking at the concerns we have today and projecting them forward. Novels are empathy machines. You can really get into what the characters were feeling/experiencing and thereby share their concerns.</li>\n<li>While science fiction books get some things right about the future, they also have blind spots. For instance, people went to phone booths instead of carrying mobile phones. In the present we have a future that was almost beyond what was predicted in seminal works of science fiction.</li>\n<li>With where technology is today and what is possible, are we in a utopia or a dystopia? Are we excited or afraid of technology's possibilities. What makes the difference? Why are we excited about some technologies and apprehensive about others?</li>\n<li>Working on the Web can be overwhelming as we have to endure constant changes in technology and processes. When that rate of change is especially steep, things get worse.</li>\n<li>Stewart Brand's pace layers outline the rate of change of everything from people to buildings. Fashion changes quickly, culture changes slowly, and that's good. We get apprehensive when things that should move slow start changing too quickly. Example: quick changes in government are usually revolutions.</li>\n<li>The materials of the Web (HTML, CSS, and Javascript) move slow and are more stable, they are lower pace layers. The tools of the Web move much faster and are more subject to change.</li>\n<li>If a technology helps the developer but not the end user, there's a balance that needs to be understood. Is the trade-off of developer convenience worth a large download for users?</li>\n<li>We can map Web technologies to pace layers. The bottom layer is the Internet (TCP/IP). This hasn't changed in decades and you don't want it to change. HTTP is the protocol layer above this and is changes very slowly, which is appropriate. URLs are the layer above, which change often but probably shouldn't. HTML and CSS are changing much more quickly but still not as fast as Javascript.</li>\n<li>Every week there is a new Javascript library, which is where the Web feels apprehensive. Ideas get vetted out in Javascript and when they stabilize, they move down to HTML and CSS. It's ok that Javascript changes quickly -it needs to in order to work out new ideas.</li>\n<li>You can choose to build single page Web sites in Javascript only. Going directly to URLs and HTTP. However this sets up a works great or doesn't work model. The power of the Web is that we have different levels of \"working\", a continuum. Everybody gets something with these in-between levels of experience.</li>\n<li>The rule of least power: \"choose the language of least power to accomplish something\" It's not as powerful, but much more stable. Instead of doing everything in Javascript, see what can be done in HTML and CSS first.</li>  \n<li>The Web favors ubiquity over consistency. You can get to the content but it may not look the same to everyone. Start with the simplest element (like a select) and gradually apply styling/code to layer on additional enhancements.</li>\n<li>This mode of building for the Web isn't just for simple sites. Even \"complex\" sites can be broken down into simpler elements. There's actually a continuum between simple and complex.</li>\n<li>Progressive Web apps are Web sites that add HTTPS, a Web app manifest, and a service worker. This layering of technology allows sites to not only run securely but also offline.</li>\n<li>People want browser features to be supported everywhere before they start using them, but that's not how it works. You can start using these elements now even if they only have partial support and get the benefits where they're available.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/t1ukcNH6C_8\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">The Way of the Web</a> presentation at An Event Apart in Seattle, Jeremy Keith discussed building for the Web today and how to manage the rate of change of technologies and tools for Web development. Here's my notes from his talk: \n</p>\n<ul>\n<li>Science fiction is not about predicting the future, it is about looking at the concerns we have today and projecting them forward. Novels are empathy machines. You can really get into what the characters were feeling/experiencing and thereby share their concerns.</li>\n<li>While science fiction books get some things right about the future, they also have blind spots. For instance, people went to phone booths instead of carrying mobile phones. In the present we have a future that was almost beyond what was predicted in seminal works of science fiction.</li>\n<li>With where technology is today and what is possible, are we in a utopia or a dystopia? Are we excited or afraid of technology's possibilities. What makes the difference? Why are we excited about some technologies and apprehensive about others?</li>\n<li>Working on the Web can be overwhelming as we have to endure constant changes in technology and processes. When that rate of change is especially steep, things get worse.</li>\n<li>Stewart Brand's pace layers outline the rate of change of everything from people to buildings. Fashion changes quickly, culture changes slowly, and that's good. We get apprehensive when things that should move slow start changing too quickly. Example: quick changes in government are usually revolutions.</li>\n<li>The materials of the Web (HTML, CSS, and Javascript) move slow and are more stable, they are lower pace layers. The tools of the Web move much faster and are more subject to change.</li>\n<li>If a technology helps the developer but not the end user, there's a balance that needs to be understood. Is the trade-off of developer convenience worth a large download for users?</li>\n<li>We can map Web technologies to pace layers. The bottom layer is the Internet (TCP/IP). This hasn't changed in decades and you don't want it to change. HTTP is the protocol layer above this and is changes very slowly, which is appropriate. URLs are the layer above, which change often but probably shouldn't. HTML and CSS are changing much more quickly but still not as fast as Javascript.</li>\n<li>Every week there is a new Javascript library, which is where the Web feels apprehensive. Ideas get vetted out in Javascript and when they stabilize, they move down to HTML and CSS. It's ok that Javascript changes quickly -it needs to in order to work out new ideas.</li>\n<li>You can choose to build single page Web sites in Javascript only. Going directly to URLs and HTTP. However this sets up a works great or doesn't work model. The power of the Web is that we have different levels of \"working\", a continuum. Everybody gets something with these in-between levels of experience.</li>\n<li>The rule of least power: \"choose the language of least power to accomplish something\" It's not as powerful, but much more stable. Instead of doing everything in Javascript, see what can be done in HTML and CSS first.</li>  \n<li>The Web favors ubiquity over consistency. You can get to the content but it may not look the same to everyone. Start with the simplest element (like a select) and gradually apply styling/code to layer on additional enhancements.</li>\n<li>This mode of building for the Web isn't just for simple sites. Even \"complex\" sites can be broken down into simpler elements. There's actually a continuum between simple and complex.</li>\n<li>Progressive Web apps are Web sites that add HTTPS, a Web app manifest, and a service worker. This layering of technology allows sites to not only run securely but also offline.</li>\n<li>People want browser features to be supported everywhere before they start using them, but that's not how it works. You can start using these elements now even if they only have partial support and get the benefits where they're available.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/t1ukcNH6C_8\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-04-03 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Performance as User Experience","pubDate":"2018-04-03 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/E8y5ruHnspA/entry.asp","guid":"509e9519f55cf6921972398e06cccecf","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/E8y5ruHnspA","description":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">Performance as User Experience</a> presentation at An Event Apart in Seattle, Aaron Gustafson shared a number of ways to optimize Web page performance. Here's my notes from his talk: \n</p>\n<ul>\n<li>Our jobs as designers is to reduce friction for our users. Poor performance causes friction and can negatively impact key metrics like conversion and revenue.</li>\n<li>How do Web pages load: when you enter an address in a URL bar, a DNS look-up replies with an IP address, then there's a TCP handshake followed by the actual request for files/data, once there's a response the browser can actually do something.</li>\n<li>Once the browser gets a response, it can assemble the document object, the render tree, layout, paint, and finally load. CSS and Javascript can delay this process and sometimes cause it to run again.</li>\n</ul>\n<h2>Steps for better performance</h2>\n<ul>\n<li>Use native features whenever possible. They are effectively free. Semantic elements not only reduce bytes but also contain attributes that provide a lot of functionality like placeholder, autocomplete, autocorrect, type, etc. System fonts can help reduce the need for custom font downloads. Font stacks can cover fallback issues.</li>\n<li>Only include assets you actually need. Every tool has a cost, make sure you are really using enough of each tool to justify that cost. Chances are the tool you are trying to use is already on a CDN and you can use resource hints to speed up the download process. But downloading isn't everything as Javascript frameworks also take time to execute, which is slower than native JS processing.</li>\n<li>Optimize everything. Task runners like Grunt and Gulp can help automate optimizations of Javascript, CSS and HTML. Minify and pre-compress all your files.</li>\n<li>Think about when you load assets. If you have Javascript files divided into modules, you can defer functions you won't need until the after the DOM is loaded. The async attribute also allows you to load files when it makes the most sense. Just make sure you don't hit any race conditions if some of your Javascript files have dependencies on others.</li>\n<li>Why so many different files? Under HTTP1, each resources was requested sequentially. Now with HTTP2, you set a single connection and then stream in resources as needed.</li>\n<li>Consider how you load assets. Start simple by loading just your default (often mobile) CSS file. You can add a media query as a threshold for loading more advanced CSS in browsers than can render it. Conditional comments (which only work in IE8 and below) can either load or hide elements from older browsers. Similar techniques can be used to conditionally load images and animations (via SVG support).</li>\n<li>Only load assets when they add value. Not every article needs an image, think twice before you include it. Images are 53% of the average web page and very expensive size-wise. If you need an image, use the right format. GIFs ae good for solid colors, JPGs for photographs, PNGs are JPG alternatives with alpha transparency, WebPs are note well supported but optimized in many ways.</li>\n<li>Images can be optimized by removing color, blurring parts of images, resizing, compressing, and using appropriate formats. We can use the picture element to add WebP images in browsers that support them. Remember to put your smallest files first, because the first one that works is what gets used.</li>\n<li>Every choice we  make affects our  users’ experiences. Let’s spend our time to save it for our users.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/E8y5ruHnspA\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In his <a href=\"https://aneventapart.com/event/seattle-2018\">Performance as User Experience</a> presentation at An Event Apart in Seattle, Aaron Gustafson shared a number of ways to optimize Web page performance. Here's my notes from his talk: \n</p>\n<ul>\n<li>Our jobs as designers is to reduce friction for our users. Poor performance causes friction and can negatively impact key metrics like conversion and revenue.</li>\n<li>How do Web pages load: when you enter an address in a URL bar, a DNS look-up replies with an IP address, then there's a TCP handshake followed by the actual request for files/data, once there's a response the browser can actually do something.</li>\n<li>Once the browser gets a response, it can assemble the document object, the render tree, layout, paint, and finally load. CSS and Javascript can delay this process and sometimes cause it to run again.</li>\n</ul>\n<h2>Steps for better performance</h2>\n<ul>\n<li>Use native features whenever possible. They are effectively free. Semantic elements not only reduce bytes but also contain attributes that provide a lot of functionality like placeholder, autocomplete, autocorrect, type, etc. System fonts can help reduce the need for custom font downloads. Font stacks can cover fallback issues.</li>\n<li>Only include assets you actually need. Every tool has a cost, make sure you are really using enough of each tool to justify that cost. Chances are the tool you are trying to use is already on a CDN and you can use resource hints to speed up the download process. But downloading isn't everything as Javascript frameworks also take time to execute, which is slower than native JS processing.</li>\n<li>Optimize everything. Task runners like Grunt and Gulp can help automate optimizations of Javascript, CSS and HTML. Minify and pre-compress all your files.</li>\n<li>Think about when you load assets. If you have Javascript files divided into modules, you can defer functions you won't need until the after the DOM is loaded. The async attribute also allows you to load files when it makes the most sense. Just make sure you don't hit any race conditions if some of your Javascript files have dependencies on others.</li>\n<li>Why so many different files? Under HTTP1, each resources was requested sequentially. Now with HTTP2, you set a single connection and then stream in resources as needed.</li>\n<li>Consider how you load assets. Start simple by loading just your default (often mobile) CSS file. You can add a media query as a threshold for loading more advanced CSS in browsers than can render it. Conditional comments (which only work in IE8 and below) can either load or hide elements from older browsers. Similar techniques can be used to conditionally load images and animations (via SVG support).</li>\n<li>Only load assets when they add value. Not every article needs an image, think twice before you include it. Images are 53% of the average web page and very expensive size-wise. If you need an image, use the right format. GIFs ae good for solid colors, JPGs for photographs, PNGs are JPG alternatives with alpha transparency, WebPs are note well supported but optimized in many ways.</li>\n<li>Images can be optimized by removing color, blurring parts of images, resizing, compressing, and using appropriate formats. We can use the picture element to add WebP images in browsers that support them. Remember to put your smallest files first, because the first one that works is what gets used.</li>\n<li>Every choice we  make affects our  users’ experiences. Let’s spend our time to save it for our users.</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/E8y5ruHnspA\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-04-03 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Event Apart: Navigating Team Friction","pubDate":"2018-04-03 00:00:00","link":"http://feedproxy.google.com/~r/FunctioningForm/~3/FOCmxyc00RA/entry.asp","guid":"c852a627e7840cbc87b7c4a59069343b","author":"info@lukew.com","thumbnail":"http://feeds.feedburner.com/~r/FunctioningForm/~4/FOCmxyc00RA","description":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/seattle-2018\">Navigating Team Friction</a> presentation at An Event Apart in Seattle, Lara Hogan discussed what causes teams at work to have issues and how to address them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Teams of people are amazing. Its a privilege to work together with people to make things.</li>\n<li>Bruce Tuckman found a series of stages that groups of people go through: forming (comes together in a new state), storming (some friction emerges), norming (clarity begins to emerge), performing (effective state). This is a cycle that repeats itself regularly.</li>\n<li>Storming is a natural part of team dynamics but it does create friction. You need to be able to move past the friction in order to focus on what actually matters.</li>\n<li>It can take a while for managers to identify and resolve points of friction. So what can team members do to address the issue earlier on?</li>\n</ul>\n<h2>Core Needs</h2>\n<ul>\n<li>Everyone transforms into different versions of themselves sometimes. The rationale part of our brains isn't always in control. Instead, we may be reacting to fear and/or threats that put us into fight or flight mode. These reactions come from more than use physical safety and shelter needs.</li>\n<li>Modern humans have several core needs. First, people need to belong to a group or community. Second, people need to make improvements and/or progress (for team, company, or personally). Third, people need to be able to make choices about their work -they need flexibility, and decision-making capabilities. Fourth, people need access to equal resources, information, and fairness. Fifth, people require some amount of predictability in their work days. Lastly, people need to feel their work matters -they need recognition and visibility for work.</li>\n<li>The BICEPS model (the needs above) gives you a way to assess what could be causing team friction.</li>\n<li>As an example, moving desks are a great example of why people react emotionally to seemingly sound rationale decisions. They impact belonging, choice, predictability, etc. but do so differently for different people. To address these issues, try to identify the core need being effected.</li>\n<li>To find which core needs are being impacted, look at the types of resistance you are seeing. Doubt: asking lots of questions/debating the issue. Avoid: not showing up. Fight: people create arguments against the issue. Bond: go to friends &amp; peers to find support. Escape-route: changing roles, leaving company to avoid the threat.</li>\n</ul>\n<h2>Communication Style</h2>\n<ul>\n<li>When you spot some signals, ask open questions (which are different than yes/no questions). This helps you understand which core needs are being threatened on the team. Then you can figure out how to address the issue.</li>\n<li>Reflect on the dynamics of the room, what are they thinking and/or worried about? Be aware of your medium: what words, body language are you using?</li>\n<li>When you make an ask of someone, consider if they can act on what you are saying. Don't tear things down, try to elevate the conversation by being transparent.</li>\n<li>Assume everyone has the best intentions at work and try to empathize with what other people may be going through.</li>\n<li>Listen to learn: stay genuinely curious. Operate under the assumption that you don't know the whole story. Be excited to have your mind changed, it helps you learn and grow.</li>\n<li>Humans aren't great at feedback but we can get better. Good feedback is specific and actionable. This kind of feedback helps us improve and grow.</li>\n<li>Structure your feedback as: observation of a behavior (just the facts)+ impact of that behavior (share how you feel) + question or request. Write it out first to make sure it's communicating what you want.</li>\n<li>It's ok to cause some friction, that's a natural part of working together. But know how you can move past it.</li>\n</ul>\n<h2>Prevention</h2>\n<ul>\n<li>Retrospectives allow people to know their feelings have been heard. Name friction points in these meetings to acknowledge what didn't work.</li>\n<li>Team charters and docs can helps align people's work against a common vision and clear responsibilities.</li>\n<li>The absence of trust is the source of most team dysfunctions. How do you get these issues surfaced within a team? Determine if you agree or disagree with decisions and whether or not you can commit to a decision.</li>\n<li>If/when you need to go to HR or leadership, state what's been tried and what you think could help now. Be prepared that they may take a different action after weighing the situation.\n</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/FOCmxyc00RA\" height=\"1\" width=\"1\" alt=\"\">\n","content":"\n<p class=\"feature\">In her <a href=\"https://aneventapart.com/event/seattle-2018\">Navigating Team Friction</a> presentation at An Event Apart in Seattle, Lara Hogan discussed what causes teams at work to have issues and how to address them. Here's my notes from her talk: \n</p>\n<ul>\n<li>Teams of people are amazing. Its a privilege to work together with people to make things.</li>\n<li>Bruce Tuckman found a series of stages that groups of people go through: forming (comes together in a new state), storming (some friction emerges), norming (clarity begins to emerge), performing (effective state). This is a cycle that repeats itself regularly.</li>\n<li>Storming is a natural part of team dynamics but it does create friction. You need to be able to move past the friction in order to focus on what actually matters.</li>\n<li>It can take a while for managers to identify and resolve points of friction. So what can team members do to address the issue earlier on?</li>\n</ul>\n<h2>Core Needs</h2>\n<ul>\n<li>Everyone transforms into different versions of themselves sometimes. The rationale part of our brains isn't always in control. Instead, we may be reacting to fear and/or threats that put us into fight or flight mode. These reactions come from more than use physical safety and shelter needs.</li>\n<li>Modern humans have several core needs. First, people need to belong to a group or community. Second, people need to make improvements and/or progress (for team, company, or personally). Third, people need to be able to make choices about their work -they need flexibility, and decision-making capabilities. Fourth, people need access to equal resources, information, and fairness. Fifth, people require some amount of predictability in their work days. Lastly, people need to feel their work matters -they need recognition and visibility for work.</li>\n<li>The BICEPS model (the needs above) gives you a way to assess what could be causing team friction.</li>\n<li>As an example, moving desks are a great example of why people react emotionally to seemingly sound rationale decisions. They impact belonging, choice, predictability, etc. but do so differently for different people. To address these issues, try to identify the core need being effected.</li>\n<li>To find which core needs are being impacted, look at the types of resistance you are seeing. Doubt: asking lots of questions/debating the issue. Avoid: not showing up. Fight: people create arguments against the issue. Bond: go to friends &amp; peers to find support. Escape-route: changing roles, leaving company to avoid the threat.</li>\n</ul>\n<h2>Communication Style</h2>\n<ul>\n<li>When you spot some signals, ask open questions (which are different than yes/no questions). This helps you understand which core needs are being threatened on the team. Then you can figure out how to address the issue.</li>\n<li>Reflect on the dynamics of the room, what are they thinking and/or worried about? Be aware of your medium: what words, body language are you using?</li>\n<li>When you make an ask of someone, consider if they can act on what you are saying. Don't tear things down, try to elevate the conversation by being transparent.</li>\n<li>Assume everyone has the best intentions at work and try to empathize with what other people may be going through.</li>\n<li>Listen to learn: stay genuinely curious. Operate under the assumption that you don't know the whole story. Be excited to have your mind changed, it helps you learn and grow.</li>\n<li>Humans aren't great at feedback but we can get better. Good feedback is specific and actionable. This kind of feedback helps us improve and grow.</li>\n<li>Structure your feedback as: observation of a behavior (just the facts)+ impact of that behavior (share how you feel) + question or request. Write it out first to make sure it's communicating what you want.</li>\n<li>It's ok to cause some friction, that's a natural part of working together. But know how you can move past it.</li>\n</ul>\n<h2>Prevention</h2>\n<ul>\n<li>Retrospectives allow people to know their feelings have been heard. Name friction points in these meetings to acknowledge what didn't work.</li>\n<li>Team charters and docs can helps align people's work against a common vision and clear responsibilities.</li>\n<li>The absence of trust is the source of most team dysfunctions. How do you get these issues surfaced within a team? Determine if you agree or disagree with decisions and whether or not you can commit to a decision.</li>\n<li>If/when you need to go to HR or leadership, state what's been tried and what you think could help now. Be prepared that they may take a different action after weighing the situation.\n</li>\n</ul>\n<img src=\"http://feeds.feedburner.com/~r/FunctioningForm/~4/FOCmxyc00RA\" height=\"1\" width=\"1\" alt=\"\">\n","enclosure":{},"categories":[],"color":"peachpuff","category":"LukeW | Digital","date":"2018-04-03 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"A cartoon guide to Facebook’s Relay, part 4","pubDate":"2016-01-27 13:47:35","link":"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-4-aef7d819a8ed?source=rss----7475df8cb3e5---4","guid":"https://medium.com/p/aef7d819a8ed","author":"Lin Clark","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*GZx2kIRuPIJbmum6yYrTzA.gif","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GZx2kIRuPIJbmum6yYrTzA.gif\"></figure><p>So far you’ve seen how:</p>\n<ol>\n<li>Relay lets you say what data you need with GraphQL in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5\">part 1</a>\n</li>\n<li>Relay fetches data from the server in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59\">part 2</a>\n</li>\n<li>Relay syncs changes back up to the server in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670\">part 3</a>\n</li>\n</ol>\n<p>Now let’s see how all the different parts work together.</p>\n<h3>Caveat: this is only an approximation</h3>\n<p>In the cartoons up until now the scale of the diagrams has been 1:1… each arrow has (pretty much) represented a single function call.</p>\n<p>For these diagrams, the scale is closer to 1:100. This is because Relay is doing so much for you.</p>\n<p>Flux is a pattern. Relay is a framework. Flux just gives you guidelines on how to structure your application. Relay gives you concrete functionality. And lots of it.</p>\n<p>This means that the number of different parts in the system has ballooned.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*APMinvfY_aKeypSFA0To7g.png\"></figure><p>From the diagrams, it could look like implementing something with Relay requires a lot more work. The truth is, these extra characters take care of a lot of work for you. They are responsible for the magic.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*qPgvIxYs06P7k2DfNGvXiA.png\"><figcaption>Magic!</figcaption></figure><p>You don’t really need to know every detail of what they do. In fact, there’s only a small number of parts that you even need to be aware of.</p>\n<p>But cracking things open and seeing how they work is the fun part! So I’m going to try to give you a rough approximation of Relay’s inner workings.</p>\n<h3>The chorus line of characters</h3>\n<p>Even leaving out some of the lesser cast members, there are still a bunch of them. In my head, I divide them into 4 groups.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*XCwD3sllb682KhwFpy-cYQ.png\"></figure><h4>The user interface</h4>\n<p>The user interface takes the data from the system and makes it understandable to the user. It also gives the user a way to change that data. It takes user input and turns it into something the system understands.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*AfR-MwAl1WdGBkOzy0USRA.png\"></figure><p>The parts of the user interface are:</p>\n<p><strong>The root container </strong>— Kind of like the root component in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.y9y398wyc\">Redux</a>, the root container is a CEO. It chooses the top level component to use for the page. It also tells the app where in the graph to start the query. But after that, it’s pretty hands off.</p>\n<p><strong>Containers </strong>—<strong> </strong>The container is like a project manager for the component. It has a list of all of the data the component needs to do its job. The container is on top of getting the data from the rest of the system. This allows the component to focus on its job.</p>\n<p><strong>Components</strong> — A component in Relay is pretty much the same as it is in Flux. It is a presenter. It just knows how to format data into output that people understand (via HTML).</p>\n<p><strong>Relay Renderer</strong> — In some ways, the Relay Renderer is like the view layer binding from Redux. Like an IT department, it hooks up the container to the store.</p>\n<p><strong>Mutations</strong> —You saw mutations in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670#.uzi8nc59z\">part 3</a>. They are like action creators in Flux, but they do more. They provide blueprints for the mutation system to follow for different user changes.</p>\n<h4>Data storage</h4>\n<p>Data storage is handled by the store. Even though I’m only representing it as one character here, there are many different objects involved.</p>\n<p>The UI talks to it whenever it wants data. It works with the query and mutation systems to make sure it has the data that the UI needs. The store also has a notification system. Each component gets custom-tailored updates when data it uses changes. The store handles all of the details of wiring up these notifications, so you don’t have to think about it.</p>\n<h4>The query/mutation systems</h4>\n<p>The query and mutation systems prepare queries. They also keep track of what queries have gone out and what data needs to come in for a query to be complete. You met them in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a> and <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670#.uzi8nc59z\">part 3</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*980G74IU-tbd0JuhpPPKNQ.png\"></figure><h4>The cloud</h4>\n<p>Two characters sit on either side of the cloud: the server on one side and the network layer (which is on the client) on the other.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*-tiGTyGsbc8KVsCQcn8APg.png\"></figure><p><strong>The server </strong>— As you saw in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5#.ignn4bn99\">part 1</a>, the GraphQL server is like a librarian. It isn’t the library; it doesn’t actually store the information. You tell the GraphQL server what information you need, and it figures out where to go in the stacks to get that information for you.</p>\n<p><strong>The network layer</strong>—The network layer manages all communication with the server. It is like an operator in The Matrix. It is responsible for getting requests into the cloud and making sure responses get out of the cloud. If the response doesn’t come out of the cloud correctly, the operator will retry twice before pulling the plug. It also handles errors.</p>\n<h3>The first render</h3>\n<p>Let’s see what happens when your app is first loaded.</p>\n<h4>Step 1: Starting the process</h4>\n<p>When the page is loaded, React starts rendering. The first thing it reaches is the root container. The root container passes off responsibility to Relay Renderer.</p>\n<p>Relay Renderer is in charge of making sure the data is available to the UI. But because the app isn’t mounted, it knows that none of this data is available. It tells the store to start priming the cache.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*oMdXn8jKuvPB5YdaWn2u5A.png\"></figure><h4>Step 2: Priming the cache</h4>\n<p>The store needs to know what data to get for the cache. Relay Renderer figures out what the starting point for the query is (the query root) and passes it to the store. It also gives the store a callback.</p>\n<p>The store passes those off to the query system. Then the query system works with the store to figure out what data is already in the cache. We looked at this in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*_VV4gE4TzRHSxIejz7fJ3g.png\"></figure><h4>Step 3: Building the query</h4>\n<p>The query system builds the query.</p>\n<p>I didn’t show this in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a>, but the query system talks to the containers here. It asks them what data they need. Each container passes off a query fragment which specifies the data its component needs.</p>\n<p>The query system stitches together the full query out of all of these fragments.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*QYJ2_LfrXe-jEB14TuvBRA.png\"></figure><h4>Step 4: Trimming down the query and queuing it up</h4>\n<p>As we saw in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a>, the query system removes pending requests from the query. Then it adds the query to the queue of requests for the network layer to send out (and also adds it to its own list of pending requests).</p>\n<p><em>Note: things start to go a little asynchronous here. I don’t have a good way to show this in the diagrams.</em></p>\n<p>The query system is done with it’s work for now. It queues up a message for the Relay Renderer with the ready state. But first, the network layer needs to do it’s job…</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*IpjexbquNEY2JoqC11EoCg.png\"></figure><h4>Step 5: Sending the query to the GraphQL server</h4>\n<p>The network layer picks up the queue of requests that the query tracker left for it. It sends the requests off to the GraphQL server.</p>\n<p>The network layer has nothing else to do ‘til the server responds. It lets the rest of the system do its thing while it waits.</p>\n<p>The message that the query system put in the queue is sent. The Relay Renderer gets the ready state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*mAP5QUoxZ5mwM_HC5lKmYw.png\"></figure><h4>Step 6: Getting the data back and writing it to the cache</h4>\n<p>The network layer hears back from the GraphQL server. It transforms the response to JSON. Then the query system picks it up and passes it off to the store. The store adds it to the local cache.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*mNbA1Roku_1J3m0CUyEkUw.png\"></figure><h4>Step 7: Notifying the renderer</h4>\n<p>Once the data is written to the cache, the query system is notified. It sends out the message to Relay Renderer with a new ready state, letting the Renderer know that the cache is primed and ready to go.</p>\n<p>Relay Renderer will then prepare an object that the containers can use to get their data from the store. It calls <em>setState()</em>, passing this object down to the containers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*K0-x2byai3EbkSDKaFKdBA.png\"></figure><h4>Step 8: Getting the data from the store to the UI</h4>\n<p>Using the object that Relay Renderer passed down, the container will set up a “resolver”. It will use the resolver to get its data from the store.</p>\n<p><em>Note: This is handled automatically in the container prototype’s </em>componentWillMount()<em> implementation.</em></p>\n<p>During this process, the store also sets up some observers. These observers will notify the resolver, which will notify the container, whenever this data has changed.</p>\n<p>Now that the container has the data, it calls <em>setState()</em> to pass it down to the component.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*pr2xCXzWWM1Bnpl6inQYlw.png\"></figure><p>So that’s how I think about all the different parts of Relay. Hope it helps!</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IrgHurBjQbg\">Relay: An Application Framework for React</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Pxdgu2XIAAg\">Scaling UI Development with Relay</a></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=aef7d819a8ed\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-4-aef7d819a8ed\">A cartoon guide to Facebook’s Relay, part 4</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GZx2kIRuPIJbmum6yYrTzA.gif\"></figure><p>So far you’ve seen how:</p>\n<ol>\n<li>Relay lets you say what data you need with GraphQL in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5\">part 1</a>\n</li>\n<li>Relay fetches data from the server in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59\">part 2</a>\n</li>\n<li>Relay syncs changes back up to the server in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670\">part 3</a>\n</li>\n</ol>\n<p>Now let’s see how all the different parts work together.</p>\n<h3>Caveat: this is only an approximation</h3>\n<p>In the cartoons up until now the scale of the diagrams has been 1:1… each arrow has (pretty much) represented a single function call.</p>\n<p>For these diagrams, the scale is closer to 1:100. This is because Relay is doing so much for you.</p>\n<p>Flux is a pattern. Relay is a framework. Flux just gives you guidelines on how to structure your application. Relay gives you concrete functionality. And lots of it.</p>\n<p>This means that the number of different parts in the system has ballooned.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*APMinvfY_aKeypSFA0To7g.png\"></figure><p>From the diagrams, it could look like implementing something with Relay requires a lot more work. The truth is, these extra characters take care of a lot of work for you. They are responsible for the magic.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*qPgvIxYs06P7k2DfNGvXiA.png\"><figcaption>Magic!</figcaption></figure><p>You don’t really need to know every detail of what they do. In fact, there’s only a small number of parts that you even need to be aware of.</p>\n<p>But cracking things open and seeing how they work is the fun part! So I’m going to try to give you a rough approximation of Relay’s inner workings.</p>\n<h3>The chorus line of characters</h3>\n<p>Even leaving out some of the lesser cast members, there are still a bunch of them. In my head, I divide them into 4 groups.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*XCwD3sllb682KhwFpy-cYQ.png\"></figure><h4>The user interface</h4>\n<p>The user interface takes the data from the system and makes it understandable to the user. It also gives the user a way to change that data. It takes user input and turns it into something the system understands.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*AfR-MwAl1WdGBkOzy0USRA.png\"></figure><p>The parts of the user interface are:</p>\n<p><strong>The root container </strong>— Kind of like the root component in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.y9y398wyc\">Redux</a>, the root container is a CEO. It chooses the top level component to use for the page. It also tells the app where in the graph to start the query. But after that, it’s pretty hands off.</p>\n<p><strong>Containers </strong>—<strong> </strong>The container is like a project manager for the component. It has a list of all of the data the component needs to do its job. The container is on top of getting the data from the rest of the system. This allows the component to focus on its job.</p>\n<p><strong>Components</strong> — A component in Relay is pretty much the same as it is in Flux. It is a presenter. It just knows how to format data into output that people understand (via HTML).</p>\n<p><strong>Relay Renderer</strong> — In some ways, the Relay Renderer is like the view layer binding from Redux. Like an IT department, it hooks up the container to the store.</p>\n<p><strong>Mutations</strong> —You saw mutations in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670#.uzi8nc59z\">part 3</a>. They are like action creators in Flux, but they do more. They provide blueprints for the mutation system to follow for different user changes.</p>\n<h4>Data storage</h4>\n<p>Data storage is handled by the store. Even though I’m only representing it as one character here, there are many different objects involved.</p>\n<p>The UI talks to it whenever it wants data. It works with the query and mutation systems to make sure it has the data that the UI needs. The store also has a notification system. Each component gets custom-tailored updates when data it uses changes. The store handles all of the details of wiring up these notifications, so you don’t have to think about it.</p>\n<h4>The query/mutation systems</h4>\n<p>The query and mutation systems prepare queries. They also keep track of what queries have gone out and what data needs to come in for a query to be complete. You met them in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a> and <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670#.uzi8nc59z\">part 3</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*980G74IU-tbd0JuhpPPKNQ.png\"></figure><h4>The cloud</h4>\n<p>Two characters sit on either side of the cloud: the server on one side and the network layer (which is on the client) on the other.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*-tiGTyGsbc8KVsCQcn8APg.png\"></figure><p><strong>The server </strong>— As you saw in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5#.ignn4bn99\">part 1</a>, the GraphQL server is like a librarian. It isn’t the library; it doesn’t actually store the information. You tell the GraphQL server what information you need, and it figures out where to go in the stacks to get that information for you.</p>\n<p><strong>The network layer</strong>—The network layer manages all communication with the server. It is like an operator in The Matrix. It is responsible for getting requests into the cloud and making sure responses get out of the cloud. If the response doesn’t come out of the cloud correctly, the operator will retry twice before pulling the plug. It also handles errors.</p>\n<h3>The first render</h3>\n<p>Let’s see what happens when your app is first loaded.</p>\n<h4>Step 1: Starting the process</h4>\n<p>When the page is loaded, React starts rendering. The first thing it reaches is the root container. The root container passes off responsibility to Relay Renderer.</p>\n<p>Relay Renderer is in charge of making sure the data is available to the UI. But because the app isn’t mounted, it knows that none of this data is available. It tells the store to start priming the cache.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*oMdXn8jKuvPB5YdaWn2u5A.png\"></figure><h4>Step 2: Priming the cache</h4>\n<p>The store needs to know what data to get for the cache. Relay Renderer figures out what the starting point for the query is (the query root) and passes it to the store. It also gives the store a callback.</p>\n<p>The store passes those off to the query system. Then the query system works with the store to figure out what data is already in the cache. We looked at this in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*_VV4gE4TzRHSxIejz7fJ3g.png\"></figure><h4>Step 3: Building the query</h4>\n<p>The query system builds the query.</p>\n<p>I didn’t show this in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a>, but the query system talks to the containers here. It asks them what data they need. Each container passes off a query fragment which specifies the data its component needs.</p>\n<p>The query system stitches together the full query out of all of these fragments.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*QYJ2_LfrXe-jEB14TuvBRA.png\"></figure><h4>Step 4: Trimming down the query and queuing it up</h4>\n<p>As we saw in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59#.iigb26u49\">part 2</a>, the query system removes pending requests from the query. Then it adds the query to the queue of requests for the network layer to send out (and also adds it to its own list of pending requests).</p>\n<p><em>Note: things start to go a little asynchronous here. I don’t have a good way to show this in the diagrams.</em></p>\n<p>The query system is done with it’s work for now. It queues up a message for the Relay Renderer with the ready state. But first, the network layer needs to do it’s job…</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*IpjexbquNEY2JoqC11EoCg.png\"></figure><h4>Step 5: Sending the query to the GraphQL server</h4>\n<p>The network layer picks up the queue of requests that the query tracker left for it. It sends the requests off to the GraphQL server.</p>\n<p>The network layer has nothing else to do ‘til the server responds. It lets the rest of the system do its thing while it waits.</p>\n<p>The message that the query system put in the queue is sent. The Relay Renderer gets the ready state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*mAP5QUoxZ5mwM_HC5lKmYw.png\"></figure><h4>Step 6: Getting the data back and writing it to the cache</h4>\n<p>The network layer hears back from the GraphQL server. It transforms the response to JSON. Then the query system picks it up and passes it off to the store. The store adds it to the local cache.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*mNbA1Roku_1J3m0CUyEkUw.png\"></figure><h4>Step 7: Notifying the renderer</h4>\n<p>Once the data is written to the cache, the query system is notified. It sends out the message to Relay Renderer with a new ready state, letting the Renderer know that the cache is primed and ready to go.</p>\n<p>Relay Renderer will then prepare an object that the containers can use to get their data from the store. It calls <em>setState()</em>, passing this object down to the containers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*K0-x2byai3EbkSDKaFKdBA.png\"></figure><h4>Step 8: Getting the data from the store to the UI</h4>\n<p>Using the object that Relay Renderer passed down, the container will set up a “resolver”. It will use the resolver to get its data from the store.</p>\n<p><em>Note: This is handled automatically in the container prototype’s </em>componentWillMount()<em> implementation.</em></p>\n<p>During this process, the store also sets up some observers. These observers will notify the resolver, which will notify the container, whenever this data has changed.</p>\n<p>Now that the container has the data, it calls <em>setState()</em> to pass it down to the component.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*pr2xCXzWWM1Bnpl6inQYlw.png\"></figure><p>So that’s how I think about all the different parts of Relay. Hope it helps!</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IrgHurBjQbg\">Relay: An Application Framework for React</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Pxdgu2XIAAg\">Scaling UI Development with Relay</a></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=aef7d819a8ed\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-4-aef7d819a8ed\">A cartoon guide to Facebook’s Relay, part 4</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["javascript","react","tech"],"color":"blue","category":"Code Cartoons -","date":"2016-01-27 13:47:35","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"A cartoon guide to Facebook’s Relay, part 3","pubDate":"2016-01-25 16:31:18","link":"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670?source=rss----7475df8cb3e5---4","guid":"https://medium.com/p/9d8fcf8db670","author":"Lin Clark","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*KaoKlN1wO7lqMbGsTajA0Q.gif","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KaoKlN1wO7lqMbGsTajA0Q.gif\"></figure><p>Relay is the same as Flux and Redux in a way. All three of them use objects to represent changes. When a change object comes through to the store, the store will make the change in the state. Then the store will notify the UI to update.</p>\n<p>Unlike Flux and Redux, Relay pushes the change up to the server, too.</p>\n<p>Sometimes changes aren’t simple, though. They can ripple out and have effects that aren’t so obvious.</p>\n<p>For example, take adding new content. It could have impacts on other parts of the graph, too.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*9f--En1SSimSHSF3OyoANA.png\"><figcaption>The thick outline indicates the part of the graph that is being used in the browser. The rest is only on the server.</figcaption></figure><h4>Balancing speed and consistency</h4>\n<p>How do you 1) show all of the changes, but 2) do it as quickly as possible?</p>\n<p>To show all the changes, you could just refetch the whole graph… but that would be slow. Or you could just fetch the one change you made… but then the data isn’t consistent with what’s on the server.</p>\n<p>Relay balances these two — speed and consistency. It does that by figuring out exactly what data it needs to update.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*ShpuhECZt9afTRsKmvHB8Q.png\"></figure><p>It will also make the change seem to happen faster by doing an “optimistic update”. This is where the app guesses what the new state will be before the server responds. When the server response does come in, it will make any necessary changes.</p>\n<p>Here’s the sequence of events:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*rXvgXaqrjnczaQ9rBnuFqw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*387bhD5MA1sdc2QgGPM6EA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*HcJ2yb4QCbHjk-7BcYeGlg.png\"></figure><p>1. Relay updates the local cache with what it <em>thinks</em> the new state is going to be (an “optimistic update”… I’ll explain how it figures this out later).</p>\n<p>2. It sends up the mutation query to the server. It also sends a query graph that requests data from the server. Once the server makes the update, it will fill in that query graph and return it as the payload.</p>\n<p>3. The store will merge the payload into the graph it already has cached. If the optimistic update in step 1 was incorrect, those changes will be overwritten here.</p>\n<p>Relay manages all this by introducing another new system, the mutation system.</p>\n<h3>Introducing mutations &amp; the mutation system</h3>\n<p>Mutations are the Relay version of the actions you see in <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">Flux</a> or <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">Redux</a>. Instead of having an action type that comes from a list of constants, the Relay mutation has a name which comes from the list of mutations the server understands.</p>\n<p>A mutation object knows its mutation name. And, like an action creator, it knows how to prepare the input… the variables the server will need to make the change.</p>\n<p>But it does more than an action creator in Flux or Redux does.</p>\n<h4>The mutation</h4>\n<p>I think of the mutation as an architect. It provides a set of blueprints for different things.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*mwXoJeERRFgLt0C3wQM79Q.png\"></figure><p>It provides a blueprint for the fat query. This is a list of the fields that might change in response to the mutation. It can also provide a blueprint for optimistic updates.</p>\n<p>When data comes back from the server, it provides a blueprint for how the store’s data should change in response to the mutation. The blueprint guides the store in figuring out how to change fields or delete data.</p>\n<p>This set of blueprints is handed off to the mutation system.</p>\n<h4>The mutation system</h4>\n<p>The mutation system is like a contractor carrying out and directing the work on that set of blueprints.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*r23vgCYGYzwxRwQBwPTpiQ.png\"></figure><p>It takes the blueprint for the fat query and compares it to the graph of data that the app is currently using, called the tracked query. It figures out which data needs to be refreshed. If a property is in both graphs, it gets added to the mutation request.</p>\n<p><em>Note: The mutation defines this fat query, not the component. This means even if a seemingly unrelated component has made a change, if it impacts another component’s data, all of the changed data will still be fetched from the server. This is great because you get consistency without coupling components together.</em></p>\n<p>If the mutation has a blueprint for an optimistic update, it carries that out.</p>\n<h3>How the store and mutation system team up</h3>\n<p>Just as the store works with the query system for fetching data, it works with the mutation system for changing data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*bA2CJCYiC5VIRcg4vuYOjA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*GPlsJFRd7xhtf4HeWKoSqA.png\"></figure><p>1. The UI passes a mutation object to the store.</p>\n<p>2. The store passes the mutation to the mutation system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*j91QK_rfdtW6s7gWrSfaVg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*AbbOvM9NnblD3m4FfPBcNg.png\"></figure><p>3. The mutation system figures out what the optimistic update should be. It tells the store to update the cache with that data.</p>\n<p>4. The store writes the data and sets up a broadcast to fire later. That broadcast will let the UI know that there is new data to show.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*kuPB05Cwgk6nF5s-HuZusQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*jzO65_YACRDhVex2krNF5w.png\"></figure><p>5. The mutation system compares the fat and tracked queries to figure out the smallest bit of data that the server needs to send down. It sends the request, which includes the change to make and the query.</p>\n<p>6. The broadcast that the store set up in step 4 goes out. The UI requests the data that the optimistic update changed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Z9Kgg2ayY_aNLIaPMEc1uQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*F6RmjaDIxUe2GiyqmKeckg.png\"></figure><p>7. The mutation system receives the payload. It passes it to the store, which updates the cache. Then it queues up another broadcast to the UI.</p>\n<p>8. The UI gets the new data from the store.</p>\n<p>So that’s how I think of mutations and data syncing in Relay. Hope it helps!</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<h3><strong><em>Coming up next…</em></strong></h3>\n<p>See how <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-4-aef7d819a8ed#.d24jmwxgd\">it all fits together in part 4</a>.</p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9d8fcf8db670\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670\">A cartoon guide to Facebook’s Relay, part 3</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KaoKlN1wO7lqMbGsTajA0Q.gif\"></figure><p>Relay is the same as Flux and Redux in a way. All three of them use objects to represent changes. When a change object comes through to the store, the store will make the change in the state. Then the store will notify the UI to update.</p>\n<p>Unlike Flux and Redux, Relay pushes the change up to the server, too.</p>\n<p>Sometimes changes aren’t simple, though. They can ripple out and have effects that aren’t so obvious.</p>\n<p>For example, take adding new content. It could have impacts on other parts of the graph, too.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*9f--En1SSimSHSF3OyoANA.png\"><figcaption>The thick outline indicates the part of the graph that is being used in the browser. The rest is only on the server.</figcaption></figure><h4>Balancing speed and consistency</h4>\n<p>How do you 1) show all of the changes, but 2) do it as quickly as possible?</p>\n<p>To show all the changes, you could just refetch the whole graph… but that would be slow. Or you could just fetch the one change you made… but then the data isn’t consistent with what’s on the server.</p>\n<p>Relay balances these two — speed and consistency. It does that by figuring out exactly what data it needs to update.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*ShpuhECZt9afTRsKmvHB8Q.png\"></figure><p>It will also make the change seem to happen faster by doing an “optimistic update”. This is where the app guesses what the new state will be before the server responds. When the server response does come in, it will make any necessary changes.</p>\n<p>Here’s the sequence of events:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*rXvgXaqrjnczaQ9rBnuFqw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*387bhD5MA1sdc2QgGPM6EA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*HcJ2yb4QCbHjk-7BcYeGlg.png\"></figure><p>1. Relay updates the local cache with what it <em>thinks</em> the new state is going to be (an “optimistic update”… I’ll explain how it figures this out later).</p>\n<p>2. It sends up the mutation query to the server. It also sends a query graph that requests data from the server. Once the server makes the update, it will fill in that query graph and return it as the payload.</p>\n<p>3. The store will merge the payload into the graph it already has cached. If the optimistic update in step 1 was incorrect, those changes will be overwritten here.</p>\n<p>Relay manages all this by introducing another new system, the mutation system.</p>\n<h3>Introducing mutations &amp; the mutation system</h3>\n<p>Mutations are the Relay version of the actions you see in <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">Flux</a> or <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">Redux</a>. Instead of having an action type that comes from a list of constants, the Relay mutation has a name which comes from the list of mutations the server understands.</p>\n<p>A mutation object knows its mutation name. And, like an action creator, it knows how to prepare the input… the variables the server will need to make the change.</p>\n<p>But it does more than an action creator in Flux or Redux does.</p>\n<h4>The mutation</h4>\n<p>I think of the mutation as an architect. It provides a set of blueprints for different things.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*mwXoJeERRFgLt0C3wQM79Q.png\"></figure><p>It provides a blueprint for the fat query. This is a list of the fields that might change in response to the mutation. It can also provide a blueprint for optimistic updates.</p>\n<p>When data comes back from the server, it provides a blueprint for how the store’s data should change in response to the mutation. The blueprint guides the store in figuring out how to change fields or delete data.</p>\n<p>This set of blueprints is handed off to the mutation system.</p>\n<h4>The mutation system</h4>\n<p>The mutation system is like a contractor carrying out and directing the work on that set of blueprints.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*r23vgCYGYzwxRwQBwPTpiQ.png\"></figure><p>It takes the blueprint for the fat query and compares it to the graph of data that the app is currently using, called the tracked query. It figures out which data needs to be refreshed. If a property is in both graphs, it gets added to the mutation request.</p>\n<p><em>Note: The mutation defines this fat query, not the component. This means even if a seemingly unrelated component has made a change, if it impacts another component’s data, all of the changed data will still be fetched from the server. This is great because you get consistency without coupling components together.</em></p>\n<p>If the mutation has a blueprint for an optimistic update, it carries that out.</p>\n<h3>How the store and mutation system team up</h3>\n<p>Just as the store works with the query system for fetching data, it works with the mutation system for changing data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*bA2CJCYiC5VIRcg4vuYOjA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*GPlsJFRd7xhtf4HeWKoSqA.png\"></figure><p>1. The UI passes a mutation object to the store.</p>\n<p>2. The store passes the mutation to the mutation system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*j91QK_rfdtW6s7gWrSfaVg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*AbbOvM9NnblD3m4FfPBcNg.png\"></figure><p>3. The mutation system figures out what the optimistic update should be. It tells the store to update the cache with that data.</p>\n<p>4. The store writes the data and sets up a broadcast to fire later. That broadcast will let the UI know that there is new data to show.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*kuPB05Cwgk6nF5s-HuZusQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*jzO65_YACRDhVex2krNF5w.png\"></figure><p>5. The mutation system compares the fat and tracked queries to figure out the smallest bit of data that the server needs to send down. It sends the request, which includes the change to make and the query.</p>\n<p>6. The broadcast that the store set up in step 4 goes out. The UI requests the data that the optimistic update changed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Z9Kgg2ayY_aNLIaPMEc1uQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*F6RmjaDIxUe2GiyqmKeckg.png\"></figure><p>7. The mutation system receives the payload. It passes it to the store, which updates the cache. Then it queues up another broadcast to the UI.</p>\n<p>8. The UI gets the new data from the store.</p>\n<p>So that’s how I think of mutations and data syncing in Relay. Hope it helps!</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<h3><strong><em>Coming up next…</em></strong></h3>\n<p>See how <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-4-aef7d819a8ed#.d24jmwxgd\">it all fits together in part 4</a>.</p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9d8fcf8db670\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670\">A cartoon guide to Facebook’s Relay, part 3</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["tech","javascript","react"],"color":"blue","category":"Code Cartoons -","date":"2016-01-25 16:31:18","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"A cartoon guide to Facebook’s Relay, part 2","pubDate":"2016-01-22 13:57:03","link":"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59?source=rss----7475df8cb3e5---4","guid":"https://medium.com/p/d4a2435aee59","author":"Lin Clark","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*kRnCI6fxor6U2KNJrtEJZA.gif","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kRnCI6fxor6U2KNJrtEJZA.gif\"></figure><p>GraphQL gives you a way to say what part of a graph you need, as you saw in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5\">part 1</a>.</p>\n<p>Relay makes the connection between the graph in the cloud and the graph that the user is interacting with on the page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*YvKb_HfICH_xnKQhNxyvVQ.png\"></figure><p>Relay can automate:</p>\n<ol>\n<li>downloading the bits of the graph that you need and caching them</li>\n<li>making future requests for data smaller</li>\n<li>figuring out which parts of the graph you really need right now, and which you can wait for</li>\n</ol>\n<p>It also automates syncing any changes to the graph back up to the server. We’ll cover this in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670\">part 3</a>.</p>\n<h4>Downloading and caching</h4>\n<p>The UI doesn’t talk to the server directly. Instead, it gets all of the data from the store, which has a local cache of the data.</p>\n<p>When the page loads initially, the UI will ask the store to prime the cache. This will pull down the data from the server. Then the UI can do it’s first render.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dqCvF_8OnhWE29dgAwt77w.png\"><figcaption>(1) The request to the server (2) The response (3) UI renders the data</figcaption></figure><ol>\n<li>First, the system needs to figure out what data to get from the server. It gathers all of the query fragments from the components that will be shown. Then, it stitches those together into a single graph. That graph query is requested from the server.</li>\n<li>The server responds by filling in the part of the graph described by the query with the actual data. The data is added to the local cache.</li>\n<li>The UI gets a notification that the data is ready and in the cache (more about this below). The UI asks the store for the data and renders it.</li>\n</ol>\n<h4>Making queries smaller</h4>\n<p>Now we have data in the cache. Because of this, Relay can make future queries smaller.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FW-sIIMdJV8r1R9i63i_0Q.png\"><figcaption>(1) The initial query graph (2) The reduced query graph (3) The response and UI update</figcaption></figure><ol>\n<li>The system figures out what parts of the query it already has and what parts it needs.</li>\n<li>The part that is already cached is removed from the query. Then the reduced graph query is sent to the server.</li>\n<li>The little bit of the graph that was missing is returned from the server. The store merges it into the local cache. The UI is notified that the data is in, and it asks the store for the data.</li>\n</ol>\n<h4>Deferring queries</h4>\n<p>Sometimes, you have two kinds of data needs. Some data needs to be fetched immediately to render the page, and other data that can come in later.</p>\n<p>For example, on a news article the article body needs to be rendered immediately. But comments, which aren’t really that important, can be rendered a few seconds later.</p>\n<p>In theory, Relay makes it possible to split up the queries. When the required data comes in, the page will render. When the deferred data comes in, it will be added to the page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UtgxJ05bj92wPtqGLGpaCw.png\"><figcaption>(1) The split query graph (2) The first response and UI render (3) The second response and UI update</figcaption></figure><ol>\n<li>The query graph is split up based on whether the properties are deferred. The deferred query is marked as dependent on the required query.</li>\n<li>The server responds with the required data. The UI renders the page with that data.</li>\n<li>The server responds with the deferred data. The UI updates the page with the data.</li>\n</ol>\n<p><em>Note: While Relay itself can handle deferred queries, there is a piece of the puzzle missing. Facebook’s GraphQL server can handle dependencies between queries, but for simplicity’s sake they didn’t add it to the GraphQL spec. They do plan to make it possible though, and you can </em><a href=\"https://github.com/facebook/relay/issues/288\"><em>follow the issue</em></a><em>.</em></p>\n<p>To do these things, Relay introduces a new character — the query system.</p>\n<h3>Introducing the query system</h3>\n<p>The query system is in charge of figuring out what data to fetch. It works together with the store to figure out the smallest queries that it can send.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*0YTeXXUux1iTQI7o_80v4w.png\"></figure><p>I think of the query system as a bike messenger who’s obsessed with efficiency. Before sending a query, it checks what data is in the store. It won’t ask the server for data the store already has.</p>\n<p>It will even go above and beyond to make the query smaller. It checks what data is supposed to come in from pending requests. Instead of sending a concurrent request for the same data, it will just clip away parts that it expects to come in from the pending requests.</p>\n<h3>How the store and query system team up</h3>\n<p>The query system is just a small part of Relay. I’ll cover the rest of the characters later. But I think it’s helpful to get a detailed view of how the query system works with the store to automate data fetching, and how the two talk with the server and the UI.</p>\n<p><em>Note: Everything in this cartoon is automatically handled by Relay. So you don’t technically need to know how this works. But it’s more fun when you do!</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*LBbmRc3jfKMptW5OKQQn0A.png\"></figure><p>Here’s an example of the interaction between these two.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*uJxu9d8HE5CZtXMoT-fL3g.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*MrqYtlCNvnUkJcDi0ZwwAQ.png\"></figure><p>1. The UI asks the store to fill up the cache. Specifically, it asks for the data that is needed for the first render.</p>\n<p>2. The store delegates this to the query system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*3aGYCGJ16v0QmLn9puZpMA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*7GvV5kBPJBx3FwCOV8-Z0w.png\"></figure><p>3. The query system tries to make the query as small as possible.</p>\n<p>4. The query system sends the query off. It adds it to the list of requests that are pending.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*h9wg74wjwD9F-IRlzQ3thA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*OrOy2BrTlS3ydwUkih7f-A.png\"></figure><p>5. In the meantime, the query system wants to let the UI know what’s going on.</p>\n<p>It sends a ready state message to the UI (it does this with a callback that the UI passed to the store, and the store passed to it). In the ready state message, the ready property is set to false since the data hasn’t come in yet.</p>\n<p>6. When the query results come back, the query system sends them to the store. It also removes the request from the list of pending requests. The store adds the results to the local cache.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*-jKEqrO71n9giuypZodhzg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*ph4k0Qh7mSm286wzLv7QVw.png\"></figure><p>7. The query system lets the UI know that it can get the data from the store.</p>\n<p>8. The UI asks the store for the data. The store gives it the data and also sets up some observers. These will be used to target updates to specific components when new data comes in.</p>\n<p>So that’s how I think of data fetching in Relay. Hope it helps!</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<h3>Coming up next</h3>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670#.pqb0zavx0\">Syncing changes back up to the server</a> with Relay.</p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d4a2435aee59\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59\">A cartoon guide to Facebook’s Relay, part 2</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kRnCI6fxor6U2KNJrtEJZA.gif\"></figure><p>GraphQL gives you a way to say what part of a graph you need, as you saw in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5\">part 1</a>.</p>\n<p>Relay makes the connection between the graph in the cloud and the graph that the user is interacting with on the page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*YvKb_HfICH_xnKQhNxyvVQ.png\"></figure><p>Relay can automate:</p>\n<ol>\n<li>downloading the bits of the graph that you need and caching them</li>\n<li>making future requests for data smaller</li>\n<li>figuring out which parts of the graph you really need right now, and which you can wait for</li>\n</ol>\n<p>It also automates syncing any changes to the graph back up to the server. We’ll cover this in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670\">part 3</a>.</p>\n<h4>Downloading and caching</h4>\n<p>The UI doesn’t talk to the server directly. Instead, it gets all of the data from the store, which has a local cache of the data.</p>\n<p>When the page loads initially, the UI will ask the store to prime the cache. This will pull down the data from the server. Then the UI can do it’s first render.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dqCvF_8OnhWE29dgAwt77w.png\"><figcaption>(1) The request to the server (2) The response (3) UI renders the data</figcaption></figure><ol>\n<li>First, the system needs to figure out what data to get from the server. It gathers all of the query fragments from the components that will be shown. Then, it stitches those together into a single graph. That graph query is requested from the server.</li>\n<li>The server responds by filling in the part of the graph described by the query with the actual data. The data is added to the local cache.</li>\n<li>The UI gets a notification that the data is ready and in the cache (more about this below). The UI asks the store for the data and renders it.</li>\n</ol>\n<h4>Making queries smaller</h4>\n<p>Now we have data in the cache. Because of this, Relay can make future queries smaller.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FW-sIIMdJV8r1R9i63i_0Q.png\"><figcaption>(1) The initial query graph (2) The reduced query graph (3) The response and UI update</figcaption></figure><ol>\n<li>The system figures out what parts of the query it already has and what parts it needs.</li>\n<li>The part that is already cached is removed from the query. Then the reduced graph query is sent to the server.</li>\n<li>The little bit of the graph that was missing is returned from the server. The store merges it into the local cache. The UI is notified that the data is in, and it asks the store for the data.</li>\n</ol>\n<h4>Deferring queries</h4>\n<p>Sometimes, you have two kinds of data needs. Some data needs to be fetched immediately to render the page, and other data that can come in later.</p>\n<p>For example, on a news article the article body needs to be rendered immediately. But comments, which aren’t really that important, can be rendered a few seconds later.</p>\n<p>In theory, Relay makes it possible to split up the queries. When the required data comes in, the page will render. When the deferred data comes in, it will be added to the page.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UtgxJ05bj92wPtqGLGpaCw.png\"><figcaption>(1) The split query graph (2) The first response and UI render (3) The second response and UI update</figcaption></figure><ol>\n<li>The query graph is split up based on whether the properties are deferred. The deferred query is marked as dependent on the required query.</li>\n<li>The server responds with the required data. The UI renders the page with that data.</li>\n<li>The server responds with the deferred data. The UI updates the page with the data.</li>\n</ol>\n<p><em>Note: While Relay itself can handle deferred queries, there is a piece of the puzzle missing. Facebook’s GraphQL server can handle dependencies between queries, but for simplicity’s sake they didn’t add it to the GraphQL spec. They do plan to make it possible though, and you can </em><a href=\"https://github.com/facebook/relay/issues/288\"><em>follow the issue</em></a><em>.</em></p>\n<p>To do these things, Relay introduces a new character — the query system.</p>\n<h3>Introducing the query system</h3>\n<p>The query system is in charge of figuring out what data to fetch. It works together with the store to figure out the smallest queries that it can send.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*0YTeXXUux1iTQI7o_80v4w.png\"></figure><p>I think of the query system as a bike messenger who’s obsessed with efficiency. Before sending a query, it checks what data is in the store. It won’t ask the server for data the store already has.</p>\n<p>It will even go above and beyond to make the query smaller. It checks what data is supposed to come in from pending requests. Instead of sending a concurrent request for the same data, it will just clip away parts that it expects to come in from the pending requests.</p>\n<h3>How the store and query system team up</h3>\n<p>The query system is just a small part of Relay. I’ll cover the rest of the characters later. But I think it’s helpful to get a detailed view of how the query system works with the store to automate data fetching, and how the two talk with the server and the UI.</p>\n<p><em>Note: Everything in this cartoon is automatically handled by Relay. So you don’t technically need to know how this works. But it’s more fun when you do!</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*LBbmRc3jfKMptW5OKQQn0A.png\"></figure><p>Here’s an example of the interaction between these two.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*uJxu9d8HE5CZtXMoT-fL3g.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*MrqYtlCNvnUkJcDi0ZwwAQ.png\"></figure><p>1. The UI asks the store to fill up the cache. Specifically, it asks for the data that is needed for the first render.</p>\n<p>2. The store delegates this to the query system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*3aGYCGJ16v0QmLn9puZpMA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*7GvV5kBPJBx3FwCOV8-Z0w.png\"></figure><p>3. The query system tries to make the query as small as possible.</p>\n<p>4. The query system sends the query off. It adds it to the list of requests that are pending.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*h9wg74wjwD9F-IRlzQ3thA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*OrOy2BrTlS3ydwUkih7f-A.png\"></figure><p>5. In the meantime, the query system wants to let the UI know what’s going on.</p>\n<p>It sends a ready state message to the UI (it does this with a callback that the UI passed to the store, and the store passed to it). In the ready state message, the ready property is set to false since the data hasn’t come in yet.</p>\n<p>6. When the query results come back, the query system sends them to the store. It also removes the request from the list of pending requests. The store adds the results to the local cache.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*-jKEqrO71n9giuypZodhzg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*ph4k0Qh7mSm286wzLv7QVw.png\"></figure><p>7. The query system lets the UI know that it can get the data from the store.</p>\n<p>8. The UI asks the store for the data. The store gives it the data and also sets up some observers. These will be used to target updates to specific components when new data comes in.</p>\n<p>So that’s how I think of data fetching in Relay. Hope it helps!</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<h3>Coming up next</h3>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-3-9d8fcf8db670#.pqb0zavx0\">Syncing changes back up to the server</a> with Relay.</p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n</ol>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d4a2435aee59\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59\">A cartoon guide to Facebook’s Relay, part 2</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["react","tech","javascript"],"color":"blue","category":"Code Cartoons -","date":"2016-01-22 13:57:03","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"A cartoon guide to Facebook’s Relay, part 1","pubDate":"2016-01-20 14:06:06","link":"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5?source=rss----7475df8cb3e5---4","guid":"https://medium.com/p/3ec1a127bca5","author":"Lin Clark","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*7ogNpAoyFsNKsdI5OePz3g.gif","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7ogNpAoyFsNKsdI5OePz3g.gif\"></figure><p>The last two cartoons covered <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">Flux</a> and <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">Redux</a>. Those are data handling patterns to keep your UI in sync. When a user interaction happens, they update the state and trigger rerendering.</p>\n<p>But where’s the cloud? How do you get the data that a component needs from a server, and then update the server when the user makes changes?</p>\n<p>The Flux docs don’t tell you were to put this. Even at Facebook, different teams add it in <a href=\"https://www.youtube.com/watch?v=LTj4O7WJJ98\">different parts</a> of the app. Redux gives you a <a href=\"http://rackt.org/redux/docs/advanced/AsyncActions.html\">single place</a> to do it (middleware), but it still requires effort to wire it up.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*NHDDxO6XCae_E_MIYTwTTQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*082Zf3VMDP-sw1_2AVp-Uw.png\"><figcaption>Where’s the cloud? There’s no set spot in Flux (left). Redux (right) uses middleware.</figcaption></figure><p>Relay takes care of this problem. It makes it easy to fetch data from the server as part of your data flow. In order to do this, Relay needs to know what data each component needs from the server. This is where GraphQL comes in.</p>\n<p>So let’s look at GraphQL. But first…</p>\n<h3>What is a graph?</h3>\n<p>You might think of a graph as the same thing as a chart, or the graphs you made on a graphing calculator. That’s not the kind of graph we’re talking about.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*PN4C-ibbH6VYgB2KGqZ4AQ.png\"></figure><p>The kind of graph we’re talking about is a group of things that are connected to each other by relationships. These things and relationships have special names in graph theory. The things are called nodes and the relationships between them are called edges.</p>\n<p>If that sounds unfamiliar, just think of a property chain. For example, user.friend[0].attending[0]. That’ another way of thinking about the same graph.</p>\n<p>If you look at an app like Facebook, a graph is the most natural way to think about the data. There are lots of things, and lots of relationships between those things.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Z2E7qE6WjVxticHSfjii4g.png\"></figure><p>When you pull up a page on Facebook, it’s showing you a particular view of that graph. And each component on the page shows you a small slice of the graph.</p>\n<p>So how do you make the connection between a component and the small section of the graph that it displays?</p>\n<p>This is what GraphQL does. It makes it possible to indicate the small section of the graph that you want. This small section is called a fragment. The fragments combine to create a larger query.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*LNgLStpmUDAqW2m5CvNgBQ.png\"></figure><p>Relay piggybacks on this capability—being able to combine multiple fragments into a larger query — to solve a problem.</p>\n<h3>The problem</h3>\n<p>So what is the problem that Relay solves using GraphQL?</p>\n<p>When you build React components, it’s easy to reuse them across different parts of your site. This is one of the main benefits of React. It’s called composability.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*bORAT4s4OVuvNcX8Qk6sew.png\"></figure><p>If your component needs to use data from the server, though, it gets harder to just drop a component in place. The server needs to know what properties the component needs. In many apps, this will be hard-coded on the server. There will be a URL (called an endpoint) that passes down data for that particular view. The endpoint code will know exactly what properties its view needs.</p>\n<p>The problem here is that whenever you add (or remove) properties from the component, you have to change the server code too. This is called coupling; when you change one, you have to change the other, too.</p>\n<p>Because you have to manually keep these two in sync, it makes bugs and obsolete code more likely.</p>\n<ul>\n<li>Bugs come from underfetching data. You don’t pull down the properties that you need for a component because you forgot to add them to the server.</li>\n<li>Obsolete code results in overfetching data. For example, let’s say you remove a component from the tree. Do you delete its properties from the server response? How can you be sure another component doesn’t use that endpoint and need those properties? Instead, it’s better to just keep them in the response… but then you have a lot of cruft lying around.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*W-Gpb1voGJ8Km2tg19xgzw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*WkbMDnWMWwg1-eqLNMpr0w.png\"></figure><h3>The solution: declarative data fetching</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*RkASoUKbg9vRrn6HGjKVEg.png\"></figure><p>With GraphQL, you don’t hard-code the server with the list of properties that your view needs. Instead, the component provides a list of what it needs to the server.</p>\n<p>This list is combined with the lists from other components. The structure of the combined list is a tree, just like the component tree. It gets handed off to the endpoint. There’s only one endpoint and it handles all requests.</p>\n<p>The nice thing about this is that it localizes changes. When you need to add or remove a property, you only need to change the component… not the server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*S9q6g-juaMU8P6Jzr1M1Mw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*2eicaDu-YdFSUMk8puENlA.png\"></figure><h3>What GraphQL looks like</h3>\n<p>To make this work, each component needs to provide the list of properties that it needs from the server. This is the query fragment. Relay will figure out which components are going to render and will get the query fragments for them. It will compile these into a single query — a consolidated list of properties that it needs from the server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Q06oM_W7ut-FTPEw_WynrQ.png\"></figure><p>This turns into a query like this:</p>\n<pre>query {<br>  user(id: 5) {<br>    friends(first: 3) {<br>      picture<br>      name<br>      location<br>    }<br>  }<br>}</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*vy212Nf7CtOCgodDJ9sgNQ.png\"></figure><p>This consolidated query is kind of like a questionnaire. The client has laid out all of the questions it wants the server to answer, and the server just needs to fill in the blanks.</p>\n<p>One important thing to note: GraphQL doesn’t actually store your data. It just gives you a language to ask for data.</p>\n<p>If your database is the public library, then GraphQL would be the librarian. It just listens to your request and figures out what you want. Then it goes around to the different bookshelves and finds the data that you asked for. The bookshelves in this analogy are the tables of your database, or whatever you are holding your data in.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*fRpthdNa2ON6_c6UEmNGIw.png\"></figure><p>This means you can use GraphQL on top of all sorts of different backends; an existing MySQL database, a NoSQL database like MongoDB, or even on top of regular text files.</p>\n<p>For each property in the query, the server will have a <em>resolve()</em> function. This is where GraphQL figures out the value and fills in that question on the questionnaire, computing a value or querying a database.</p>\n<p>There’s a lot more to GraphQL, but this is enough to get started with Relay. Let me know <a href=\"http://twitter.com/codecartoons\">on Twitter</a> if you’d like to see a GraphQL deep dive in the future.</p>\n<h3>Coming up next…</h3>\n<p>There’s more work to do than just splitting up the query. That’s where Relay comes in. I’ll cover that in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59\">part 2</a>.</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n</ol>\n<p><em>Thank you to all of my reviewers on this series: </em><a href=\"https://twitter.com/kentcdodds\"><em>Kent C. Dodds</em></a><em>, </em><a href=\"https://twitter.com/leeb\"><em>Lee Byron</em></a><em>, </em><a href=\"https://twitter.com/steveluscher\"><em>Steven Luscher</em></a><em>, </em><a href=\"https://twitter.com/yungsters\"><em>Tim Yung</em></a><em>, and </em><a href=\"https://twitter.com/thefubhy\"><em>Sebastian Siemssen</em></a><em>.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3ec1a127bca5\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5\">A cartoon guide to Facebook’s Relay, part 1</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7ogNpAoyFsNKsdI5OePz3g.gif\"></figure><p>The last two cartoons covered <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">Flux</a> and <a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">Redux</a>. Those are data handling patterns to keep your UI in sync. When a user interaction happens, they update the state and trigger rerendering.</p>\n<p>But where’s the cloud? How do you get the data that a component needs from a server, and then update the server when the user makes changes?</p>\n<p>The Flux docs don’t tell you were to put this. Even at Facebook, different teams add it in <a href=\"https://www.youtube.com/watch?v=LTj4O7WJJ98\">different parts</a> of the app. Redux gives you a <a href=\"http://rackt.org/redux/docs/advanced/AsyncActions.html\">single place</a> to do it (middleware), but it still requires effort to wire it up.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*NHDDxO6XCae_E_MIYTwTTQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*082Zf3VMDP-sw1_2AVp-Uw.png\"><figcaption>Where’s the cloud? There’s no set spot in Flux (left). Redux (right) uses middleware.</figcaption></figure><p>Relay takes care of this problem. It makes it easy to fetch data from the server as part of your data flow. In order to do this, Relay needs to know what data each component needs from the server. This is where GraphQL comes in.</p>\n<p>So let’s look at GraphQL. But first…</p>\n<h3>What is a graph?</h3>\n<p>You might think of a graph as the same thing as a chart, or the graphs you made on a graphing calculator. That’s not the kind of graph we’re talking about.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*PN4C-ibbH6VYgB2KGqZ4AQ.png\"></figure><p>The kind of graph we’re talking about is a group of things that are connected to each other by relationships. These things and relationships have special names in graph theory. The things are called nodes and the relationships between them are called edges.</p>\n<p>If that sounds unfamiliar, just think of a property chain. For example, user.friend[0].attending[0]. That’ another way of thinking about the same graph.</p>\n<p>If you look at an app like Facebook, a graph is the most natural way to think about the data. There are lots of things, and lots of relationships between those things.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Z2E7qE6WjVxticHSfjii4g.png\"></figure><p>When you pull up a page on Facebook, it’s showing you a particular view of that graph. And each component on the page shows you a small slice of the graph.</p>\n<p>So how do you make the connection between a component and the small section of the graph that it displays?</p>\n<p>This is what GraphQL does. It makes it possible to indicate the small section of the graph that you want. This small section is called a fragment. The fragments combine to create a larger query.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*LNgLStpmUDAqW2m5CvNgBQ.png\"></figure><p>Relay piggybacks on this capability—being able to combine multiple fragments into a larger query — to solve a problem.</p>\n<h3>The problem</h3>\n<p>So what is the problem that Relay solves using GraphQL?</p>\n<p>When you build React components, it’s easy to reuse them across different parts of your site. This is one of the main benefits of React. It’s called composability.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*bORAT4s4OVuvNcX8Qk6sew.png\"></figure><p>If your component needs to use data from the server, though, it gets harder to just drop a component in place. The server needs to know what properties the component needs. In many apps, this will be hard-coded on the server. There will be a URL (called an endpoint) that passes down data for that particular view. The endpoint code will know exactly what properties its view needs.</p>\n<p>The problem here is that whenever you add (or remove) properties from the component, you have to change the server code too. This is called coupling; when you change one, you have to change the other, too.</p>\n<p>Because you have to manually keep these two in sync, it makes bugs and obsolete code more likely.</p>\n<ul>\n<li>Bugs come from underfetching data. You don’t pull down the properties that you need for a component because you forgot to add them to the server.</li>\n<li>Obsolete code results in overfetching data. For example, let’s say you remove a component from the tree. Do you delete its properties from the server response? How can you be sure another component doesn’t use that endpoint and need those properties? Instead, it’s better to just keep them in the response… but then you have a lot of cruft lying around.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*W-Gpb1voGJ8Km2tg19xgzw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*WkbMDnWMWwg1-eqLNMpr0w.png\"></figure><h3>The solution: declarative data fetching</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*RkASoUKbg9vRrn6HGjKVEg.png\"></figure><p>With GraphQL, you don’t hard-code the server with the list of properties that your view needs. Instead, the component provides a list of what it needs to the server.</p>\n<p>This list is combined with the lists from other components. The structure of the combined list is a tree, just like the component tree. It gets handed off to the endpoint. There’s only one endpoint and it handles all requests.</p>\n<p>The nice thing about this is that it localizes changes. When you need to add or remove a property, you only need to change the component… not the server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*S9q6g-juaMU8P6Jzr1M1Mw.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*2eicaDu-YdFSUMk8puENlA.png\"></figure><h3>What GraphQL looks like</h3>\n<p>To make this work, each component needs to provide the list of properties that it needs from the server. This is the query fragment. Relay will figure out which components are going to render and will get the query fragments for them. It will compile these into a single query — a consolidated list of properties that it needs from the server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*Q06oM_W7ut-FTPEw_WynrQ.png\"></figure><p>This turns into a query like this:</p>\n<pre>query {<br>  user(id: 5) {<br>    friends(first: 3) {<br>      picture<br>      name<br>      location<br>    }<br>  }<br>}</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*vy212Nf7CtOCgodDJ9sgNQ.png\"></figure><p>This consolidated query is kind of like a questionnaire. The client has laid out all of the questions it wants the server to answer, and the server just needs to fill in the blanks.</p>\n<p>One important thing to note: GraphQL doesn’t actually store your data. It just gives you a language to ask for data.</p>\n<p>If your database is the public library, then GraphQL would be the librarian. It just listens to your request and figures out what you want. Then it goes around to the different bookshelves and finds the data that you asked for. The bookshelves in this analogy are the tables of your database, or whatever you are holding your data in.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*fRpthdNa2ON6_c6UEmNGIw.png\"></figure><p>This means you can use GraphQL on top of all sorts of different backends; an existing MySQL database, a NoSQL database like MongoDB, or even on top of regular text files.</p>\n<p>For each property in the query, the server will have a <em>resolve()</em> function. This is where GraphQL figures out the value and fills in that question on the questionnaire, computing a value or querying a database.</p>\n<p>There’s a lot more to GraphQL, but this is enough to get started with Relay. Let me know <a href=\"http://twitter.com/codecartoons\">on Twitter</a> if you’d like to see a GraphQL deep dive in the future.</p>\n<h3>Coming up next…</h3>\n<p>There’s more work to do than just splitting up the query. That’s where Relay comes in. I’ll cover that in <a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-2-d4a2435aee59\">part 2</a>.</p>\n<blockquote>Did this help? If it did, a click on the ♥ is much appreciated… it helps other people find it, too!</blockquote>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"http://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ol>\n<li><a href=\"http://graphql.org/\">GraphQL docs</a></li>\n<li><a href=\"https://facebook.github.io/relay/docs/getting-started.html\">Relay docs</a></li>\n<li><a href=\"https://youtu.be/9sc8Pyc51uU\">Talk at React.js Conf January 2015</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL</a></li>\n<li><a href=\"http://softwareengineeringdaily.com/2015/09/19/graphql-and-relay-with-nick-schrock/\">GraphQL and Relay with Nick Schrock</a></li>\n<li><a href=\"https://blog.jacobwgillespie.com/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"https://devchat.tv/adventures-in-angular/043-aia-falcor-with-jafar-husain\">Falcor with Jafar Husain</a></li>\n</ol>\n<p><em>Thank you to all of my reviewers on this series: </em><a href=\"https://twitter.com/kentcdodds\"><em>Kent C. Dodds</em></a><em>, </em><a href=\"https://twitter.com/leeb\"><em>Lee Byron</em></a><em>, </em><a href=\"https://twitter.com/steveluscher\"><em>Steven Luscher</em></a><em>, </em><a href=\"https://twitter.com/yungsters\"><em>Tim Yung</em></a><em>, and </em><a href=\"https://twitter.com/thefubhy\"><em>Sebastian Siemssen</em></a><em>.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3ec1a127bca5\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-facebook-s-relay-part-1-3ec1a127bca5\">A cartoon guide to Facebook’s Relay, part 1</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["react","tech","javascript"],"color":"blue","category":"Code Cartoons -","date":"2016-01-20 14:06:06","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"A cartoon intro to Redux","pubDate":"2015-10-21 12:13:56","link":"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6?source=rss----7475df8cb3e5---4","guid":"https://medium.com/p/3afb775501a6","author":"Lin Clark","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*dODKUGyGkF8qeGLrXKWkiA.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dODKUGyGkF8qeGLrXKWkiA.png\"><figcaption>Other languages: <a href=\"http://bestalign.github.io/2015/10/26/cartoon-intro-to-redux/\">한국어</a>, <a href=\"https://medium.com/russian/a-cartoon-intro-to-redux-e2108896f7e6#.wxgkcsq14\">Русский</a>.</figcaption></figure><p>One thing that causes even more confusion than Flux is the difference between Flux and Redux, a pattern that was inspired by Flux. In this article I’ll explain the differences between the two.</p>\n<p>If you haven’t read the <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">last article about Flux</a>, you should do that first.</p>\n<h3>Why change Flux?</h3>\n<p>Redux solves the same problems as Flux, plus some.</p>\n<p>Just like Flux, it makes state changes in apps more predictable. If you want to change state, you have to fire off an action. There’s no way to change the state directly because the thing holding the state (the store) only has a getter, not setters. These basics of Flux and Redux are pretty similar.</p>\n<p>So why a different pattern? Redux creator Dan Abramov saw an opportunity to improve on Flux. He wanted better developer tools. He saw that if you moved a couple of things around, you could make better developer tools possible, but still have the same predictability that Flux gives you.</p>\n<p>He wanted hot reloading and time travel debugging (there’s <a href=\"https://medium.com/@linclark/hot-reloading-and-time-travel-debugging-what-are-they-3c8ed2812f35\">another cartoon to explain these</a>). But there were some problems which made developer tooling hard to do with Flux.</p>\n<h4>Problem 1: The code for stores can’t be reloaded without wiping out the state</h4>\n<p>In Flux, the store contains two things:</p>\n<ol>\n<li>The state change logic</li>\n<li>The current state itself</li>\n</ol>\n<p>Having these two on the same object is a problem for hot reloading. When you reload the store object to see the effect that the new state change logic has, you lose the state that the store is holding on to. Plus, you mess up the event subscriptions that tie the store to the rest of the system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*L66K9uCQjjHmpAwT-a9C5Q.png\"></figure><p><strong>Solution<br></strong>Separate these two functions. Have one object that holds on to the state. This object doesn’t get reloaded. Have another object that contains all of the state change logic. This object can be reloaded because it doesn’t have to worry about holding on to any state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*nBsGCWmJTR-Zj7aXeIE8yg.png\"></figure><h4>Problem 2: The state is being rewritten with every action</h4>\n<p>In time travel debugging, you keep track of each version of a state object. That way, you can go back to an earlier state.</p>\n<p>Each time the state is changed, you need to add the old state to an array of previous state objects. But because of the way JavaScript works, simply adding the variable to the array won’t work. This doesn’t create a snapshot of the object, it just creates a new pointer to the same object.</p>\n<p>To make it work, each version needs to be an entirely separate object so that you aren’t accidentally changing past versions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*4zODv5vgvKsi6Ts7TihsoA.png\"></figure><p><strong>Solution</strong><br>When an action comes in to the store, don’t handle it by changing the state. Instead, copy the state and make changes to the copy.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*wLRhZ0wtI0duLsigdxL1CA.png\"></figure><h4>Problem 3: There aren’t good places for third-party plugins to jump in</h4>\n<p>When you’re making developer tools, you need to be able to write them generically. A user should be able to just drop the tool in without having to custom fit their own code around it.</p>\n<p>For this to work, you need extension points… places where the code expects to have things added to it.</p>\n<p>An example is logging. Let’s say you want to console.log() every action as it comes in, and then console.log() the state that results from it. In Flux, you’d have to subscribe to the dispatcher’s updates and to updates from each store. But that’s custom code, not something a third-party module can easily do.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*MG736zGtLMBbSkhwu4D3cA.png\"></figure><p><strong>Solution</strong><br>Make it easy to wrap parts of the system in other objects. These other objects add their bit of functionality on top of the original. You can see these kinds of extension points in things like “enhancers” or “higher order” objects, as well as middleware.</p>\n<p>In addition, use a tree to structure the state change logic. This makes it so the store only emits one event to notify the views that the state has changed. This event comes after the whole state tree has been processed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*5JaZSc3Jsn9PJY7daEDVDA.png\"></figure><p><em>Note: With these problems and solutions, I‘m focusing on the developer tooling use case. These changes help in other use cases, too. On top of that, there are other differences between Redux and Flux. For example, Redux also reduces boilerplate and it makes it easier to reuse logic in the store. Here’s a list of some other </em><a href=\"http://stackoverflow.com/a/32920459\"><em>upsides to Redux</em></a><em>.</em></p>\n<p>So let’s see how Redux makes these things possible.</p>\n<h3>The new cast of characters</h3>\n<p>The cast of characters changes a little bit from Flux to Redux.</p>\n<h4>Action creators</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/1*Uljrrh4Z7UiUwk8AjUO9PA.png\"></figure><p>Redux keeps the action creator from Flux. Whenever you want to change the state of the application, you shoot off an action. That’s the only way that the state should be changed.</p>\n<p>As I said in the <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">article on Flux</a>, I think of the action creator as a telegraph operator. You go to the action creator knowing basically what message you want to send, and then the action creator formats that in a way that the rest of the system can understand.</p>\n<p>Unlike Flux, action creators in Redux do not send the action to the dispatcher. Instead, they return a formatted action object.</p>\n<h4>The store</h4>\n<p>I described stores in Flux as over-controlling bureaucrats. All state changes must be made personally by a store and have to go through the action pipeline, instead of being requested directly. The store in Redux is still controlling and bureaucratic, but it’s a little bit different.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/525/1*Gztc7THzxzOgJmGvJ95IQA.png\"></figure><p>In Flux, you can have multiple stores. Each store has its own little fiefdom, and it is in total control. It holds on to its little slice of state, and has all the logic for changing that little slice of state.</p>\n<p>The Redux store tends to delegate more. And it has to. In Redux, there is only one store… so if it did everything itself, it would be taking on too much work.</p>\n<p>Instead, it takes care of holding on to the whole state tree. It then delegates the work of figuring out what state changes need to happen. The reducers, headed up by the root reducer, take on this task.</p>\n<p>You might have noticed there’s no dispatcher. That’s because, in a bit of a power grab, the store has also taken over dispatching.</p>\n<h4>The reducers</h4>\n<p>When the store needs to know how an action changes the state, it asks the reducers. The root reducer takes charge and slices the state up based on the state object’s keys. It passes each slice of state to the reducer that knows how to handle it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/511/1*Vocy_6Gl9PbFlCIJsE9r3A.png\"></figure><p>I think of the reducers as a department of white-collar workers who are a little overzealous about photocopying. They don’t want to mess anything up, so they don’t change the state that has been passed in to them. Instead, they make a copy and make all their changes on the copy.</p>\n<p>This is one of the key ideas of Redux. The state object isn’t manipulated directly. Instead, each slice is copied and then all of the slices are combined into a new state object.</p>\n<p>The reducers pass their copies back to the root reducer, which pastes the copies together to form the updated state object. Then the root reducer sends the new state object back to the store, and the store makes it the new official state.</p>\n<p>If you have a small application, you might only have one reducer making a copy of the whole state object and making its changes. Or if you have a large application, you might have a whole tree of reducers. This is another difference between Flux and Redux. In Flux, the stores aren’t necessarily connected to each other and they have a flat structure. In Redux, the reducers are in a heirarchy. This hierarchy can have as many levels as needed, just like the component hierarchy.</p>\n<h4>The views: smart and dumb components</h4>\n<p>Flux has controller views and regular views. The controller views act as middle managers, managing the communication between the store and their child views.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/364/1*TgCkFcjlD9SxSrMvVX3DrA.png\"></figure><p>In Redux, there’s a similar concept: smart and dumb components. The smart components are the managers. They follow a few more rules than the controller views, though:</p>\n<ul>\n<li>Smart components are in charge of the actions. If a dumb component underneath them needs to trigger an action, the smart component passes a function in via the props. The dumb component can then just treat that as a callback.</li>\n<li>Smart components do not have their own CSS styles.</li>\n<li>Smart components rarely emit DOM of their own. Instead, they arrange dumb components, which handle laying out DOM elements.</li>\n</ul>\n<p>Dumb components don’t depend on action files directly, since all actions are passed in via props. This means that the dumb component can be reused in a different app that has different logic. They also contain the styles that they need to look reasonably good (though you can allow for custom styling — just accept a style prop and merge it in to the default styles).</p>\n<h4>The view layer binding</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/450/1*D1RcVrMV2rp6AH9hk5xZ8g.png\"></figure><p>To connect the store to the views, Redux needs a little help. It needs something to bind the two together. This is called the view layer binding. If you’re using React, this is react-redux.</p>\n<p>The view layer binding is kind of like the IT department for the view tree. It makes sure that all of the components can connect to the store. It also takes care of a lot of technical details so that the rest of the hierarchy doesn’t have to understand them.</p>\n<p>The view layer binding introduces three concepts:</p>\n<ol>\n<li>The Provider component: This is wrapped around the component tree. It makes it easy for the root component’s children to hook up to the store using connect().</li>\n<li>connect(): This is a function provided by react-redux. If a component wants to get state updates, it wraps itself using connect(). Then the connect function will set up all the wiring for it, using the selector.</li>\n<li>selector: This is a function that you write. It specifies what parts of the state a component needs as properties.</li>\n</ol>\n<h4>The root component</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/450/1*JXPeiNP-it60-QYKb-p2eQ.png\"></figure><p>All React applications have root components. This is just the component at the top level of the component hierarchy. But in Redux applications, this component takes on more responsibility.</p>\n<p>The role it plays is kind of like a C-level executive. It puts all of the teams in place to tackle the work. It creates the store, telling it what reducer to use, and brings together the view layer binding and the views.</p>\n<p>The root component is pretty hands-off after it initializes the app, though. It doesn’t get caught up in the day-to-day concerns of triggering rerenders. It leaves that to the components below it, assisted by the view layer binding.</p>\n<h3>How they all work together</h3>\n<p>Let’s see how these parts work together to create a functioning app.</p>\n<h4>The setup</h4>\n<p>The different parts of the app need to be wired up together. This happens in setup.</p>\n<p>1. <strong>Get the store ready.</strong> The root component creates the store, telling it what root reducer to use, using createStore(). This root reducer already has a team of reducers which report to it. It assembled that team of reducers using combineReducers().</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*8_fU31-jNQnQ0dp-wplm5w.png\"></figure><p>2. <strong>Set up the communication between the store and the components. </strong>The root component wraps its subcomponents with the provider component and makes the connection between the store and the provider.</p>\n<p>The Provider creates what’s basically a network to update the components. The smart components connect to network using connect(). This ensures they’ll get state updates.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*NYMutQLW8TcEgbO8VNeqHA.png\"></figure><p>3. <strong>Prepare the action callbacks.</strong> To make it easier for dumb components to work with actions, the smart components can setup action callbacks by using bindActionCreators(). This way, they can just pass down a callback to the dumb component. The action will be automatically dispatched after it is formatted.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*aVoD3gGddKUy3VCxwylthQ.png\"></figure><h4>The data flow</h4>\n<p>Now that the application is set up, the user can start interacting with it. Let’s trigger an action to see the data flow.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*GNDs7SY53lEhp7mX8V25lw.png\"></figure><p>1. The view requests an action. The action creator formats it and returns it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*p4EkWE_8upZ97Z0IapKDcQ.png\"></figure><p>2. The action is either dispatched automatically (if bindActionCreators() was used in setup), or the view dispatches the action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*zmFp3bmDq7b6Bvlo8Ineag.png\"></figure><p>3. The store receives the action. It sends the current state tree and the action to the root reducer.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*zrsSoAAyf4pqTMHiA6P8Ww.png\"></figure><p>4. The root reducer cuts apart the state tree into slices. Then it passes each slice to the subreducer that knows how to deal with it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*-S_dYe6BoQBgwSRpF7Hriw.png\"></figure><p>5. The subreducer copies the slice and makes changes to the copy. It returns the copy of the slice to the root reducer.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*_R-rGNfKr2Xu2FlXNZNPJg.png\"></figure><p>6. Once all of the subreducers have returned their slice copies, the root reducer pastes all of them together to form the whole updated state tree, which it returns to the store. The store replaces the old state tree with the new one.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*bUMekI8QlEfFxSBCuVuIkw.png\"></figure><p>7. The store tells the view layer binding that there’s new state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*x6vBvUlFJktJqty56jr0QQ.png\"></figure><p>8. The view layer binding asks the store to send over the new state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*qGatznV4QujuxGe49YfX5A.png\"></figure><p>9. The view layer binding triggers a rerender.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*Je2mow8mjYLngXreGGlIEg.png\"></figure><p>So that’s how I think of Redux and its differences from Flux. Hope it helps!</p>\n<h3>Coming up next</h3>\n<p>I’m making a list of topics. If you have any suggestions, or there are any parts of the React ecosystem that you find confusing and you’d like to see explained, let me know on <a href=\"https://twitter.com/codecartoons\">Twitter</a>.</p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"https://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ul>\n<li><a href=\"http://rackt.org/redux/index.html\">Redux docs</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">Dan Abramov’s React Europe talk</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31\">The Evolution of Flux Frameworks</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">Smart and Dumb Components</a></li>\n<li><a href=\"http://stackoverflow.com/a/32920459\">The upsides of using Redux</a></li>\n<li><a href=\"http://stackoverflow.com/a/32916602\">The downsides of using Redux</a></li>\n<li><a href=\"https://devchat.tv/js-jabber/181-jsj-the-evolution-of-flux-libraries-with-andrew-clark-and-dan-abramov\">JS Jabber: The Evolution of Flux Libraries with Andrew Clark and Dan Abramov</a></li>\n</ul>\n<p><em>Thank you to the amazing </em><a href=\"http://twitter.com/dan_abramov\"><em>Dan Abramov</em></a><em>, </em><a href=\"https://twitter.com/kentcdodds\"><em>Kent C. Dodds</em></a><em> and </em><a href=\"https://twitter.com/mzabriskie\"><em>Matt Zabriskie</em></a><em> for their feedback.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3afb775501a6\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">A cartoon intro to Redux</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dODKUGyGkF8qeGLrXKWkiA.png\"><figcaption>Other languages: <a href=\"http://bestalign.github.io/2015/10/26/cartoon-intro-to-redux/\">한국어</a>, <a href=\"https://medium.com/russian/a-cartoon-intro-to-redux-e2108896f7e6#.wxgkcsq14\">Русский</a>.</figcaption></figure><p>One thing that causes even more confusion than Flux is the difference between Flux and Redux, a pattern that was inspired by Flux. In this article I’ll explain the differences between the two.</p>\n<p>If you haven’t read the <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">last article about Flux</a>, you should do that first.</p>\n<h3>Why change Flux?</h3>\n<p>Redux solves the same problems as Flux, plus some.</p>\n<p>Just like Flux, it makes state changes in apps more predictable. If you want to change state, you have to fire off an action. There’s no way to change the state directly because the thing holding the state (the store) only has a getter, not setters. These basics of Flux and Redux are pretty similar.</p>\n<p>So why a different pattern? Redux creator Dan Abramov saw an opportunity to improve on Flux. He wanted better developer tools. He saw that if you moved a couple of things around, you could make better developer tools possible, but still have the same predictability that Flux gives you.</p>\n<p>He wanted hot reloading and time travel debugging (there’s <a href=\"https://medium.com/@linclark/hot-reloading-and-time-travel-debugging-what-are-they-3c8ed2812f35\">another cartoon to explain these</a>). But there were some problems which made developer tooling hard to do with Flux.</p>\n<h4>Problem 1: The code for stores can’t be reloaded without wiping out the state</h4>\n<p>In Flux, the store contains two things:</p>\n<ol>\n<li>The state change logic</li>\n<li>The current state itself</li>\n</ol>\n<p>Having these two on the same object is a problem for hot reloading. When you reload the store object to see the effect that the new state change logic has, you lose the state that the store is holding on to. Plus, you mess up the event subscriptions that tie the store to the rest of the system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*L66K9uCQjjHmpAwT-a9C5Q.png\"></figure><p><strong>Solution<br></strong>Separate these two functions. Have one object that holds on to the state. This object doesn’t get reloaded. Have another object that contains all of the state change logic. This object can be reloaded because it doesn’t have to worry about holding on to any state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*nBsGCWmJTR-Zj7aXeIE8yg.png\"></figure><h4>Problem 2: The state is being rewritten with every action</h4>\n<p>In time travel debugging, you keep track of each version of a state object. That way, you can go back to an earlier state.</p>\n<p>Each time the state is changed, you need to add the old state to an array of previous state objects. But because of the way JavaScript works, simply adding the variable to the array won’t work. This doesn’t create a snapshot of the object, it just creates a new pointer to the same object.</p>\n<p>To make it work, each version needs to be an entirely separate object so that you aren’t accidentally changing past versions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*4zODv5vgvKsi6Ts7TihsoA.png\"></figure><p><strong>Solution</strong><br>When an action comes in to the store, don’t handle it by changing the state. Instead, copy the state and make changes to the copy.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*wLRhZ0wtI0duLsigdxL1CA.png\"></figure><h4>Problem 3: There aren’t good places for third-party plugins to jump in</h4>\n<p>When you’re making developer tools, you need to be able to write them generically. A user should be able to just drop the tool in without having to custom fit their own code around it.</p>\n<p>For this to work, you need extension points… places where the code expects to have things added to it.</p>\n<p>An example is logging. Let’s say you want to console.log() every action as it comes in, and then console.log() the state that results from it. In Flux, you’d have to subscribe to the dispatcher’s updates and to updates from each store. But that’s custom code, not something a third-party module can easily do.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*MG736zGtLMBbSkhwu4D3cA.png\"></figure><p><strong>Solution</strong><br>Make it easy to wrap parts of the system in other objects. These other objects add their bit of functionality on top of the original. You can see these kinds of extension points in things like “enhancers” or “higher order” objects, as well as middleware.</p>\n<p>In addition, use a tree to structure the state change logic. This makes it so the store only emits one event to notify the views that the state has changed. This event comes after the whole state tree has been processed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*5JaZSc3Jsn9PJY7daEDVDA.png\"></figure><p><em>Note: With these problems and solutions, I‘m focusing on the developer tooling use case. These changes help in other use cases, too. On top of that, there are other differences between Redux and Flux. For example, Redux also reduces boilerplate and it makes it easier to reuse logic in the store. Here’s a list of some other </em><a href=\"http://stackoverflow.com/a/32920459\"><em>upsides to Redux</em></a><em>.</em></p>\n<p>So let’s see how Redux makes these things possible.</p>\n<h3>The new cast of characters</h3>\n<p>The cast of characters changes a little bit from Flux to Redux.</p>\n<h4>Action creators</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/400/1*Uljrrh4Z7UiUwk8AjUO9PA.png\"></figure><p>Redux keeps the action creator from Flux. Whenever you want to change the state of the application, you shoot off an action. That’s the only way that the state should be changed.</p>\n<p>As I said in the <a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">article on Flux</a>, I think of the action creator as a telegraph operator. You go to the action creator knowing basically what message you want to send, and then the action creator formats that in a way that the rest of the system can understand.</p>\n<p>Unlike Flux, action creators in Redux do not send the action to the dispatcher. Instead, they return a formatted action object.</p>\n<h4>The store</h4>\n<p>I described stores in Flux as over-controlling bureaucrats. All state changes must be made personally by a store and have to go through the action pipeline, instead of being requested directly. The store in Redux is still controlling and bureaucratic, but it’s a little bit different.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/525/1*Gztc7THzxzOgJmGvJ95IQA.png\"></figure><p>In Flux, you can have multiple stores. Each store has its own little fiefdom, and it is in total control. It holds on to its little slice of state, and has all the logic for changing that little slice of state.</p>\n<p>The Redux store tends to delegate more. And it has to. In Redux, there is only one store… so if it did everything itself, it would be taking on too much work.</p>\n<p>Instead, it takes care of holding on to the whole state tree. It then delegates the work of figuring out what state changes need to happen. The reducers, headed up by the root reducer, take on this task.</p>\n<p>You might have noticed there’s no dispatcher. That’s because, in a bit of a power grab, the store has also taken over dispatching.</p>\n<h4>The reducers</h4>\n<p>When the store needs to know how an action changes the state, it asks the reducers. The root reducer takes charge and slices the state up based on the state object’s keys. It passes each slice of state to the reducer that knows how to handle it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/511/1*Vocy_6Gl9PbFlCIJsE9r3A.png\"></figure><p>I think of the reducers as a department of white-collar workers who are a little overzealous about photocopying. They don’t want to mess anything up, so they don’t change the state that has been passed in to them. Instead, they make a copy and make all their changes on the copy.</p>\n<p>This is one of the key ideas of Redux. The state object isn’t manipulated directly. Instead, each slice is copied and then all of the slices are combined into a new state object.</p>\n<p>The reducers pass their copies back to the root reducer, which pastes the copies together to form the updated state object. Then the root reducer sends the new state object back to the store, and the store makes it the new official state.</p>\n<p>If you have a small application, you might only have one reducer making a copy of the whole state object and making its changes. Or if you have a large application, you might have a whole tree of reducers. This is another difference between Flux and Redux. In Flux, the stores aren’t necessarily connected to each other and they have a flat structure. In Redux, the reducers are in a heirarchy. This hierarchy can have as many levels as needed, just like the component hierarchy.</p>\n<h4>The views: smart and dumb components</h4>\n<p>Flux has controller views and regular views. The controller views act as middle managers, managing the communication between the store and their child views.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/364/1*TgCkFcjlD9SxSrMvVX3DrA.png\"></figure><p>In Redux, there’s a similar concept: smart and dumb components. The smart components are the managers. They follow a few more rules than the controller views, though:</p>\n<ul>\n<li>Smart components are in charge of the actions. If a dumb component underneath them needs to trigger an action, the smart component passes a function in via the props. The dumb component can then just treat that as a callback.</li>\n<li>Smart components do not have their own CSS styles.</li>\n<li>Smart components rarely emit DOM of their own. Instead, they arrange dumb components, which handle laying out DOM elements.</li>\n</ul>\n<p>Dumb components don’t depend on action files directly, since all actions are passed in via props. This means that the dumb component can be reused in a different app that has different logic. They also contain the styles that they need to look reasonably good (though you can allow for custom styling — just accept a style prop and merge it in to the default styles).</p>\n<h4>The view layer binding</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/450/1*D1RcVrMV2rp6AH9hk5xZ8g.png\"></figure><p>To connect the store to the views, Redux needs a little help. It needs something to bind the two together. This is called the view layer binding. If you’re using React, this is react-redux.</p>\n<p>The view layer binding is kind of like the IT department for the view tree. It makes sure that all of the components can connect to the store. It also takes care of a lot of technical details so that the rest of the hierarchy doesn’t have to understand them.</p>\n<p>The view layer binding introduces three concepts:</p>\n<ol>\n<li>The Provider component: This is wrapped around the component tree. It makes it easy for the root component’s children to hook up to the store using connect().</li>\n<li>connect(): This is a function provided by react-redux. If a component wants to get state updates, it wraps itself using connect(). Then the connect function will set up all the wiring for it, using the selector.</li>\n<li>selector: This is a function that you write. It specifies what parts of the state a component needs as properties.</li>\n</ol>\n<h4>The root component</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/450/1*JXPeiNP-it60-QYKb-p2eQ.png\"></figure><p>All React applications have root components. This is just the component at the top level of the component hierarchy. But in Redux applications, this component takes on more responsibility.</p>\n<p>The role it plays is kind of like a C-level executive. It puts all of the teams in place to tackle the work. It creates the store, telling it what reducer to use, and brings together the view layer binding and the views.</p>\n<p>The root component is pretty hands-off after it initializes the app, though. It doesn’t get caught up in the day-to-day concerns of triggering rerenders. It leaves that to the components below it, assisted by the view layer binding.</p>\n<h3>How they all work together</h3>\n<p>Let’s see how these parts work together to create a functioning app.</p>\n<h4>The setup</h4>\n<p>The different parts of the app need to be wired up together. This happens in setup.</p>\n<p>1. <strong>Get the store ready.</strong> The root component creates the store, telling it what root reducer to use, using createStore(). This root reducer already has a team of reducers which report to it. It assembled that team of reducers using combineReducers().</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*8_fU31-jNQnQ0dp-wplm5w.png\"></figure><p>2. <strong>Set up the communication between the store and the components. </strong>The root component wraps its subcomponents with the provider component and makes the connection between the store and the provider.</p>\n<p>The Provider creates what’s basically a network to update the components. The smart components connect to network using connect(). This ensures they’ll get state updates.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*NYMutQLW8TcEgbO8VNeqHA.png\"></figure><p>3. <strong>Prepare the action callbacks.</strong> To make it easier for dumb components to work with actions, the smart components can setup action callbacks by using bindActionCreators(). This way, they can just pass down a callback to the dumb component. The action will be automatically dispatched after it is formatted.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*aVoD3gGddKUy3VCxwylthQ.png\"></figure><h4>The data flow</h4>\n<p>Now that the application is set up, the user can start interacting with it. Let’s trigger an action to see the data flow.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*GNDs7SY53lEhp7mX8V25lw.png\"></figure><p>1. The view requests an action. The action creator formats it and returns it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*p4EkWE_8upZ97Z0IapKDcQ.png\"></figure><p>2. The action is either dispatched automatically (if bindActionCreators() was used in setup), or the view dispatches the action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*zmFp3bmDq7b6Bvlo8Ineag.png\"></figure><p>3. The store receives the action. It sends the current state tree and the action to the root reducer.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*zrsSoAAyf4pqTMHiA6P8Ww.png\"></figure><p>4. The root reducer cuts apart the state tree into slices. Then it passes each slice to the subreducer that knows how to deal with it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*-S_dYe6BoQBgwSRpF7Hriw.png\"></figure><p>5. The subreducer copies the slice and makes changes to the copy. It returns the copy of the slice to the root reducer.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*_R-rGNfKr2Xu2FlXNZNPJg.png\"></figure><p>6. Once all of the subreducers have returned their slice copies, the root reducer pastes all of them together to form the whole updated state tree, which it returns to the store. The store replaces the old state tree with the new one.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*bUMekI8QlEfFxSBCuVuIkw.png\"></figure><p>7. The store tells the view layer binding that there’s new state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*x6vBvUlFJktJqty56jr0QQ.png\"></figure><p>8. The view layer binding asks the store to send over the new state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*qGatznV4QujuxGe49YfX5A.png\"></figure><p>9. The view layer binding triggers a rerender.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*Je2mow8mjYLngXreGGlIEg.png\"></figure><p>So that’s how I think of Redux and its differences from Flux. Hope it helps!</p>\n<h3>Coming up next</h3>\n<p>I’m making a list of topics. If you have any suggestions, or there are any parts of the React ecosystem that you find confusing and you’d like to see explained, let me know on <a href=\"https://twitter.com/codecartoons\">Twitter</a>.</p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"https://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ul>\n<li><a href=\"http://rackt.org/redux/index.html\">Redux docs</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">Dan Abramov’s React Europe talk</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/the-evolution-of-flux-frameworks-6c16ad26bb31\">The Evolution of Flux Frameworks</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">Smart and Dumb Components</a></li>\n<li><a href=\"http://stackoverflow.com/a/32920459\">The upsides of using Redux</a></li>\n<li><a href=\"http://stackoverflow.com/a/32916602\">The downsides of using Redux</a></li>\n<li><a href=\"https://devchat.tv/js-jabber/181-jsj-the-evolution-of-flux-libraries-with-andrew-clark-and-dan-abramov\">JS Jabber: The Evolution of Flux Libraries with Andrew Clark and Dan Abramov</a></li>\n</ul>\n<p><em>Thank you to the amazing </em><a href=\"http://twitter.com/dan_abramov\"><em>Dan Abramov</em></a><em>, </em><a href=\"https://twitter.com/kentcdodds\"><em>Kent C. Dodds</em></a><em> and </em><a href=\"https://twitter.com/mzabriskie\"><em>Matt Zabriskie</em></a><em> for their feedback.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3afb775501a6\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6\">A cartoon intro to Redux</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["redux","javascript","react"],"color":"blue","category":"Code Cartoons -","date":"2015-10-21 12:13:56","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Hot reloading and time travel debugging: what are they?","pubDate":"2015-10-21 12:11:30","link":"https://code-cartoons.com/hot-reloading-and-time-travel-debugging-what-are-they-3c8ed2812f35?source=rss----7475df8cb3e5---4","guid":"https://medium.com/p/3c8ed2812f35","author":"Lin Clark","thumbnail":"https://cdn-images-1.medium.com/max/700/1*6xdA93PT8l61i0ptXVWpOw.png","description":"\n<p>Two of the features that get people excited about Redux are hot reloading and time travel debugging. But what are they?</p>\n<h4>Hot reloading</h4>\n<p>When you’re developing an app, you’re usually making one small change after another. The faster you can see the effects of the small changes (and recover from the small mistakes that you make), the faster you will develop.</p>\n<p>The neat thing about hot reloading is that your app’s state isn’t reset after every change. Let’s say you’re testing a particular screen. You’ve added a few todo items and crossed a few off. But now you realize you need to change some UI text. For example, you need to change the placeholder from “New toto” to “New todo”.</p>\n<p>Without hot reloading, you’d have to:</p>\n<ul>\n<li>Make the change in your code</li>\n<li>Refresh the page in your browser</li>\n<li>Re-add the data and push all of the same buttons</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*6xdA93PT8l61i0ptXVWpOw.png\"><figcaption>Without hot reloading, the todos go away when you reload the page.</figcaption></figure><p>With hot reloading, you don’t have to re-add the data because you don’t lose the state. Your list of todos will still be there. This makes debugging a lot faster.</p>\n<p>Even if a React app doesn’t use Redux for its data, you can do hot reloading. You’re just limited in what you can hot reload. Views and action creators can be hot reloaded, but the store cannot. This is because the store has two roles: changing state based on actions and holding on to state. If the state change code is reloaded, you lose the state that the store is currently holding on to.</p>\n<p>That’s what Redux gives you here: the ability to hot reload the state logic. And it does that by separating those two roles. In Redux, the store holds on to the state, but the state change logic is done by a different object, the reducer. This means you can hot reload your state change logic (reducers) without losing the state the store is holding on to.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*Z5Na_SX0yHZYMSTpXIrxEQ.png\"><figcaption>With Redux’s hot reloading, you don’t lose the application state.</figcaption></figure><h4>Time travel debugging</h4>\n<p>Hot reloading lets you keep your state even after code changed. With time travel debugging, you can go backwards to previous points in your state.</p>\n<p>This makes it faster to test very specific parts of your interaction. For example, lets say you have a bug. It happens when you cross out a todo item and then add another. You would run through the full scenario once to set up your state. After that, you can just keep testing it by going backwards one step in your state and adding the second todo again.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*E8b-Kwelt7YUMsS7GuSQYw.png\"><figcaption>Time travel debugging makes it easy to go back and forth to different points in the state history.</figcaption></figure><p>There are other exciting uses for this. You could record all of the actions of a QA tester. When the QA runs into a bug, they just need to package up the action and state history. You could even turn that into an automated test.</p>\n<p>Time travel debugging is technically possible with Flux, but complicated. Redux makes it trivial.</p>\n<h3>Coming up next</h3>\n<p>See how Redux makes this all work:</p>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.w36q3cvk6\">A cartoon intro to Redux - Code Cartoons</a></p>\n<p>Other languages: <a href=\"http://bestalign.github.io/2015/10/27/redux-hot-reloading-and-time-travel-debugging/\">한국어</a></p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"https://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3c8ed2812f35\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/hot-reloading-and-time-travel-debugging-what-are-they-3c8ed2812f35\">Hot reloading and time travel debugging: what are they?</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<p>Two of the features that get people excited about Redux are hot reloading and time travel debugging. But what are they?</p>\n<h4>Hot reloading</h4>\n<p>When you’re developing an app, you’re usually making one small change after another. The faster you can see the effects of the small changes (and recover from the small mistakes that you make), the faster you will develop.</p>\n<p>The neat thing about hot reloading is that your app’s state isn’t reset after every change. Let’s say you’re testing a particular screen. You’ve added a few todo items and crossed a few off. But now you realize you need to change some UI text. For example, you need to change the placeholder from “New toto” to “New todo”.</p>\n<p>Without hot reloading, you’d have to:</p>\n<ul>\n<li>Make the change in your code</li>\n<li>Refresh the page in your browser</li>\n<li>Re-add the data and push all of the same buttons</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*6xdA93PT8l61i0ptXVWpOw.png\"><figcaption>Without hot reloading, the todos go away when you reload the page.</figcaption></figure><p>With hot reloading, you don’t have to re-add the data because you don’t lose the state. Your list of todos will still be there. This makes debugging a lot faster.</p>\n<p>Even if a React app doesn’t use Redux for its data, you can do hot reloading. You’re just limited in what you can hot reload. Views and action creators can be hot reloaded, but the store cannot. This is because the store has two roles: changing state based on actions and holding on to state. If the state change code is reloaded, you lose the state that the store is currently holding on to.</p>\n<p>That’s what Redux gives you here: the ability to hot reload the state logic. And it does that by separating those two roles. In Redux, the store holds on to the state, but the state change logic is done by a different object, the reducer. This means you can hot reload your state change logic (reducers) without losing the state the store is holding on to.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*Z5Na_SX0yHZYMSTpXIrxEQ.png\"><figcaption>With Redux’s hot reloading, you don’t lose the application state.</figcaption></figure><h4>Time travel debugging</h4>\n<p>Hot reloading lets you keep your state even after code changed. With time travel debugging, you can go backwards to previous points in your state.</p>\n<p>This makes it faster to test very specific parts of your interaction. For example, lets say you have a bug. It happens when you cross out a todo item and then add another. You would run through the full scenario once to set up your state. After that, you can just keep testing it by going backwards one step in your state and adding the second todo again.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*E8b-Kwelt7YUMsS7GuSQYw.png\"><figcaption>Time travel debugging makes it easy to go back and forth to different points in the state history.</figcaption></figure><p>There are other exciting uses for this. You could record all of the actions of a QA tester. When the QA runs into a bug, they just need to package up the action and state history. You could even turn that into an automated test.</p>\n<p>Time travel debugging is technically possible with Flux, but complicated. Redux makes it trivial.</p>\n<h3>Coming up next</h3>\n<p>See how Redux makes this all work:</p>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.w36q3cvk6\">A cartoon intro to Redux - Code Cartoons</a></p>\n<p>Other languages: <a href=\"http://bestalign.github.io/2015/10/27/redux-hot-reloading-and-time-travel-debugging/\">한국어</a></p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"https://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3c8ed2812f35\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/hot-reloading-and-time-travel-debugging-what-are-they-3c8ed2812f35\">Hot reloading and time travel debugging: what are they?</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["javascript","devtools","react"],"color":"blue","category":"Code Cartoons -","date":"2015-10-21 12:11:30","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"A cartoon guide to Flux","pubDate":"2015-09-29 12:36:47","link":"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207?source=rss----7475df8cb3e5---4","guid":"https://medium.com/p/6157355ab207","author":"Lin Clark","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*FPJJenCHGpL92Te39P19Ew.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FPJJenCHGpL92Te39P19Ew.png\"><figcaption>Other languages: <a href=\"https://medium.com/@sotayamashita/%E6%BC%AB%E7%94%BB%E3%81%A7%E8%AA%AC%E6%98%8E%E3%81%99%E3%82%8B-flux-1a219e50232b#.24jpny5vi\">日本語</a>, <a href=\"http://bestalign.github.io/2015/10/06/cartoon-guide-to-flux/\">한국어</a>, <a href=\"https://medium.com/@sacret/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-%D0%BF%D0%BE-flux-%D0%B2-%D0%BA%D0%B0%D1%80%D1%82%D0%B8%D0%BD%D0%BA%D0%B0%D1%85-df2b040224a3\">Русский</a>.</figcaption></figure><p>Flux is both one of the most popular and one of the least understood topics in current web development. This guide is an attempt to explain it in a way everyone can understand.</p>\n<h3>The problem</h3>\n<p>First, I should explain the basic problem that Flux solves. Flux is a pattern for handling data in your application. Flux and React grew up together at Facebook. Many people use them together, though you can use them independently. They were developed to address a particular set of problems that Facebook was seeing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EfeNEshl8-uwZSuUw275Ag.png\"></figure><p>One really well known example of this set of problems was the notification bug. When you logged in to Facebook, you would see a notification over the messages icon. When you clicked on the messages icon, though, there would be no new message. The notification would go away. Then, a few minutes later after a few interactions with the site, the notification would come back. You'd click on the messages icon again… still no new messages. It would just keep going back-and-forth in this cycle.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4xc1FzIHWiyAvb1iAQKSqQ.png\"></figure><p>It wasn’t just a cycle for the user on the site. There was also a cycle going on for the team at Facebook. They would fix this bug and everything would be fine for a while and then the bug would be back. It would go back-and-forth between being resolved and being an issue again.</p>\n<p>So Facebook was looking for a way to get out of this cycle. They didn’t want to just fix it once. They wanted to make the system predictable so they could ensure that this problem wouldn’t keep resurfacing.</p>\n<h3>The underlying problem</h3>\n<p>The underlying problem that they identified was the way that the data flowed through the application.</p>\n<p><em>Note: this is what I’ve gleaned from simplified versions that they’ve shared in talks. I’m sure the actual architecture looked different.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*OcTeAqv8AU_z-O2HuucmeA.png\"><figcaption>Models pass data to the view layer.</figcaption></figure><p>They had models which held the data and would pass data to the view layer to render the data.</p>\n<p>Because user interaction happened through the views, the views sometimes needed to update models based on user input. And sometimes models needed to update other models.</p>\n<p>On top of that, sometimes these actions would trigger a cascade of other changes. I envision this as an edge-of-your-seat game of Pong — it’s hard to know where the ball is going to land (or fall off the screen).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*7myoHOaUyFEmPC-dj61CKw.png\"><figcaption>Views update models. Models update other models. This starts to look like a really edge-of-your-seat game of Pong.</figcaption></figure><p>Throw in the fact that these changes could be happening asynchronously. One change could trigger multiple other changes. I imagine this as throwing a whole bag of ping-pong balls into your Pong game, with them flying all over the place and crossing paths.</p>\n<p>All in all, it makes for a hard to debug data flow.</p>\n<h3>The solution: unidirectional data flow</h3>\n<p>So Facebook decided to try a different kind of architecture, where the data flows in one direction — only one direction — and when you need to insert new data, the flow starts all over again at the beginning. They called their architecture Flux.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*lZM0yU9ExEMd7DggVxXkxA.png\"><figcaption>The diagram you’ll find in Facebook’s Flux docs. It is way cooler than it looks.</figcaption></figure><p>This is actually really cool… but you probably can’t tell it from the diagram above.</p>\n<p>Once you understand Flux, this diagram is pretty clear. The problem is that if you’re coming to the documentation completely new to Flux, I don’t think that this diagram helps you understand it… and that’s what a diagram should do. It should give you a big picture understanding of a system before you dive in to really start figuring out how you do specific things.</p>\n<p>What helped me understand Flux better wasn’t a diagram like this, but instead thinking of the system in terms of different characters working together as a team to achieve a goal. So I want to introduce you to the cast of characters that I have in my head.</p>\n<h3>Meet the characters</h3>\n<p>I’m just going to give a quick introduction to the characters before I explain how they all interact.</p>\n<h4>The action creator</h4>\n<p>The first character is the action creator. It’s in charge of creating actions, which is the path that all changes and interactions should go through. Whenever you want to change the state of the app or have the view render differently, you shoot off an action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/487/1*DATbW4s4Ls6UPieavtdB7w.png\"><figcaption>The action creator is like a telegraph operator. It formats your message for you.</figcaption></figure><p>I think of the action creator as a telegraph operator. You go to the action creator knowing basically what message you want to send, and then the action creator formats that in a way that the rest of the system can understand.</p>\n<p>The action creator creates an action with a type and a payload. The type will be one of the types that you have defined as actions in your system (usually a list of constants). An example of an action would be something like MESSAGE_CREATE or MESSAGE_READ.</p>\n<p>There’s a neat side effect to having a part of your system that knows all of the possible actions. A new developer can come on the project, open up the action creator files and see the entire API — all of the possible state changes — that your system provides.</p>\n<p>Once it has created the action message, the action creator passes that action off to the dispatcher.</p>\n<h4>The dispatcher</h4>\n<p>The dispatcher is basically a big registry of callbacks. It’s kind of like a telephone operator at a phone switchboard. It keeps a list of all of the stores that it needs to send actions to. When an action comes in from the action creator, it will pass the action around to different stores.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/573/1*R5XHVGZfkPkmL7BcN5jMqg.png\"><figcaption>The dispatcher is like a switchboard operator. It knows all the callbacks for the different stores.</figcaption></figure><p>It does this in a synchronous way, which helps with that multi-ball Pong game effect that I was talking about earlier. And if you need to set up dependencies between stores so one gets updated before the other, you can have the dispatcher manage this for you with waitFor().</p>\n<p>The Flux dispatcher is different from dispatchers in many other architectures. The action is sent to all of the registered stores regardless of what the action type is. This means the store doesn’t just subscribe to some actions. It hears about all actions and filters out what it cares about and doesn’t.</p>\n<h4>The store</h4>\n<p>Next is the store. The store holds on to all state in the application, and all of the state changing logic lives inside of the stores.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/548/1*17MbK8jz94ynP-NFfL0rfw.png\"><figcaption>The store is an over-controlling bureaucrat. All changes must go through it.</figcaption></figure><p>I think of the store as an over-controlling bureaucrat. All state changes must be made by it personally. And you can’t directly request that it change the state. There are no setters on the store. To request a state change, you must follow proper procedure… you must submit an action via the action creator/dispatcher pipeline.</p>\n<p>As I mentioned above, if a store is registered with the dispatcher, all actions will be sent to it. Inside the store there’s usually a switch statement that looks at the action type to decide whether or not this store cares about this action. If the store does care about this action, it will figure out what change needs to be made based on this action and update the state.</p>\n<p>Once the store has made its changes to the state, it will emit a change event. This will notify the controller view that the state has changed.</p>\n<h4>The controller view and the view</h4>\n<p>The views are in charge of taking the state and rendering it out for the user as well as accepting user input.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/421/1*MY5xNk_JeKvGsGdywYD4EA.png\"><figcaption>The controller view is like a middle manager who gets notifications from the store and passes the data onto the views under it. The view presents that data to the user.</figcaption></figure><p>The view is a presenter. It isn’t aware of anything in the application, it just knows the data that’s handed to it and how to format the data into output that people understand (via HTML).</p>\n<p>The controller view is like a middle manager between the store and the view. The store tells it when the state has changed. It collects the new state and then passes the updated state along to all of the views under it.</p>\n<h3>How they all work together</h3>\n<p>So let’s take a look at how all of these characters work together.</p>\n<h4>The setup</h4>\n<p>First there’s the setup: application initialization which only happens once.</p>\n<p>1. Stores let the dispatcher know that they want to be notified whenever an action comes in.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*GHrusKRFhQ0Y6rrwjqI6QQ.png\"></figure><p>2. Then the controller views ask the stores for the latest state.</p>\n<p>3. When the stores give the state to the controller views, they pass that state along to their child views to render.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*66hoDpUhczSXrgH2cUUasw.png\"></figure><p>4. The controller views also ask the stores to keep them notified when state changes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*tV7VN0RjpFfwaf1PK3chIA.png\"></figure><h4>The data flow</h4>\n<p>Once the setup is done, the application is ready to accept user input. So let’s trigger an action by having the user make a change.</p>\n<p>We’ll kick off the data flow with a user interaction.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*SusQ7Aip2fSWg6raQtPSnA.png\"></figure><p>1. The view tells the action creator to prepare an action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*dkm9qsWuD9DtXzH-u-DjJQ.png\"></figure><p>2. The action creator formats the action and sends it off to the dispatcher.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*fJwvtpq0XQhB4mUZwh7YOQ.png\"></figure><p>3. The dispatcher sends the action off to the stores in sequence. Each store gets notified of all actions. Then the store decides whether it cares about this one or not, and changes the state accordingly.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*RLrImTDeArSMoA4kZsajLQ.png\"></figure><p>4. Once it’s done changing state, the store lets its subscribed view controllers know.</p>\n<p>5. Those view controllers will then ask the store to give them the updated state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*5SXO2eftdQveFqImGDVB9A.png\"></figure><p>6. After the store gives it the state, the view controller will tell its child views to rerender based on the new state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*fWBaUg9-_1-V5M2YQBWhWg.png\"></figure><p>So that’s how I think of Flux. Hope it helps!</p>\n<h3>Coming up next…</h3>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.w36q3cvk6\">A cartoon intro to Redux - Code Cartoons</a></p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"https://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ul>\n<li><a href=\"https://facebook.github.io/flux/docs/overview.html\">Flux documentation</a></li>\n<li><a href=\"http://fluxxor.com/what-is-flux.html\">Fluxxor documentation</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6\">The Case for Flux</a></li>\n</ul>\n<p><em>Thank you to the fantastic </em><a href=\"https://twitter.com/kentcdodds\"><em>Kent C. Dodds,</em></a><em> </em><a href=\"https://twitter.com/mzabriskie\"><em>Matt Zabriskie,</em></a><em> and </em><a href=\"https://twitter.com/Vjeux\"><em>Christopher Chedeau</em></a><em> for their early feedback, and to all the folks at </em><a href=\"https://twitter.com/brooklyn_js\"><em>BrooklynJS</em></a><em> for their comments on the live action version!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6157355ab207\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FPJJenCHGpL92Te39P19Ew.png\"><figcaption>Other languages: <a href=\"https://medium.com/@sotayamashita/%E6%BC%AB%E7%94%BB%E3%81%A7%E8%AA%AC%E6%98%8E%E3%81%99%E3%82%8B-flux-1a219e50232b#.24jpny5vi\">日本語</a>, <a href=\"http://bestalign.github.io/2015/10/06/cartoon-guide-to-flux/\">한국어</a>, <a href=\"https://medium.com/@sacret/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-%D0%BF%D0%BE-flux-%D0%B2-%D0%BA%D0%B0%D1%80%D1%82%D0%B8%D0%BD%D0%BA%D0%B0%D1%85-df2b040224a3\">Русский</a>.</figcaption></figure><p>Flux is both one of the most popular and one of the least understood topics in current web development. This guide is an attempt to explain it in a way everyone can understand.</p>\n<h3>The problem</h3>\n<p>First, I should explain the basic problem that Flux solves. Flux is a pattern for handling data in your application. Flux and React grew up together at Facebook. Many people use them together, though you can use them independently. They were developed to address a particular set of problems that Facebook was seeing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EfeNEshl8-uwZSuUw275Ag.png\"></figure><p>One really well known example of this set of problems was the notification bug. When you logged in to Facebook, you would see a notification over the messages icon. When you clicked on the messages icon, though, there would be no new message. The notification would go away. Then, a few minutes later after a few interactions with the site, the notification would come back. You'd click on the messages icon again… still no new messages. It would just keep going back-and-forth in this cycle.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4xc1FzIHWiyAvb1iAQKSqQ.png\"></figure><p>It wasn’t just a cycle for the user on the site. There was also a cycle going on for the team at Facebook. They would fix this bug and everything would be fine for a while and then the bug would be back. It would go back-and-forth between being resolved and being an issue again.</p>\n<p>So Facebook was looking for a way to get out of this cycle. They didn’t want to just fix it once. They wanted to make the system predictable so they could ensure that this problem wouldn’t keep resurfacing.</p>\n<h3>The underlying problem</h3>\n<p>The underlying problem that they identified was the way that the data flowed through the application.</p>\n<p><em>Note: this is what I’ve gleaned from simplified versions that they’ve shared in talks. I’m sure the actual architecture looked different.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*OcTeAqv8AU_z-O2HuucmeA.png\"><figcaption>Models pass data to the view layer.</figcaption></figure><p>They had models which held the data and would pass data to the view layer to render the data.</p>\n<p>Because user interaction happened through the views, the views sometimes needed to update models based on user input. And sometimes models needed to update other models.</p>\n<p>On top of that, sometimes these actions would trigger a cascade of other changes. I envision this as an edge-of-your-seat game of Pong — it’s hard to know where the ball is going to land (or fall off the screen).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*7myoHOaUyFEmPC-dj61CKw.png\"><figcaption>Views update models. Models update other models. This starts to look like a really edge-of-your-seat game of Pong.</figcaption></figure><p>Throw in the fact that these changes could be happening asynchronously. One change could trigger multiple other changes. I imagine this as throwing a whole bag of ping-pong balls into your Pong game, with them flying all over the place and crossing paths.</p>\n<p>All in all, it makes for a hard to debug data flow.</p>\n<h3>The solution: unidirectional data flow</h3>\n<p>So Facebook decided to try a different kind of architecture, where the data flows in one direction — only one direction — and when you need to insert new data, the flow starts all over again at the beginning. They called their architecture Flux.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*lZM0yU9ExEMd7DggVxXkxA.png\"><figcaption>The diagram you’ll find in Facebook’s Flux docs. It is way cooler than it looks.</figcaption></figure><p>This is actually really cool… but you probably can’t tell it from the diagram above.</p>\n<p>Once you understand Flux, this diagram is pretty clear. The problem is that if you’re coming to the documentation completely new to Flux, I don’t think that this diagram helps you understand it… and that’s what a diagram should do. It should give you a big picture understanding of a system before you dive in to really start figuring out how you do specific things.</p>\n<p>What helped me understand Flux better wasn’t a diagram like this, but instead thinking of the system in terms of different characters working together as a team to achieve a goal. So I want to introduce you to the cast of characters that I have in my head.</p>\n<h3>Meet the characters</h3>\n<p>I’m just going to give a quick introduction to the characters before I explain how they all interact.</p>\n<h4>The action creator</h4>\n<p>The first character is the action creator. It’s in charge of creating actions, which is the path that all changes and interactions should go through. Whenever you want to change the state of the app or have the view render differently, you shoot off an action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/487/1*DATbW4s4Ls6UPieavtdB7w.png\"><figcaption>The action creator is like a telegraph operator. It formats your message for you.</figcaption></figure><p>I think of the action creator as a telegraph operator. You go to the action creator knowing basically what message you want to send, and then the action creator formats that in a way that the rest of the system can understand.</p>\n<p>The action creator creates an action with a type and a payload. The type will be one of the types that you have defined as actions in your system (usually a list of constants). An example of an action would be something like MESSAGE_CREATE or MESSAGE_READ.</p>\n<p>There’s a neat side effect to having a part of your system that knows all of the possible actions. A new developer can come on the project, open up the action creator files and see the entire API — all of the possible state changes — that your system provides.</p>\n<p>Once it has created the action message, the action creator passes that action off to the dispatcher.</p>\n<h4>The dispatcher</h4>\n<p>The dispatcher is basically a big registry of callbacks. It’s kind of like a telephone operator at a phone switchboard. It keeps a list of all of the stores that it needs to send actions to. When an action comes in from the action creator, it will pass the action around to different stores.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/573/1*R5XHVGZfkPkmL7BcN5jMqg.png\"><figcaption>The dispatcher is like a switchboard operator. It knows all the callbacks for the different stores.</figcaption></figure><p>It does this in a synchronous way, which helps with that multi-ball Pong game effect that I was talking about earlier. And if you need to set up dependencies between stores so one gets updated before the other, you can have the dispatcher manage this for you with waitFor().</p>\n<p>The Flux dispatcher is different from dispatchers in many other architectures. The action is sent to all of the registered stores regardless of what the action type is. This means the store doesn’t just subscribe to some actions. It hears about all actions and filters out what it cares about and doesn’t.</p>\n<h4>The store</h4>\n<p>Next is the store. The store holds on to all state in the application, and all of the state changing logic lives inside of the stores.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/548/1*17MbK8jz94ynP-NFfL0rfw.png\"><figcaption>The store is an over-controlling bureaucrat. All changes must go through it.</figcaption></figure><p>I think of the store as an over-controlling bureaucrat. All state changes must be made by it personally. And you can’t directly request that it change the state. There are no setters on the store. To request a state change, you must follow proper procedure… you must submit an action via the action creator/dispatcher pipeline.</p>\n<p>As I mentioned above, if a store is registered with the dispatcher, all actions will be sent to it. Inside the store there’s usually a switch statement that looks at the action type to decide whether or not this store cares about this action. If the store does care about this action, it will figure out what change needs to be made based on this action and update the state.</p>\n<p>Once the store has made its changes to the state, it will emit a change event. This will notify the controller view that the state has changed.</p>\n<h4>The controller view and the view</h4>\n<p>The views are in charge of taking the state and rendering it out for the user as well as accepting user input.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/421/1*MY5xNk_JeKvGsGdywYD4EA.png\"><figcaption>The controller view is like a middle manager who gets notifications from the store and passes the data onto the views under it. The view presents that data to the user.</figcaption></figure><p>The view is a presenter. It isn’t aware of anything in the application, it just knows the data that’s handed to it and how to format the data into output that people understand (via HTML).</p>\n<p>The controller view is like a middle manager between the store and the view. The store tells it when the state has changed. It collects the new state and then passes the updated state along to all of the views under it.</p>\n<h3>How they all work together</h3>\n<p>So let’s take a look at how all of these characters work together.</p>\n<h4>The setup</h4>\n<p>First there’s the setup: application initialization which only happens once.</p>\n<p>1. Stores let the dispatcher know that they want to be notified whenever an action comes in.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*GHrusKRFhQ0Y6rrwjqI6QQ.png\"></figure><p>2. Then the controller views ask the stores for the latest state.</p>\n<p>3. When the stores give the state to the controller views, they pass that state along to their child views to render.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*66hoDpUhczSXrgH2cUUasw.png\"></figure><p>4. The controller views also ask the stores to keep them notified when state changes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*tV7VN0RjpFfwaf1PK3chIA.png\"></figure><h4>The data flow</h4>\n<p>Once the setup is done, the application is ready to accept user input. So let’s trigger an action by having the user make a change.</p>\n<p>We’ll kick off the data flow with a user interaction.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*SusQ7Aip2fSWg6raQtPSnA.png\"></figure><p>1. The view tells the action creator to prepare an action.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*dkm9qsWuD9DtXzH-u-DjJQ.png\"></figure><p>2. The action creator formats the action and sends it off to the dispatcher.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*fJwvtpq0XQhB4mUZwh7YOQ.png\"></figure><p>3. The dispatcher sends the action off to the stores in sequence. Each store gets notified of all actions. Then the store decides whether it cares about this one or not, and changes the state accordingly.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*RLrImTDeArSMoA4kZsajLQ.png\"></figure><p>4. Once it’s done changing state, the store lets its subscribed view controllers know.</p>\n<p>5. Those view controllers will then ask the store to give them the updated state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*5SXO2eftdQveFqImGDVB9A.png\"></figure><p>6. After the store gives it the state, the view controller will tell its child views to rerender based on the new state.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*fWBaUg9-_1-V5M2YQBWhWg.png\"></figure><p>So that’s how I think of Flux. Hope it helps!</p>\n<h3>Coming up next…</h3>\n<p><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.w36q3cvk6\">A cartoon intro to Redux - Code Cartoons</a></p>\n<figure><a href=\"https://leanpub.com/codecartoons-react\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*b4pDY7WpzfoGJ2IeRnSiYQ.png\"></a></figure><figure><a href=\"https://tinyletter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*Vhx6UMeHXRPAEOGaPq8vQA.png\"></a></figure><figure><a href=\"https://twitter.com/codecartoons\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/1*_oQtFJQYeeOkz4T81Sg4dA.png\"></a></figure><h3>Resources</h3>\n<ul>\n<li><a href=\"https://facebook.github.io/flux/docs/overview.html\">Flux documentation</a></li>\n<li><a href=\"http://fluxxor.com/what-is-flux.html\">Fluxxor documentation</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6\">The Case for Flux</a></li>\n</ul>\n<p><em>Thank you to the fantastic </em><a href=\"https://twitter.com/kentcdodds\"><em>Kent C. Dodds,</em></a><em> </em><a href=\"https://twitter.com/mzabriskie\"><em>Matt Zabriskie,</em></a><em> and </em><a href=\"https://twitter.com/Vjeux\"><em>Christopher Chedeau</em></a><em> for their early feedback, and to all the folks at </em><a href=\"https://twitter.com/brooklyn_js\"><em>BrooklynJS</em></a><em> for their comments on the live action version!</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6157355ab207\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux</a> was originally published in <a href=\"https://code-cartoons.com/\">Code Cartoons</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["javascript","react","flux"],"color":"blue","category":"Code Cartoons -","date":"2015-09-29 12:36:47","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Testing Reducers in NGRX Store","pubDate":"2018-02-12 00:00:00","link":"https://toddmotto.com/ngrx-store-testing-reducers","guid":"https://toddmotto.com/ngrx-store-testing-reducers","author":"","thumbnail":"","description":"\n<p>Next in this series, we’re going to learn how to test Reducers in NGRX Store. In the previous testing post we explored <a href=\"https://toddmotto.com/ngrx-store-testing-actions\">Testing Actions</a>.</p>\n\n<p>As we know, Reducers are just pure functions. This makes it extremely easy to test your reducers - which control state changes - and respond to actions accordingly.</p>\n\n<p>Another reason to adopt the Redux pattern with Angular is to enable step by step predictability and recording of all state object changes through immutable update patterns.</p>\n\n<p>Reducers play a few key roles for us:</p>\n\n<ul>\n<li>Accept old state, and an action</li>\n  <li>Respond to actions and compose/return new state</li>\n  <li>Handle changes via immutable patterns</li>\n</ul>\n<p>With this in mind, let’s jump into testing.</p>\n\n<div class=\"toc\">\n  <p class=\"no_toc\"><span class=\"gamma\">Table of contents</span></p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#testing-reducers\">Testing Reducers</a>    <ul>\n<li><a href=\"https://toddmotto.com/#what-well-test\">What we’ll test</a></li>\n      <li><a href=\"https://toddmotto.com/#spec-file\">Spec File</a></li>\n      <li><a href=\"https://toddmotto.com/#assertions\">Assertions</a></li>\n      <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n    </ul>\n</li>\n</ul>\n</div>\n\n<h3>Testing Reducers</h3>\n\n<p>The way we think about testing reducers is actually to first consider the actions we are dispatching. Our thought process is “When I dispatch XYZ action, I expect my reducer to return me state that looks like ABC”. We pass something in, we get something new out. And this is just behaviour of <a href=\"https://toddmotto.com/pure-versus-impure-functions\">pure functions</a>.</p>\n\n<h4>What we’ll test</h4>\n\n<p>In this scenario, we’re going to test load a collection of pizzas. It nicely demonstrates a lot of the core concepts you’ll need.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// pizzas.action.ts</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Fail'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Success'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzas</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasFail</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasSuccess</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To go with it, my reducer - which uses an entity pattern to flatten my data structure into object keys for performance:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// pizzas.reducer.ts</span>\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">};</span>\n  <span class=\"nl\">loaded</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n  <span class=\"nl\">loading</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">initialState</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">reducer</span><span class=\"p\">(</span>\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initialState</span><span class=\"p\">,</span>\n  <span class=\"nx\">action</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzasAction</span>\n<span class=\"p\">):</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n        <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">pizzas</span> <span class=\"o\">=</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">;</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">pizzas</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">},</span> <span class=\"nx\">pizza</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"p\">...</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">]:</span> <span class=\"nx\">pizza</span><span class=\"p\">,</span>\n          <span class=\"p\">};</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n          <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">);</span>\n\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n        <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">entities</span><span class=\"p\">,</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"na\">LOAD_PIZZAS_FAIL</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n        <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The thing I love about using reducers is the absolute guarantee of sensible state changes. For smaller applications I’d even adopt the Redux pattern because it’s more about the thinking than the technology. Clarity trumps random updates across services/components for me.</p>\n\n<p>The whole reason we should test our reducers is to verify our state changes simply do their job. Once they work, they’ll work forever, and we can simply request the data we’ve added to the Store via selectors - which we’ll test next in this series.</p>\n\n<h4>Spec File</h4>\n\n<p>Because we’re testing Action -&gt; Reducer -&gt; New State, this is how we want to think when we test. Before we dive in though, we should always create an initial reducer test that checks that in the absense of an action the <code class=\"highlighter-rouge\">initialState</code> we create is always returned to the store.</p>\n\n<p>This is for reasons such as initialisation of the store, when our reducer supplies that initial state, as well as if any actions are dispatched that don’t even exist. This second use case is likely something we aren’t worrying too much about however, as we’re testing right ;)</p>\n\n<p>Let’s setup the spec file, I’m using barrels (<code class=\"highlighter-rouge\">index.ts</code>) to push everything in subdirectories upwards. This makes testing far easier, and we also have a single variable to reference things from:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromPizzas</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.reducer'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromActions</span> <span class=\"k\">from</span> <span class=\"s1\">'../actions/pizzas.action'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pizza</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../../models/pizza.model'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'PizzasReducer'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'undefined action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should return the default state'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// I nest all tests under the reducer's name </span>\n  <span class=\"c1\">// for readability in the terminal</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Above, we destructure that <code class=\"highlighter-rouge\">initialState</code> property from the <code class=\"highlighter-rouge\">fromPizzas</code> import, which gives us this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">initialState</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>This means we’re testing against the real <code class=\"highlighter-rouge\">initialState</code> object in our applications as well.</p>\n\n<p>We also have <code class=\"highlighter-rouge\">const action = {}</code> which creates an object that we’re using to fake a dispatch. Anytime we dispatch for real, the store invokes the reducer. Here in the tests it’s our responsibility to invoke the reducers and test their output.</p>\n\n<p>The magic is happening where we create <code class=\"highlighter-rouge\">const state</code> and invoke our reducer function. We pass in undefined, because we want to test zero state, and also a totally blank action.</p>\n\n<p>The reason this returns new state is because of this guy at the end of our reducer:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">reducer</span><span class=\"p\">(</span>\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initialState</span><span class=\"p\">,</span>\n  <span class=\"nx\">action</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzasAction</span>\n<span class=\"p\">):</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">:</span> <span class=\"p\">{...}</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">{...}</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">:</span> <span class=\"p\">{...}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// I'm outside the switch case </span>\n  <span class=\"c1\">// and I am here to save the day...</span>\n  <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You could totally add a <code class=\"highlighter-rouge\">default</code> case to the switch, but honestly I prefer this way as it’s avoiding the switch altogether and I can just leave the switch to handle my actions. That’s my preference anyway, and you can adopt either.</p>\n\n<h4>Assertions</h4>\n\n<p>The test is evaluated through nothing more than our friend <code class=\"highlighter-rouge\">expect()</code>. Notice how we’re building a complex Angular application, yet have to setup nothing Angular related? Looking at you, TestBed, if you’re awake.</p>\n\n<p>The final line of our test looks like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n<span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>So what’s happening here? Here’s the flow of what’s happened if you’ve not caught onto it just yet:</p>\n\n<ul>\n<li>We fake dispatch an action (call our reducer with some state and an action we’d like to test)</li>\n  <li>We bind the result to <code class=\"highlighter-rouge\">state</code> and check a property on that returned object</li>\n</ul>\n<p>In our case, we’re testing the entire object - not just a property. When we dig a little further in a minute we’ll be testing individual properties but for initial state we can import our <code class=\"highlighter-rouge\">initialState</code> object and just make sure that actually works! And yes, it certainly does.</p>\n\n<p>Here’s how we can think about the above test:</p>\n\n<ul>\n<li>Here’s my initialState.</li>\n  <li>If I pass it into my reducer and we have no action, does it give it to me back?</li>\n  <li>Yes it does, here you are! Green lights fill the room and some confetti comes down.</li>\n</ul>\n<p>So let’s look at our first real test case, <code class=\"highlighter-rouge\">LOAD_PIZZAS</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This state change awaits the action, and simply changes <code class=\"highlighter-rouge\">loading</code> to <code class=\"highlighter-rouge\">true</code>. That’d be a nice easy test to write:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LOAD_PIZZAS action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should set loading to true'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">fromActions</span><span class=\"p\">.</span><span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loading</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"c1\">// untouched props, good to add regardless</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>The difference in the test above from the empty action test, is we’re actually creating an instance of the action class, and then passing that instance into the reducer - just like our store does for us. At this point we’re also passing in the <code class=\"highlighter-rouge\">initialState</code> property as the first argument to the reducer. This gets passed through as <code class=\"highlighter-rouge\">state</code> to our function and the action takes care of the rest.</p>\n\n<p>When it also comes to mocking out state that we might want to test - this is the place we want to do that.</p>\n\n<p>We’re then testing those individual properties on the state slice to ensure that only <code class=\"highlighter-rouge\">loading</code> has changed from <code class=\"highlighter-rouge\">false</code> to <code class=\"highlighter-rouge\">true</code> and the remaining props are untouched.</p>\n\n<p>Before we move onto testing the success, let’s test the fail. It’s nice and simple and essentially just a reset:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’re not <code class=\"highlighter-rouge\">loading</code> anymore, and we’ve definitely not <code class=\"highlighter-rouge\">loaded</code> - both are reverted to false regardless of their current state - which would likely be <code class=\"highlighter-rouge\">loading: true</code> beforehand.</p>\n\n<p>Let’s add the test:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LOAD_PIZZAS action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should return the previous state'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">previousState</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">initialState</span><span class=\"p\">,</span> <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">};</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">fromActions</span><span class=\"p\">.</span><span class=\"nx\">LoadPizzasFail</span><span class=\"p\">({});</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"nx\">previousState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Okay some new ideas here. First, I’m taking that <code class=\"highlighter-rouge\">initialState</code> and changing it before running the rest of the test. This is simply setting <code class=\"highlighter-rouge\">loading</code> to true, and I’m expecting my reducer to flip it back to false once the <code class=\"highlighter-rouge\">LoadPizzasFail</code> action is called and passed through.</p>\n\n<p>Once it is, I’m expecting it to equal my <code class=\"highlighter-rouge\">initialState</code> value, because I’m resetting all <code class=\"highlighter-rouge\">loaded</code> and <code class=\"highlighter-rouge\">loading</code> props on a <code class=\"highlighter-rouge\">LOAD_PIZZAS_FAIL</code> action (we merge in all existing state inside the reducer as well - to not affect the <code class=\"highlighter-rouge\">entities</code>, but this doesn’t really matter for this test).</p>\n\n<p>Let’s move onto the <code class=\"highlighter-rouge\">LOAD_PIZZAS_SUCCESS</code> action inside the reducer. This one’s interesting and I hope you like what’s about to be shown, as I’m assuming an <em>array</em> response from the JSON API, however the reducer maps this array to a flattened data structure of entities using <code class=\"highlighter-rouge\">Array.prototype.reduce</code> (you could move this out into a utility function for sure, or use <code class=\"highlighter-rouge\">@ngrx/entity</code>):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">pizzas</span> <span class=\"o\">=</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">pizzas</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">},</span> <span class=\"nx\">pizza</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n          <span class=\"p\">...</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n          <span class=\"p\">[</span><span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">]:</span> <span class=\"nx\">pizza</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nx\">entities</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>So we can create both the expected JSON response and entities upfront, pass the array in, and compare the predicted structure:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LOAD_PIZZAS_SUCCESS action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should populate entities from the array'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #1'</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">},</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #2'</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">},</span>\n    <span class=\"p\">];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"nx\">pizzas</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n      <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"nx\">pizzas</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">};</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">fromActions</span><span class=\"p\">.</span><span class=\"nx\">LoadPizzasSuccess</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loading</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">pizzas</code> array is what I’m expecting back from the aforementioned JSON response, obviously we mock the data here though, and then we map across each pizza to the <code class=\"highlighter-rouge\">entities</code> object manually.</p>\n\n<p>Now the data’s ready and setup, we simply pass the <em>array</em> of pizzas into <code class=\"highlighter-rouge\">LoadPizzasSuccess</code> and await the new state from the reducer.</p>\n\n<p>We then test each property accordingly against a result. You’ll also notice I’m using the <code class=\"highlighter-rouge\">toEqual(entities)</code> from the local function scope inside the test - I’m only creating the entities object for checking my desired outcome and nothing more.</p>\n\n<h4>Conclusion</h4>\n\n<p>Reducers are the lifeblood of the redux pattern, they make things tick so it’s important we test them correctly. It’s up to you how to compose them, and I hope you’ve learned a few tricks on how to setup your reducer depending on what you’d like to test.</p>\n\n<p>Remember, they’re just pure functions, so you can modify state before and after calling them - and test your actions/results accordingly.</p>\n\n<p>You can check out my <a href=\"https://github.com/UltimateAngular/ngrx-store-effects-app/blob/25-testing-reducers/src/products/store/reducers/pizzas.reducer.spec.ts\">NGRX app</a> for more examples on testing reducers.</p>\n","content":"\n<p>Next in this series, we’re going to learn how to test Reducers in NGRX Store. In the previous testing post we explored <a href=\"https://toddmotto.com/ngrx-store-testing-actions\">Testing Actions</a>.</p>\n\n<p>As we know, Reducers are just pure functions. This makes it extremely easy to test your reducers - which control state changes - and respond to actions accordingly.</p>\n\n<p>Another reason to adopt the Redux pattern with Angular is to enable step by step predictability and recording of all state object changes through immutable update patterns.</p>\n\n<p>Reducers play a few key roles for us:</p>\n\n<ul>\n<li>Accept old state, and an action</li>\n  <li>Respond to actions and compose/return new state</li>\n  <li>Handle changes via immutable patterns</li>\n</ul>\n<p>With this in mind, let’s jump into testing.</p>\n\n<div class=\"toc\">\n  <p class=\"no_toc\"><span class=\"gamma\">Table of contents</span></p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#testing-reducers\">Testing Reducers</a>    <ul>\n<li><a href=\"https://toddmotto.com/#what-well-test\">What we’ll test</a></li>\n      <li><a href=\"https://toddmotto.com/#spec-file\">Spec File</a></li>\n      <li><a href=\"https://toddmotto.com/#assertions\">Assertions</a></li>\n      <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n    </ul>\n</li>\n</ul>\n</div>\n\n<h3>Testing Reducers</h3>\n\n<p>The way we think about testing reducers is actually to first consider the actions we are dispatching. Our thought process is “When I dispatch XYZ action, I expect my reducer to return me state that looks like ABC”. We pass something in, we get something new out. And this is just behaviour of <a href=\"https://toddmotto.com/pure-versus-impure-functions\">pure functions</a>.</p>\n\n<h4>What we’ll test</h4>\n\n<p>In this scenario, we’re going to test load a collection of pizzas. It nicely demonstrates a lot of the core concepts you’ll need.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// pizzas.action.ts</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Fail'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Success'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzas</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasFail</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasSuccess</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To go with it, my reducer - which uses an entity pattern to flatten my data structure into object keys for performance:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// pizzas.reducer.ts</span>\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">};</span>\n  <span class=\"nl\">loaded</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n  <span class=\"nl\">loading</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">initialState</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">reducer</span><span class=\"p\">(</span>\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initialState</span><span class=\"p\">,</span>\n  <span class=\"nx\">action</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzasAction</span>\n<span class=\"p\">):</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n        <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">pizzas</span> <span class=\"o\">=</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">;</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">pizzas</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">},</span> <span class=\"nx\">pizza</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"p\">...</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">]:</span> <span class=\"nx\">pizza</span><span class=\"p\">,</span>\n          <span class=\"p\">};</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n          <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">);</span>\n\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n        <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">entities</span><span class=\"p\">,</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"na\">LOAD_PIZZAS_FAIL</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n        <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The thing I love about using reducers is the absolute guarantee of sensible state changes. For smaller applications I’d even adopt the Redux pattern because it’s more about the thinking than the technology. Clarity trumps random updates across services/components for me.</p>\n\n<p>The whole reason we should test our reducers is to verify our state changes simply do their job. Once they work, they’ll work forever, and we can simply request the data we’ve added to the Store via selectors - which we’ll test next in this series.</p>\n\n<h4>Spec File</h4>\n\n<p>Because we’re testing Action -&gt; Reducer -&gt; New State, this is how we want to think when we test. Before we dive in though, we should always create an initial reducer test that checks that in the absense of an action the <code class=\"highlighter-rouge\">initialState</code> we create is always returned to the store.</p>\n\n<p>This is for reasons such as initialisation of the store, when our reducer supplies that initial state, as well as if any actions are dispatched that don’t even exist. This second use case is likely something we aren’t worrying too much about however, as we’re testing right ;)</p>\n\n<p>Let’s setup the spec file, I’m using barrels (<code class=\"highlighter-rouge\">index.ts</code>) to push everything in subdirectories upwards. This makes testing far easier, and we also have a single variable to reference things from:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromPizzas</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.reducer'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromActions</span> <span class=\"k\">from</span> <span class=\"s1\">'../actions/pizzas.action'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pizza</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../../models/pizza.model'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'PizzasReducer'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'undefined action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should return the default state'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// I nest all tests under the reducer's name </span>\n  <span class=\"c1\">// for readability in the terminal</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Above, we destructure that <code class=\"highlighter-rouge\">initialState</code> property from the <code class=\"highlighter-rouge\">fromPizzas</code> import, which gives us this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">initialState</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>This means we’re testing against the real <code class=\"highlighter-rouge\">initialState</code> object in our applications as well.</p>\n\n<p>We also have <code class=\"highlighter-rouge\">const action = {}</code> which creates an object that we’re using to fake a dispatch. Anytime we dispatch for real, the store invokes the reducer. Here in the tests it’s our responsibility to invoke the reducers and test their output.</p>\n\n<p>The magic is happening where we create <code class=\"highlighter-rouge\">const state</code> and invoke our reducer function. We pass in undefined, because we want to test zero state, and also a totally blank action.</p>\n\n<p>The reason this returns new state is because of this guy at the end of our reducer:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">reducer</span><span class=\"p\">(</span>\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initialState</span><span class=\"p\">,</span>\n  <span class=\"nx\">action</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzasAction</span>\n<span class=\"p\">):</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">:</span> <span class=\"p\">{...}</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">{...}</span>\n    <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">:</span> <span class=\"p\">{...}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// I'm outside the switch case </span>\n  <span class=\"c1\">// and I am here to save the day...</span>\n  <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You could totally add a <code class=\"highlighter-rouge\">default</code> case to the switch, but honestly I prefer this way as it’s avoiding the switch altogether and I can just leave the switch to handle my actions. That’s my preference anyway, and you can adopt either.</p>\n\n<h4>Assertions</h4>\n\n<p>The test is evaluated through nothing more than our friend <code class=\"highlighter-rouge\">expect()</code>. Notice how we’re building a complex Angular application, yet have to setup nothing Angular related? Looking at you, TestBed, if you’re awake.</p>\n\n<p>The final line of our test looks like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n<span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>So what’s happening here? Here’s the flow of what’s happened if you’ve not caught onto it just yet:</p>\n\n<ul>\n<li>We fake dispatch an action (call our reducer with some state and an action we’d like to test)</li>\n  <li>We bind the result to <code class=\"highlighter-rouge\">state</code> and check a property on that returned object</li>\n</ul>\n<p>In our case, we’re testing the entire object - not just a property. When we dig a little further in a minute we’ll be testing individual properties but for initial state we can import our <code class=\"highlighter-rouge\">initialState</code> object and just make sure that actually works! And yes, it certainly does.</p>\n\n<p>Here’s how we can think about the above test:</p>\n\n<ul>\n<li>Here’s my initialState.</li>\n  <li>If I pass it into my reducer and we have no action, does it give it to me back?</li>\n  <li>Yes it does, here you are! Green lights fill the room and some confetti comes down.</li>\n</ul>\n<p>So let’s look at our first real test case, <code class=\"highlighter-rouge\">LOAD_PIZZAS</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This state change awaits the action, and simply changes <code class=\"highlighter-rouge\">loading</code> to <code class=\"highlighter-rouge\">true</code>. That’d be a nice easy test to write:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LOAD_PIZZAS action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should set loading to true'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">fromActions</span><span class=\"p\">.</span><span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loading</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"c1\">// untouched props, good to add regardless</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>The difference in the test above from the empty action test, is we’re actually creating an instance of the action class, and then passing that instance into the reducer - just like our store does for us. At this point we’re also passing in the <code class=\"highlighter-rouge\">initialState</code> property as the first argument to the reducer. This gets passed through as <code class=\"highlighter-rouge\">state</code> to our function and the action takes care of the rest.</p>\n\n<p>When it also comes to mocking out state that we might want to test - this is the place we want to do that.</p>\n\n<p>We’re then testing those individual properties on the state slice to ensure that only <code class=\"highlighter-rouge\">loading</code> has changed from <code class=\"highlighter-rouge\">false</code> to <code class=\"highlighter-rouge\">true</code> and the remaining props are untouched.</p>\n\n<p>Before we move onto testing the success, let’s test the fail. It’s nice and simple and essentially just a reset:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’re not <code class=\"highlighter-rouge\">loading</code> anymore, and we’ve definitely not <code class=\"highlighter-rouge\">loaded</code> - both are reverted to false regardless of their current state - which would likely be <code class=\"highlighter-rouge\">loading: true</code> beforehand.</p>\n\n<p>Let’s add the test:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LOAD_PIZZAS action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should return the previous state'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">previousState</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">initialState</span><span class=\"p\">,</span> <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">};</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">fromActions</span><span class=\"p\">.</span><span class=\"nx\">LoadPizzasFail</span><span class=\"p\">({});</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"nx\">previousState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Okay some new ideas here. First, I’m taking that <code class=\"highlighter-rouge\">initialState</code> and changing it before running the rest of the test. This is simply setting <code class=\"highlighter-rouge\">loading</code> to true, and I’m expecting my reducer to flip it back to false once the <code class=\"highlighter-rouge\">LoadPizzasFail</code> action is called and passed through.</p>\n\n<p>Once it is, I’m expecting it to equal my <code class=\"highlighter-rouge\">initialState</code> value, because I’m resetting all <code class=\"highlighter-rouge\">loaded</code> and <code class=\"highlighter-rouge\">loading</code> props on a <code class=\"highlighter-rouge\">LOAD_PIZZAS_FAIL</code> action (we merge in all existing state inside the reducer as well - to not affect the <code class=\"highlighter-rouge\">entities</code>, but this doesn’t really matter for this test).</p>\n\n<p>Let’s move onto the <code class=\"highlighter-rouge\">LOAD_PIZZAS_SUCCESS</code> action inside the reducer. This one’s interesting and I hope you like what’s about to be shown, as I’m assuming an <em>array</em> response from the JSON API, however the reducer maps this array to a flattened data structure of entities using <code class=\"highlighter-rouge\">Array.prototype.reduce</code> (you could move this out into a utility function for sure, or use <code class=\"highlighter-rouge\">@ngrx/entity</code>):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">pizzas</span> <span class=\"o\">=</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">pizzas</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">},</span> <span class=\"nx\">pizza</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n          <span class=\"p\">...</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n          <span class=\"p\">[</span><span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">]:</span> <span class=\"nx\">pizza</span><span class=\"p\">,</span>\n        <span class=\"p\">};</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">,</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nx\">entities</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>So we can create both the expected JSON response and entities upfront, pass the array in, and compare the predicted structure:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LOAD_PIZZAS_SUCCESS action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should populate entities from the array'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #1'</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">},</span>\n      <span class=\"p\">{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #2'</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">},</span>\n    <span class=\"p\">];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"nx\">pizzas</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n      <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"nx\">pizzas</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">};</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">initialState</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">;</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">fromActions</span><span class=\"p\">.</span><span class=\"nx\">LoadPizzasSuccess</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"nx\">initialState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loading</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">pizzas</code> array is what I’m expecting back from the aforementioned JSON response, obviously we mock the data here though, and then we map across each pizza to the <code class=\"highlighter-rouge\">entities</code> object manually.</p>\n\n<p>Now the data’s ready and setup, we simply pass the <em>array</em> of pizzas into <code class=\"highlighter-rouge\">LoadPizzasSuccess</code> and await the new state from the reducer.</p>\n\n<p>We then test each property accordingly against a result. You’ll also notice I’m using the <code class=\"highlighter-rouge\">toEqual(entities)</code> from the local function scope inside the test - I’m only creating the entities object for checking my desired outcome and nothing more.</p>\n\n<h4>Conclusion</h4>\n\n<p>Reducers are the lifeblood of the redux pattern, they make things tick so it’s important we test them correctly. It’s up to you how to compose them, and I hope you’ve learned a few tricks on how to setup your reducer depending on what you’d like to test.</p>\n\n<p>Remember, they’re just pure functions, so you can modify state before and after calling them - and test your actions/results accordingly.</p>\n\n<p>You can check out my <a href=\"https://github.com/UltimateAngular/ngrx-store-effects-app/blob/25-testing-reducers/src/products/store/reducers/pizzas.reducer.spec.ts\">NGRX app</a> for more examples on testing reducers.</p>\n","enclosure":{},"categories":["ngrx"],"color":"purple","category":"Todd Motto","date":"2018-02-12 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Testing Actions in NGRX Store","pubDate":"2018-02-08 00:00:00","link":"https://toddmotto.com/ngrx-store-testing-actions","guid":"https://toddmotto.com/ngrx-store-testing-actions","author":"","thumbnail":"","description":"\n<p>In this small NGRX Store testing series, we’re going to learn how to test Actions, Reducers and Selectors. Let’s begin with Actions, or more specifically <a href=\"https://toddmotto.com/ngrx-store-actions-versus-action-creators\">Action Creators</a> and how to test them.</p>\n\n<div class=\"toc\">\n  <p class=\"no_toc\"><span class=\"gamma\">Table of contents</span></p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#testing-actions\">Testing Actions</a>    <ul>\n<li><a href=\"https://toddmotto.com/#what-well-test\">What we’ll test</a></li>\n      <li><a href=\"https://toddmotto.com/#spec-file\">Spec File</a></li>\n      <li><a href=\"https://toddmotto.com/#creating-an-instance\">Creating an instance</a></li>\n      <li><a href=\"https://toddmotto.com/#assertions\">Assertions</a></li>\n    </ul>\n</li>\n</ul>\n</div>\n\n<h3>Testing Actions</h3>\n\n<p>Ideally, we just want to validate that our actions are setup correctly - we’re not testing deep “functionality” like a reducer, actions take on a more simple form.</p>\n\n<h4>What we’ll test</h4>\n\n<p>Before we dive in, let’s look at what we’ll be testing:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// pizzas.action.ts</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Fail'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Success'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzas</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasFail</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasSuccess</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’ve got a blend of typical action constants and action creators. We just want to interact with the action creators when we actually build our application, and we also want to do the same with test!</p>\n\n<p>Separating the action constants out also gives us some additional benefit when it comes to testing actions - and using classes for creators gives us a nice boost with TypeScript for safety.</p>\n\n<h4>Spec File</h4>\n\n<p>I’m going to assume you know how to setup some tests with Angular, we’re not focusing on that here. I typically create my test files alongside the code I’m testing:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>products/store/actions/pizzas.action.ts\nproducts/store/actions/pizzas.action.spec.ts\n</code></pre></div></div>\n\n<p>So let’s start with our friend <code class=\"highlighter-rouge\">describe</code> and setup the test cases for each action:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzasFail'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzasSuccess'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>For now, let’s just test our most basic action <code class=\"highlighter-rouge\">LoadPizzas</code>. Looking at the action creator, it only accepts a type and no payload. So that’s nice and simple.</p>\n\n<h4>Creating an instance</h4>\n\n<p>To test our action, much like when we dispatch inside a component, we need to create a new instance of the class and then simple test our custom object against a typical object that the Redux pattern accepts:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LoadPizzas</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.action'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Nice and simple, right?</p>\n\n<h4>Assertions</h4>\n\n<p>We can next import the <code class=\"highlighter-rouge\">LOAD_PIZZAS</code> action constant (because we want to check that our creator is composing the right object for us). Finally, we can finish things off now (but be warned, this below code will error and I’ll explain why after):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">,</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.action'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This test is pretty much finished, and while it’s <em>technically</em> correct (as it produces an object with a <code class=\"highlighter-rouge\">type</code> property) it will <em>fail</em>! Why? Because we are mixing object types and that’s now what our test cases are comparing.</p>\n\n<p>Our <code class=\"highlighter-rouge\">const action</code> contains an object identity that looks like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">LoadPizzas</span> <span class=\"p\">{</span> <span class=\"nl\">type</span><span class=\"p\">:</span> <span class=\"s1\">'LOAD_PIZZAS'</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is an extremely important piece to note! We are creating a new <em>instance</em> which means we’re creating a new <em>custom object</em> called <code class=\"highlighter-rouge\">LoadPizzas</code>. A “normal” object’s identity would look like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">Object</span> <span class=\"p\">{</span> <span class=\"nl\">type</span><span class=\"p\">:</span> <span class=\"s1\">'LOAD_PIZZAS'</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>See the difference? When we create <code class=\"highlighter-rouge\">new Object()</code> or even just using the literal <code class=\"highlighter-rouge\">{}</code> approach, we create an <code class=\"highlighter-rouge\">Object</code> type. The JavaScript engine doesn’t care when executing our code, but we should care for our tests because two objects are never the same.</p>\n\n<p>Running the tests, we get this error:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Expected object to be a kind of Object, \nbut was LoadPizzas { type: '[Products] Load Pizzas' }\n</code></pre></div></div>\n\n<p>So, what can we do to fix this? There are other ways you could test actions, I just find this the easiest way using <code class=\"highlighter-rouge\">toEqual()</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">action</span> <span class=\"p\">}).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>A simple change. This uses an object literal and spreads the <code class=\"highlighter-rouge\">LoadPizzas</code> object into it. Thus rendering the types the exact same, and we have a happy test assertion. There are other ways to do this, without the spread operator, but I find testing it this way is far better than attempting to do something like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>In the above example it looks like it’d make more sense - but actions are trivial and I find the object literal clearer and easier to manage (as well as read).</p>\n\n<p>So, onto testing the <code class=\"highlighter-rouge\">payload</code>. Interestingly, <code class=\"highlighter-rouge\">type</code> is the only required property with NGRX Store actions so we don’t technically need to call it “payload” - but I prefer a consistent convention than randomly naming my properties. Plus it’s just more to think about for no apparent gain.</p>\n\n<p>Before we test our <code class=\"highlighter-rouge\">LoadPizzasSuccess</code> action, let’s remind ourselves of the action creator:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasSuccess</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Okay, so an array of pizzas! This is great as when we also test the action, we’ll see TypeScript benefits in our text editors/IDEs while we write our tests. If you’re supplying it an incorrect data structure, you’re going to see errors.</p>\n\n<p>The setup is pretty simple to test for a <code class=\"highlighter-rouge\">payload</code> as well, we just need to somewhat mock the action’s expected data structure:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzasSuccess'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #1'</span><span class=\"p\">,</span>\n        <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'onion'</span> <span class=\"p\">}],</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #2'</span><span class=\"p\">,</span>\n        <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'onion'</span> <span class=\"p\">}],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzasSuccess</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">action</span> <span class=\"p\">}).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">,</span>\n      <span class=\"nx\">payload</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Notice how you just pass the <code class=\"highlighter-rouge\">payload</code> straight into the <code class=\"highlighter-rouge\">LoadPizzasSuccess</code> action, and then use the <em>same</em> payload property to create the object property again inside <code class=\"highlighter-rouge\">toEqual()</code>.</p>\n\n<p>This makes sure that our action is simply passing things through correctly, and our basic tests simply verify the declarative structure we have is correct. Nothing really more to it.</p>\n\n<p>The key thing to remember is we’re simply testing inputs and outputs here. Does my action creator produce the right object? Yes, or no. However, we also get some TypeScript benefit when writing the tests as well if you write them first, as our actions will then be strict and implement the correct data structures against interfaces.</p>\n\n<p>And that’s pretty much all there is to testing actions! Happy dispatching.</p>\n","content":"\n<p>In this small NGRX Store testing series, we’re going to learn how to test Actions, Reducers and Selectors. Let’s begin with Actions, or more specifically <a href=\"https://toddmotto.com/ngrx-store-actions-versus-action-creators\">Action Creators</a> and how to test them.</p>\n\n<div class=\"toc\">\n  <p class=\"no_toc\"><span class=\"gamma\">Table of contents</span></p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#testing-actions\">Testing Actions</a>    <ul>\n<li><a href=\"https://toddmotto.com/#what-well-test\">What we’ll test</a></li>\n      <li><a href=\"https://toddmotto.com/#spec-file\">Spec File</a></li>\n      <li><a href=\"https://toddmotto.com/#creating-an-instance\">Creating an instance</a></li>\n      <li><a href=\"https://toddmotto.com/#assertions\">Assertions</a></li>\n    </ul>\n</li>\n</ul>\n</div>\n\n<h3>Testing Actions</h3>\n\n<p>Ideally, we just want to validate that our actions are setup correctly - we’re not testing deep “functionality” like a reducer, actions take on a more simple form.</p>\n\n<h4>What we’ll test</h4>\n\n<p>Before we dive in, let’s look at what we’ll be testing:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// pizzas.action.ts</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Fail'</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span> <span class=\"o\">=</span> <span class=\"s1\">'[Products] Load Pizzas Success'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzas</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasFail</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_FAIL</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasSuccess</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’ve got a blend of typical action constants and action creators. We just want to interact with the action creators when we actually build our application, and we also want to do the same with test!</p>\n\n<p>Separating the action constants out also gives us some additional benefit when it comes to testing actions - and using classes for creators gives us a nice boost with TypeScript for safety.</p>\n\n<h4>Spec File</h4>\n\n<p>I’m going to assume you know how to setup some tests with Angular, we’re not focusing on that here. I typically create my test files alongside the code I’m testing:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>products/store/actions/pizzas.action.ts\nproducts/store/actions/pizzas.action.spec.ts\n</code></pre></div></div>\n\n<p>So let’s start with our friend <code class=\"highlighter-rouge\">describe</code> and setup the test cases for each action:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzasFail'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzasSuccess'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>For now, let’s just test our most basic action <code class=\"highlighter-rouge\">LoadPizzas</code>. Looking at the action creator, it only accepts a type and no payload. So that’s nice and simple.</p>\n\n<h4>Creating an instance</h4>\n\n<p>To test our action, much like when we dispatch inside a component, we need to create a new instance of the class and then simple test our custom object against a typical object that the Redux pattern accepts:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LoadPizzas</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.action'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Nice and simple, right?</p>\n\n<h4>Assertions</h4>\n\n<p>We can next import the <code class=\"highlighter-rouge\">LOAD_PIZZAS</code> action constant (because we want to check that our creator is composing the right object for us). Finally, we can finish things off now (but be warned, this below code will error and I’ll explain why after):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">,</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.action'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This test is pretty much finished, and while it’s <em>technically</em> correct (as it produces an object with a <code class=\"highlighter-rouge\">type</code> property) it will <em>fail</em>! Why? Because we are mixing object types and that’s now what our test cases are comparing.</p>\n\n<p>Our <code class=\"highlighter-rouge\">const action</code> contains an object identity that looks like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">LoadPizzas</span> <span class=\"p\">{</span> <span class=\"nl\">type</span><span class=\"p\">:</span> <span class=\"s1\">'LOAD_PIZZAS'</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is an extremely important piece to note! We are creating a new <em>instance</em> which means we’re creating a new <em>custom object</em> called <code class=\"highlighter-rouge\">LoadPizzas</code>. A “normal” object’s identity would look like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">Object</span> <span class=\"p\">{</span> <span class=\"nl\">type</span><span class=\"p\">:</span> <span class=\"s1\">'LOAD_PIZZAS'</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>See the difference? When we create <code class=\"highlighter-rouge\">new Object()</code> or even just using the literal <code class=\"highlighter-rouge\">{}</code> approach, we create an <code class=\"highlighter-rouge\">Object</code> type. The JavaScript engine doesn’t care when executing our code, but we should care for our tests because two objects are never the same.</p>\n\n<p>Running the tests, we get this error:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Expected object to be a kind of Object, \nbut was LoadPizzas { type: '[Products] Load Pizzas' }\n</code></pre></div></div>\n\n<p>So, what can we do to fix this? There are other ways you could test actions, I just find this the easiest way using <code class=\"highlighter-rouge\">toEqual()</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">action</span> <span class=\"p\">}).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOAD_PIZZAS</span> <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>A simple change. This uses an object literal and spreads the <code class=\"highlighter-rouge\">LoadPizzas</code> object into it. Thus rendering the types the exact same, and we have a happy test assertion. There are other ways to do this, without the spread operator, but I find testing it this way is far better than attempting to do something like this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzas'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzas</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">LOAD_PIZZAS</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>In the above example it looks like it’d make more sense - but actions are trivial and I find the object literal clearer and easier to manage (as well as read).</p>\n\n<p>So, onto testing the <code class=\"highlighter-rouge\">payload</code>. Interestingly, <code class=\"highlighter-rouge\">type</code> is the only required property with NGRX Store actions so we don’t technically need to call it “payload” - but I prefer a consistent convention than randomly naming my properties. Plus it’s just more to think about for no apparent gain.</p>\n\n<p>Before we test our <code class=\"highlighter-rouge\">LoadPizzasSuccess</code> action, let’s remind ourselves of the action creator:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">LoadPizzasSuccess</span> <span class=\"kr\">implements</span> <span class=\"nx\">Action</span> <span class=\"p\">{</span>\n  <span class=\"nx\">readonly</span> <span class=\"nx\">type</span> <span class=\"o\">=</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">;</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Okay, so an array of pizzas! This is great as when we also test the action, we’ll see TypeScript benefits in our text editors/IDEs while we write our tests. If you’re supplying it an incorrect data structure, you’re going to see errors.</p>\n\n<p>The setup is pretty simple to test for a <code class=\"highlighter-rouge\">payload</code> as well, we just need to somewhat mock the action’s expected data structure:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'LoadPizzasSuccess'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'should create an action'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #1'</span><span class=\"p\">,</span>\n        <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'onion'</span> <span class=\"p\">}],</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza #2'</span><span class=\"p\">,</span>\n        <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[{</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'onion'</span> <span class=\"p\">}],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">];</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">action</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">LoadPizzasSuccess</span><span class=\"p\">(</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">action</span> <span class=\"p\">}).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOAD_PIZZAS_SUCCESS</span><span class=\"p\">,</span>\n      <span class=\"nx\">payload</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Notice how you just pass the <code class=\"highlighter-rouge\">payload</code> straight into the <code class=\"highlighter-rouge\">LoadPizzasSuccess</code> action, and then use the <em>same</em> payload property to create the object property again inside <code class=\"highlighter-rouge\">toEqual()</code>.</p>\n\n<p>This makes sure that our action is simply passing things through correctly, and our basic tests simply verify the declarative structure we have is correct. Nothing really more to it.</p>\n\n<p>The key thing to remember is we’re simply testing inputs and outputs here. Does my action creator produce the right object? Yes, or no. However, we also get some TypeScript benefit when writing the tests as well if you write them first, as our actions will then be strict and implement the correct data structures against interfaces.</p>\n\n<p>And that’s pretty much all there is to testing actions! Happy dispatching.</p>\n","enclosure":{},"categories":["ngrx"],"color":"purple","category":"Todd Motto","date":"2018-02-08 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Angular Classes with NgClass","pubDate":"2018-01-18 00:00:00","link":"https://toddmotto.com/ng-class-angular-classes","guid":"https://toddmotto.com/ng-class-angular-classes","author":"","thumbnail":"","description":"\n<p>With Angular, we have many approaches to adding, removing, toggling classes. We can choose single classes and bind a property, or we can use the awesome <code class=\"highlighter-rouge\">NgClass</code> directive from Angular.</p>\n\n<p>In this post, we’ll explore class bindings, and also Angular’s <code class=\"highlighter-rouge\">NgClass</code> directive, the syntaxes and also some best practice ideas.</p>\n\n<div class=\"toc\">\n  <p class=\"no_toc\"><span class=\"gamma\">Table of contents</span></p>\n<ul>\n<li><a href=\"https://toddmotto.com/#property-binding-with-classname\">Property Binding with className</a></li>\n  <li><a href=\"https://toddmotto.com/#property-binding-with-class\">Property binding with “class”</a></li>\n  <li><a href=\"https://toddmotto.com/#angulars-ngclass-directive\">Angular’s NgClass Directive</a></li>\n  <li><a href=\"https://toddmotto.com/#multiple-classes-with-ngclass\">Multiple Classes with NgClass</a></li>\n  <li><a href=\"https://toddmotto.com/#mixing-class-and-ngclass\">Mixing class and NgClass</a></li>\n</ul>\n</div>\n\n<p>It’s a frequent requirement to add some kind of “state” to the DOM, typically via classes. Let’s explore some quick and easy options we have with Angular.</p>\n\n<h3>Property Binding with className</h3>\n\n<p>Before we jump into <code class=\"highlighter-rouge\">NgClass</code>, let’s explore some sugar syntax that’s simple yet effective. When working with single classes, I much prefer and advocate this approach over diving into <code class=\"highlighter-rouge\">NgClass</code>, it’s faster to work with and I find it’s more descriptive when analysing existing code.</p>\n\n<p>So, what does it look like?</p>\n\n<p>In JavaScript DOM, we have a <code class=\"highlighter-rouge\">className</code> property available on DOM elements:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">);</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">'hello'</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">);</span> <span class=\"c1\">// 'hello'</span>\n</code></pre></div></div>\n\n<p>Nice and easy. But, in Angular we’re working with templates and bindings - not DOM APIs such as <code class=\"highlighter-rouge\">querySelector</code>.</p>\n\n<p>In Angular, we bind to <em>properties</em>, not attribute. Which means we can turn this knowledge into:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">className</span><span class=\"err\">]=\"'</span><span class=\"na\">active</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Angular will then lookup the JavaScript property of <code class=\"highlighter-rouge\">className</code> and bind our expression to it.</p>\n\n<p>As a side note, take interpolation for example:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1&gt;</span>{{ text }}<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>Really, this is sugar syntax for:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1</span> <span class=\"err\">[</span><span class=\"na\">innerText</span><span class=\"err\">]=\"</span><span class=\"na\">text</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>Anyway, back to classes. It might be that we wish to provide a conditional to our <code class=\"highlighter-rouge\">className</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">className</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span> <span class=\"err\">?</span> <span class=\"err\">'</span><span class=\"na\">active</span><span class=\"err\">'</span> <span class=\"na\">:</span> <span class=\"err\">'</span><span class=\"na\">inactive</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Bear in mind, we <em>cannot</em> do this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!--  if the condition is false, we will end up with class=\"false\" --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">className</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span> <span class=\"err\">&amp;&amp;</span> <span class=\"err\">'</span><span class=\"na\">active</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>We want to avoid this, and supply a class at all times, unless we don’t want that behaviour. So what about just one class?</p>\n\n<h3>Property binding with “class”</h3>\n\n<p>Angular has a shorthand syntax for supplying a class that I absolutely love:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">class</span><span class=\"err\">.</span><span class=\"na\">active</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>When <code class=\"highlighter-rouge\">condition</code> evaluates to true, the class of <code class=\"highlighter-rouge\">active</code> will be added. When false, <code class=\"highlighter-rouge\">active</code> is then <em>removed</em>. This is really nice, clean and concise.</p>\n\n<p>What about more complex classes, perhaps using the BEM (Block-Element-Modifier) syntax?</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">class</span><span class=\"err\">.</span><span class=\"na\">is-active</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>That’s all we need. Thankfully we don’t need to supply the <code class=\"highlighter-rouge\">is-active</code> inside a string, which you might expect when using a dash.</p>\n\n<p>It’s time for some <code class=\"highlighter-rouge\">NgClass</code>, a more flexible approach - and one I’d use when we need multiple classes.</p>\n\n<h3>Angular’s NgClass Directive</h3>\n\n<p>We should use <code class=\"highlighter-rouge\">NgClass</code> when we’re expecting multiple classes to be potentially added.</p>\n\n<p>The basic syntax of <code class=\"highlighter-rouge\">NgClass</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"nb\">Set</span><span class=\"o\">&lt;</span><span class=\"nx\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"na\">klass</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">]:</span> <span class=\"nx\">any</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This means we can supply single strings, arrays of strings, Sets, and object literals. Really, we just care about the object literal approach, strings and string arrays allow us to <em>set</em> classes, but not remove them - because there’s no conditional data powering their existence:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"'</span><span class=\"na\">active</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"['</span><span class=\"na\">active</span><span class=\"err\">',</span> <span class=\"err\">'</span><span class=\"na\">open</span><span class=\"err\">']\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>So, let’s investigate object literals with <code class=\"highlighter-rouge\">NgClass</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"na\">active:</span> <span class=\"na\">condition</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Just like our previous example with <code class=\"highlighter-rouge\">[class.active]</code> - this essentially does the same thing.</p>\n\n<p>Note, however, we <em>cannot</em> do this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- errors --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"na\">is-active:</span> <span class=\"na\">condition</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Why? Because this is an <em>object literal</em>, keys cannot be set using dashes without using a string syntax:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- works --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"err\">'</span><span class=\"na\">is-active</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"na\">condition</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>If you need a more complex CSS class, use a string. If you like, keep your keys consistent and always use a string even if it’s not needed. This may be a sensible styling choice within your team.</p>\n\n<h3>Multiple Classes with NgClass</h3>\n\n<p>So far we’ve covered adding and removing single classes with <code class=\"highlighter-rouge\">NgClass</code>, so let’s look at a more ideal solution with multiple classes.</p>\n\n<p>It’s also worth noting that the <code class=\"highlighter-rouge\">condition</code> we supply as the <em>value</em> of the object literal key, will be evaluated. This means we can use ternary statements, or negate expressions:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"err\">'</span><span class=\"na\">is-active</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"na\">condition</span><span class=\"err\">,</span>\n  <span class=\"err\">'</span><span class=\"na\">is-inactive</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"err\">!</span><span class=\"na\">condition</span><span class=\"err\">,</span>\n  <span class=\"err\">'</span><span class=\"na\">is-focused</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"na\">condition</span> <span class=\"err\">&amp;&amp;</span> <span class=\"na\">anotherCondition</span><span class=\"err\">,</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>And there you have the majority of use cases you’ll ever need when it comes to <code class=\"highlighter-rouge\">NgClass</code>. For readability purposes, I would encourage you to bump conditions onto new lines as demonstrated above. It’s easy to scan, read, and evaluate what’s happening in your codebase.</p>\n\n<h3>Mixing class and NgClass</h3>\n\n<p>When it comes to keeping your codebase consistent, which is a <em>must</em>, choose one approach and stick with it.</p>\n\n<p>It might be you and your team prefer to use <code class=\"highlighter-rouge\">[class.foo]</code> style syntax for the majority of use cases, and simply adopt <code class=\"highlighter-rouge\">NgClass</code> when introducing more complex scenarios. Or, you may favour just using <code class=\"highlighter-rouge\">NgClass</code> - but the rule is pick one, be consistent and maintainable.</p>\n","content":"\n<p>With Angular, we have many approaches to adding, removing, toggling classes. We can choose single classes and bind a property, or we can use the awesome <code class=\"highlighter-rouge\">NgClass</code> directive from Angular.</p>\n\n<p>In this post, we’ll explore class bindings, and also Angular’s <code class=\"highlighter-rouge\">NgClass</code> directive, the syntaxes and also some best practice ideas.</p>\n\n<div class=\"toc\">\n  <p class=\"no_toc\"><span class=\"gamma\">Table of contents</span></p>\n<ul>\n<li><a href=\"https://toddmotto.com/#property-binding-with-classname\">Property Binding with className</a></li>\n  <li><a href=\"https://toddmotto.com/#property-binding-with-class\">Property binding with “class”</a></li>\n  <li><a href=\"https://toddmotto.com/#angulars-ngclass-directive\">Angular’s NgClass Directive</a></li>\n  <li><a href=\"https://toddmotto.com/#multiple-classes-with-ngclass\">Multiple Classes with NgClass</a></li>\n  <li><a href=\"https://toddmotto.com/#mixing-class-and-ngclass\">Mixing class and NgClass</a></li>\n</ul>\n</div>\n\n<p>It’s a frequent requirement to add some kind of “state” to the DOM, typically via classes. Let’s explore some quick and easy options we have with Angular.</p>\n\n<h3>Property Binding with className</h3>\n\n<p>Before we jump into <code class=\"highlighter-rouge\">NgClass</code>, let’s explore some sugar syntax that’s simple yet effective. When working with single classes, I much prefer and advocate this approach over diving into <code class=\"highlighter-rouge\">NgClass</code>, it’s faster to work with and I find it’s more descriptive when analysing existing code.</p>\n\n<p>So, what does it look like?</p>\n\n<p>In JavaScript DOM, we have a <code class=\"highlighter-rouge\">className</code> property available on DOM elements:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'div'</span><span class=\"p\">);</span>\n<span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s1\">'hello'</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">className</span><span class=\"p\">);</span> <span class=\"c1\">// 'hello'</span>\n</code></pre></div></div>\n\n<p>Nice and easy. But, in Angular we’re working with templates and bindings - not DOM APIs such as <code class=\"highlighter-rouge\">querySelector</code>.</p>\n\n<p>In Angular, we bind to <em>properties</em>, not attribute. Which means we can turn this knowledge into:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">className</span><span class=\"err\">]=\"'</span><span class=\"na\">active</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Angular will then lookup the JavaScript property of <code class=\"highlighter-rouge\">className</code> and bind our expression to it.</p>\n\n<p>As a side note, take interpolation for example:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1&gt;</span>{{ text }}<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>Really, this is sugar syntax for:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;h1</span> <span class=\"err\">[</span><span class=\"na\">innerText</span><span class=\"err\">]=\"</span><span class=\"na\">text</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/h1&gt;</span>\n</code></pre></div></div>\n\n<p>Anyway, back to classes. It might be that we wish to provide a conditional to our <code class=\"highlighter-rouge\">className</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">className</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span> <span class=\"err\">?</span> <span class=\"err\">'</span><span class=\"na\">active</span><span class=\"err\">'</span> <span class=\"na\">:</span> <span class=\"err\">'</span><span class=\"na\">inactive</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Bear in mind, we <em>cannot</em> do this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!--  if the condition is false, we will end up with class=\"false\" --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">className</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span> <span class=\"err\">&amp;&amp;</span> <span class=\"err\">'</span><span class=\"na\">active</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>We want to avoid this, and supply a class at all times, unless we don’t want that behaviour. So what about just one class?</p>\n\n<h3>Property binding with “class”</h3>\n\n<p>Angular has a shorthand syntax for supplying a class that I absolutely love:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">class</span><span class=\"err\">.</span><span class=\"na\">active</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>When <code class=\"highlighter-rouge\">condition</code> evaluates to true, the class of <code class=\"highlighter-rouge\">active</code> will be added. When false, <code class=\"highlighter-rouge\">active</code> is then <em>removed</em>. This is really nice, clean and concise.</p>\n\n<p>What about more complex classes, perhaps using the BEM (Block-Element-Modifier) syntax?</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">class</span><span class=\"err\">.</span><span class=\"na\">is-active</span><span class=\"err\">]=\"</span><span class=\"na\">condition</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>That’s all we need. Thankfully we don’t need to supply the <code class=\"highlighter-rouge\">is-active</code> inside a string, which you might expect when using a dash.</p>\n\n<p>It’s time for some <code class=\"highlighter-rouge\">NgClass</code>, a more flexible approach - and one I’d use when we need multiple classes.</p>\n\n<h3>Angular’s NgClass Directive</h3>\n\n<p>We should use <code class=\"highlighter-rouge\">NgClass</code> when we’re expecting multiple classes to be potentially added.</p>\n\n<p>The basic syntax of <code class=\"highlighter-rouge\">NgClass</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">string</span> <span class=\"o\">|</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"nb\">Set</span><span class=\"o\">&lt;</span><span class=\"nx\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"na\">klass</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">]:</span> <span class=\"nx\">any</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This means we can supply single strings, arrays of strings, Sets, and object literals. Really, we just care about the object literal approach, strings and string arrays allow us to <em>set</em> classes, but not remove them - because there’s no conditional data powering their existence:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"'</span><span class=\"na\">active</span><span class=\"err\">'\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"['</span><span class=\"na\">active</span><span class=\"err\">',</span> <span class=\"err\">'</span><span class=\"na\">open</span><span class=\"err\">']\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>So, let’s investigate object literals with <code class=\"highlighter-rouge\">NgClass</code>:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"na\">active:</span> <span class=\"na\">condition</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Just like our previous example with <code class=\"highlighter-rouge\">[class.active]</code> - this essentially does the same thing.</p>\n\n<p>Note, however, we <em>cannot</em> do this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- errors --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"na\">is-active:</span> <span class=\"na\">condition</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Why? Because this is an <em>object literal</em>, keys cannot be set using dashes without using a string syntax:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- works --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"err\">'</span><span class=\"na\">is-active</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"na\">condition</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>If you need a more complex CSS class, use a string. If you like, keep your keys consistent and always use a string even if it’s not needed. This may be a sensible styling choice within your team.</p>\n\n<h3>Multiple Classes with NgClass</h3>\n\n<p>So far we’ve covered adding and removing single classes with <code class=\"highlighter-rouge\">NgClass</code>, so let’s look at a more ideal solution with multiple classes.</p>\n\n<p>It’s also worth noting that the <code class=\"highlighter-rouge\">condition</code> we supply as the <em>value</em> of the object literal key, will be evaluated. This means we can use ternary statements, or negate expressions:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">ngClass</span><span class=\"err\">]=\"{</span>\n  <span class=\"err\">'</span><span class=\"na\">is-active</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"na\">condition</span><span class=\"err\">,</span>\n  <span class=\"err\">'</span><span class=\"na\">is-inactive</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"err\">!</span><span class=\"na\">condition</span><span class=\"err\">,</span>\n  <span class=\"err\">'</span><span class=\"na\">is-focused</span><span class=\"err\">'</span><span class=\"na\">:</span> <span class=\"na\">condition</span> <span class=\"err\">&amp;&amp;</span> <span class=\"na\">anotherCondition</span><span class=\"err\">,</span>\n<span class=\"err\">}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>And there you have the majority of use cases you’ll ever need when it comes to <code class=\"highlighter-rouge\">NgClass</code>. For readability purposes, I would encourage you to bump conditions onto new lines as demonstrated above. It’s easy to scan, read, and evaluate what’s happening in your codebase.</p>\n\n<h3>Mixing class and NgClass</h3>\n\n<p>When it comes to keeping your codebase consistent, which is a <em>must</em>, choose one approach and stick with it.</p>\n\n<p>It might be you and your team prefer to use <code class=\"highlighter-rouge\">[class.foo]</code> style syntax for the majority of use cases, and simply adopt <code class=\"highlighter-rouge\">NgClass</code> when introducing more complex scenarios. Or, you may favour just using <code class=\"highlighter-rouge\">NgClass</code> - but the rule is pick one, be consistent and maintainable.</p>\n","enclosure":{},"categories":["angular"],"color":"purple","category":"Todd Motto","date":"2018-01-18 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Typing Arrays in TypeScript","pubDate":"2018-01-14 00:00:00","link":"https://toddmotto.com/typing-arrays-typescript","guid":"https://toddmotto.com/typing-arrays-typescript","author":"","thumbnail":"https://toddmotto.com/assets/img/icons/courses.svg","description":"\n<p>There are many ways we can type a property to declare to TypeScript something is an array, or contains an array of “something”. We have generic types, array types and type assertions.</p>\n\n<p>For the purposes of this article, we’ll simply use a TypeScript class to demonstrate how we can declare some of these properties, in the various forms.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#type-inference\">Type Inference</a></li>\n  <li><a href=\"https://toddmotto.com/#declaring-an-array-type\">Declaring an Array Type</a></li>\n  <li><a href=\"https://toddmotto.com/#using-array-generic-types\">Using Array Generic Types</a></li>\n</ul>\n</div>\n\n<h3>Type Inference</h3>\n\n<p>Before we explore the benefits of explicit typing, let’s consider a class with an array. This will <em>infer</em> the type of an array:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: any[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>And we can again, infer:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: number[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We can of course mix and match our types, and TypeScript will infer as best as possible:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: (string | number)[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is great for well defined APIs, return statements and such that we are fully confident we want to infer. So let’s explore the main ways we can type an array in TypeScript.</p>\n\n<h3>Declaring an Array Type</h3>\n\n<p>Before we continue, let’s introduce a second class member, the single <code class=\"highlighter-rouge\">Message</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Message</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">sender</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">private</span> <span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// create a new message</span>\n<span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">(</span><span class=\"s1\">'Todd Motto'</span><span class=\"p\">,</span> <span class=\"s1\">'Hey, you around?'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Our <code class=\"highlighter-rouge\">Chats</code> class can now be sensibly typed like so:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nx\">Message</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We assign what <em>looks</em> like an array, but we know it’s a type as we’re using <code class=\"highlighter-rouge\">:</code> before the array assignment. Interestingly, outside of the array <code class=\"highlighter-rouge\">[]</code> type, we specify what the array contains, i.e. <code class=\"highlighter-rouge\">Message[]</code>.</p>\n\n<blockquote>\n  <p>Learn more about using <a href=\"https://toddmotto.com/classes-vs-interfaces-in-typescript\">Classes as Types</a> here!</p>\n</blockquote>\n\n<p>In this case, we’re expecting only an array of messages.</p>\n\n<p>We could in fact just declare the properties on the class, and assign the property’s value perhaps in the constructor.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nx\">Message</span><span class=\"p\">[];</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In Angular, this is typically done inside the <code class=\"highlighter-rouge\">ngOnInit</code> lifecycle hook:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages$</span><span class=\"p\">:</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">store</span><span class=\"p\">:</span> <span class=\"nx\">Store</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages$</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>A more comprehensive example, but we digress. However - you may have noticed <code class=\"highlighter-rouge\">Observable&lt;Message[]&gt;</code>. Have you seen this before? If not, let’s explain because the same principle applies when typing arrays.</p>\n\n<div class=\"callout callout--ua\">\n  <img class=\"callout--ua__course\" src=\"https://toddmotto.com/assets/img/icons/courses.svg\" alt=\"Angular Online Courses\"><img class=\"callout--ua__bg\" src=\"https://toddmotto.com/assets/img/icons/callout-shield.svg\" alt=\"Angular shields\"><div class=\"callout__content\">\n    <img src=\"https://toddmotto.com/assets/img/brand/ua-white.svg\" alt=\"Ultimate Angular\"><h4>\n      Learn Angular the right way\n    </h4>\n    <p>\n      Join my online courses to fully master Angular, TypeScript and NGRX.\n    </p>\n    <a class=\"btn btn--green btn--xlarge btn--has-icon\" href=\"http://ultimateangular.com/\" target=\"_blank\" data-flare='{ \"category\": \"UA\", \"action\": \"click\", \"label\": \"callout:other:v1\" }'>\n      Explore Courses\n      <img src=\"https://toddmotto.com/assets/img/icons/arrow-white.svg\" alt=\"Navigation arrow\"></a>\n  </div>\n</div>\n\n<h3>Using Array Generic Types</h3>\n\n<p>Generic types in TypeScript are essentially ways to make things more… generic.</p>\n\n<p>Generics are parameterised types, where we can either let TypeScript infer the type for us, or we can specify it ourselves. Using a generic type in TypeScript alongside an array looks like this (which is the equivalent to what we’ve covered above):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>There’s no functional difference between using a generic instead of a normal typing, however depending on your use case and complexity of types - you may wish to opt for one over the other.</p>\n\n<p>Another nice thing about generics is that we can combine initialisation <em>and</em> also infer the type, creating a new array whilst passing the generic type:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: Message[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>So, why do we have multiple ways to declare an array? TypeScript is pretty wild at times, and we have many ways to do things - TypeScript provides us a lot of options alongside that.</p>\n\n<p>There are actually a few more ways to type an array as well (but I’d stick with the things we’ve covered above for sanity):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// I'd go for this option</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nx\">Message</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Looks a little more oldschool, but same as above</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Don't do this unless you need to assert the type</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"k\">as</span> <span class=\"nx\">Message</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// And really, don't do this</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As the saying goes, “A typed array keeps the errors away”…</p>\n\n<p>Okay that was terrible. Be smart, type your code and enjoy!</p>\n","content":"\n<p>There are many ways we can type a property to declare to TypeScript something is an array, or contains an array of “something”. We have generic types, array types and type assertions.</p>\n\n<p>For the purposes of this article, we’ll simply use a TypeScript class to demonstrate how we can declare some of these properties, in the various forms.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#type-inference\">Type Inference</a></li>\n  <li><a href=\"https://toddmotto.com/#declaring-an-array-type\">Declaring an Array Type</a></li>\n  <li><a href=\"https://toddmotto.com/#using-array-generic-types\">Using Array Generic Types</a></li>\n</ul>\n</div>\n\n<h3>Type Inference</h3>\n\n<p>Before we explore the benefits of explicit typing, let’s consider a class with an array. This will <em>infer</em> the type of an array:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: any[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>And we can again, infer:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: number[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We can of course mix and match our types, and TypeScript will infer as best as possible:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: (string | number)[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is great for well defined APIs, return statements and such that we are fully confident we want to infer. So let’s explore the main ways we can type an array in TypeScript.</p>\n\n<h3>Declaring an Array Type</h3>\n\n<p>Before we continue, let’s introduce a second class member, the single <code class=\"highlighter-rouge\">Message</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Message</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">sender</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">private</span> <span class=\"nx\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// create a new message</span>\n<span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">(</span><span class=\"s1\">'Todd Motto'</span><span class=\"p\">,</span> <span class=\"s1\">'Hey, you around?'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Our <code class=\"highlighter-rouge\">Chats</code> class can now be sensibly typed like so:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nx\">Message</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We assign what <em>looks</em> like an array, but we know it’s a type as we’re using <code class=\"highlighter-rouge\">:</code> before the array assignment. Interestingly, outside of the array <code class=\"highlighter-rouge\">[]</code> type, we specify what the array contains, i.e. <code class=\"highlighter-rouge\">Message[]</code>.</p>\n\n<blockquote>\n  <p>Learn more about using <a href=\"https://toddmotto.com/classes-vs-interfaces-in-typescript\">Classes as Types</a> here!</p>\n</blockquote>\n\n<p>In this case, we’re expecting only an array of messages.</p>\n\n<p>We could in fact just declare the properties on the class, and assign the property’s value perhaps in the constructor.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nx\">Message</span><span class=\"p\">[];</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In Angular, this is typically done inside the <code class=\"highlighter-rouge\">ngOnInit</code> lifecycle hook:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages$</span><span class=\"p\">:</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">store</span><span class=\"p\">:</span> <span class=\"nx\">Store</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages$</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>A more comprehensive example, but we digress. However - you may have noticed <code class=\"highlighter-rouge\">Observable&lt;Message[]&gt;</code>. Have you seen this before? If not, let’s explain because the same principle applies when typing arrays.</p>\n\n<div class=\"callout callout--ua\">\n  <img class=\"callout--ua__course\" src=\"https://toddmotto.com/assets/img/icons/courses.svg\" alt=\"Angular Online Courses\"><img class=\"callout--ua__bg\" src=\"https://toddmotto.com/assets/img/icons/callout-shield.svg\" alt=\"Angular shields\"><div class=\"callout__content\">\n    <img src=\"https://toddmotto.com/assets/img/brand/ua-white.svg\" alt=\"Ultimate Angular\"><h4>\n      Learn Angular the right way\n    </h4>\n    <p>\n      Join my online courses to fully master Angular, TypeScript and NGRX.\n    </p>\n    <a class=\"btn btn--green btn--xlarge btn--has-icon\" href=\"http://ultimateangular.com/\" target=\"_blank\" data-flare='{ \"category\": \"UA\", \"action\": \"click\", \"label\": \"callout:other:v1\" }'>\n      Explore Courses\n      <img src=\"https://toddmotto.com/assets/img/icons/arrow-white.svg\" alt=\"Navigation arrow\"></a>\n  </div>\n</div>\n\n<h3>Using Array Generic Types</h3>\n\n<p>Generic types in TypeScript are essentially ways to make things more… generic.</p>\n\n<p>Generics are parameterised types, where we can either let TypeScript infer the type for us, or we can specify it ourselves. Using a generic type in TypeScript alongside an array looks like this (which is the equivalent to what we’ve covered above):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>There’s no functional difference between using a generic instead of a normal typing, however depending on your use case and complexity of types - you may wish to opt for one over the other.</p>\n\n<p>Another nice thing about generics is that we can combine initialisation <em>and</em> also infer the type, creating a new array whilst passing the generic type:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// inferred as messages: Message[]</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>So, why do we have multiple ways to declare an array? TypeScript is pretty wild at times, and we have many ways to do things - TypeScript provides us a lot of options alongside that.</p>\n\n<p>There are actually a few more ways to type an array as well (but I’d stick with the things we’ve covered above for sanity):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// I'd go for this option</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nx\">Message</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Looks a little more oldschool, but same as above</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Array</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Don't do this unless you need to assert the type</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"k\">as</span> <span class=\"nx\">Message</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// And really, don't do this</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Chats</span> <span class=\"p\">{</span>\n  <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Message</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As the saying goes, “A typed array keeps the errors away”…</p>\n\n<p>Okay that was terrible. Be smart, type your code and enjoy!</p>\n","enclosure":{},"categories":["typescript"],"color":"purple","category":"Todd Motto","date":"2018-01-14 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Step by Step Custom Pipes in Angular","pubDate":"2018-01-13 00:00:00","link":"https://toddmotto.com/angular-pipes-custom-pipes","guid":"https://toddmotto.com/angular-pipes-custom-pipes","author":"","thumbnail":"","description":"\n<p>Angular has many Pipes built-in, but they only take us so far. Ideally we’d like to extend our applications by creating custom Pipes.</p>\n\n<p>Custom Pipes (previously <a href=\"https://toddmotto.com/everything-about-custom-filters-in-angular-js/\">Filters</a> in AngularJS) allow us to essentially create a pure function, which accepts an input and returns a different output via some form of transformation.</p>\n\n<p>That’s the essence of a Pipe. And we see this already in Angular with things like the Date Pipe and friends.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#a-custom-pipe-in-angular\">A Custom Pipe in Angular</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-usage\">Pipe usage</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-class-and-decorator\">Pipe class and decorator</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-and-pipetransform\">Pipe and PipeTransform</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-transform-value\">Pipe Transform Value</a></li>\n  <li><a href=\"https://toddmotto.com/#pipes-with-arguments\">Pipes with Arguments</a></li>\n</ul>\n</div>\n\n<p>There are various ways we can create Pipes, so let’s explore them a little further.</p>\n\n<h3>A Custom Pipe in Angular</h3>\n\n<p>The most basic pipe transforms a single value, into a new value. This value can be anything you like, a string, array, object, etc.</p>\n\n<p>For the demonstration of this, we’ll be converting numeric filesizes into more human readable formats, such as “2.5MB” instead of something like “2120109”. But first, let’s start with the basics - how we’ll use the Pipe.</p>\n\n<h3>Pipe usage</h3>\n\n<p>Let’s assume an image was just uploaded via a drag and drop zone - and we’re getting some of the information from it. A simplified file object we’ll work with:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileComponent</span> <span class=\"p\">{</span>\n  <span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'logo.svg'</span><span class=\"p\">,</span> <span class=\"na\">size</span><span class=\"p\">:</span> <span class=\"mi\">2120109</span><span class=\"p\">,</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'image/svg'</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Properties <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">type</code> aren’t what we’re really interested in to learn about Pipes - however <code class=\"highlighter-rouge\">size</code> is the one we’d like. Let’s put a quick example together for how we’ll define the usage of our pipe (which will convert numbers into filesizes):</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>{{ file.name }}<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>{{ file.size | filesize }}<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<h3>Pipe class and decorator</h3>\n\n<p>To create a Pipe definition, we need to first create a class (which would live in its own file). We’ll call this our <code class=\"highlighter-rouge\">FileSizePipe</code>, as we are essentially transforming a numeric value into a string value that’s more human readable:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>Now we’ve got this setup, we need to name our Pipe. In the above HTML, we did this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;p&gt;</span>{{ file.size | filesize }}<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div></div>\n\n<p>So, we need to name the pipe “filesize”. This is done via another <a href=\"https://toddmotto.com/angular-decorators\">TypeScript decorator</a>, the <code class=\"highlighter-rouge\">@Pipe</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'filesize'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>All we need to do is supply a <code class=\"highlighter-rouge\">name</code> property that corresponds to our template code name as well (as you’d imagine).</p>\n\n<p>Don’t forget to register the Pipe in your <code class=\"highlighter-rouge\">@NgModule</code> as well, under <code class=\"highlighter-rouge\">declarations</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// ...</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FileSizePipe</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./filesize.pipe'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">//...</span>\n    <span class=\"nx\">FileSizePipe</span><span class=\"p\">,</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Pipes tend to act as more “utility” classes, so it’s likely you’ll want to register a Pipe inside a shared module. If you want to use your custom Pipe elsewhere, simply use <code class=\"highlighter-rouge\">exports: [YourPipe]</code> on the <code class=\"highlighter-rouge\">@NgModule</code>.</p>\n</blockquote>\n\n<h3>Pipe and PipeTransform</h3>\n\n<p>Once we’ve got our class setup, registered, and the <code class=\"highlighter-rouge\">@Pipe</code> decorator added - the next step is implementing the <code class=\"highlighter-rouge\">PipeTransform</code> interface:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'filesize'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This creates a required contract that our <code class=\"highlighter-rouge\">FileSizePipe</code> must adhere to the <a href=\"https://github.com/angular/angular/blob/f2a2a6b478e8046c35c8cf8c3701a3a12fa14c17/packages/core/src/change_detection/pipe_transform.ts#L38\">following structure</a>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">[]):</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Which is why we added the <code class=\"highlighter-rouge\">transform() {}</code> method to our class above.</p>\n\n<h3>Pipe Transform Value</h3>\n\n<p>As we’re using our Pipe via interpolation, this is the magic on how we’re given arguments in a Pipe.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{{ file.size | filesize }}\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">file.size</code> variable is passed straight through to our <code class=\"highlighter-rouge\">transform</code> method, as the first argument.</p>\n\n<p>We can call this our <code class=\"highlighter-rouge\">size</code> and type it appropriately:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>From here, we can implement the logic to convert the numeric value into a more readable format of megabytes.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">)).</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'MB'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’re returning a type <code class=\"highlighter-rouge\">string</code> as we’re appending <code class=\"highlighter-rouge\">'MB'</code> on the end. This will then give us:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- 2.02MB --&gt;</span>\n{{ file.size | filesize }}\n</code></pre></div></div>\n\n<p>We can now demonstrate how to add your own custom arguments to custom Pipes.</p>\n\n<h3>Pipes with Arguments</h3>\n\n<p>So let’s assume that, for our use case, we want to allow us to specify the extension slightly differently than advertised.</p>\n\n<p>Before we hit up the template, let’s just add the capability for an extension:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">extension</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'MB'</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">)).</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">extension</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I’ve used a default parameter value instead of appending the <code class=\"highlighter-rouge\">'MB'</code> to the end of the string. This allows us to use the default <code class=\"highlighter-rouge\">'MB'</code>, or override it when we use it. Which takes us to completing our next objective of passing an argument into our Pipe:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- 2.02megabyte --&gt;</span>\n{{ file.size | filesize:'megabyte' }}\n</code></pre></div></div>\n\n<p>And that’s all you need to supply an argument to your custom Pipe. Multiple arguments are simply separated by <code class=\"highlighter-rouge\">:</code>, for example:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{{ value | pipe:arg1 }}\n{{ value | pipe:arg1:arg2 }}\n{{ value | pipe:arg1:arg3 }}\n</code></pre></div></div>\n\n<p>Don’t forget you can chain these pipes alongside others, like you would with dates and so forth.</p>\n\n<p>Here’s the final assembled code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'filesize'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">extension</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'MB'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">)).</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">extension</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Want a challenge? Extend this custom Pipe that allows you to represent the Pipe in Gigabyte, Megabyte, and any other formats you might find useful. It’s always a good exercise to learn from a starting point!</p>\n","content":"\n<p>Angular has many Pipes built-in, but they only take us so far. Ideally we’d like to extend our applications by creating custom Pipes.</p>\n\n<p>Custom Pipes (previously <a href=\"https://toddmotto.com/everything-about-custom-filters-in-angular-js/\">Filters</a> in AngularJS) allow us to essentially create a pure function, which accepts an input and returns a different output via some form of transformation.</p>\n\n<p>That’s the essence of a Pipe. And we see this already in Angular with things like the Date Pipe and friends.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#a-custom-pipe-in-angular\">A Custom Pipe in Angular</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-usage\">Pipe usage</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-class-and-decorator\">Pipe class and decorator</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-and-pipetransform\">Pipe and PipeTransform</a></li>\n  <li><a href=\"https://toddmotto.com/#pipe-transform-value\">Pipe Transform Value</a></li>\n  <li><a href=\"https://toddmotto.com/#pipes-with-arguments\">Pipes with Arguments</a></li>\n</ul>\n</div>\n\n<p>There are various ways we can create Pipes, so let’s explore them a little further.</p>\n\n<h3>A Custom Pipe in Angular</h3>\n\n<p>The most basic pipe transforms a single value, into a new value. This value can be anything you like, a string, array, object, etc.</p>\n\n<p>For the demonstration of this, we’ll be converting numeric filesizes into more human readable formats, such as “2.5MB” instead of something like “2120109”. But first, let’s start with the basics - how we’ll use the Pipe.</p>\n\n<h3>Pipe usage</h3>\n\n<p>Let’s assume an image was just uploaded via a drag and drop zone - and we’re getting some of the information from it. A simplified file object we’ll work with:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileComponent</span> <span class=\"p\">{</span>\n  <span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'logo.svg'</span><span class=\"p\">,</span> <span class=\"na\">size</span><span class=\"p\">:</span> <span class=\"mi\">2120109</span><span class=\"p\">,</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'image/svg'</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Properties <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">type</code> aren’t what we’re really interested in to learn about Pipes - however <code class=\"highlighter-rouge\">size</code> is the one we’d like. Let’s put a quick example together for how we’ll define the usage of our pipe (which will convert numbers into filesizes):</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>{{ file.name }}<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>{{ file.size | filesize }}<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<h3>Pipe class and decorator</h3>\n\n<p>To create a Pipe definition, we need to first create a class (which would live in its own file). We’ll call this our <code class=\"highlighter-rouge\">FileSizePipe</code>, as we are essentially transforming a numeric value into a string value that’s more human readable:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>Now we’ve got this setup, we need to name our Pipe. In the above HTML, we did this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;p&gt;</span>{{ file.size | filesize }}<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div></div>\n\n<p>So, we need to name the pipe “filesize”. This is done via another <a href=\"https://toddmotto.com/angular-decorators\">TypeScript decorator</a>, the <code class=\"highlighter-rouge\">@Pipe</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'filesize'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>All we need to do is supply a <code class=\"highlighter-rouge\">name</code> property that corresponds to our template code name as well (as you’d imagine).</p>\n\n<p>Don’t forget to register the Pipe in your <code class=\"highlighter-rouge\">@NgModule</code> as well, under <code class=\"highlighter-rouge\">declarations</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// ...</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FileSizePipe</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./filesize.pipe'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">//...</span>\n    <span class=\"nx\">FileSizePipe</span><span class=\"p\">,</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Pipes tend to act as more “utility” classes, so it’s likely you’ll want to register a Pipe inside a shared module. If you want to use your custom Pipe elsewhere, simply use <code class=\"highlighter-rouge\">exports: [YourPipe]</code> on the <code class=\"highlighter-rouge\">@NgModule</code>.</p>\n</blockquote>\n\n<h3>Pipe and PipeTransform</h3>\n\n<p>Once we’ve got our class setup, registered, and the <code class=\"highlighter-rouge\">@Pipe</code> decorator added - the next step is implementing the <code class=\"highlighter-rouge\">PipeTransform</code> interface:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'filesize'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This creates a required contract that our <code class=\"highlighter-rouge\">FileSizePipe</code> must adhere to the <a href=\"https://github.com/angular/angular/blob/f2a2a6b478e8046c35c8cf8c3701a3a12fa14c17/packages/core/src/change_detection/pipe_transform.ts#L38\">following structure</a>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">[]):</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Which is why we added the <code class=\"highlighter-rouge\">transform() {}</code> method to our class above.</p>\n\n<h3>Pipe Transform Value</h3>\n\n<p>As we’re using our Pipe via interpolation, this is the magic on how we’re given arguments in a Pipe.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{{ file.size | filesize }}\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">file.size</code> variable is passed straight through to our <code class=\"highlighter-rouge\">transform</code> method, as the first argument.</p>\n\n<p>We can call this our <code class=\"highlighter-rouge\">size</code> and type it appropriately:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>From here, we can implement the logic to convert the numeric value into a more readable format of megabytes.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">)).</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'MB'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’re returning a type <code class=\"highlighter-rouge\">string</code> as we’re appending <code class=\"highlighter-rouge\">'MB'</code> on the end. This will then give us:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- 2.02MB --&gt;</span>\n{{ file.size | filesize }}\n</code></pre></div></div>\n\n<p>We can now demonstrate how to add your own custom arguments to custom Pipes.</p>\n\n<h3>Pipes with Arguments</h3>\n\n<p>So let’s assume that, for our use case, we want to allow us to specify the extension slightly differently than advertised.</p>\n\n<p>Before we hit up the template, let’s just add the capability for an extension:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//...</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">extension</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'MB'</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">)).</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">extension</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>I’ve used a default parameter value instead of appending the <code class=\"highlighter-rouge\">'MB'</code> to the end of the string. This allows us to use the default <code class=\"highlighter-rouge\">'MB'</code>, or override it when we use it. Which takes us to completing our next objective of passing an argument into our Pipe:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- 2.02megabyte --&gt;</span>\n{{ file.size | filesize:'megabyte' }}\n</code></pre></div></div>\n\n<p>And that’s all you need to supply an argument to your custom Pipe. Multiple arguments are simply separated by <code class=\"highlighter-rouge\">:</code>, for example:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{{ value | pipe:arg1 }}\n{{ value | pipe:arg1:arg2 }}\n{{ value | pipe:arg1:arg3 }}\n</code></pre></div></div>\n\n<p>Don’t forget you can chain these pipes alongside others, like you would with dates and so forth.</p>\n\n<p>Here’s the final assembled code:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'filesize'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">FileSizePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">extension</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'MB'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">)).</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">extension</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Want a challenge? Extend this custom Pipe that allows you to represent the Pipe in Gigabyte, Megabyte, and any other formats you might find useful. It’s always a good exercise to learn from a starting point!</p>\n","enclosure":{},"categories":["angular"],"color":"purple","category":"Todd Motto","date":"2018-01-13 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Handling Observables with NgIf and the Async Pipe","pubDate":"2018-01-12 00:00:00","link":"https://toddmotto.com/angular-ngif-async-pipe","guid":"https://toddmotto.com/angular-ngif-async-pipe","author":"","thumbnail":"","description":"\n<p>Dealing with async operations with the async pipe takes care of subscribing to Observable streams/async stuff like Promises for us.</p>\n\n<p>There are a few common gotchas when dealing with purely cold Observables that somewhat pull in data (over perhaps, Http). There are also a few tricks we can use to mitigate common async issues, whilst being productive in templates.</p>\n\n<p>Everytime we use the <code class=\"highlighter-rouge\">async</code> pipe, we create a subscription. If you’re going to subscribe directly to Observables that initiate data transfer, it’s likely you’ve come across unwanted issues such as duplicate Http requests.</p>\n\n<p>There are, of course, ways around this using the <code class=\"highlighter-rouge\">.share()</code> operator in RxJS. But it’s more of a work-around, than a “work-with” me.</p>\n\n<p>So let’s explore how we can handle <code class=\"highlighter-rouge\">ngIf</code> alongside the async pipe to alleviate some of these common issues.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#ngif-and-async-pipe\">ngIf and Async Pipe</a></li>\n  <li><a href=\"https://toddmotto.com/#using-ngif-as-syntax\">Using ngIf “as” syntax</a></li>\n</ul>\n</div>\n\n<h3>ngIf and Async Pipe</h3>\n\n<p>Let me illustrate a common scenario inside a <a href=\"https://toddmotto.com/stateful-stateless-components\">container/stateful</a> component, where we’d typically use the async pipe to auto-subscribe and pass just raw data down:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"(</span><span class=\"na\">user</span><span class=\"err\">$</span> <span class=\"err\">|</span> <span class=\"na\">async</span><span class=\"err\">)?.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"(</span><span class=\"na\">user</span><span class=\"err\">$</span> <span class=\"err\">|</span> <span class=\"na\">async</span><span class=\"err\">)?.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>This approach has a few flaws, the first and most obvious is being potentially exposed to multiple, unwanted, subscriptions (previously mentioned up top) that initiate requests.</p>\n\n<p>Secondly, we’re having to use the safe navigation operator <code class=\"highlighter-rouge\">?</code> before any property names. I don’t know about you, but I find this irritating - it doesn’t fill me with confidence that what I’m doing is structured correctly. Try avoid it wherever possible. We’ll refactor this component’s template before we finish with some best practices.</p>\n\n<p>The Angular docs state that using the parentheses around the <code class=\"highlighter-rouge\">user$ | async</code> is classed an “inefficiency”. I personally find it extremely helpful at expressing intent when used appropriately.</p>\n\n<p>So, what can we do to clean things up a little?</p>\n\n<h3>Using ngIf “as” syntax</h3>\n\n<p>This feature isn’t just for Observables (but I hope you’re using them anyway!). Let’s assume we’re using something like NGRX Store to make delivering state easier (which also mitigates things like multiple subscription issues that call upon new data requests).</p>\n\n<p>Instead of waiting for each <code class=\"highlighter-rouge\">user$ | async</code> operation to be fully available, which likely requires more conditional checking further down inside the child <a href=\"https://toddmotto.com/stateful-stateless-components\">presentational</a> components, we can adopt a slightly different approach:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"user$ | async as user\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Note the addition of “<code class=\"highlighter-rouge\">as user</code>” at the end of the expression.</p>\n\n<p>What this will do is wait until <code class=\"highlighter-rouge\">user$ | async</code> has evaluated, and bind the result to the value of <code class=\"highlighter-rouge\">user</code> (non-dollar-suffixed).</p>\n\n<blockquote>\n  <p>The <code class=\"highlighter-rouge\">prop$</code> dollar suffix is generally used to indicate something is an Observable source.</p>\n</blockquote>\n\n<p>From this point, you can treat it like function scope in JavaScript. Once the <code class=\"highlighter-rouge\">user</code> property has the resulting variable, you can use it anywhere inside that scope (inside the <code class=\"highlighter-rouge\">ngIf</code>, not outside).</p>\n\n<p>This also gives us additional flexibility when displaying load state specific data to a user (loading/loaded):</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"user$ | async as user; else loading\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loading</span><span class=\"nt\">&gt;</span>\n  Loading stuff...\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Read more on <a href=\"https://toddmotto.com/angular-ngif-else-then\">ngIf/else syntax</a>.</p>\n</blockquote>\n\n<p>My personal choice when adopting this syntax would be to use parentheses to express intent, visually it makes it far easier for me to see what’s going on without actually having to process the template in too much detail:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"(user$ | async) as user; else loading\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loading</span><span class=\"nt\">&gt;</span>\n  Loading stuff...\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>A small deviation from the intention of this post, but a worthy mention. Ideally, data returned from either a selector or server response would be passed down as a whole - I find the syntax more reliable and extensible when passing props down to child components.</p>\n\n<p>Something like this should suffice:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"(user$ | async) as user; else loading\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loading</span><span class=\"nt\">&gt;</span>\n  Loading stuff...\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>All I’ve done here is remove <code class=\"highlighter-rouge\">.profile</code> and <code class=\"highlighter-rouge\">.messages</code> from the <code class=\"highlighter-rouge\">user</code> binding. Pass the whole object down and use the pieces you need (in this case). Few reasons, namely type checking, interfaces, unit tests. Try it without and you’ll see your codebase explode into further complexity and lacking of <a href=\"https://toddmotto.com/typescript-introduction\">structural types</a>.</p>\n\n<p>This approach of course, doesn’t just work with component bindings, you can use it anywhere. But ideally, async stuff should happen in container components, and presentational components should be simply <em>given</em> the data - to render.</p>\n\n<p>Presentation components shouldn’t (in an ideal world) have to worry about checking if properties coming in through <code class=\"highlighter-rouge\">@Input</code> bindings actually exist before rendering. We can be smarter, and adopt better patterns through better tools.</p>\n\n<p>And there’s one more for your toolbelt - the async pipe with <code class=\"highlighter-rouge\">ngIf</code> and the “as” syntax. It will store the result in a variable of your naming, and you can pass it wherever you like.</p>\n\n<p>Reference away!</p>\n","content":"\n<p>Dealing with async operations with the async pipe takes care of subscribing to Observable streams/async stuff like Promises for us.</p>\n\n<p>There are a few common gotchas when dealing with purely cold Observables that somewhat pull in data (over perhaps, Http). There are also a few tricks we can use to mitigate common async issues, whilst being productive in templates.</p>\n\n<p>Everytime we use the <code class=\"highlighter-rouge\">async</code> pipe, we create a subscription. If you’re going to subscribe directly to Observables that initiate data transfer, it’s likely you’ve come across unwanted issues such as duplicate Http requests.</p>\n\n<p>There are, of course, ways around this using the <code class=\"highlighter-rouge\">.share()</code> operator in RxJS. But it’s more of a work-around, than a “work-with” me.</p>\n\n<p>So let’s explore how we can handle <code class=\"highlighter-rouge\">ngIf</code> alongside the async pipe to alleviate some of these common issues.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#ngif-and-async-pipe\">ngIf and Async Pipe</a></li>\n  <li><a href=\"https://toddmotto.com/#using-ngif-as-syntax\">Using ngIf “as” syntax</a></li>\n</ul>\n</div>\n\n<h3>ngIf and Async Pipe</h3>\n\n<p>Let me illustrate a common scenario inside a <a href=\"https://toddmotto.com/stateful-stateless-components\">container/stateful</a> component, where we’d typically use the async pipe to auto-subscribe and pass just raw data down:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"(</span><span class=\"na\">user</span><span class=\"err\">$</span> <span class=\"err\">|</span> <span class=\"na\">async</span><span class=\"err\">)?.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"(</span><span class=\"na\">user</span><span class=\"err\">$</span> <span class=\"err\">|</span> <span class=\"na\">async</span><span class=\"err\">)?.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>This approach has a few flaws, the first and most obvious is being potentially exposed to multiple, unwanted, subscriptions (previously mentioned up top) that initiate requests.</p>\n\n<p>Secondly, we’re having to use the safe navigation operator <code class=\"highlighter-rouge\">?</code> before any property names. I don’t know about you, but I find this irritating - it doesn’t fill me with confidence that what I’m doing is structured correctly. Try avoid it wherever possible. We’ll refactor this component’s template before we finish with some best practices.</p>\n\n<p>The Angular docs state that using the parentheses around the <code class=\"highlighter-rouge\">user$ | async</code> is classed an “inefficiency”. I personally find it extremely helpful at expressing intent when used appropriately.</p>\n\n<p>So, what can we do to clean things up a little?</p>\n\n<h3>Using ngIf “as” syntax</h3>\n\n<p>This feature isn’t just for Observables (but I hope you’re using them anyway!). Let’s assume we’re using something like NGRX Store to make delivering state easier (which also mitigates things like multiple subscription issues that call upon new data requests).</p>\n\n<p>Instead of waiting for each <code class=\"highlighter-rouge\">user$ | async</code> operation to be fully available, which likely requires more conditional checking further down inside the child <a href=\"https://toddmotto.com/stateful-stateless-components\">presentational</a> components, we can adopt a slightly different approach:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"user$ | async as user\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Note the addition of “<code class=\"highlighter-rouge\">as user</code>” at the end of the expression.</p>\n\n<p>What this will do is wait until <code class=\"highlighter-rouge\">user$ | async</code> has evaluated, and bind the result to the value of <code class=\"highlighter-rouge\">user</code> (non-dollar-suffixed).</p>\n\n<blockquote>\n  <p>The <code class=\"highlighter-rouge\">prop$</code> dollar suffix is generally used to indicate something is an Observable source.</p>\n</blockquote>\n\n<p>From this point, you can treat it like function scope in JavaScript. Once the <code class=\"highlighter-rouge\">user</code> property has the resulting variable, you can use it anywhere inside that scope (inside the <code class=\"highlighter-rouge\">ngIf</code>, not outside).</p>\n\n<p>This also gives us additional flexibility when displaying load state specific data to a user (loading/loaded):</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"user$ | async as user; else loading\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loading</span><span class=\"nt\">&gt;</span>\n  Loading stuff...\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Read more on <a href=\"https://toddmotto.com/angular-ngif-else-then\">ngIf/else syntax</a>.</p>\n</blockquote>\n\n<p>My personal choice when adopting this syntax would be to use parentheses to express intent, visually it makes it far easier for me to see what’s going on without actually having to process the template in too much detail:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"(user$ | async) as user; else loading\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">profile</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">.</span><span class=\"na\">messages</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loading</span><span class=\"nt\">&gt;</span>\n  Loading stuff...\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>A small deviation from the intention of this post, but a worthy mention. Ideally, data returned from either a selector or server response would be passed down as a whole - I find the syntax more reliable and extensible when passing props down to child components.</p>\n\n<p>Something like this should suffice:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"(user$ | async) as user; else loading\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;user-profile</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-profile&gt;</span>\n  <span class=\"nt\">&lt;user-messages</span>\n    <span class=\"err\">[</span><span class=\"na\">user</span><span class=\"err\">]=\"</span><span class=\"na\">user</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;/user-messages&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loading</span><span class=\"nt\">&gt;</span>\n  Loading stuff...\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>All I’ve done here is remove <code class=\"highlighter-rouge\">.profile</code> and <code class=\"highlighter-rouge\">.messages</code> from the <code class=\"highlighter-rouge\">user</code> binding. Pass the whole object down and use the pieces you need (in this case). Few reasons, namely type checking, interfaces, unit tests. Try it without and you’ll see your codebase explode into further complexity and lacking of <a href=\"https://toddmotto.com/typescript-introduction\">structural types</a>.</p>\n\n<p>This approach of course, doesn’t just work with component bindings, you can use it anywhere. But ideally, async stuff should happen in container components, and presentational components should be simply <em>given</em> the data - to render.</p>\n\n<p>Presentation components shouldn’t (in an ideal world) have to worry about checking if properties coming in through <code class=\"highlighter-rouge\">@Input</code> bindings actually exist before rendering. We can be smarter, and adopt better patterns through better tools.</p>\n\n<p>And there’s one more for your toolbelt - the async pipe with <code class=\"highlighter-rouge\">ngIf</code> and the “as” syntax. It will store the result in a variable of your naming, and you can pass it wherever you like.</p>\n\n<p>Reference away!</p>\n","enclosure":{},"categories":["angular"],"color":"purple","category":"Todd Motto","date":"2018-01-12 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Angular's NgIf, Else, Then - Explained","pubDate":"2018-01-11 00:00:00","link":"https://toddmotto.com/angular-ngif-else-then","guid":"https://toddmotto.com/angular-ngif-else-then","author":"","thumbnail":"","description":"\n<p>Using the <code class=\"highlighter-rouge\">ngIf</code> directive allows us to simply toggle content based on a conditional. But is it as simple as we think? Not quite, the directive has a heap of helpful syntaxes that can help us deal with conditionals far better, and also asynchronous objects coming from perhaps an <a href=\"https://toddmotto.com/rxjs-observables-observers-operators\">Observable</a>.</p>\n\n<p>Let’s explore the ins and outs of <code class=\"highlighter-rouge\">ngIf</code>, and how we can utilise (the right way) in our Angular apps.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#angulars-ngif\">Angular’s ngIf</a>    <ul>\n<li><a href=\"https://toddmotto.com/#standard-ngif-in-angular\">Standard *ngIf in Angular</a></li>\n      <li><a href=\"https://toddmotto.com/#ngif-and-else\">*ngIf and Else</a></li>\n      <li><a href=\"https://toddmotto.com/#ngif-and-ng-template\">ngIf and ng-template</a></li>\n      <li><a href=\"https://toddmotto.com/#ngif-then-and-else\">*ngIf, Then and Else</a></li>\n    </ul>\n</li>\n  <li><a href=\"https://toddmotto.com/#ngif-observables-and-async-pipe\">*ngIf, Observables and Async Pipe</a></li>\n</ul>\n</div>\n\n<h3>Angular’s ngIf</h3>\n\n<p>Placing the <code class=\"highlighter-rouge\">ngIf</code> directive on a component, or element, will in fact hide or show that element based on the expression you pass it to be evaluated. Once evaluated, Angular will simply add or remove your DOM nodes, mount or remount your components, from the DOM - as the expression changes (if it ever does, that’s up to you).</p>\n\n<blockquote>\n  <p>When using an <code class=\"highlighter-rouge\">ngIf</code> on a component, this will in turn invoke relevant lifecycle hooks such as <code class=\"highlighter-rouge\">ngOnInit</code>, <code class=\"highlighter-rouge\">ngOnDestroy</code>, and so forth.</p>\n</blockquote>\n\n<p>The basic syntax of the <code class=\"highlighter-rouge\">ngIf</code> directive is simple and effective, all we need to do is prefix the directive name with an asterisk (<code class=\"highlighter-rouge\">*</code>) and add it anywhere inside our <code class=\"highlighter-rouge\">template</code>. We’ll cover <em>why</em> we use the asterisk syntax, shortly.</p>\n\n<h4>Standard *ngIf in Angular</h4>\n\n<p>There are four main ways we can use <code class=\"highlighter-rouge\">ngIf</code>, so let’s start by exploring the most basic use case:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app'</span><span class=\"p\">,</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s2\">`\n    &lt;div *ngIf=\"isLoggedIn\"&gt;\n      Welcome back. Congrats.\n    &lt;/div&gt;\n  `</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nx\">isLoggedIn</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We can also use JavaScript-like expressions to achieve a final truthy/falsy value to supply to <code class=\"highlighter-rouge\">ngIf</code> - as well as composing through multiple variables through various operators:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- negated variable to achieve \"if not\" --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"!isLoggedIn\"</span><span class=\"nt\">&gt;</span>\n  Please login, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"c\">&lt;!-- logic &amp;&amp; operator --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn &amp;&amp; !isNewUser\"</span><span class=\"nt\">&gt;</span>\n  Welcome back, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"c\">&lt;!-- logic OR operator --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn || isNewUser\"</span><span class=\"nt\">&gt;</span>\n  Welcome!\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Just a few examples, but I’m sure you catch my drift on the available ways we can compose an <code class=\"highlighter-rouge\">ngIf</code>. Let’s move onto some more interesting examples.</p>\n\n<h4>*ngIf and Else</h4>\n\n<p>One fantastic addition in Angular (coming from an AngularJS background), is the “else” statement. If this, else that. Nice and simple. In AngularJS we’d have to negate the expression to evaluate to an “else”, and templates became a little messy at times. Or we had <code class=\"highlighter-rouge\">ng-show</code> and <code class=\"highlighter-rouge\">ng-hide</code> directives to get our point across</p>\n\n<p>Thankfully, we have if/else to save us.</p>\n\n<p>Here’s how we can use the “else” statement, to control the render flow inside a component’s template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn; else loggedOut\"</span><span class=\"nt\">&gt;</span>\n  Welcome back, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedOut</span><span class=\"nt\">&gt;</span>\n  Please friend, login.\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>This setup can also be used to conditionally mount/unmount components as well.</p>\n\n<p>The main two things worth noticing here are the template reference variable (the <code class=\"highlighter-rouge\">#loggedOut</code> - which you can call whatever you like) and also the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code>. We use the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> because much like it’s HTML5 counterpart <code class=\"highlighter-rouge\">&lt;template&gt;</code>, it’s also considered “virtual”.</p>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> was inspired by <code class=\"highlighter-rouge\">&lt;template&gt;</code>, and existed in Angular v2-v4 as just <code class=\"highlighter-rouge\">&lt;template&gt;</code>. It’s now deprecated in favour of <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code>.</p>\n</blockquote>\n\n<p>Being “virtual” means the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> contents won’t actually exist in the compiled DOM, until it’s needed. When it’s needed (for example the “else” expression kicks into play), Angular will grab the contents of the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> tag, and replace the <code class=\"highlighter-rouge\">*ngIf</code> contents with it.</p>\n\n<p>That’s it. It’s just a virtual container that won’t render any contents until it’s ready.</p>\n\n<p>So, before we continue, where does this <code class=\"highlighter-rouge\">*</code> asterisk come from?</p>\n\n<h4>ngIf and ng-template</h4>\n\n<p>It’s all about sugar syntax. When we do this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn\"</span><span class=\"nt\">&gt;</span>\n  Welcome back, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>With our new found knowledge, we can now understand that it’s equivalent to this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ng-template</span> <span class=\"err\">[</span><span class=\"na\">ngIf</span><span class=\"err\">]=\"</span><span class=\"na\">isLoggedIn</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Welcome back, friend.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>Angular will convert our <code class=\"highlighter-rouge\">*ngIf</code> syntax across to the above, which I’m sure you’ll agree isn’t quite as fast to work with. It does however tell us more about what’s happening with <code class=\"highlighter-rouge\">[ngIf]</code>, which is the directive being bound with a property binding syntax.</p>\n\n<p>Yes, this does mean, we can supply <code class=\"highlighter-rouge\">ngIf</code>, <code class=\"highlighter-rouge\">ngIfElse</code> (and <code class=\"highlighter-rouge\">ngIfThen</code>) the same way:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ng-template</span> <span class=\"err\">[</span><span class=\"na\">ngIf</span><span class=\"err\">]=\"</span><span class=\"na\">isLoggedIn</span><span class=\"err\">\"</span> <span class=\"err\">[</span><span class=\"na\">ngIfElse</span><span class=\"err\">]=\"</span><span class=\"na\">loggedOut</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Welcome back, friend.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedOut</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Please friend, login.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>But let’s not skip too far ahead, we’ve not covered <code class=\"highlighter-rouge\">ngIfThen</code> just yet…</p>\n\n<h4>*ngIf, Then and Else</h4>\n\n<p>Adopting <code class=\"highlighter-rouge\">then</code> alongside <code class=\"highlighter-rouge\">ngIf</code> is simply moving our initial <code class=\"highlighter-rouge\">*ngIf</code> template, outside of the element we’re binding to. This creates more flexibility in some use cases, where we can dynamically change the template reference to <code class=\"highlighter-rouge\">then</code> - essentially swapping <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> on the fly. A less common use case however.</p>\n\n<p>You could optionally adopt this approach to create a more descriptive if/then/else block. Again, use cases and preferences.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ng-container</span>\n  <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn; then loggedIn; else loggedOut\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/ng-container&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedIn</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Welcome back, friend.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedOut</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Please friend, login.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>This syntax aligns more with thinking in the flow of ternary statements. Our thinking could be converted to:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ngIf = expression ? then : else;\n</code></pre></div></div>\n\n<p>We could opt for <code class=\"highlighter-rouge\">ng-container</code> in this scenario, perhaps we don’t want to render a DOM node until our template is rendered.</p>\n\n<blockquote>\n  <p>Also, when using the <code class=\"highlighter-rouge\">then</code> block, any content between the opening and closing tags of the bound element (in the case of above, <code class=\"highlighter-rouge\">&lt;ng-container&gt;</code>), all inner content is ignored.</p>\n</blockquote>\n\n<h3>*ngIf, Observables and Async Pipe</h3>\n\n<p>Another fantastic addition to <code class=\"highlighter-rouge\">ngIf</code>, the async pipe “as” syntax. Learn about this <a href=\"https://toddmotto.com/angular-ngif-async-pipe\">over here</a> in my next post.</p>\n","content":"\n<p>Using the <code class=\"highlighter-rouge\">ngIf</code> directive allows us to simply toggle content based on a conditional. But is it as simple as we think? Not quite, the directive has a heap of helpful syntaxes that can help us deal with conditionals far better, and also asynchronous objects coming from perhaps an <a href=\"https://toddmotto.com/rxjs-observables-observers-operators\">Observable</a>.</p>\n\n<p>Let’s explore the ins and outs of <code class=\"highlighter-rouge\">ngIf</code>, and how we can utilise (the right way) in our Angular apps.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#angulars-ngif\">Angular’s ngIf</a>    <ul>\n<li><a href=\"https://toddmotto.com/#standard-ngif-in-angular\">Standard *ngIf in Angular</a></li>\n      <li><a href=\"https://toddmotto.com/#ngif-and-else\">*ngIf and Else</a></li>\n      <li><a href=\"https://toddmotto.com/#ngif-and-ng-template\">ngIf and ng-template</a></li>\n      <li><a href=\"https://toddmotto.com/#ngif-then-and-else\">*ngIf, Then and Else</a></li>\n    </ul>\n</li>\n  <li><a href=\"https://toddmotto.com/#ngif-observables-and-async-pipe\">*ngIf, Observables and Async Pipe</a></li>\n</ul>\n</div>\n\n<h3>Angular’s ngIf</h3>\n\n<p>Placing the <code class=\"highlighter-rouge\">ngIf</code> directive on a component, or element, will in fact hide or show that element based on the expression you pass it to be evaluated. Once evaluated, Angular will simply add or remove your DOM nodes, mount or remount your components, from the DOM - as the expression changes (if it ever does, that’s up to you).</p>\n\n<blockquote>\n  <p>When using an <code class=\"highlighter-rouge\">ngIf</code> on a component, this will in turn invoke relevant lifecycle hooks such as <code class=\"highlighter-rouge\">ngOnInit</code>, <code class=\"highlighter-rouge\">ngOnDestroy</code>, and so forth.</p>\n</blockquote>\n\n<p>The basic syntax of the <code class=\"highlighter-rouge\">ngIf</code> directive is simple and effective, all we need to do is prefix the directive name with an asterisk (<code class=\"highlighter-rouge\">*</code>) and add it anywhere inside our <code class=\"highlighter-rouge\">template</code>. We’ll cover <em>why</em> we use the asterisk syntax, shortly.</p>\n\n<h4>Standard *ngIf in Angular</h4>\n\n<p>There are four main ways we can use <code class=\"highlighter-rouge\">ngIf</code>, so let’s start by exploring the most basic use case:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app'</span><span class=\"p\">,</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s2\">`\n    &lt;div *ngIf=\"isLoggedIn\"&gt;\n      Welcome back. Congrats.\n    &lt;/div&gt;\n  `</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nx\">isLoggedIn</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We can also use JavaScript-like expressions to achieve a final truthy/falsy value to supply to <code class=\"highlighter-rouge\">ngIf</code> - as well as composing through multiple variables through various operators:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- negated variable to achieve \"if not\" --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"!isLoggedIn\"</span><span class=\"nt\">&gt;</span>\n  Please login, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"c\">&lt;!-- logic &amp;&amp; operator --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn &amp;&amp; !isNewUser\"</span><span class=\"nt\">&gt;</span>\n  Welcome back, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"c\">&lt;!-- logic OR operator --&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn || isNewUser\"</span><span class=\"nt\">&gt;</span>\n  Welcome!\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>Just a few examples, but I’m sure you catch my drift on the available ways we can compose an <code class=\"highlighter-rouge\">ngIf</code>. Let’s move onto some more interesting examples.</p>\n\n<h4>*ngIf and Else</h4>\n\n<p>One fantastic addition in Angular (coming from an AngularJS background), is the “else” statement. If this, else that. Nice and simple. In AngularJS we’d have to negate the expression to evaluate to an “else”, and templates became a little messy at times. Or we had <code class=\"highlighter-rouge\">ng-show</code> and <code class=\"highlighter-rouge\">ng-hide</code> directives to get our point across</p>\n\n<p>Thankfully, we have if/else to save us.</p>\n\n<p>Here’s how we can use the “else” statement, to control the render flow inside a component’s template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn; else loggedOut\"</span><span class=\"nt\">&gt;</span>\n  Welcome back, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedOut</span><span class=\"nt\">&gt;</span>\n  Please friend, login.\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>This setup can also be used to conditionally mount/unmount components as well.</p>\n\n<p>The main two things worth noticing here are the template reference variable (the <code class=\"highlighter-rouge\">#loggedOut</code> - which you can call whatever you like) and also the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code>. We use the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> because much like it’s HTML5 counterpart <code class=\"highlighter-rouge\">&lt;template&gt;</code>, it’s also considered “virtual”.</p>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> was inspired by <code class=\"highlighter-rouge\">&lt;template&gt;</code>, and existed in Angular v2-v4 as just <code class=\"highlighter-rouge\">&lt;template&gt;</code>. It’s now deprecated in favour of <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code>.</p>\n</blockquote>\n\n<p>Being “virtual” means the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> contents won’t actually exist in the compiled DOM, until it’s needed. When it’s needed (for example the “else” expression kicks into play), Angular will grab the contents of the <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> tag, and replace the <code class=\"highlighter-rouge\">*ngIf</code> contents with it.</p>\n\n<p>That’s it. It’s just a virtual container that won’t render any contents until it’s ready.</p>\n\n<p>So, before we continue, where does this <code class=\"highlighter-rouge\">*</code> asterisk come from?</p>\n\n<h4>ngIf and ng-template</h4>\n\n<p>It’s all about sugar syntax. When we do this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;div</span> <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn\"</span><span class=\"nt\">&gt;</span>\n  Welcome back, friend.\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div></div>\n\n<p>With our new found knowledge, we can now understand that it’s equivalent to this:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ng-template</span> <span class=\"err\">[</span><span class=\"na\">ngIf</span><span class=\"err\">]=\"</span><span class=\"na\">isLoggedIn</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Welcome back, friend.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>Angular will convert our <code class=\"highlighter-rouge\">*ngIf</code> syntax across to the above, which I’m sure you’ll agree isn’t quite as fast to work with. It does however tell us more about what’s happening with <code class=\"highlighter-rouge\">[ngIf]</code>, which is the directive being bound with a property binding syntax.</p>\n\n<p>Yes, this does mean, we can supply <code class=\"highlighter-rouge\">ngIf</code>, <code class=\"highlighter-rouge\">ngIfElse</code> (and <code class=\"highlighter-rouge\">ngIfThen</code>) the same way:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ng-template</span> <span class=\"err\">[</span><span class=\"na\">ngIf</span><span class=\"err\">]=\"</span><span class=\"na\">isLoggedIn</span><span class=\"err\">\"</span> <span class=\"err\">[</span><span class=\"na\">ngIfElse</span><span class=\"err\">]=\"</span><span class=\"na\">loggedOut</span><span class=\"err\">\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Welcome back, friend.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedOut</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Please friend, login.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>But let’s not skip too far ahead, we’ve not covered <code class=\"highlighter-rouge\">ngIfThen</code> just yet…</p>\n\n<h4>*ngIf, Then and Else</h4>\n\n<p>Adopting <code class=\"highlighter-rouge\">then</code> alongside <code class=\"highlighter-rouge\">ngIf</code> is simply moving our initial <code class=\"highlighter-rouge\">*ngIf</code> template, outside of the element we’re binding to. This creates more flexibility in some use cases, where we can dynamically change the template reference to <code class=\"highlighter-rouge\">then</code> - essentially swapping <code class=\"highlighter-rouge\">&lt;ng-template&gt;</code> on the fly. A less common use case however.</p>\n\n<p>You could optionally adopt this approach to create a more descriptive if/then/else block. Again, use cases and preferences.</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;ng-container</span>\n  <span class=\"err\">*</span><span class=\"na\">ngIf=</span><span class=\"s\">\"isLoggedIn; then loggedIn; else loggedOut\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/ng-container&gt;</span>\n\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedIn</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Welcome back, friend.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n<span class=\"nt\">&lt;ng-template</span> <span class=\"err\">#</span><span class=\"na\">loggedOut</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    Please friend, login.\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/ng-template&gt;</span>\n</code></pre></div></div>\n\n<p>This syntax aligns more with thinking in the flow of ternary statements. Our thinking could be converted to:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ngIf = expression ? then : else;\n</code></pre></div></div>\n\n<p>We could opt for <code class=\"highlighter-rouge\">ng-container</code> in this scenario, perhaps we don’t want to render a DOM node until our template is rendered.</p>\n\n<blockquote>\n  <p>Also, when using the <code class=\"highlighter-rouge\">then</code> block, any content between the opening and closing tags of the bound element (in the case of above, <code class=\"highlighter-rouge\">&lt;ng-container&gt;</code>), all inner content is ignored.</p>\n</blockquote>\n\n<h3>*ngIf, Observables and Async Pipe</h3>\n\n<p>Another fantastic addition to <code class=\"highlighter-rouge\">ngIf</code>, the async pipe “as” syntax. Learn about this <a href=\"https://toddmotto.com/angular-ngif-async-pipe\">over here</a> in my next post.</p>\n","enclosure":{},"categories":["angular"],"color":"purple","category":"Todd Motto","date":"2018-01-11 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Introduction to TypeScript","pubDate":"2018-01-08 00:00:00","link":"https://toddmotto.com/typescript-introduction","guid":"https://toddmotto.com/typescript-introduction","author":"","thumbnail":"","description":"\n<p>Since its inception, JavaScript has experienced monumental growth - especially in recent years.</p>\n\n<p>The language has expanded its application domain far beyond the browser. It is now used to power backends, create hybrid mobile applications, architect cloud solutions, design neural networks and even control robots. The versatility of JavaScript paired with its high adoption rate has created an increasing demand for scalable, secure, performant and feature-rich JavaScript applications. This in turn has created a need for tooling, libraries and frameworks that make it easier and faster to write applications that meet those expectations.</p>\n\n<p>This demand for high performance, maintainable and robust JavaScript led to the introduction of TypeScript.</p>\n\n<p>Let’s explore in detail what the design goals are, and benefits that using TypeScript brings to any codebase - from a small side project to a large enterprise one.</p>\n\n<blockquote>\n  <p>If you’d like to learn more about TypeScript after this intro, join me over at <a href=\"https://ultimateangular.com/courses\">Ultimate Angular</a> to take a deep dive in just a few hours.</p>\n</blockquote>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#typescript-is-a-superset-of-javascript\">TypeScript is a Superset of JavaScript</a></li>\n  <li>\n<a href=\"https://toddmotto.com/#typescript-architecture-design-goals\">TypeScript Architecture: Design Goals</a>    <ul>\n<li><a href=\"https://toddmotto.com/#javascript-compatibility-with-typescript\">JavaScript Compatibility with TypeScript</a></li>\n      <li><a href=\"https://toddmotto.com/#giving-type-check-to-javascript\">Giving Type Check to JavaScript</a></li>\n      <li><a href=\"https://toddmotto.com/#more-powerful-javascript-object-oriented-programming\">More Powerful JavaScript Object Oriented Programming</a></li>\n      <li><a href=\"https://toddmotto.com/#zero-overhead\">Zero Overhead</a></li>\n    </ul>\n</li>\n  <li>\n<a href=\"https://toddmotto.com/#typescript-architecture-components\">TypeScript Architecture: Components</a>    <ul>\n<li><a href=\"https://toddmotto.com/#language\">Language</a></li>\n      <li>\n<a href=\"https://toddmotto.com/#core-typescript-compiler\">Core TypeScript Compiler</a>        <ul>\n<li><a href=\"https://toddmotto.com/#parser\">Parser</a></li>\n          <li><a href=\"https://toddmotto.com/#binder\">Binder</a></li>\n          <li><a href=\"https://toddmotto.com/#type-resolver-or-type-checker\">Type Resolver or Type Checker</a></li>\n          <li><a href=\"https://toddmotto.com/#emitter\">Emitter</a></li>\n          <li><a href=\"https://toddmotto.com/#pre-processor\">Pre-processor</a></li>\n        </ul>\n</li>\n      <li><a href=\"https://toddmotto.com/#typescript-standalone-compiler-tsc\">TypeScript Standalone Compiler, tsc</a></li>\n      <li><a href=\"https://toddmotto.com/#language-service\">Language Service</a></li>\n      <li><a href=\"https://toddmotto.com/#tool-integration\">Tool Integration</a></li>\n    </ul>\n</li>\n  <li>\n<a href=\"https://toddmotto.com/#setting-up-and-using-typescript\">Setting Up and Using TypeScript</a>    <ul>\n<li><a href=\"https://toddmotto.com/#how-to-install-typescript\">How to Install TypeScript</a></li>\n      <li><a href=\"https://toddmotto.com/#create-a-typescript-file\">Create a TypeScript File</a></li>\n      <li><a href=\"https://toddmotto.com/#compile-typescript\">Compile TypeScript</a></li>\n      <li><a href=\"https://toddmotto.com/#configure-typescript-using-tsconfig\">Configure TypeScript using tsconfig</a></li>\n      <li><a href=\"https://toddmotto.com/#typescript-playground\">TypeScript Playground</a></li>\n      <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n    </ul>\n</li>\n</ul>\n</div>\n\n<h2>TypeScript is a Superset of JavaScript</h2>\n\n<p>TC39, the committee that regulates the development of JavaScript, has introduced new features to the language with each release version. Recently added features such as classes and block-scoped variables make standard JavaScript more robust. However, the language can be further enhanced and hardened to handle highly complex architectural demands in a reliable and predictable way. TC39 oftentimes has features in its pipeline that would help achieve that architectural goal but it takes time for them to become part of the standard language and to be supported by all major browsers.</p>\n\n<p>As each new version of JavaScript extends the previous one, we could think of “Future JavaScript” as a superset of the current standard one. With that model in mind, TypeScript was created to act as that superset of JavaScript that puts the future of the language in the hands of today’s developers. Moreover, TypeScript integrates features outside of the scope of TC39, such as type-checking, generics and interfaces, that mitigate many points of failure present in JavaScript and rev up development - all provided through abstractions written in JavaScript. All that TypeScript gives you is convenient syntactic sugar that eventually gets all converted to cross-platform JavaScript.</p>\n\n<p>Let’s explore in detail the architecture and components of TypeScript to understand its benefits deeply.</p>\n\n<h2>TypeScript Architecture: Design Goals</h2>\n\n<p>Microsoft designed TypeScript with specific architectural parameters in mind that allow TypeScript to integrate fully and easily with existing JavaScript code while providing robust features external to JavaScript.</p>\n\n<h3>JavaScript Compatibility with TypeScript</h3>\n\n<p>As we’ve established, TypeScript is a superset of JavaScript. This relationship permits TypeScript to understand and work with any code that is valid JavaScript. Any valid JavaScript code is valid TypeScript code with only a few exceptions: handling option function parameters and assigning a value to an object literal.</p>\n\n<p>Do take note that valid TypeScript is not valid JavaScript code. TypeScript contains syntax and abstractions that do not exist in JavaScript and using them with JavaScript would generate JavaScript runtime errors. However, in an effort to promote compatibility, TypeScript developers align the language with the pipeline of ECMAScript. Current and future ECMAScript proposals are considered when designing new TypeScript features.</p>\n\n<h3>Giving Type Check to JavaScript</h3>\n\n<p>JavaScript being a loosely typed language is extremely lenient on the value assigned to its variables and it creates no structural contracts of any kind between those variables and the constructs that use them. Passing a number argument to a function that expects a string parameter generates no errors in JavaScript during development but will create havoc during runtime when the body of the function is not able to use that argument correctly.</p>\n\n<p>To prevent these runtime issues, TypeScript was designed as a strongly typed language that performs static type-checking during its compilation time to JavaScript. For flexibility, the type-checking capabilities of TypeScript are optional; however, most of TypeScript key benefits revolve around type-checking - it’s the main reason to use TypeScript! For example, type-checking lets the language service layer of the language to be used for creating better tools that maximize your productivity while reducing the instance of errors.</p>\n\n<h3>More Powerful JavaScript Object Oriented Programming</h3>\n\n<p>The syntactic sugar provided by TypeScript will allow us to reduce the footprint of our code significantly while increasing its expressiveness. TypeScript makes writing class object-oriented code a breeze. It provides us with classes, interfaces and modules that allow us to properly structure our code in encapsulated reusable structures that makes it easy to maintain and scale. Within classes, we are also able to specify the visibility level of class properties and methods by using TypeScript provided modifiers - <code class=\"highlighter-rouge\">public</code>, <code class=\"highlighter-rouge\">private</code> and <code class=\"highlighter-rouge\">protected</code>. There are many other abstractions that will make us happy and productive developers!</p>\n\n<h3>Zero Overhead</h3>\n\n<p>As TypeScript developers, we work in two different contexts - design and execution. In the design context, we use TypeScript directly to write our application. Now, since TypeScript is not supported by any browser, in order to make our design code work, it has to become JavaScript code. In the execution context, all of our TypeScript code is compiled into JavaScript code and is then executed by its target platform - the browser for example. The browser has no clue that this code is compiled - it looks just like the plain JavaScript it knows how to execute. Therefore, TypeScript imposes no runtime overhead on any application.</p>\n\n<p>For the browser to receive valid execution code, the TypeScript compiler takes TypeScript features and implements them in whatever JavaScript compile target of our choice - we can go as early as ES3! As we know, there are some TypeScript features that simply do not exist in JavaScript and cannot be implemented, such as type-checking and interfaces. These unsupported features are simply removed from the compiled code - this is known as <em>type erasure</em>. Their removal has no impact on the functionality of your code because these unique features are there only to help TypeScript enhance your developer experience and they don’t overrun or override anything core to the JavaScript language.</p>\n\n<h2>TypeScript Architecture: Components</h2>\n\n<p>The architecture of TypeScript is neatly organized in different layers.</p>\n\n<h3>Language</h3>\n\n<h3>Core TypeScript Compiler</h3>\n\n<p>Sometimes called the TypeScript transpiler, the TypeScript compiler has the core task of managing the low-level mechanics of type-checking our code and converting it into valid JavaScript code. The compiler uses static code analysis to mitigate the occurrence of runtime errors. Typos in our code or passing the wrong type of argument to a function will make the compiler throw compile-time errors to warn us that something is wrong before we even execute the code. This is extremely valuable as, even with the most comprehensive suite of tests, logic errors and edge cases can crash our application at runtime. TypeScript ensures that type definitions that we create within our code are used consistently throughout it.</p>\n\n<p>The compiler itself is made up of different parts that work together fast to make our code predictable and to compile it:</p>\n\n<h4>Parser</h4>\n\n<p>A quiet complex yet critical component that takes input data, our TypeScript source files, and builds a data structure from it - in this case, an Abstract Syntax Tree. Parsing our code creates a structural representation of the sources that allows us to check that they are following the language grammar - that is, that the sources are built using the correct syntax.</p>\n\n<h4>Binder</h4>\n\n<p>When we have, for example, a function and a module with the same name, the <em>binder</em> links these named declarations using a Symbol, allowing the type system to make sense of them.</p>\n\n<h4>Type Resolver or Type Checker</h4>\n\n<p>This component resolves types for each construct, checks semantic operations and generates type diagnostics.</p>\n\n<h4>Emitter</h4>\n\n<p>Generates output from <code class=\"highlighter-rouge\">.ts</code> and <code class=\"highlighter-rouge\">d.ts</code> files. The output can be either a JavaScript file (<code class=\"highlighter-rouge\">.js</code>), a TypeScript definition file, (<code class=\"highlighter-rouge\">d.ts</code>), or a source map file (<code class=\"highlighter-rouge\">.js.map</code>).</p>\n\n<h4>Pre-processor</h4>\n\n<p>Resolves and manages references amongst files using import or <code class=\"highlighter-rouge\">/// \\&lt;reference path=…/&gt;</code>.</p>\n\n<blockquote>\n  <p>We will learn in an upcoming section how to setup and configure the TypeScript compiler.</p>\n</blockquote>\n\n<h3>TypeScript Standalone Compiler, tsc</h3>\n\n<p>We’ll shortly explore the installation and usage of the standalone TypeScript compiler. Referred to often as <code class=\"highlighter-rouge\">tsc</code>, it is a high-level compiler that takes a TypeScript file, <code class=\"highlighter-rouge\">.ts</code>, and outputs a JavaScript file, <code class=\"highlighter-rouge\">.js</code>.</p>\n\n<h3>Language Service</h3>\n\n<p>This component layer sits on top of the <em>core TypeScript compiler</em> and provides features that are needed for IDEs and text editors to do their job, such as statement completions, signature help, code formatting and outlining, syntax highlighting and many more. The language service also powers code refactoring such as renaming variables, debugging and incremental compilation.</p>\n\n<h3>Tool Integration</h3>\n\n<p>TypeScript offers type annotations that allow IDEs and text editors to perform comprehensive static analysis on our code. These annotations allow these tools to make smart suggestions by making our code far more predictable. In return, IDEs and text editors can offer better auto completion and refactoring of TypeScript code.</p>\n\n<h2>Setting Up and Using TypeScript</h2>\n\n<h3>How to Install TypeScript</h3>\n\n<p>The easiest way to get TypeScript up and running is by installing its standalone compiler (tsc) globally via a Node.js package manager such as npm or yarn.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm install <span class=\"nt\">-g</span> typescript\n</code></pre></div></div>\n\n<p>or</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yarn global add typescript\n</code></pre></div></div>\n\n<p>Once this global installation of the TypeScript compiler is complete, we have access to the <code class=\"highlighter-rouge\">tsc</code> command from our terminal that allow us to compile <code class=\"highlighter-rouge\">.ts</code> files into <code class=\"highlighter-rouge\">.js</code> ones. We can verify the success of our compiler installation by running the following command to check its version:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tsc <span class=\"nt\">-v</span>\n</code></pre></div></div>\n\n<p>The TypeScript compiler comes with many options that we’ll be exploring as we move forward. For now, create a folder anywhere in your file system called <code class=\"highlighter-rouge\">ts-intro</code>. We are going to use that folder to store our TypeScript source files and take it for a spin!</p>\n\n<h3>Create a TypeScript File</h3>\n\n<p>Using a text editor, IDE or terminal - whatever option you prefer - create a file named <code class=\"highlighter-rouge\">barista.ts</code>. Within our file, we are going to create a <code class=\"highlighter-rouge\">barista</code> function that takes <code class=\"highlighter-rouge\">name</code> and outputs an order call using that <code class=\"highlighter-rouge\">name</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.ts</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>We’ve created a valid TypeScript file but how do we run it? Let’s do that next.</p>\n\n<h3>Compile TypeScript</h3>\n\n<p>With our folder <code class=\"highlighter-rouge\">ts-intro</code> as our current directory, let’s execute the following command in our terminal window:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tsc barista.ts\n</code></pre></div></div>\n\n<p>We get <code class=\"highlighter-rouge\">barista.js</code> being added to our folder <code class=\"highlighter-rouge\">ts-intro</code> - this is the output of the compilation. Open <code class=\"highlighter-rouge\">barista.js</code> and notice that it’s <em>almost</em> exactly the same as <code class=\"highlighter-rouge\">barista.ts</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.js</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>One way to quickly spot what changed through compilation is by running a difference on the content of both files:</p>\n\n<p>OSX / Linux: <code class=\"highlighter-rouge\"><span class=\"gh\">diff barista.ts barista.js</span></code>\nWindows: <code class=\"highlighter-rouge\">FC barista.ts barista.js</code></p>\n\n<p>The file difference is nothing major. <code class=\"highlighter-rouge\">tsc</code> changed the scoped variable <code class=\"highlighter-rouge\">let</code> to <code class=\"highlighter-rouge\">var</code>. This happened because the default target JavaScript for compilation is ES3 - which doesn’t support <code class=\"highlighter-rouge\">let</code>. We’ll learn soon on how to modify the compiler configuration. We can now run <code class=\"highlighter-rouge\">barista.js</code> through node by executing the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>node barista.js\n</code></pre></div></div>\n\n<p>As it is, <code class=\"highlighter-rouge\">barista.ts</code> has no TypeScript on it, hence, there’s not much to compile. Let’s add more TypeScript features to it to see a more dramatic file change.</p>\n\n<p>Let’s drastically modify the code by creating a <code class=\"highlighter-rouge\">Barista</code> class that has a static method that calls the order and uses type annotations to enforce type checking of our variables:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.ts</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Barista</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">callOrder</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">Barista</span><span class=\"p\">.</span><span class=\"nx\">callOrder</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Because <code class=\"highlighter-rouge\">callOrder</code> is static, we do not need to create an instance of the class to be able to use the method. Much like <code class=\"highlighter-rouge\">Array.from</code>, we call the method from the class name itself. Compile the code running <code class=\"highlighter-rouge\">tsc barista.ts</code> again and note how this time we get a quite different <code class=\"highlighter-rouge\">barista.js</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.js</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">Barista</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">Barista</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n  <span class=\"nx\">Barista</span><span class=\"p\">.</span><span class=\"nx\">callOrder</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">return</span> <span class=\"nx\">Barista</span><span class=\"p\">;</span>\n<span class=\"p\">})();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Barista</span><span class=\"p\">.</span><span class=\"nx\">callOrder</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>ES3 supports no <code class=\"highlighter-rouge\">class</code> construct, therefore, this TypeScript construct has to be implemented in plain JavaScript. Notice, however, how nice and readable the compiled code is! The compiler created a comment annotation, <code class=\"highlighter-rouge\">@class</code>, in the JavaScript file to denote <code class=\"highlighter-rouge\">Barista</code> as intended to be a class - increasing our code readability.</p>\n\n<h3>Configure TypeScript using tsconfig</h3>\n\n<p>Much like <code class=\"highlighter-rouge\">package.json</code> is added to give <code class=\"highlighter-rouge\">npm</code> instructions on what packages to install as project dependencies, we can use a <code class=\"highlighter-rouge\">tsconfig.json</code> file to provide instructions on how our TypeScript project should be configured. Adding <code class=\"highlighter-rouge\">tsconfig.json</code> to <code class=\"highlighter-rouge\">ts-intro</code> marks the folder as the root directory of our TypeScript project. In this file, we can specify compiler options to compile our <code class=\"highlighter-rouge\">.ts</code> files as well as root files for our project.</p>\n\n<p>Create a <code class=\"highlighter-rouge\">tsconfig.json</code> file within <code class=\"highlighter-rouge\">ts-intro</code> with the following configuration to tell the compiler to use ES6 as the JavaScript compilation target instead:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"es6\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>From now on, whenever we run the <code class=\"highlighter-rouge\">tsc</code> command, the compiler will check this file first for special instructions and then proceed with compilation based on those instructions. It’s important to know that to make use of <code class=\"highlighter-rouge\">tsconfig.json</code>, we do not specify any file inputs to <code class=\"highlighter-rouge\">tsc</code>. To compile <code class=\"highlighter-rouge\">barista.ts</code> once again under this new configuration simply run the command <code class=\"highlighter-rouge\">tsc</code> in your terminal.</p>\n\n<p>Since we are using ES6, which supports <code class=\"highlighter-rouge\">class</code>, as the JavaScript compilation target, <code class=\"highlighter-rouge\">barista.js</code> doesn’t look very different than <code class=\"highlighter-rouge\">barista.ts</code>! The only difference is that the compiler removed the code related to static type checking. The <code class=\"highlighter-rouge\">name</code> argument doesn’t have any annotations to indicate its type since this feature is not part of ES6.</p>\n\n<p>There’s a much easier way to initialise a TypeScript project and create its <code class=\"highlighter-rouge\">tsconfig.json</code> file. We can use a handy shortcut similar to what’s done to kickstart a Node.js project. Let’s go ahead and delete the <code class=\"highlighter-rouge\">tsconfig.json</code> file that we created and then run the following initialisation command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tsc <span class=\"nt\">--init</span>\n</code></pre></div></div>\n\n<p>The output of running this command is a newly created <code class=\"highlighter-rouge\">tsconfig.json</code> file that is packed with a lot of default options to configure our TypeScript project compiler - most of them are not enabled by default. The configuration options are accompanied by comments that explain what each one configures in our compiler!</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Basic</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\">\n      </span><span class=\"s2\">\"es5\"</span><span class=\"w\"> </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">ECMAScript</span><span class=\"w\"> </span><span class=\"err\">target</span><span class=\"w\"> </span><span class=\"err\">version</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">3</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"err\">(default)</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">5</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">2015</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">2016</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">2017</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'ESNEXT'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\">\n      </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\"> </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">generation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'none'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">commonjs'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'amd'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'system'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'umd'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'es</span><span class=\"mi\">2015</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'ESNext'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"lib\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                             </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">library</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">included</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">compilation</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"allowJs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Allow</span><span class=\"w\"> </span><span class=\"err\">javascript</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">compiled.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"checkJs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">.js</span><span class=\"w\"> </span><span class=\"err\">files.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"jsx\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"preserve\"</span><span class=\"p\">,</span><span class=\"w\">                     </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">JSX</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">generation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'preserve'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'react-native'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'react'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"declaration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                   </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Generates</span><span class=\"w\"> </span><span class=\"err\">corresponding</span><span class=\"w\"> </span><span class=\"err\">'.d.ts'</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"sourceMap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                     </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Generates</span><span class=\"w\"> </span><span class=\"err\">corresponding</span><span class=\"w\"> </span><span class=\"err\">'.map'</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"outFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Concatenate</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">output</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">single</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Redirect</span><span class=\"w\"> </span><span class=\"err\">output</span><span class=\"w\"> </span><span class=\"err\">structure</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">directory.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"rootDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">root</span><span class=\"w\"> </span><span class=\"err\">directory</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">input</span><span class=\"w\"> </span><span class=\"err\">files.</span><span class=\"w\"> </span><span class=\"err\">Use</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">control</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">output</span><span class=\"w\"> </span><span class=\"err\">directory</span><span class=\"w\"> </span><span class=\"err\">structure</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">--outDir.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"removeComments\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Do</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">comments</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">output.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noEmit\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Do</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">outputs.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"importHelpers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                 </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Import</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">helpers</span><span class=\"w\"> </span><span class=\"err\">from</span><span class=\"w\"> </span><span class=\"err\">'tslib'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"downlevelIteration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">            </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Provide</span><span class=\"w\"> </span><span class=\"err\">full</span><span class=\"w\"> </span><span class=\"err\">support</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">iterables</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">'for-of'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">spread</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">destructuring</span><span class=\"w\"> </span><span class=\"err\">when</span><span class=\"w\"> </span><span class=\"err\">targeting</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">5</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">3</span><span class=\"err\">'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"isolatedModules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">               </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Transpile</span><span class=\"w\"> </span><span class=\"err\">each</span><span class=\"w\"> </span><span class=\"err\">file</span><span class=\"w\"> </span><span class=\"err\">as</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">separate</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">(similar</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">'ts.transpileModule').</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Strict</span><span class=\"w\"> </span><span class=\"err\">Type-Checking</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"s2\">\"strict\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enable</span><span class=\"w\"> </span><span class=\"err\">all</span><span class=\"w\"> </span><span class=\"err\">strict</span><span class=\"w\"> </span><span class=\"err\">type-checking</span><span class=\"w\"> </span><span class=\"err\">options.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noImplicitAny\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                 </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Raise</span><span class=\"w\"> </span><span class=\"err\">error</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">expressions</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">declarations</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">an</span><span class=\"w\"> </span><span class=\"err\">implied</span><span class=\"w\"> </span><span class=\"err\">'any'</span><span class=\"w\"> </span><span class=\"err\">type.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"strictNullChecks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enable</span><span class=\"w\"> </span><span class=\"err\">strict</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"w\"> </span><span class=\"err\">checks.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noImplicitThis\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Raise</span><span class=\"w\"> </span><span class=\"err\">error</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">'this'</span><span class=\"w\"> </span><span class=\"err\">expressions</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">an</span><span class=\"w\"> </span><span class=\"err\">implied</span><span class=\"w\"> </span><span class=\"err\">'any'</span><span class=\"w\"> </span><span class=\"err\">type.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"alwaysStrict\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                  </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Parse</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">strict</span><span class=\"w\"> </span><span class=\"err\">mode</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"s2\">\"use strict\"</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">each</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Additional</span><span class=\"w\"> </span><span class=\"err\">Checks</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noUnusedLocals\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">unused</span><span class=\"w\"> </span><span class=\"err\">locals.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noUnusedParameters\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">            </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">unused</span><span class=\"w\"> </span><span class=\"err\">parameters.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noImplicitReturns\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">             </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">error</span><span class=\"w\"> </span><span class=\"err\">when</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">all</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">paths</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">function</span><span class=\"w\"> </span><span class=\"err\">return</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">value.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noFallthroughCasesInSwitch\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">fallthrough</span><span class=\"w\"> </span><span class=\"err\">cases</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">switch</span><span class=\"w\"> </span><span class=\"err\">statement.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Module</span><span class=\"w\"> </span><span class=\"err\">Resolution</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"moduleResolution\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"node\"</span><span class=\"p\">,</span><span class=\"w\">            </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">resolution</span><span class=\"w\"> </span><span class=\"err\">strategy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'node'</span><span class=\"w\"> </span><span class=\"err\">(Node.js)</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'classic'</span><span class=\"w\"> </span><span class=\"err\">(TypeScript</span><span class=\"w\"> </span><span class=\"err\">pre</span><span class=\"mf\">-1.6</span><span class=\"err\">).</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"baseUrl\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Base</span><span class=\"w\"> </span><span class=\"err\">directory</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">resolve</span><span class=\"w\"> </span><span class=\"err\">non-absolute</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">names.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"paths\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\">                           </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">A</span><span class=\"w\"> </span><span class=\"err\">series</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">entries</span><span class=\"w\"> </span><span class=\"err\">which</span><span class=\"w\"> </span><span class=\"err\">re-map</span><span class=\"w\"> </span><span class=\"err\">imports</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">lookup</span><span class=\"w\"> </span><span class=\"err\">locations</span><span class=\"w\"> </span><span class=\"err\">relative</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">'baseUrl'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"rootDirs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">List</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">root</span><span class=\"w\"> </span><span class=\"err\">folders</span><span class=\"w\"> </span><span class=\"err\">whose</span><span class=\"w\"> </span><span class=\"err\">combined</span><span class=\"w\"> </span><span class=\"err\">content</span><span class=\"w\"> </span><span class=\"err\">represents</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">structure</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">project</span><span class=\"w\"> </span><span class=\"err\">at</span><span class=\"w\"> </span><span class=\"err\">runtime.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"typeRoots\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">List</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">folders</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">include</span><span class=\"w\"> </span><span class=\"err\">type</span><span class=\"w\"> </span><span class=\"err\">definitions</span><span class=\"w\"> </span><span class=\"err\">from.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"types\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                           </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Type</span><span class=\"w\"> </span><span class=\"err\">declaration</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">included</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">compilation.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"allowSyntheticDefaultImports\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Allow</span><span class=\"w\"> </span><span class=\"err\">default</span><span class=\"w\"> </span><span class=\"err\">imports</span><span class=\"w\"> </span><span class=\"err\">from</span><span class=\"w\"> </span><span class=\"err\">modules</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">no</span><span class=\"w\"> </span><span class=\"err\">default</span><span class=\"w\"> </span><span class=\"err\">export.</span><span class=\"w\"> </span><span class=\"err\">This</span><span class=\"w\"> </span><span class=\"err\">does</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">affect</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">just</span><span class=\"w\"> </span><span class=\"err\">typechecking.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"preserveSymlinks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Do</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">resolve</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">real</span><span class=\"w\"> </span><span class=\"err\">path</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">symlinks.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Source</span><span class=\"w\"> </span><span class=\"err\">Map</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"sourceRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">location</span><span class=\"w\"> </span><span class=\"err\">where</span><span class=\"w\"> </span><span class=\"err\">debugger</span><span class=\"w\"> </span><span class=\"err\">should</span><span class=\"w\"> </span><span class=\"err\">locate</span><span class=\"w\"> </span><span class=\"err\">TypeScript</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">instead</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">locations.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">location</span><span class=\"w\"> </span><span class=\"err\">where</span><span class=\"w\"> </span><span class=\"err\">debugger</span><span class=\"w\"> </span><span class=\"err\">should</span><span class=\"w\"> </span><span class=\"err\">locate</span><span class=\"w\"> </span><span class=\"err\">map</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">instead</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">generated</span><span class=\"w\"> </span><span class=\"err\">locations.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"inlineSourceMap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">               </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Emit</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">single</span><span class=\"w\"> </span><span class=\"err\">file</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">maps</span><span class=\"w\"> </span><span class=\"err\">instead</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">having</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">separate</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"inlineSources\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                 </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Emit</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">alongside</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">sourcemaps</span><span class=\"w\"> </span><span class=\"err\">within</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">single</span><span class=\"w\"> </span><span class=\"err\">file;</span><span class=\"w\"> </span><span class=\"err\">requires</span><span class=\"w\"> </span><span class=\"err\">'--inlineSourceMap'</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'--sourceMap'</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">set.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Experimental</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"experimentalDecorators\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enables</span><span class=\"w\"> </span><span class=\"err\">experimental</span><span class=\"w\"> </span><span class=\"err\">support</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">ES</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"err\">decorators.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"emitDecoratorMetadata\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">         </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enables</span><span class=\"w\"> </span><span class=\"err\">experimental</span><span class=\"w\"> </span><span class=\"err\">support</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">emitting</span><span class=\"w\"> </span><span class=\"err\">type</span><span class=\"w\"> </span><span class=\"err\">metadata</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">decorators.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The best part of this new <code class=\"highlighter-rouge\">tsconfig.json</code> is definitely how well documented the options are - they are pretty self-explanatory! You don’t have to use all of these options though. For most of my Angular applications that use TypeScript, I use the following configuration:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"es6\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"sourceMap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"experimentalDecorators\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"s2\">\"files\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"./node_modules/@types/mocha/index.d.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./node_modules/@types/node/index.d.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"src/**/*.ts\"</span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"s2\">\"exclude\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"node_modules\"</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<blockquote>\n  <p>Note that <code class=\"highlighter-rouge\">es6</code> and <code class=\"highlighter-rouge\">ES2015</code> can be used interchangeably.</p>\n</blockquote>\n\n<p>I added three additional properties to <code class=\"highlighter-rouge\">tsconfig.json</code> (<code class=\"highlighter-rouge\">files</code>, <code class=\"highlighter-rouge\">include</code> and <code class=\"highlighter-rouge\">exclude</code>) that allow us to specify which files in the containing directory and subdirectories should be compiled:</p>\n\n<ul>\n<li>When <code class=\"highlighter-rouge\">files</code> or <code class=\"highlighter-rouge\">include</code> properties are specified, the compiler will only process a union of the files listed as the value of these properties.</li>\n  <li>\n<code class=\"highlighter-rouge\">files</code> takes a list of relative or absolute file paths, whereas <code class=\"highlighter-rouge\">include</code> and <code class=\"highlighter-rouge\">exclude</code> take a list of glob-like file patterns.</li>\n  <li>\n<code class=\"highlighter-rouge\">exclude</code> is used to filter the files listed under <code class=\"highlighter-rouge\">include</code>; however, any files that have been explicitly listed under <code class=\"highlighter-rouge\">files</code> are always included regardless of them matching any pattern defined under <code class=\"highlighter-rouge\">exclude</code>.</li>\n</ul>\n<p>I presented my <code class=\"highlighter-rouge\">tsconfig.json</code> as an example to showcase the file filtering capabilities of the compiler. Running <code class=\"highlighter-rouge\">tsc</code> with it in our <code class=\"highlighter-rouge\">ts-intro</code> folder will give us an error saying that the paths specified in <code class=\"highlighter-rouge\">files</code> are not found. Again, I use this for my Angular projects that makes use of <code class=\"highlighter-rouge\">node_modules</code> - if you wish, give it a try on your projects.</p>\n\n<p>We’ve covered a lot so far. We’ve learned how to create a TypeScript file, how to compile a TypeScript file, and how to configure the compiler to render different compilations of a TypeScript file. There’s much, much more that can be configured through <code class=\"highlighter-rouge\">tsconfig.json</code> but that’s a story for another post!</p>\n\n<h3>TypeScript Playground</h3>\n\n<p>Whenever you need to perform some quick experimentation with how TypeScript code would compile to JavaScript it’s not necessary to go through all this setup. The TypeScript Team created an online tool that allows us to compile TypeScript code and compare it side by side with its JavaScript output online. This tool is called TypeScript Playground and we can access it at <a href=\"https://www.typescriptlang.org/play/\">typescriptlang.org/play</a>.</p>\n\n<p>TypeScript Playground allows you to share the code snippets you create there with others. You can access the Playground for <code class=\"highlighter-rouge\">barista.ts</code> <a href=\"https://www.typescriptlang.org/play/#src=class%20Barista%20%7B%0D%0A%20%20static%20%20callOrder(name%3A%20string)%20%7B%0D%0A%20%20%20%20console.log('Peppermint%20Mocha%20Frappuccino%20for%20'%20%2B%20name)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0Alet%20customer%20%3D%20%7B%0D%0A%20%20name%3A%20'Todd'%0D%0A%7D%3B%0D%0A%0D%0ABarista.callOrder(customer.name)%3B%0D%0A\">here</a>.</p>\n\n<p>The Playground also has built-in examples that showcase TypeScript code snippets of different complexities and categories, such as using generics. Use it at your leisure to create deep mapping knowledge between TypeScript and JavaScript easily.</p>\n\n<h3>Conclusion</h3>\n\n<p>TypeScript brings a lot of benefits to our productivity and developer experience. We’ve seen that integrating it with an existing JavaScript project is easy and carries little to no overhead. TypeScript is not unique to Angular, other powerful frontend frameworks such as React and Vue are starting to be used with TypeScript to allow developer teams to create applications that are reliable, sustainable and scalable. JavaScript and TypeScript are continually evolving but not competing against each other. TypeScript was created to complement and enhance JavaScript - not replace it. The future may see them becoming very similar in features but with TypeScript remaining the statically typed alternative.</p>\n\n<p>With this TypeScript introduction, we’ve just scratched the surface of all the amazing things that we can do with TypeScript. I hope you enjoyed this post!</p>\n\n<p>If you’re interested in taking your TypeScript skills to an ultimate level, I invite you to come and learn TypeScript basic and advanced concepts with me at <a href=\"https://ultimateangular.com/courses#typescript\">Ultimate Angular</a> - don’t worry if you are not an Angular developer, the course is designed completely around TypeScript!</p>\n","content":"\n<p>Since its inception, JavaScript has experienced monumental growth - especially in recent years.</p>\n\n<p>The language has expanded its application domain far beyond the browser. It is now used to power backends, create hybrid mobile applications, architect cloud solutions, design neural networks and even control robots. The versatility of JavaScript paired with its high adoption rate has created an increasing demand for scalable, secure, performant and feature-rich JavaScript applications. This in turn has created a need for tooling, libraries and frameworks that make it easier and faster to write applications that meet those expectations.</p>\n\n<p>This demand for high performance, maintainable and robust JavaScript led to the introduction of TypeScript.</p>\n\n<p>Let’s explore in detail what the design goals are, and benefits that using TypeScript brings to any codebase - from a small side project to a large enterprise one.</p>\n\n<blockquote>\n  <p>If you’d like to learn more about TypeScript after this intro, join me over at <a href=\"https://ultimateangular.com/courses\">Ultimate Angular</a> to take a deep dive in just a few hours.</p>\n</blockquote>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#typescript-is-a-superset-of-javascript\">TypeScript is a Superset of JavaScript</a></li>\n  <li>\n<a href=\"https://toddmotto.com/#typescript-architecture-design-goals\">TypeScript Architecture: Design Goals</a>    <ul>\n<li><a href=\"https://toddmotto.com/#javascript-compatibility-with-typescript\">JavaScript Compatibility with TypeScript</a></li>\n      <li><a href=\"https://toddmotto.com/#giving-type-check-to-javascript\">Giving Type Check to JavaScript</a></li>\n      <li><a href=\"https://toddmotto.com/#more-powerful-javascript-object-oriented-programming\">More Powerful JavaScript Object Oriented Programming</a></li>\n      <li><a href=\"https://toddmotto.com/#zero-overhead\">Zero Overhead</a></li>\n    </ul>\n</li>\n  <li>\n<a href=\"https://toddmotto.com/#typescript-architecture-components\">TypeScript Architecture: Components</a>    <ul>\n<li><a href=\"https://toddmotto.com/#language\">Language</a></li>\n      <li>\n<a href=\"https://toddmotto.com/#core-typescript-compiler\">Core TypeScript Compiler</a>        <ul>\n<li><a href=\"https://toddmotto.com/#parser\">Parser</a></li>\n          <li><a href=\"https://toddmotto.com/#binder\">Binder</a></li>\n          <li><a href=\"https://toddmotto.com/#type-resolver-or-type-checker\">Type Resolver or Type Checker</a></li>\n          <li><a href=\"https://toddmotto.com/#emitter\">Emitter</a></li>\n          <li><a href=\"https://toddmotto.com/#pre-processor\">Pre-processor</a></li>\n        </ul>\n</li>\n      <li><a href=\"https://toddmotto.com/#typescript-standalone-compiler-tsc\">TypeScript Standalone Compiler, tsc</a></li>\n      <li><a href=\"https://toddmotto.com/#language-service\">Language Service</a></li>\n      <li><a href=\"https://toddmotto.com/#tool-integration\">Tool Integration</a></li>\n    </ul>\n</li>\n  <li>\n<a href=\"https://toddmotto.com/#setting-up-and-using-typescript\">Setting Up and Using TypeScript</a>    <ul>\n<li><a href=\"https://toddmotto.com/#how-to-install-typescript\">How to Install TypeScript</a></li>\n      <li><a href=\"https://toddmotto.com/#create-a-typescript-file\">Create a TypeScript File</a></li>\n      <li><a href=\"https://toddmotto.com/#compile-typescript\">Compile TypeScript</a></li>\n      <li><a href=\"https://toddmotto.com/#configure-typescript-using-tsconfig\">Configure TypeScript using tsconfig</a></li>\n      <li><a href=\"https://toddmotto.com/#typescript-playground\">TypeScript Playground</a></li>\n      <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n    </ul>\n</li>\n</ul>\n</div>\n\n<h2>TypeScript is a Superset of JavaScript</h2>\n\n<p>TC39, the committee that regulates the development of JavaScript, has introduced new features to the language with each release version. Recently added features such as classes and block-scoped variables make standard JavaScript more robust. However, the language can be further enhanced and hardened to handle highly complex architectural demands in a reliable and predictable way. TC39 oftentimes has features in its pipeline that would help achieve that architectural goal but it takes time for them to become part of the standard language and to be supported by all major browsers.</p>\n\n<p>As each new version of JavaScript extends the previous one, we could think of “Future JavaScript” as a superset of the current standard one. With that model in mind, TypeScript was created to act as that superset of JavaScript that puts the future of the language in the hands of today’s developers. Moreover, TypeScript integrates features outside of the scope of TC39, such as type-checking, generics and interfaces, that mitigate many points of failure present in JavaScript and rev up development - all provided through abstractions written in JavaScript. All that TypeScript gives you is convenient syntactic sugar that eventually gets all converted to cross-platform JavaScript.</p>\n\n<p>Let’s explore in detail the architecture and components of TypeScript to understand its benefits deeply.</p>\n\n<h2>TypeScript Architecture: Design Goals</h2>\n\n<p>Microsoft designed TypeScript with specific architectural parameters in mind that allow TypeScript to integrate fully and easily with existing JavaScript code while providing robust features external to JavaScript.</p>\n\n<h3>JavaScript Compatibility with TypeScript</h3>\n\n<p>As we’ve established, TypeScript is a superset of JavaScript. This relationship permits TypeScript to understand and work with any code that is valid JavaScript. Any valid JavaScript code is valid TypeScript code with only a few exceptions: handling option function parameters and assigning a value to an object literal.</p>\n\n<p>Do take note that valid TypeScript is not valid JavaScript code. TypeScript contains syntax and abstractions that do not exist in JavaScript and using them with JavaScript would generate JavaScript runtime errors. However, in an effort to promote compatibility, TypeScript developers align the language with the pipeline of ECMAScript. Current and future ECMAScript proposals are considered when designing new TypeScript features.</p>\n\n<h3>Giving Type Check to JavaScript</h3>\n\n<p>JavaScript being a loosely typed language is extremely lenient on the value assigned to its variables and it creates no structural contracts of any kind between those variables and the constructs that use them. Passing a number argument to a function that expects a string parameter generates no errors in JavaScript during development but will create havoc during runtime when the body of the function is not able to use that argument correctly.</p>\n\n<p>To prevent these runtime issues, TypeScript was designed as a strongly typed language that performs static type-checking during its compilation time to JavaScript. For flexibility, the type-checking capabilities of TypeScript are optional; however, most of TypeScript key benefits revolve around type-checking - it’s the main reason to use TypeScript! For example, type-checking lets the language service layer of the language to be used for creating better tools that maximize your productivity while reducing the instance of errors.</p>\n\n<h3>More Powerful JavaScript Object Oriented Programming</h3>\n\n<p>The syntactic sugar provided by TypeScript will allow us to reduce the footprint of our code significantly while increasing its expressiveness. TypeScript makes writing class object-oriented code a breeze. It provides us with classes, interfaces and modules that allow us to properly structure our code in encapsulated reusable structures that makes it easy to maintain and scale. Within classes, we are also able to specify the visibility level of class properties and methods by using TypeScript provided modifiers - <code class=\"highlighter-rouge\">public</code>, <code class=\"highlighter-rouge\">private</code> and <code class=\"highlighter-rouge\">protected</code>. There are many other abstractions that will make us happy and productive developers!</p>\n\n<h3>Zero Overhead</h3>\n\n<p>As TypeScript developers, we work in two different contexts - design and execution. In the design context, we use TypeScript directly to write our application. Now, since TypeScript is not supported by any browser, in order to make our design code work, it has to become JavaScript code. In the execution context, all of our TypeScript code is compiled into JavaScript code and is then executed by its target platform - the browser for example. The browser has no clue that this code is compiled - it looks just like the plain JavaScript it knows how to execute. Therefore, TypeScript imposes no runtime overhead on any application.</p>\n\n<p>For the browser to receive valid execution code, the TypeScript compiler takes TypeScript features and implements them in whatever JavaScript compile target of our choice - we can go as early as ES3! As we know, there are some TypeScript features that simply do not exist in JavaScript and cannot be implemented, such as type-checking and interfaces. These unsupported features are simply removed from the compiled code - this is known as <em>type erasure</em>. Their removal has no impact on the functionality of your code because these unique features are there only to help TypeScript enhance your developer experience and they don’t overrun or override anything core to the JavaScript language.</p>\n\n<h2>TypeScript Architecture: Components</h2>\n\n<p>The architecture of TypeScript is neatly organized in different layers.</p>\n\n<h3>Language</h3>\n\n<h3>Core TypeScript Compiler</h3>\n\n<p>Sometimes called the TypeScript transpiler, the TypeScript compiler has the core task of managing the low-level mechanics of type-checking our code and converting it into valid JavaScript code. The compiler uses static code analysis to mitigate the occurrence of runtime errors. Typos in our code or passing the wrong type of argument to a function will make the compiler throw compile-time errors to warn us that something is wrong before we even execute the code. This is extremely valuable as, even with the most comprehensive suite of tests, logic errors and edge cases can crash our application at runtime. TypeScript ensures that type definitions that we create within our code are used consistently throughout it.</p>\n\n<p>The compiler itself is made up of different parts that work together fast to make our code predictable and to compile it:</p>\n\n<h4>Parser</h4>\n\n<p>A quiet complex yet critical component that takes input data, our TypeScript source files, and builds a data structure from it - in this case, an Abstract Syntax Tree. Parsing our code creates a structural representation of the sources that allows us to check that they are following the language grammar - that is, that the sources are built using the correct syntax.</p>\n\n<h4>Binder</h4>\n\n<p>When we have, for example, a function and a module with the same name, the <em>binder</em> links these named declarations using a Symbol, allowing the type system to make sense of them.</p>\n\n<h4>Type Resolver or Type Checker</h4>\n\n<p>This component resolves types for each construct, checks semantic operations and generates type diagnostics.</p>\n\n<h4>Emitter</h4>\n\n<p>Generates output from <code class=\"highlighter-rouge\">.ts</code> and <code class=\"highlighter-rouge\">d.ts</code> files. The output can be either a JavaScript file (<code class=\"highlighter-rouge\">.js</code>), a TypeScript definition file, (<code class=\"highlighter-rouge\">d.ts</code>), or a source map file (<code class=\"highlighter-rouge\">.js.map</code>).</p>\n\n<h4>Pre-processor</h4>\n\n<p>Resolves and manages references amongst files using import or <code class=\"highlighter-rouge\">/// \\&lt;reference path=…/&gt;</code>.</p>\n\n<blockquote>\n  <p>We will learn in an upcoming section how to setup and configure the TypeScript compiler.</p>\n</blockquote>\n\n<h3>TypeScript Standalone Compiler, tsc</h3>\n\n<p>We’ll shortly explore the installation and usage of the standalone TypeScript compiler. Referred to often as <code class=\"highlighter-rouge\">tsc</code>, it is a high-level compiler that takes a TypeScript file, <code class=\"highlighter-rouge\">.ts</code>, and outputs a JavaScript file, <code class=\"highlighter-rouge\">.js</code>.</p>\n\n<h3>Language Service</h3>\n\n<p>This component layer sits on top of the <em>core TypeScript compiler</em> and provides features that are needed for IDEs and text editors to do their job, such as statement completions, signature help, code formatting and outlining, syntax highlighting and many more. The language service also powers code refactoring such as renaming variables, debugging and incremental compilation.</p>\n\n<h3>Tool Integration</h3>\n\n<p>TypeScript offers type annotations that allow IDEs and text editors to perform comprehensive static analysis on our code. These annotations allow these tools to make smart suggestions by making our code far more predictable. In return, IDEs and text editors can offer better auto completion and refactoring of TypeScript code.</p>\n\n<h2>Setting Up and Using TypeScript</h2>\n\n<h3>How to Install TypeScript</h3>\n\n<p>The easiest way to get TypeScript up and running is by installing its standalone compiler (tsc) globally via a Node.js package manager such as npm or yarn.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>npm install <span class=\"nt\">-g</span> typescript\n</code></pre></div></div>\n\n<p>or</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>yarn global add typescript\n</code></pre></div></div>\n\n<p>Once this global installation of the TypeScript compiler is complete, we have access to the <code class=\"highlighter-rouge\">tsc</code> command from our terminal that allow us to compile <code class=\"highlighter-rouge\">.ts</code> files into <code class=\"highlighter-rouge\">.js</code> ones. We can verify the success of our compiler installation by running the following command to check its version:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tsc <span class=\"nt\">-v</span>\n</code></pre></div></div>\n\n<p>The TypeScript compiler comes with many options that we’ll be exploring as we move forward. For now, create a folder anywhere in your file system called <code class=\"highlighter-rouge\">ts-intro</code>. We are going to use that folder to store our TypeScript source files and take it for a spin!</p>\n\n<h3>Create a TypeScript File</h3>\n\n<p>Using a text editor, IDE or terminal - whatever option you prefer - create a file named <code class=\"highlighter-rouge\">barista.ts</code>. Within our file, we are going to create a <code class=\"highlighter-rouge\">barista</code> function that takes <code class=\"highlighter-rouge\">name</code> and outputs an order call using that <code class=\"highlighter-rouge\">name</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.ts</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>We’ve created a valid TypeScript file but how do we run it? Let’s do that next.</p>\n\n<h3>Compile TypeScript</h3>\n\n<p>With our folder <code class=\"highlighter-rouge\">ts-intro</code> as our current directory, let’s execute the following command in our terminal window:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tsc barista.ts\n</code></pre></div></div>\n\n<p>We get <code class=\"highlighter-rouge\">barista.js</code> being added to our folder <code class=\"highlighter-rouge\">ts-intro</code> - this is the output of the compilation. Open <code class=\"highlighter-rouge\">barista.js</code> and notice that it’s <em>almost</em> exactly the same as <code class=\"highlighter-rouge\">barista.ts</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.js</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">var</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">barista</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>One way to quickly spot what changed through compilation is by running a difference on the content of both files:</p>\n\n<p>OSX / Linux: <code class=\"highlighter-rouge\"><span class=\"gh\">diff barista.ts barista.js</span></code>\nWindows: <code class=\"highlighter-rouge\">FC barista.ts barista.js</code></p>\n\n<p>The file difference is nothing major. <code class=\"highlighter-rouge\">tsc</code> changed the scoped variable <code class=\"highlighter-rouge\">let</code> to <code class=\"highlighter-rouge\">var</code>. This happened because the default target JavaScript for compilation is ES3 - which doesn’t support <code class=\"highlighter-rouge\">let</code>. We’ll learn soon on how to modify the compiler configuration. We can now run <code class=\"highlighter-rouge\">barista.js</code> through node by executing the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>node barista.js\n</code></pre></div></div>\n\n<p>As it is, <code class=\"highlighter-rouge\">barista.ts</code> has no TypeScript on it, hence, there’s not much to compile. Let’s add more TypeScript features to it to see a more dramatic file change.</p>\n\n<p>Let’s drastically modify the code by creating a <code class=\"highlighter-rouge\">Barista</code> class that has a static method that calls the order and uses type annotations to enforce type checking of our variables:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.ts</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Barista</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">callOrder</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">Barista</span><span class=\"p\">.</span><span class=\"nx\">callOrder</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Because <code class=\"highlighter-rouge\">callOrder</code> is static, we do not need to create an instance of the class to be able to use the method. Much like <code class=\"highlighter-rouge\">Array.from</code>, we call the method from the class name itself. Compile the code running <code class=\"highlighter-rouge\">tsc barista.ts</code> again and note how this time we get a quite different <code class=\"highlighter-rouge\">barista.js</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// barista.js</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">Barista</span> <span class=\"o\">=</span> <span class=\"cm\">/** @class */</span> <span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">Barista</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n  <span class=\"nx\">Barista</span><span class=\"p\">.</span><span class=\"nx\">callOrder</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Peppermint Mocha Frappuccino for '</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n  <span class=\"k\">return</span> <span class=\"nx\">Barista</span><span class=\"p\">;</span>\n<span class=\"p\">})();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">customer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Todd'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">Barista</span><span class=\"p\">.</span><span class=\"nx\">callOrder</span><span class=\"p\">(</span><span class=\"nx\">customer</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>ES3 supports no <code class=\"highlighter-rouge\">class</code> construct, therefore, this TypeScript construct has to be implemented in plain JavaScript. Notice, however, how nice and readable the compiled code is! The compiler created a comment annotation, <code class=\"highlighter-rouge\">@class</code>, in the JavaScript file to denote <code class=\"highlighter-rouge\">Barista</code> as intended to be a class - increasing our code readability.</p>\n\n<h3>Configure TypeScript using tsconfig</h3>\n\n<p>Much like <code class=\"highlighter-rouge\">package.json</code> is added to give <code class=\"highlighter-rouge\">npm</code> instructions on what packages to install as project dependencies, we can use a <code class=\"highlighter-rouge\">tsconfig.json</code> file to provide instructions on how our TypeScript project should be configured. Adding <code class=\"highlighter-rouge\">tsconfig.json</code> to <code class=\"highlighter-rouge\">ts-intro</code> marks the folder as the root directory of our TypeScript project. In this file, we can specify compiler options to compile our <code class=\"highlighter-rouge\">.ts</code> files as well as root files for our project.</p>\n\n<p>Create a <code class=\"highlighter-rouge\">tsconfig.json</code> file within <code class=\"highlighter-rouge\">ts-intro</code> with the following configuration to tell the compiler to use ES6 as the JavaScript compilation target instead:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"es6\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>From now on, whenever we run the <code class=\"highlighter-rouge\">tsc</code> command, the compiler will check this file first for special instructions and then proceed with compilation based on those instructions. It’s important to know that to make use of <code class=\"highlighter-rouge\">tsconfig.json</code>, we do not specify any file inputs to <code class=\"highlighter-rouge\">tsc</code>. To compile <code class=\"highlighter-rouge\">barista.ts</code> once again under this new configuration simply run the command <code class=\"highlighter-rouge\">tsc</code> in your terminal.</p>\n\n<p>Since we are using ES6, which supports <code class=\"highlighter-rouge\">class</code>, as the JavaScript compilation target, <code class=\"highlighter-rouge\">barista.js</code> doesn’t look very different than <code class=\"highlighter-rouge\">barista.ts</code>! The only difference is that the compiler removed the code related to static type checking. The <code class=\"highlighter-rouge\">name</code> argument doesn’t have any annotations to indicate its type since this feature is not part of ES6.</p>\n\n<p>There’s a much easier way to initialise a TypeScript project and create its <code class=\"highlighter-rouge\">tsconfig.json</code> file. We can use a handy shortcut similar to what’s done to kickstart a Node.js project. Let’s go ahead and delete the <code class=\"highlighter-rouge\">tsconfig.json</code> file that we created and then run the following initialisation command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>tsc <span class=\"nt\">--init</span>\n</code></pre></div></div>\n\n<p>The output of running this command is a newly created <code class=\"highlighter-rouge\">tsconfig.json</code> file that is packed with a lot of default options to configure our TypeScript project compiler - most of them are not enabled by default. The configuration options are accompanied by comments that explain what each one configures in our compiler!</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Basic</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\">\n      </span><span class=\"s2\">\"es5\"</span><span class=\"w\"> </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">ECMAScript</span><span class=\"w\"> </span><span class=\"err\">target</span><span class=\"w\"> </span><span class=\"err\">version</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">3</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"err\">(default)</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">5</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">2015</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">2016</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">2017</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'ESNEXT'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\">\n      </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\"> </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">generation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'none'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">commonjs'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'amd'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'system'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'umd'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'es</span><span class=\"mi\">2015</span><span class=\"err\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'ESNext'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"lib\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                             </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">library</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">included</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">compilation</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"allowJs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Allow</span><span class=\"w\"> </span><span class=\"err\">javascript</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">compiled.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"checkJs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">.js</span><span class=\"w\"> </span><span class=\"err\">files.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"jsx\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"preserve\"</span><span class=\"p\">,</span><span class=\"w\">                     </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">JSX</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">generation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'preserve'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">'react-native'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'react'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"declaration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                   </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Generates</span><span class=\"w\"> </span><span class=\"err\">corresponding</span><span class=\"w\"> </span><span class=\"err\">'.d.ts'</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"sourceMap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                     </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Generates</span><span class=\"w\"> </span><span class=\"err\">corresponding</span><span class=\"w\"> </span><span class=\"err\">'.map'</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"outFile\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Concatenate</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">output</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">single</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Redirect</span><span class=\"w\"> </span><span class=\"err\">output</span><span class=\"w\"> </span><span class=\"err\">structure</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">directory.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"rootDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">root</span><span class=\"w\"> </span><span class=\"err\">directory</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">input</span><span class=\"w\"> </span><span class=\"err\">files.</span><span class=\"w\"> </span><span class=\"err\">Use</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">control</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">output</span><span class=\"w\"> </span><span class=\"err\">directory</span><span class=\"w\"> </span><span class=\"err\">structure</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">--outDir.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"removeComments\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Do</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">comments</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">output.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noEmit\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Do</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">outputs.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"importHelpers\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                 </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Import</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"err\">helpers</span><span class=\"w\"> </span><span class=\"err\">from</span><span class=\"w\"> </span><span class=\"err\">'tslib'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"downlevelIteration\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">            </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Provide</span><span class=\"w\"> </span><span class=\"err\">full</span><span class=\"w\"> </span><span class=\"err\">support</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">iterables</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">'for-of'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">spread</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">destructuring</span><span class=\"w\"> </span><span class=\"err\">when</span><span class=\"w\"> </span><span class=\"err\">targeting</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">5</span><span class=\"err\">'</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'ES</span><span class=\"mi\">3</span><span class=\"err\">'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"isolatedModules\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">               </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Transpile</span><span class=\"w\"> </span><span class=\"err\">each</span><span class=\"w\"> </span><span class=\"err\">file</span><span class=\"w\"> </span><span class=\"err\">as</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">separate</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">(similar</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">'ts.transpileModule').</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Strict</span><span class=\"w\"> </span><span class=\"err\">Type-Checking</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"s2\">\"strict\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enable</span><span class=\"w\"> </span><span class=\"err\">all</span><span class=\"w\"> </span><span class=\"err\">strict</span><span class=\"w\"> </span><span class=\"err\">type-checking</span><span class=\"w\"> </span><span class=\"err\">options.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noImplicitAny\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                 </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Raise</span><span class=\"w\"> </span><span class=\"err\">error</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">expressions</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">declarations</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">an</span><span class=\"w\"> </span><span class=\"err\">implied</span><span class=\"w\"> </span><span class=\"err\">'any'</span><span class=\"w\"> </span><span class=\"err\">type.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"strictNullChecks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enable</span><span class=\"w\"> </span><span class=\"err\">strict</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"w\"> </span><span class=\"err\">checks.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noImplicitThis\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Raise</span><span class=\"w\"> </span><span class=\"err\">error</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">'this'</span><span class=\"w\"> </span><span class=\"err\">expressions</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">an</span><span class=\"w\"> </span><span class=\"err\">implied</span><span class=\"w\"> </span><span class=\"err\">'any'</span><span class=\"w\"> </span><span class=\"err\">type.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"alwaysStrict\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                  </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Parse</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">strict</span><span class=\"w\"> </span><span class=\"err\">mode</span><span class=\"w\"> </span><span class=\"err\">and</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"w\"> </span><span class=\"s2\">\"use strict\"</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">each</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Additional</span><span class=\"w\"> </span><span class=\"err\">Checks</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noUnusedLocals\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">unused</span><span class=\"w\"> </span><span class=\"err\">locals.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noUnusedParameters\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">            </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">on</span><span class=\"w\"> </span><span class=\"err\">unused</span><span class=\"w\"> </span><span class=\"err\">parameters.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noImplicitReturns\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">             </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">error</span><span class=\"w\"> </span><span class=\"err\">when</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">all</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">paths</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">function</span><span class=\"w\"> </span><span class=\"err\">return</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">value.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"noFallthroughCasesInSwitch\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Report</span><span class=\"w\"> </span><span class=\"err\">errors</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">fallthrough</span><span class=\"w\"> </span><span class=\"err\">cases</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">switch</span><span class=\"w\"> </span><span class=\"err\">statement.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Module</span><span class=\"w\"> </span><span class=\"err\">Resolution</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"moduleResolution\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"node\"</span><span class=\"p\">,</span><span class=\"w\">            </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">resolution</span><span class=\"w\"> </span><span class=\"err\">strategy</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">'node'</span><span class=\"w\"> </span><span class=\"err\">(Node.js)</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'classic'</span><span class=\"w\"> </span><span class=\"err\">(TypeScript</span><span class=\"w\"> </span><span class=\"err\">pre</span><span class=\"mf\">-1.6</span><span class=\"err\">).</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"baseUrl\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Base</span><span class=\"w\"> </span><span class=\"err\">directory</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">resolve</span><span class=\"w\"> </span><span class=\"err\">non-absolute</span><span class=\"w\"> </span><span class=\"err\">module</span><span class=\"w\"> </span><span class=\"err\">names.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"paths\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\">                           </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">A</span><span class=\"w\"> </span><span class=\"err\">series</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">entries</span><span class=\"w\"> </span><span class=\"err\">which</span><span class=\"w\"> </span><span class=\"err\">re-map</span><span class=\"w\"> </span><span class=\"err\">imports</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">lookup</span><span class=\"w\"> </span><span class=\"err\">locations</span><span class=\"w\"> </span><span class=\"err\">relative</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">'baseUrl'.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"rootDirs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">List</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">root</span><span class=\"w\"> </span><span class=\"err\">folders</span><span class=\"w\"> </span><span class=\"err\">whose</span><span class=\"w\"> </span><span class=\"err\">combined</span><span class=\"w\"> </span><span class=\"err\">content</span><span class=\"w\"> </span><span class=\"err\">represents</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">structure</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">project</span><span class=\"w\"> </span><span class=\"err\">at</span><span class=\"w\"> </span><span class=\"err\">runtime.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"typeRoots\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">List</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">folders</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">include</span><span class=\"w\"> </span><span class=\"err\">type</span><span class=\"w\"> </span><span class=\"err\">definitions</span><span class=\"w\"> </span><span class=\"err\">from.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"types\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\">                           </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Type</span><span class=\"w\"> </span><span class=\"err\">declaration</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">included</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">compilation.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"allowSyntheticDefaultImports\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Allow</span><span class=\"w\"> </span><span class=\"err\">default</span><span class=\"w\"> </span><span class=\"err\">imports</span><span class=\"w\"> </span><span class=\"err\">from</span><span class=\"w\"> </span><span class=\"err\">modules</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">no</span><span class=\"w\"> </span><span class=\"err\">default</span><span class=\"w\"> </span><span class=\"err\">export.</span><span class=\"w\"> </span><span class=\"err\">This</span><span class=\"w\"> </span><span class=\"err\">does</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">affect</span><span class=\"w\"> </span><span class=\"err\">code</span><span class=\"w\"> </span><span class=\"err\">emit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">just</span><span class=\"w\"> </span><span class=\"err\">typechecking.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"preserveSymlinks\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Do</span><span class=\"w\"> </span><span class=\"err\">not</span><span class=\"w\"> </span><span class=\"err\">resolve</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">real</span><span class=\"w\"> </span><span class=\"err\">path</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">symlinks.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Source</span><span class=\"w\"> </span><span class=\"err\">Map</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"sourceRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">location</span><span class=\"w\"> </span><span class=\"err\">where</span><span class=\"w\"> </span><span class=\"err\">debugger</span><span class=\"w\"> </span><span class=\"err\">should</span><span class=\"w\"> </span><span class=\"err\">locate</span><span class=\"w\"> </span><span class=\"err\">TypeScript</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">instead</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">locations.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"./\"</span><span class=\"p\">,</span><span class=\"w\">                       </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Specify</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">location</span><span class=\"w\"> </span><span class=\"err\">where</span><span class=\"w\"> </span><span class=\"err\">debugger</span><span class=\"w\"> </span><span class=\"err\">should</span><span class=\"w\"> </span><span class=\"err\">locate</span><span class=\"w\"> </span><span class=\"err\">map</span><span class=\"w\"> </span><span class=\"err\">files</span><span class=\"w\"> </span><span class=\"err\">instead</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">generated</span><span class=\"w\"> </span><span class=\"err\">locations.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"inlineSourceMap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">               </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Emit</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">single</span><span class=\"w\"> </span><span class=\"err\">file</span><span class=\"w\"> </span><span class=\"err\">with</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">maps</span><span class=\"w\"> </span><span class=\"err\">instead</span><span class=\"w\"> </span><span class=\"err\">of</span><span class=\"w\"> </span><span class=\"err\">having</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">separate</span><span class=\"w\"> </span><span class=\"err\">file.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"inlineSources\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">                 </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Emit</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">source</span><span class=\"w\"> </span><span class=\"err\">alongside</span><span class=\"w\"> </span><span class=\"err\">the</span><span class=\"w\"> </span><span class=\"err\">sourcemaps</span><span class=\"w\"> </span><span class=\"err\">within</span><span class=\"w\"> </span><span class=\"err\">a</span><span class=\"w\"> </span><span class=\"err\">single</span><span class=\"w\"> </span><span class=\"err\">file;</span><span class=\"w\"> </span><span class=\"err\">requires</span><span class=\"w\"> </span><span class=\"err\">'--inlineSourceMap'</span><span class=\"w\"> </span><span class=\"err\">or</span><span class=\"w\"> </span><span class=\"err\">'--sourceMap'</span><span class=\"w\"> </span><span class=\"err\">to</span><span class=\"w\"> </span><span class=\"err\">be</span><span class=\"w\"> </span><span class=\"err\">set.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n\n    </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Experimental</span><span class=\"w\"> </span><span class=\"err\">Options</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"experimentalDecorators\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">        </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enables</span><span class=\"w\"> </span><span class=\"err\">experimental</span><span class=\"w\"> </span><span class=\"err\">support</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">ES</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"err\">decorators.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"s2\">\"emitDecoratorMetadata\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">         </span><span class=\"err\">/*</span><span class=\"w\"> </span><span class=\"err\">Enables</span><span class=\"w\"> </span><span class=\"err\">experimental</span><span class=\"w\"> </span><span class=\"err\">support</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">emitting</span><span class=\"w\"> </span><span class=\"err\">type</span><span class=\"w\"> </span><span class=\"err\">metadata</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">decorators.</span><span class=\"w\"> </span><span class=\"err\">*/</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The best part of this new <code class=\"highlighter-rouge\">tsconfig.json</code> is definitely how well documented the options are - they are pretty self-explanatory! You don’t have to use all of these options though. For most of my Angular applications that use TypeScript, I use the following configuration:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"es6\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"sourceMap\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"experimentalDecorators\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"s2\">\"files\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"./node_modules/@types/mocha/index.d.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./node_modules/@types/node/index.d.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"src/**/*.ts\"</span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"s2\">\"exclude\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"node_modules\"</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<blockquote>\n  <p>Note that <code class=\"highlighter-rouge\">es6</code> and <code class=\"highlighter-rouge\">ES2015</code> can be used interchangeably.</p>\n</blockquote>\n\n<p>I added three additional properties to <code class=\"highlighter-rouge\">tsconfig.json</code> (<code class=\"highlighter-rouge\">files</code>, <code class=\"highlighter-rouge\">include</code> and <code class=\"highlighter-rouge\">exclude</code>) that allow us to specify which files in the containing directory and subdirectories should be compiled:</p>\n\n<ul>\n<li>When <code class=\"highlighter-rouge\">files</code> or <code class=\"highlighter-rouge\">include</code> properties are specified, the compiler will only process a union of the files listed as the value of these properties.</li>\n  <li>\n<code class=\"highlighter-rouge\">files</code> takes a list of relative or absolute file paths, whereas <code class=\"highlighter-rouge\">include</code> and <code class=\"highlighter-rouge\">exclude</code> take a list of glob-like file patterns.</li>\n  <li>\n<code class=\"highlighter-rouge\">exclude</code> is used to filter the files listed under <code class=\"highlighter-rouge\">include</code>; however, any files that have been explicitly listed under <code class=\"highlighter-rouge\">files</code> are always included regardless of them matching any pattern defined under <code class=\"highlighter-rouge\">exclude</code>.</li>\n</ul>\n<p>I presented my <code class=\"highlighter-rouge\">tsconfig.json</code> as an example to showcase the file filtering capabilities of the compiler. Running <code class=\"highlighter-rouge\">tsc</code> with it in our <code class=\"highlighter-rouge\">ts-intro</code> folder will give us an error saying that the paths specified in <code class=\"highlighter-rouge\">files</code> are not found. Again, I use this for my Angular projects that makes use of <code class=\"highlighter-rouge\">node_modules</code> - if you wish, give it a try on your projects.</p>\n\n<p>We’ve covered a lot so far. We’ve learned how to create a TypeScript file, how to compile a TypeScript file, and how to configure the compiler to render different compilations of a TypeScript file. There’s much, much more that can be configured through <code class=\"highlighter-rouge\">tsconfig.json</code> but that’s a story for another post!</p>\n\n<h3>TypeScript Playground</h3>\n\n<p>Whenever you need to perform some quick experimentation with how TypeScript code would compile to JavaScript it’s not necessary to go through all this setup. The TypeScript Team created an online tool that allows us to compile TypeScript code and compare it side by side with its JavaScript output online. This tool is called TypeScript Playground and we can access it at <a href=\"https://www.typescriptlang.org/play/\">typescriptlang.org/play</a>.</p>\n\n<p>TypeScript Playground allows you to share the code snippets you create there with others. You can access the Playground for <code class=\"highlighter-rouge\">barista.ts</code> <a href=\"https://www.typescriptlang.org/play/#src=class%20Barista%20%7B%0D%0A%20%20static%20%20callOrder(name%3A%20string)%20%7B%0D%0A%20%20%20%20console.log('Peppermint%20Mocha%20Frappuccino%20for%20'%20%2B%20name)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0Alet%20customer%20%3D%20%7B%0D%0A%20%20name%3A%20'Todd'%0D%0A%7D%3B%0D%0A%0D%0ABarista.callOrder(customer.name)%3B%0D%0A\">here</a>.</p>\n\n<p>The Playground also has built-in examples that showcase TypeScript code snippets of different complexities and categories, such as using generics. Use it at your leisure to create deep mapping knowledge between TypeScript and JavaScript easily.</p>\n\n<h3>Conclusion</h3>\n\n<p>TypeScript brings a lot of benefits to our productivity and developer experience. We’ve seen that integrating it with an existing JavaScript project is easy and carries little to no overhead. TypeScript is not unique to Angular, other powerful frontend frameworks such as React and Vue are starting to be used with TypeScript to allow developer teams to create applications that are reliable, sustainable and scalable. JavaScript and TypeScript are continually evolving but not competing against each other. TypeScript was created to complement and enhance JavaScript - not replace it. The future may see them becoming very similar in features but with TypeScript remaining the statically typed alternative.</p>\n\n<p>With this TypeScript introduction, we’ve just scratched the surface of all the amazing things that we can do with TypeScript. I hope you enjoyed this post!</p>\n\n<p>If you’re interested in taking your TypeScript skills to an ultimate level, I invite you to come and learn TypeScript basic and advanced concepts with me at <a href=\"https://ultimateangular.com/courses#typescript\">Ultimate Angular</a> - don’t worry if you are not an Angular developer, the course is designed completely around TypeScript!</p>\n","enclosure":{},"categories":["typescript"],"color":"purple","category":"Todd Motto","date":"2018-01-08 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Classes vs Interfaces in TypeScript","pubDate":"2017-12-22 00:00:00","link":"https://toddmotto.com/classes-vs-interfaces-in-typescript","guid":"https://toddmotto.com/classes-vs-interfaces-in-typescript","author":"","thumbnail":"","description":"\n<p>Classes and interfaces are powerful structures that facilitate not just object-oriented programming but also type-checking in TypeScript. A class is a blueprint from which we can create objects that share the same configuration - properties and methods. An interface is a group of related properties and methods that describe an object, but neither provides implementation nor initialisation for them.</p>\n\n<p>Since both of these structures define what an object looks like, both can be used in TypeScript to type our variables. The decision to use a class or an interface truly depends on our use case: type-checking only, implementation details (typically via creating a new instance), or even both! We can use classes for type-checking <em>and</em> the underlying implementation - whereas we cannot with an interface. Understanding what we can get from each structure will easily let us make the best decision that will enhance our code and improve our developer experience.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#using-typescript-class\">Using TypeScript class</a>    <ul>\n<li><a href=\"https://toddmotto.com/#using-typescript-interface\">Using TypeScript interface</a></li>\n      <li><a href=\"https://toddmotto.com/#using-typescript-class-vs-using-typescript-interface\">Using TypeScript class vs using Typescript interface</a></li>\n    </ul>\n</li>\n  <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n\n<h2>Using TypeScript class</h2>\n\n<p>ES6 introduced <code class=\"highlighter-rouge\">class</code> officially to the JavaScript ecosystem. TypeScript boosts JavaScript classes with extra power such as type-checking and <code class=\"highlighter-rouge\">static</code> properties. This also means that whenever we transpile our code to whatever target JavaScript of our choice, the transpiler will keep all of our <code class=\"highlighter-rouge\">class</code> code present in the transpiled file. Hence, classes are present throughout all the phases of our code.</p>\n\n<p>We use classes as object factories. A class defines a blueprint of what an object should look like and act like and then implements that blueprint by initialising class properties and defining methods. Therefore, when we create an instance of the class, we get an object that has actionable functions and defined properties. Let’s look at an example of defining a class named <code class=\"highlighter-rouge\">PizzaMaker</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span> <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">PizzaMaker</code> is a simple class. It has a <code class=\"highlighter-rouge\">static</code> method called <code class=\"highlighter-rouge\">create</code>. What makes this method special is that we can use it without creating an instance of the class. We just invoke the method on the class directly - much like we would with something like <code class=\"highlighter-rouge\">Array.from</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"nx\">PizzaMaker</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Inferno'</span><span class=\"p\">,</span>\n  <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">],</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">pizza</span><span class=\"p\">);</span>\n<span class=\"c1\">// Output: { name: 'Inferno', toppings: [ 'cheese', 'peppers' ] }</span>\n</code></pre></div></div>\n\n<p>Then, <code class=\"highlighter-rouge\">PizzaMaker.create()</code> returns a new object - not a class - with a <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">toppings</code> properties defined from the object passed to it as argument.</p>\n\n<p>If <code class=\"highlighter-rouge\">PizzaMaker</code> did not define <code class=\"highlighter-rouge\">create</code> as a <code class=\"highlighter-rouge\">static</code> method, then to use the method we would need to create an instance of <code class=\"highlighter-rouge\">PizzaMaker</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span> <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pizzaMaker</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PizzaMaker</span><span class=\"p\">();</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"nx\">pizzaMaker</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Inferno'</span><span class=\"p\">,</span>\n  <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">],</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">pizza</span><span class=\"p\">);</span>\n<span class=\"c1\">// Output: { name: 'Inferno', toppings: [ 'cheese', 'peppers' ] }</span>\n</code></pre></div></div>\n\n<p>We get the same output we had with <code class=\"highlighter-rouge\">create</code> as a <code class=\"highlighter-rouge\">static</code> method. Being able to use TypeScript classes with and without an existing instance of a class makes them extremely versatile and flexible. Adding <code class=\"highlighter-rouge\">static</code> properties and methods to a class makes them act like a <em>singleton</em> while defining non-static properties and methods make them act like a <em>factory</em>.</p>\n\n<p>Now, unique to TypeScript is the ability to use classes for type-checking. Let’s declare a class that defines what a <code class=\"highlighter-rouge\">Pizza</code> looks like:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the <code class=\"highlighter-rouge\">Pizza</code> class definition, we are using a handy TypeScript shorthand to define class properties from the arguments of the constructor - it saves a lot of typing! <code class=\"highlighter-rouge\">Pizza</code> can create objects that have a <code class=\"highlighter-rouge\">name</code> and a <code class=\"highlighter-rouge\">toppings</code> property:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Pizza</span><span class=\"p\">(</span><span class=\"s1\">'Inferno'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">]);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">pizza</span><span class=\"p\">);</span>\n<span class=\"c1\">// Output: Pizza { name: 'Inferno', toppings: [ 'cheese', 'peppers' ] }</span>\n</code></pre></div></div>\n\n<p>Aside from the <code class=\"highlighter-rouge\">Pizza</code> name before the <code class=\"highlighter-rouge\">pizza</code> object that shows that the object is in fact an instance of the <code class=\"highlighter-rouge\">Pizza</code> class, the output of <code class=\"highlighter-rouge\">new Pizza(...)</code> and <code class=\"highlighter-rouge\">PizzaMaker.create(...)</code> is the same. Both approaches yield an object with the same structure. Therefore, we can use the <code class=\"highlighter-rouge\">Pizza</code> class to type-check the <code class=\"highlighter-rouge\">event</code> argument of <code class=\"highlighter-rouge\">PizzaMaker.create(...)</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’ve made <code class=\"highlighter-rouge\">PizzaMaker</code> much more declarative, and hence, much more readable. Not only that, but if we need to enforce the same object structure defined in <code class=\"highlighter-rouge\">Pizza</code> in other places, we now have a portable construct to do so! Append <code class=\"highlighter-rouge\">export</code> to the definition of <code class=\"highlighter-rouge\">Pizza</code> and you get access to it from anywhere in your application.</p>\n\n<p>Using <code class=\"highlighter-rouge\">Pizza</code> as a class is great if we want to define and create a <code class=\"highlighter-rouge\">Pizza</code>, but what if we only want to define the structure of a <code class=\"highlighter-rouge\">Pizza</code> but we’d never need to instantiate it? That’s when <code class=\"highlighter-rouge\">interface</code> comes handy!</p>\n\n<h3>Using TypeScript interface</h3>\n\n<p>Unlike classes, an <code class=\"highlighter-rouge\">interface</code> is a virtual structure that only exists within the context of TypeScript. The TypeScript compiler uses interfaces solely for type-checking purposes. Once your code is transpiled to its target language, it will be stripped from its interfaces - JavaScript isn’t typed, there’s no use for them there.</p>\n\n<p>And, while a class may define a <code class=\"highlighter-rouge\">factory</code> or a <code class=\"highlighter-rouge\">singleton</code> by providing initialisation to its properties and implementation to its methods, an <code class=\"highlighter-rouge\">interface</code> is simply a structural contract that defines what the properties of an object should have as a name and as a type. How you implement or initialise the properties declared within the <code class=\"highlighter-rouge\">interface</code> is not relevant to it. Let’s see an example by transforming our <code class=\"highlighter-rouge\">Pizza</code> class into a <code class=\"highlighter-rouge\">Pizza</code> interface:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kr\">interface</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Since <code class=\"highlighter-rouge\">Pizza</code> as a class or as interface is being used by the <code class=\"highlighter-rouge\">PizzaMaker</code> class purely for type-checking, refactoring <code class=\"highlighter-rouge\">Pizza</code> as an interface did not affect the body of the <code class=\"highlighter-rouge\">PizzaMaker</code> class at all. Observe how the <code class=\"highlighter-rouge\">Pizza</code> interface just lists the <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">toppings</code> properties and gives them a type. What also changed is that we cannot create an instance of <code class=\"highlighter-rouge\">Pizza</code> anymore. Let’s further explain this core difference between <code class=\"highlighter-rouge\">interface</code> and <code class=\"highlighter-rouge\">class</code> by considering <code class=\"highlighter-rouge\">Pizza</code> as a <code class=\"highlighter-rouge\">class</code> again.</p>\n\n<h3>Using TypeScript class vs using Typescript interface</h3>\n\n<p>As it is, our current code provides type-checking for <code class=\"highlighter-rouge\">Pizza</code> but can’t create a pizza:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kr\">interface</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is unfortunate because we are missing a golden opportunity to further improve the declarative nature and readability of our code. Notice how <code class=\"highlighter-rouge\">PizzaMaker.create()</code> returns an object that surely looks a lot like a <code class=\"highlighter-rouge\">Pizza</code> would! It has a <code class=\"highlighter-rouge\">name</code> that is a <code class=\"highlighter-rouge\">string</code> and it has <code class=\"highlighter-rouge\">toppings</code> that is a <code class=\"highlighter-rouge\">string</code> array - we infer the property types from the type of <code class=\"highlighter-rouge\">event</code> which is <code class=\"highlighter-rouge\">Pizza</code>. Wouldn’t it be awesome if we could return an instance of <code class=\"highlighter-rouge\">Pizza</code> from within <code class=\"highlighter-rouge\">PizzaMaker.create()</code>?</p>\n\n<p>As mentioned many times earlier, we can’t instantiate the <code class=\"highlighter-rouge\">Pizza</code> interface, doing so will trigger an error. However, we can refactor again <code class=\"highlighter-rouge\">Pizza</code> to be a class and then return an instance of <code class=\"highlighter-rouge\">Pizza</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[])</span> <span class=\"p\">{};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Pizza</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"nx\">PizzaMaker</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Inferno'</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">]</span> <span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>We enforce the structure that the <code class=\"highlighter-rouge\">event</code> argument of <code class=\"highlighter-rouge\">PizzaMaker.create()</code> takes whilst still being able to create the object that the type <code class=\"highlighter-rouge\">Pizza</code> as a class defines! We get the best of both worlds here - the blueprint and the contract. It’s up to you which one you need for your use cases.</p>\n\n<h2>Conclusion</h2>\n\n<p>We’ve learned a lot, without really diving into a huge amount of code. The tl:dr; is if you need/wish to create an instance of perhaps a custom object, whilst getting the benefits of type-checking things such as arguments, return types or generics - a class makes sense. If you’re not creating instances - we have interfaces at our disposal, and their benefit comes from not generating any source code, yet allowing us to somewhat “virtually” type-check our code.</p>\n\n<p>Since both an interface and a class define the structure of an object and can be used interchangeably in some cases, it’s worth noting that if we need to share structural definition amongst various classes, we can define that structure in an interface and then have each class implement that interface! Each class then will have to declare or implement each property of the interface. That’s the power of TypeScript, and it’s also super flexible. We have comprehensive object-oriented design paired with versatile type-checking.</p>\n","content":"\n<p>Classes and interfaces are powerful structures that facilitate not just object-oriented programming but also type-checking in TypeScript. A class is a blueprint from which we can create objects that share the same configuration - properties and methods. An interface is a group of related properties and methods that describe an object, but neither provides implementation nor initialisation for them.</p>\n\n<p>Since both of these structures define what an object looks like, both can be used in TypeScript to type our variables. The decision to use a class or an interface truly depends on our use case: type-checking only, implementation details (typically via creating a new instance), or even both! We can use classes for type-checking <em>and</em> the underlying implementation - whereas we cannot with an interface. Understanding what we can get from each structure will easily let us make the best decision that will enhance our code and improve our developer experience.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li>\n<a href=\"https://toddmotto.com/#using-typescript-class\">Using TypeScript class</a>    <ul>\n<li><a href=\"https://toddmotto.com/#using-typescript-interface\">Using TypeScript interface</a></li>\n      <li><a href=\"https://toddmotto.com/#using-typescript-class-vs-using-typescript-interface\">Using TypeScript class vs using Typescript interface</a></li>\n    </ul>\n</li>\n  <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n\n<h2>Using TypeScript class</h2>\n\n<p>ES6 introduced <code class=\"highlighter-rouge\">class</code> officially to the JavaScript ecosystem. TypeScript boosts JavaScript classes with extra power such as type-checking and <code class=\"highlighter-rouge\">static</code> properties. This also means that whenever we transpile our code to whatever target JavaScript of our choice, the transpiler will keep all of our <code class=\"highlighter-rouge\">class</code> code present in the transpiled file. Hence, classes are present throughout all the phases of our code.</p>\n\n<p>We use classes as object factories. A class defines a blueprint of what an object should look like and act like and then implements that blueprint by initialising class properties and defining methods. Therefore, when we create an instance of the class, we get an object that has actionable functions and defined properties. Let’s look at an example of defining a class named <code class=\"highlighter-rouge\">PizzaMaker</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span> <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">PizzaMaker</code> is a simple class. It has a <code class=\"highlighter-rouge\">static</code> method called <code class=\"highlighter-rouge\">create</code>. What makes this method special is that we can use it without creating an instance of the class. We just invoke the method on the class directly - much like we would with something like <code class=\"highlighter-rouge\">Array.from</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"nx\">PizzaMaker</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Inferno'</span><span class=\"p\">,</span>\n  <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">],</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">pizza</span><span class=\"p\">);</span>\n<span class=\"c1\">// Output: { name: 'Inferno', toppings: [ 'cheese', 'peppers' ] }</span>\n</code></pre></div></div>\n\n<p>Then, <code class=\"highlighter-rouge\">PizzaMaker.create()</code> returns a new object - not a class - with a <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">toppings</code> properties defined from the object passed to it as argument.</p>\n\n<p>If <code class=\"highlighter-rouge\">PizzaMaker</code> did not define <code class=\"highlighter-rouge\">create</code> as a <code class=\"highlighter-rouge\">static</code> method, then to use the method we would need to create an instance of <code class=\"highlighter-rouge\">PizzaMaker</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span> <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pizzaMaker</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">PizzaMaker</span><span class=\"p\">();</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"nx\">pizzaMaker</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Inferno'</span><span class=\"p\">,</span>\n  <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">],</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">pizza</span><span class=\"p\">);</span>\n<span class=\"c1\">// Output: { name: 'Inferno', toppings: [ 'cheese', 'peppers' ] }</span>\n</code></pre></div></div>\n\n<p>We get the same output we had with <code class=\"highlighter-rouge\">create</code> as a <code class=\"highlighter-rouge\">static</code> method. Being able to use TypeScript classes with and without an existing instance of a class makes them extremely versatile and flexible. Adding <code class=\"highlighter-rouge\">static</code> properties and methods to a class makes them act like a <em>singleton</em> while defining non-static properties and methods make them act like a <em>factory</em>.</p>\n\n<p>Now, unique to TypeScript is the ability to use classes for type-checking. Let’s declare a class that defines what a <code class=\"highlighter-rouge\">Pizza</code> looks like:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the <code class=\"highlighter-rouge\">Pizza</code> class definition, we are using a handy TypeScript shorthand to define class properties from the arguments of the constructor - it saves a lot of typing! <code class=\"highlighter-rouge\">Pizza</code> can create objects that have a <code class=\"highlighter-rouge\">name</code> and a <code class=\"highlighter-rouge\">toppings</code> property:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Pizza</span><span class=\"p\">(</span><span class=\"s1\">'Inferno'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">]);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">pizza</span><span class=\"p\">);</span>\n<span class=\"c1\">// Output: Pizza { name: 'Inferno', toppings: [ 'cheese', 'peppers' ] }</span>\n</code></pre></div></div>\n\n<p>Aside from the <code class=\"highlighter-rouge\">Pizza</code> name before the <code class=\"highlighter-rouge\">pizza</code> object that shows that the object is in fact an instance of the <code class=\"highlighter-rouge\">Pizza</code> class, the output of <code class=\"highlighter-rouge\">new Pizza(...)</code> and <code class=\"highlighter-rouge\">PizzaMaker.create(...)</code> is the same. Both approaches yield an object with the same structure. Therefore, we can use the <code class=\"highlighter-rouge\">Pizza</code> class to type-check the <code class=\"highlighter-rouge\">event</code> argument of <code class=\"highlighter-rouge\">PizzaMaker.create(...)</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[])</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We’ve made <code class=\"highlighter-rouge\">PizzaMaker</code> much more declarative, and hence, much more readable. Not only that, but if we need to enforce the same object structure defined in <code class=\"highlighter-rouge\">Pizza</code> in other places, we now have a portable construct to do so! Append <code class=\"highlighter-rouge\">export</code> to the definition of <code class=\"highlighter-rouge\">Pizza</code> and you get access to it from anywhere in your application.</p>\n\n<p>Using <code class=\"highlighter-rouge\">Pizza</code> as a class is great if we want to define and create a <code class=\"highlighter-rouge\">Pizza</code>, but what if we only want to define the structure of a <code class=\"highlighter-rouge\">Pizza</code> but we’d never need to instantiate it? That’s when <code class=\"highlighter-rouge\">interface</code> comes handy!</p>\n\n<h3>Using TypeScript interface</h3>\n\n<p>Unlike classes, an <code class=\"highlighter-rouge\">interface</code> is a virtual structure that only exists within the context of TypeScript. The TypeScript compiler uses interfaces solely for type-checking purposes. Once your code is transpiled to its target language, it will be stripped from its interfaces - JavaScript isn’t typed, there’s no use for them there.</p>\n\n<p>And, while a class may define a <code class=\"highlighter-rouge\">factory</code> or a <code class=\"highlighter-rouge\">singleton</code> by providing initialisation to its properties and implementation to its methods, an <code class=\"highlighter-rouge\">interface</code> is simply a structural contract that defines what the properties of an object should have as a name and as a type. How you implement or initialise the properties declared within the <code class=\"highlighter-rouge\">interface</code> is not relevant to it. Let’s see an example by transforming our <code class=\"highlighter-rouge\">Pizza</code> class into a <code class=\"highlighter-rouge\">Pizza</code> interface:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kr\">interface</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Since <code class=\"highlighter-rouge\">Pizza</code> as a class or as interface is being used by the <code class=\"highlighter-rouge\">PizzaMaker</code> class purely for type-checking, refactoring <code class=\"highlighter-rouge\">Pizza</code> as an interface did not affect the body of the <code class=\"highlighter-rouge\">PizzaMaker</code> class at all. Observe how the <code class=\"highlighter-rouge\">Pizza</code> interface just lists the <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">toppings</code> properties and gives them a type. What also changed is that we cannot create an instance of <code class=\"highlighter-rouge\">Pizza</code> anymore. Let’s further explain this core difference between <code class=\"highlighter-rouge\">interface</code> and <code class=\"highlighter-rouge\">class</code> by considering <code class=\"highlighter-rouge\">Pizza</code> as a <code class=\"highlighter-rouge\">class</code> again.</p>\n\n<h3>Using TypeScript class vs using Typescript interface</h3>\n\n<p>As it is, our current code provides type-checking for <code class=\"highlighter-rouge\">Pizza</code> but can’t create a pizza:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kr\">interface</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is unfortunate because we are missing a golden opportunity to further improve the declarative nature and readability of our code. Notice how <code class=\"highlighter-rouge\">PizzaMaker.create()</code> returns an object that surely looks a lot like a <code class=\"highlighter-rouge\">Pizza</code> would! It has a <code class=\"highlighter-rouge\">name</code> that is a <code class=\"highlighter-rouge\">string</code> and it has <code class=\"highlighter-rouge\">toppings</code> that is a <code class=\"highlighter-rouge\">string</code> array - we infer the property types from the type of <code class=\"highlighter-rouge\">event</code> which is <code class=\"highlighter-rouge\">Pizza</code>. Wouldn’t it be awesome if we could return an instance of <code class=\"highlighter-rouge\">Pizza</code> from within <code class=\"highlighter-rouge\">PizzaMaker.create()</code>?</p>\n\n<p>As mentioned many times earlier, we can’t instantiate the <code class=\"highlighter-rouge\">Pizza</code> interface, doing so will trigger an error. However, we can refactor again <code class=\"highlighter-rouge\">Pizza</code> to be a class and then return an instance of <code class=\"highlighter-rouge\">Pizza</code>:</p>\n\n<div class=\"language-typescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Pizza</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">public</span> <span class=\"nx\">name</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span> <span class=\"kr\">public</span> <span class=\"nx\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">[])</span> <span class=\"p\">{};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">PizzaMaker</span> <span class=\"p\">{</span>\n  <span class=\"kr\">static</span> <span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">:</span> <span class=\"nx\">Pizza</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Pizza</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">toppings</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pizza</span> <span class=\"o\">=</span> <span class=\"nx\">PizzaMaker</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Inferno'</span><span class=\"p\">,</span> <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'cheese'</span><span class=\"p\">,</span> <span class=\"s1\">'peppers'</span><span class=\"p\">]</span> <span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>We enforce the structure that the <code class=\"highlighter-rouge\">event</code> argument of <code class=\"highlighter-rouge\">PizzaMaker.create()</code> takes whilst still being able to create the object that the type <code class=\"highlighter-rouge\">Pizza</code> as a class defines! We get the best of both worlds here - the blueprint and the contract. It’s up to you which one you need for your use cases.</p>\n\n<h2>Conclusion</h2>\n\n<p>We’ve learned a lot, without really diving into a huge amount of code. The tl:dr; is if you need/wish to create an instance of perhaps a custom object, whilst getting the benefits of type-checking things such as arguments, return types or generics - a class makes sense. If you’re not creating instances - we have interfaces at our disposal, and their benefit comes from not generating any source code, yet allowing us to somewhat “virtually” type-check our code.</p>\n\n<p>Since both an interface and a class define the structure of an object and can be used interchangeably in some cases, it’s worth noting that if we need to share structural definition amongst various classes, we can define that structure in an interface and then have each class implement that interface! Each class then will have to declare or implement each property of the interface. That’s the power of TypeScript, and it’s also super flexible. We have comprehensive object-oriented design paired with versatile type-checking.</p>\n","enclosure":{},"categories":["typescript"],"color":"purple","category":"Todd Motto","date":"2017-12-22 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"NGRX Store: Understanding State Selectors","pubDate":"2017-12-20 00:00:00","link":"https://toddmotto.com/ngrx-store-understanding-state-selectors","guid":"https://toddmotto.com/ngrx-store-understanding-state-selectors","author":"","thumbnail":"","description":"\n<p>Selectors are pure functions that take slices of state as arguments and return some state data that we can pass to our components. To better understand what selectors are and what they do, it helps see ngrx state as a data structure - a tree that can be serialised to JSON. Data is added to the state tree by composing state in reducers - that’s the easy part. Now to get data out of the state tree, we have to traverse it to find our property of interest - and return it. That can become more complex, and is where selectors help us out.</p>\n\n<p>You may have already seen the <code class=\"highlighter-rouge\">store.select</code> method being used to get data from the store by passing it a string value:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s1\">'pizzas'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The string represents the name of a slice of state in the store and we can expect this function to return data corresponding to our <code class=\"highlighter-rouge\">pizzas</code> property - perhaps an array of pizzas. However, <code class=\"highlighter-rouge\">store.select</code> can also take a function instead, which takes a slice of state and returns a property from the state (which you’ve likely already seen as well):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Both of these approaches represent the concept of a selector - we are “selecting” state!</p>\n\n<p>So, when we think of <code class=\"highlighter-rouge\">ngrx/store</code> as a database and the selectors are like <code class=\"highlighter-rouge\">SELECT</code> in SQL queries - they gives us back information we want. As our state tree grows deeper, it would become more complex to get state out of the store.</p>\n\n<p>We may find ourselves writing complex data transformation logic in our components to get exactly what we need - however we don’t want to do that - and this is where selectors come into play. Just like with databases, we can perform data transformation from within the store by composing selectors to just return what we need. We’ll keep our components lean and decoupled from the Store.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#thinking-about-data-structures\">Thinking about data structures</a></li>\n  <li><a href=\"https://toddmotto.com/#feature-state-selectors\">Feature state selectors</a></li>\n  <li><a href=\"https://toddmotto.com/#state-slice-selectors\">State slice selectors</a></li>\n  <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n\n<h2>Thinking about data structures</h2>\n\n<p>Let’s first visualise this concept of state as a data structure outside of the NGRX context. We create a JavaScript class <code class=\"highlighter-rouge\">Store</code> that has a <code class=\"highlighter-rouge\">state</code> property and some initial values:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Store</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"na\">products</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 1'</span><span class=\"p\">,</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n            <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 2'</span><span class=\"p\">,</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n          <span class=\"p\">},</span>\n        <span class=\"p\">},</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Let’s pay close attention to the structure of <code class=\"highlighter-rouge\">state</code>. The <code class=\"highlighter-rouge\">state</code> object is just a regular JavaScript object that has properties defined and embedded within. One object property wraps another object property and so on, creating a hierarchy or “tree” with <code class=\"highlighter-rouge\">state</code> acting as the root. Traversing the complete <code class=\"highlighter-rouge\">state</code> tree looks like this, if we wanted to fetch our <code class=\"highlighter-rouge\">entities</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>state\n  -&gt; products\n    -&gt; pizzas\n      -&gt; entities\n</code></pre></div></div>\n\n<p>In order to get to a particular property, we have to traverse the tree. For example, we build our way to <code class=\"highlighter-rouge\">entities</code> like building a chain and each level down is a link that connects us from <code class=\"highlighter-rouge\">state</code> to <code class=\"highlighter-rouge\">entities</code>. If we miss any link in the chain, it breaks and we cannot create the connection. Each link in this chain represents a reference to that state property. Hence, we need a reference to <code class=\"highlighter-rouge\">products</code>, then a reference to <code class=\"highlighter-rouge\">pizzas</code>, and finally a reference to <code class=\"highlighter-rouge\">entities</code>. Once there, we can access the data held by <code class=\"highlighter-rouge\">entities</code>.</p>\n\n<p>What do we mean by “reference to a property”? To illustrate this concept, we are going to create an instance of the <code class=\"highlighter-rouge\">Store</code> class and showcase different ways in which we can access the properties of the <code class=\"highlighter-rouge\">state</code> object:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>Now, <code class=\"highlighter-rouge\">store</code> is yet another JavaScript object containing a <code class=\"highlighter-rouge\">state</code> property in it. So one of the ways that we can access the levels of the property chain is through the familiar <em>dot notation</em>. Let’s grab our <code class=\"highlighter-rouge\">entities</code> using this approach for now:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>This method is surely easy, but we’ll find ourselves typing this chain over and over whenever we need to get to a desired property. This isn’t the most efficient approach for reusable logic, and it’s also error prone with deep property references - if something was undefined it blows up.</p>\n\n<p>So, what if we could create shortcuts to every link in the chain? We could create functions that return <code class=\"highlighter-rouge\">products</code>, <code class=\"highlighter-rouge\">pizzas</code> and <code class=\"highlighter-rouge\">entities</code> independently:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">getProducts</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getEntities</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Notice how convenient these functions are. Taking <code class=\"highlighter-rouge\">getEntities</code> as example, the purpose of the function is to pass it some <code class=\"highlighter-rouge\">state</code> and from that <code class=\"highlighter-rouge\">state</code> extract and return the <code class=\"highlighter-rouge\">entities</code> property. It looks as if we are having direct access to the <code class=\"highlighter-rouge\">entities</code> property or direct access to that level. We could refer to this function as a “state shortcut”, but I’d like to call it a state <em>selector</em> function instead.</p>\n\n<p>What’s missing here is how to pass <code class=\"highlighter-rouge\">state</code> to the <code class=\"highlighter-rouge\">getEntities</code> selector without using <code class=\"highlighter-rouge\">store.state</code> directly - otherwise, we’ll be dependent again on <em>dot notation</em>. The solution? We’ll add a <code class=\"highlighter-rouge\">select</code> method to our <code class=\"highlighter-rouge\">Store</code> class that passes the state object to our upcoming selector function:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Store</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Our <code class=\"highlighter-rouge\">select</code> method takes a callback function and invokes it whilst passing <code class=\"highlighter-rouge\">state</code> as the argument. Using this method to get <code class=\"highlighter-rouge\">entities</code>, we could pass <code class=\"highlighter-rouge\">state</code> throughout selectors in a logical way with each passing getting us down a level of the state tree till we hit <code class=\"highlighter-rouge\">entities</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">getProducts</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getEntities</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">entities$</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">products</span> <span class=\"o\">=</span> <span class=\"nx\">getProducts</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">pizzas</span> <span class=\"o\">=</span> <span class=\"nx\">getPizzas</span><span class=\"p\">(</span><span class=\"nx\">products</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">getEntities</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">entities</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>As we have shown before, first we get <code class=\"highlighter-rouge\">products</code>. Once we have <code class=\"highlighter-rouge\">products</code> we can get <code class=\"highlighter-rouge\">pizzas</code> and from it we get <code class=\"highlighter-rouge\">entities</code>. This method is nice and easy and certainly works, but we can take this one step further and make it declarative and functional by using function composition to create a single callback that gets passed to <code class=\"highlighter-rouge\">select</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">getProducts</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getEntities</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">entities$</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span>\n  <span class=\"nx\">getEntities</span><span class=\"p\">(</span><span class=\"nx\">getPizzas</span><span class=\"p\">(</span><span class=\"nx\">getProducts</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">)))</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Function composition is when you get a single result back by embedding functions in each other: the return value of the inner function becomes the argument of the outermost function and so on. Here, we are composing our selectors to give us back the value of <code class=\"highlighter-rouge\">entities</code>.</p>\n\n<p>We’ve seen that a selector function is a pure function that grants us direct access to the value of a state tree traversal. We use selectors to avoid manually traversing the state tree over and over, and in return, we get powerful declarative functional programming for our state management. Now that the concept of selectors is clear, let’s take a look at why understanding it is important to grasp selectors in NGRX. Let’s move on and see what this same data structure would look like with NGRX.</p>\n\n<h2>Feature state selectors</h2>\n\n<p>Our Store in NGRX is initialised with a root state - the top level in our state tree. As we keep our application nice and modular, we are going to create additional entries in the state tree. We keep our Angular apps modular by using feature modules, and NGRX has support for this too! Once our lazily-loaded Angular module is instantiated - it adds itself to our root Angular app - and the same applies with NGRX Store (and Effects too!). This means once we lazy load an Angular module which also manages state, it’s automatically bound to our root state as well.</p>\n\n<p>Adding this behaviour is nice and easy - we just register any feature state into feature modules by importing the <code class=\"highlighter-rouge\">StoreModule</code> and invoking it with <code class=\"highlighter-rouge\">.forFeature()</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forFeature</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">,</span> <span class=\"nx\">reducers</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The first argument of <code class=\"highlighter-rouge\">.forFeature</code> contains a string that represents the name of the feature state, and the second argument supplies our reducers which manage that feature state. The feature name plays a crucial role in creating a state selector for the feature state using a handy function provided by <code class=\"highlighter-rouge\">ngrx/store</code> called <code class=\"highlighter-rouge\">createFeatureSelector</code>.</p>\n\n<p><code class=\"highlighter-rouge\">createFeatureSelector</code> allows us to get a top-level feature state property of the state tree simply by calling it out by its feature name:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>So what’s happening here with <code class=\"highlighter-rouge\">createFeatureSelector</code>? Firstly, we pass it a string that represents the name used to register the feature state in the feature module. It uses this string to look up the feature state from within the root state object, such as <code class=\"highlighter-rouge\">state['products']</code>.</p>\n\n<p>It then returns a typed selector function that will return a reference to that specific slice of state.</p>\n\n<p>So, <code class=\"highlighter-rouge\">createFeatureSelector</code> returns a selector function that looks up and returns the specified feature state. The generic type passed to it is the type of feature state that we get from the selector function. In this case, the selector will return a feature state of type <code class=\"highlighter-rouge\">ProductState</code>. Our <code class=\"highlighter-rouge\">ProductState</code> will then be managed by various reducers, we’ll take a look at it momentarily.</p>\n\n<p>Now that we have easy access to the <code class=\"highlighter-rouge\">products</code> state slice through <code class=\"highlighter-rouge\">getProductsState</code>, we can use it in our component as follows:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span>\n  <span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getProductsState</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>To get the state we need, we have to rely on mapping via <code class=\"highlighter-rouge\">.map()</code> to extract it from the top-level feature state. We are <em>dot walking</em> <code class=\"highlighter-rouge\">ProductState</code> with each <code class=\"highlighter-rouge\">map</code> call. This works nicely, but again it’s repetitive, not reusable and more difficult to test as a unit. This is where <code class=\"highlighter-rouge\">createSelector</code> comes into play, and we’ll work out how we can combine it with our new <code class=\"highlighter-rouge\">createFeatureSelector</code>.</p>\n\n<h2>State slice selectors</h2>\n\n<p>Due to being pure functions that return a slice of state, selector functions can be composed together to be consumed by components, they may be composed from various pieces of our overall state - and this is where state management becomes more important as we need to get things correct from the get-go.</p>\n\n<p>To kickstart composition, we need to define a starting point - our top-level feature. We are able to easily get a reference to a top-level state property by using <code class=\"highlighter-rouge\">createFeatureSelector</code>. Once we have that reference, we can then compose it with other selectors that point to state further down in our feature state - effectively traversing the state tree till we get to a desired property. We did something similar in one of the examples of a previous section using pure functions. Let’s see how we can do the same within our store.</p>\n\n<p>We start at the point where state is defined and managed: the reducer. We’re going to use the app from my comprehensive <a href=\"https://ultimateangular.com/ngrx-store-effects\">NGRX course</a>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ActionReducerMap</span><span class=\"p\">,</span> <span class=\"nx\">createFeatureSelector</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@ngrx/store'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromPizzas</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.reducer'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromToppings</span> <span class=\"k\">from</span> <span class=\"s1\">'./toppings.reducer'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">ProductsState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzaState</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">fromToppings</span><span class=\"p\">.</span><span class=\"nx\">ToppingsState</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n  <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">fromToppings</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">ProductsState</code> represents the feature state of this feature module. It is composed of two other states that reside one level below in the state tree: <code class=\"highlighter-rouge\">PizzaState</code> and <code class=\"highlighter-rouge\">ToppingsState</code>. Our <code class=\"highlighter-rouge\">ProductsState</code> is managed by our <code class=\"highlighter-rouge\">reducers</code> (an <code class=\"highlighter-rouge\">ActionReducerMap</code> that contains two reducers - <code class=\"highlighter-rouge\">pizzas</code> and <code class=\"highlighter-rouge\">toppings</code>) and each one manages the individual lower-level states, respectively. Let’s visualise what the state tree would look like now purely as a JavaScript object:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// RootState</span>\n<span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ProductState</span>\n  <span class=\"na\">products</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// PizzaState</span>\n    <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// ToppingsState</span>\n    <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>To get to our pizza entities, we’d need to follow this path like we saw in the beginning:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>state -&gt; products -&gt; pizzas -&gt; entities\n</code></pre></div></div>\n\n<p>Now we can introduce <code class=\"highlighter-rouge\">createSelector</code> to obtain references to properties further down our state tree - which allows us to ask for <code class=\"highlighter-rouge\">pizzas</code> whenever we need in a simple way.</p>\n\n<p>We’ve already defined <code class=\"highlighter-rouge\">getProductsState</code> as a feature selector that gives us back the state slice that corresponds to <code class=\"highlighter-rouge\">ProductsState</code>. All that’s left is to compose it with other selectors to start building a chain down our state tree. This feels like we’re setting up a lot of boilerplate at times, and we are in places, but once it’s setup - we’re ready to use it thousands of times with little adjustments - selectors are fantastic to use and scale nicely with huge datasets and multiple states.</p>\n\n<p>So, let’s dive that one level deeper and use <code class=\"highlighter-rouge\">createSelector</code> to jump down another level:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">ProductsState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzaState</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">fromToppings</span><span class=\"p\">.</span><span class=\"nx\">ToppingsState</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzaState</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getProductsState</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">ProductsState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Note how we pass <code class=\"highlighter-rouge\">getProductsState</code> as the first argument - so we can <em>begin</em> our state lookup from this point. And just like that, we have access to a property located further down in our state tree.</p>\n\n<p>The <code class=\"highlighter-rouge\">createSelector</code> function takes up to eight selector functions as arguments, each one referencing different slices of state. The last argumet to <code class=\"highlighter-rouge\">createSelector</code> can be treated as our “projector function”. Let’s take a look at one of the TypeScript definitions for <code class=\"highlighter-rouge\">createSelector</code> to further grasp this before continuing:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">createSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S1</span><span class=\"p\">,</span> <span class=\"nx\">S2</span><span class=\"p\">,</span> <span class=\"nx\">S3</span><span class=\"p\">,</span> <span class=\"nx\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n  <span class=\"nx\">s1</span><span class=\"p\">:</span> <span class=\"nx\">Selector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nx\">s2</span><span class=\"p\">:</span> <span class=\"nx\">Selector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nx\">s3</span><span class=\"p\">:</span> <span class=\"nx\">Selector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nx\">projector</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">s1</span><span class=\"p\">:</span> <span class=\"nx\">S1</span><span class=\"p\">,</span> <span class=\"nx\">s2</span><span class=\"p\">:</span> <span class=\"nx\">S2</span><span class=\"p\">,</span> <span class=\"nx\">s3</span><span class=\"p\">:</span> <span class=\"nx\">S3</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Result</span>\n<span class=\"p\">):</span> <span class=\"nx\">MemoizedSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>We don’t need to panic ourselves with all the typings here - but let’s look at <code class=\"highlighter-rouge\">s1</code>, <code class=\"highlighter-rouge\">s2</code> and <code class=\"highlighter-rouge\">s3</code>. Notice how in the <code class=\"highlighter-rouge\">projector</code> we are given <code class=\"highlighter-rouge\">s1</code>, <code class=\"highlighter-rouge\">s2</code> and <code class=\"highlighter-rouge\">s3</code> as the function arguments - in the order in which we supplied them. This is far better than my first example in the introduction where we had to nest function calls. It’s readable and concise.</p>\n\n<p>In short: the projector function is passed, as arguments, the returned values of the selectors listed before it in the order in which they were listed.</p>\n\n<p>The role of the projector function is a powerful one. We can ask for various state properties, anywhere within our state tree, we can derive, transform or combine data from the state slices passed to it and return this modified data as a single object - typically for component consumption. Again, it’s clean and concise - and this state logic is nowhere inside our components. Our components <em>consume</em> the state, that’s it.</p>\n\n<p>Prior to creating <code class=\"highlighter-rouge\">getPizzaState</code>, in order to get the pizza entities in our component we needed to do this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span>\n  <span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getProductsState</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>However with our new found <code class=\"highlighter-rouge\">getPizzaState</code> friend, we can now knock out one of the <code class=\"highlighter-rouge\">map</code> calls:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getPizzas</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>You can likely guess how we can now complete our journey and reference those <code class=\"highlighter-rouge\">entities</code> - but the way we gain access is a little different and typically begins in our reducer, let’s take a look:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/pizzas.reducer.ts</span>\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">};</span>\n  <span class=\"nl\">loaded</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n  <span class=\"nl\">loading</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">initialState</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">reducer</span><span class=\"p\">(</span>\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initialState</span><span class=\"p\">,</span>\n  <span class=\"nx\">action</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzasAction</span>\n<span class=\"p\">):</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ... switches and stuff</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasEntities</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasLoading</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loading</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasLoaded</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>What’s important to notice in the <code class=\"highlighter-rouge\">PizzaState</code> reducer is the functions that are exported at the bottom. These are state property selectors - pure functions. This is a great place to export all other properties of this state level so that we can easily compose them in the next level up - which already has access to them through an <code class=\"highlighter-rouge\">import</code> statement.</p>\n\n<p>Back in our top-level reducer file, <code class=\"highlighter-rouge\">index.ts</code>, we are going to compose a selector that can finally return our beloved pizza <code class=\"highlighter-rouge\">entities</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromPizzas</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.reducer'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzaState</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getProductsState</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">ProductsState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasEntities</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getPizzaState</span><span class=\"p\">,</span>\n  <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">getPizzasEntities</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>We use <code class=\"highlighter-rouge\">fromPizzas.getPizzasEntities</code> as the <em>projector function</em> of <code class=\"highlighter-rouge\">createSelector</code> that will return a reference to the pizza property <code class=\"highlighter-rouge\">entities</code>.</p>\n\n<p>Can we drop that last <code class=\"highlighter-rouge\">.map()</code> that was left in our component code?…</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getPizzas</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Why certainly. We can now supply our entities:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getPizzasEntities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>This will now return us something like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>\n  <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 1'</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n  <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 2'</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is great, and exactly what we needed. However with Angular, or any other framework/solution really, we should expect this data structure back as an array. In the case of Angular, we can then ship it nicely into <code class=\"highlighter-rouge\">ngFor</code>.</p>\n\n<p>Entities represent a way of normalising data structures by using unique IDs as references to them. It makes data look up very easy, fast, composable - but that’s a story for another post.</p>\n\n<p>So what if we want to convert our entities-based selector into an array format, for consumption via <code class=\"highlighter-rouge\">ngFor</code>? We can create another selector, and use the projector function to map our data structure across to an array, quite easily:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n\n<span class=\"c1\">// ...</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasEntities</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getPizzaState</span><span class=\"p\">,</span>\n  <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">getPizzasEntities</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getAllPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span><span class=\"nx\">getPizzasEntities</span><span class=\"p\">,</span> <span class=\"nx\">entities</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">id</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">entities</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This has several key benefits. In state management, we might want to lookup items via their ID (normalised into entities), and we can do so by referencing <code class=\"highlighter-rouge\">getPizzasEntities</code> where for example we could pass a route param id into our selector, and return that single entity. No loops, no maps, just an object lookup. It might be that for some components, we actually want entities, and for some - like a list view - we’re more interested in the <em>same</em> data, but as an array!</p>\n\n<p>Selectors are also memoised, which means they’re fast and only recalculate when required to do so.</p>\n\n<p>With our mission complete, we can now pass that one selector into our <code class=\"highlighter-rouge\">store.select</code> and we’re done:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// an array of pizzas, what else could you ever ask for?</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getAllPizzas</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Voilà!</p>\n\n<h2>Conclusion</h2>\n\n<p>Selectors are a somewhat complex beast to start grasping and using, I’d encourage you to take a look around my <a href=\"https://github.com/UltimateAngular/ngrx-store-effects-app/tree/27-testing-effects/src/products/store/selectors\">example NGRX application</a> to see how things fit together in a bigger picture.</p>\n\n<p>Selectors are how we compose state, via functions that reference various pieces of our data structure. We can then merge them, combine them, pluck properties from them and combine them with others (this is especially easy with entities and ids that allow us to grab properties from our state and bring them into a new selector to compose new state). Possibilities are endless and somewhat easy to manage. Once we’ve composed our data structure via a selector, we can ship it off to our component(s) for consumption.</p>\n","content":"\n<p>Selectors are pure functions that take slices of state as arguments and return some state data that we can pass to our components. To better understand what selectors are and what they do, it helps see ngrx state as a data structure - a tree that can be serialised to JSON. Data is added to the state tree by composing state in reducers - that’s the easy part. Now to get data out of the state tree, we have to traverse it to find our property of interest - and return it. That can become more complex, and is where selectors help us out.</p>\n\n<p>You may have already seen the <code class=\"highlighter-rouge\">store.select</code> method being used to get data from the store by passing it a string value:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"s1\">'pizzas'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The string represents the name of a slice of state in the store and we can expect this function to return data corresponding to our <code class=\"highlighter-rouge\">pizzas</code> property - perhaps an array of pizzas. However, <code class=\"highlighter-rouge\">store.select</code> can also take a function instead, which takes a slice of state and returns a property from the state (which you’ve likely already seen as well):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Both of these approaches represent the concept of a selector - we are “selecting” state!</p>\n\n<p>So, when we think of <code class=\"highlighter-rouge\">ngrx/store</code> as a database and the selectors are like <code class=\"highlighter-rouge\">SELECT</code> in SQL queries - they gives us back information we want. As our state tree grows deeper, it would become more complex to get state out of the store.</p>\n\n<p>We may find ourselves writing complex data transformation logic in our components to get exactly what we need - however we don’t want to do that - and this is where selectors come into play. Just like with databases, we can perform data transformation from within the store by composing selectors to just return what we need. We’ll keep our components lean and decoupled from the Store.</p>\n\n<div class=\"toc\">\n  <p class=\"toc-title\">Table of contents</p>\n<ul>\n<li><a href=\"https://toddmotto.com/#thinking-about-data-structures\">Thinking about data structures</a></li>\n  <li><a href=\"https://toddmotto.com/#feature-state-selectors\">Feature state selectors</a></li>\n  <li><a href=\"https://toddmotto.com/#state-slice-selectors\">State slice selectors</a></li>\n  <li><a href=\"https://toddmotto.com/#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n\n<h2>Thinking about data structures</h2>\n\n<p>Let’s first visualise this concept of state as a data structure outside of the NGRX context. We create a JavaScript class <code class=\"highlighter-rouge\">Store</code> that has a <code class=\"highlighter-rouge\">state</code> property and some initial values:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Store</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"na\">products</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 1'</span><span class=\"p\">,</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n            <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 2'</span><span class=\"p\">,</span> <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n          <span class=\"p\">},</span>\n        <span class=\"p\">},</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Let’s pay close attention to the structure of <code class=\"highlighter-rouge\">state</code>. The <code class=\"highlighter-rouge\">state</code> object is just a regular JavaScript object that has properties defined and embedded within. One object property wraps another object property and so on, creating a hierarchy or “tree” with <code class=\"highlighter-rouge\">state</code> acting as the root. Traversing the complete <code class=\"highlighter-rouge\">state</code> tree looks like this, if we wanted to fetch our <code class=\"highlighter-rouge\">entities</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>state\n  -&gt; products\n    -&gt; pizzas\n      -&gt; entities\n</code></pre></div></div>\n\n<p>In order to get to a particular property, we have to traverse the tree. For example, we build our way to <code class=\"highlighter-rouge\">entities</code> like building a chain and each level down is a link that connects us from <code class=\"highlighter-rouge\">state</code> to <code class=\"highlighter-rouge\">entities</code>. If we miss any link in the chain, it breaks and we cannot create the connection. Each link in this chain represents a reference to that state property. Hence, we need a reference to <code class=\"highlighter-rouge\">products</code>, then a reference to <code class=\"highlighter-rouge\">pizzas</code>, and finally a reference to <code class=\"highlighter-rouge\">entities</code>. Once there, we can access the data held by <code class=\"highlighter-rouge\">entities</code>.</p>\n\n<p>What do we mean by “reference to a property”? To illustrate this concept, we are going to create an instance of the <code class=\"highlighter-rouge\">Store</code> class and showcase different ways in which we can access the properties of the <code class=\"highlighter-rouge\">state</code> object:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">();</span>\n</code></pre></div></div>\n\n<p>Now, <code class=\"highlighter-rouge\">store</code> is yet another JavaScript object containing a <code class=\"highlighter-rouge\">state</code> property in it. So one of the ways that we can access the levels of the property chain is through the familiar <em>dot notation</em>. Let’s grab our <code class=\"highlighter-rouge\">entities</code> using this approach for now:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>This method is surely easy, but we’ll find ourselves typing this chain over and over whenever we need to get to a desired property. This isn’t the most efficient approach for reusable logic, and it’s also error prone with deep property references - if something was undefined it blows up.</p>\n\n<p>So, what if we could create shortcuts to every link in the chain? We could create functions that return <code class=\"highlighter-rouge\">products</code>, <code class=\"highlighter-rouge\">pizzas</code> and <code class=\"highlighter-rouge\">entities</code> independently:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">getProducts</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getEntities</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Notice how convenient these functions are. Taking <code class=\"highlighter-rouge\">getEntities</code> as example, the purpose of the function is to pass it some <code class=\"highlighter-rouge\">state</code> and from that <code class=\"highlighter-rouge\">state</code> extract and return the <code class=\"highlighter-rouge\">entities</code> property. It looks as if we are having direct access to the <code class=\"highlighter-rouge\">entities</code> property or direct access to that level. We could refer to this function as a “state shortcut”, but I’d like to call it a state <em>selector</em> function instead.</p>\n\n<p>What’s missing here is how to pass <code class=\"highlighter-rouge\">state</code> to the <code class=\"highlighter-rouge\">getEntities</code> selector without using <code class=\"highlighter-rouge\">store.state</code> directly - otherwise, we’ll be dependent again on <em>dot notation</em>. The solution? We’ll add a <code class=\"highlighter-rouge\">select</code> method to our <code class=\"highlighter-rouge\">Store</code> class that passes the state object to our upcoming selector function:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nx\">Store</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Our <code class=\"highlighter-rouge\">select</code> method takes a callback function and invokes it whilst passing <code class=\"highlighter-rouge\">state</code> as the argument. Using this method to get <code class=\"highlighter-rouge\">entities</code>, we could pass <code class=\"highlighter-rouge\">state</code> throughout selectors in a logical way with each passing getting us down a level of the state tree till we hit <code class=\"highlighter-rouge\">entities</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">getProducts</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getEntities</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">entities$</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">products</span> <span class=\"o\">=</span> <span class=\"nx\">getProducts</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">pizzas</span> <span class=\"o\">=</span> <span class=\"nx\">getPizzas</span><span class=\"p\">(</span><span class=\"nx\">products</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">entities</span> <span class=\"o\">=</span> <span class=\"nx\">getEntities</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">entities</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>As we have shown before, first we get <code class=\"highlighter-rouge\">products</code>. Once we have <code class=\"highlighter-rouge\">products</code> we can get <code class=\"highlighter-rouge\">pizzas</code> and from it we get <code class=\"highlighter-rouge\">entities</code>. This method is nice and easy and certainly works, but we can take this one step further and make it declarative and functional by using function composition to create a single callback that gets passed to <code class=\"highlighter-rouge\">select</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">getProducts</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">products</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getEntities</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">entities$</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span>\n  <span class=\"nx\">getEntities</span><span class=\"p\">(</span><span class=\"nx\">getPizzas</span><span class=\"p\">(</span><span class=\"nx\">getProducts</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">)))</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Function composition is when you get a single result back by embedding functions in each other: the return value of the inner function becomes the argument of the outermost function and so on. Here, we are composing our selectors to give us back the value of <code class=\"highlighter-rouge\">entities</code>.</p>\n\n<p>We’ve seen that a selector function is a pure function that grants us direct access to the value of a state tree traversal. We use selectors to avoid manually traversing the state tree over and over, and in return, we get powerful declarative functional programming for our state management. Now that the concept of selectors is clear, let’s take a look at why understanding it is important to grasp selectors in NGRX. Let’s move on and see what this same data structure would look like with NGRX.</p>\n\n<h2>Feature state selectors</h2>\n\n<p>Our Store in NGRX is initialised with a root state - the top level in our state tree. As we keep our application nice and modular, we are going to create additional entries in the state tree. We keep our Angular apps modular by using feature modules, and NGRX has support for this too! Once our lazily-loaded Angular module is instantiated - it adds itself to our root Angular app - and the same applies with NGRX Store (and Effects too!). This means once we lazy load an Angular module which also manages state, it’s automatically bound to our root state as well.</p>\n\n<p>Adding this behaviour is nice and easy - we just register any feature state into feature modules by importing the <code class=\"highlighter-rouge\">StoreModule</code> and invoking it with <code class=\"highlighter-rouge\">.forFeature()</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forFeature</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">,</span> <span class=\"nx\">reducers</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>The first argument of <code class=\"highlighter-rouge\">.forFeature</code> contains a string that represents the name of the feature state, and the second argument supplies our reducers which manage that feature state. The feature name plays a crucial role in creating a state selector for the feature state using a handy function provided by <code class=\"highlighter-rouge\">ngrx/store</code> called <code class=\"highlighter-rouge\">createFeatureSelector</code>.</p>\n\n<p><code class=\"highlighter-rouge\">createFeatureSelector</code> allows us to get a top-level feature state property of the state tree simply by calling it out by its feature name:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>So what’s happening here with <code class=\"highlighter-rouge\">createFeatureSelector</code>? Firstly, we pass it a string that represents the name used to register the feature state in the feature module. It uses this string to look up the feature state from within the root state object, such as <code class=\"highlighter-rouge\">state['products']</code>.</p>\n\n<p>It then returns a typed selector function that will return a reference to that specific slice of state.</p>\n\n<p>So, <code class=\"highlighter-rouge\">createFeatureSelector</code> returns a selector function that looks up and returns the specified feature state. The generic type passed to it is the type of feature state that we get from the selector function. In this case, the selector will return a feature state of type <code class=\"highlighter-rouge\">ProductState</code>. Our <code class=\"highlighter-rouge\">ProductState</code> will then be managed by various reducers, we’ll take a look at it momentarily.</p>\n\n<p>Now that we have easy access to the <code class=\"highlighter-rouge\">products</code> state slice through <code class=\"highlighter-rouge\">getProductsState</code>, we can use it in our component as follows:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span>\n  <span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getProductsState</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>To get the state we need, we have to rely on mapping via <code class=\"highlighter-rouge\">.map()</code> to extract it from the top-level feature state. We are <em>dot walking</em> <code class=\"highlighter-rouge\">ProductState</code> with each <code class=\"highlighter-rouge\">map</code> call. This works nicely, but again it’s repetitive, not reusable and more difficult to test as a unit. This is where <code class=\"highlighter-rouge\">createSelector</code> comes into play, and we’ll work out how we can combine it with our new <code class=\"highlighter-rouge\">createFeatureSelector</code>.</p>\n\n<h2>State slice selectors</h2>\n\n<p>Due to being pure functions that return a slice of state, selector functions can be composed together to be consumed by components, they may be composed from various pieces of our overall state - and this is where state management becomes more important as we need to get things correct from the get-go.</p>\n\n<p>To kickstart composition, we need to define a starting point - our top-level feature. We are able to easily get a reference to a top-level state property by using <code class=\"highlighter-rouge\">createFeatureSelector</code>. Once we have that reference, we can then compose it with other selectors that point to state further down in our feature state - effectively traversing the state tree till we get to a desired property. We did something similar in one of the examples of a previous section using pure functions. Let’s see how we can do the same within our store.</p>\n\n<p>We start at the point where state is defined and managed: the reducer. We’re going to use the app from my comprehensive <a href=\"https://ultimateangular.com/ngrx-store-effects\">NGRX course</a>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ActionReducerMap</span><span class=\"p\">,</span> <span class=\"nx\">createFeatureSelector</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@ngrx/store'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromPizzas</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.reducer'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromToppings</span> <span class=\"k\">from</span> <span class=\"s1\">'./toppings.reducer'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">ProductsState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzaState</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">fromToppings</span><span class=\"p\">.</span><span class=\"nx\">ToppingsState</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n  <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">fromToppings</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">ProductsState</code> represents the feature state of this feature module. It is composed of two other states that reside one level below in the state tree: <code class=\"highlighter-rouge\">PizzaState</code> and <code class=\"highlighter-rouge\">ToppingsState</code>. Our <code class=\"highlighter-rouge\">ProductsState</code> is managed by our <code class=\"highlighter-rouge\">reducers</code> (an <code class=\"highlighter-rouge\">ActionReducerMap</code> that contains two reducers - <code class=\"highlighter-rouge\">pizzas</code> and <code class=\"highlighter-rouge\">toppings</code>) and each one manages the individual lower-level states, respectively. Let’s visualise what the state tree would look like now purely as a JavaScript object:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// RootState</span>\n<span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ProductState</span>\n  <span class=\"na\">products</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// PizzaState</span>\n    <span class=\"na\">pizzas</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// ToppingsState</span>\n    <span class=\"na\">toppings</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n      <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>To get to our pizza entities, we’d need to follow this path like we saw in the beginning:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>state -&gt; products -&gt; pizzas -&gt; entities\n</code></pre></div></div>\n\n<p>Now we can introduce <code class=\"highlighter-rouge\">createSelector</code> to obtain references to properties further down our state tree - which allows us to ask for <code class=\"highlighter-rouge\">pizzas</code> whenever we need in a simple way.</p>\n\n<p>We’ve already defined <code class=\"highlighter-rouge\">getProductsState</code> as a feature selector that gives us back the state slice that corresponds to <code class=\"highlighter-rouge\">ProductsState</code>. All that’s left is to compose it with other selectors to start building a chain down our state tree. This feels like we’re setting up a lot of boilerplate at times, and we are in places, but once it’s setup - we’re ready to use it thousands of times with little adjustments - selectors are fantastic to use and scale nicely with huge datasets and multiple states.</p>\n\n<p>So, let’s dive that one level deeper and use <code class=\"highlighter-rouge\">createSelector</code> to jump down another level:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">ProductsState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">pizzas</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzaState</span><span class=\"p\">;</span>\n  <span class=\"nl\">toppings</span><span class=\"p\">:</span> <span class=\"nx\">fromToppings</span><span class=\"p\">.</span><span class=\"nx\">ToppingsState</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzaState</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getProductsState</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">ProductsState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Note how we pass <code class=\"highlighter-rouge\">getProductsState</code> as the first argument - so we can <em>begin</em> our state lookup from this point. And just like that, we have access to a property located further down in our state tree.</p>\n\n<p>The <code class=\"highlighter-rouge\">createSelector</code> function takes up to eight selector functions as arguments, each one referencing different slices of state. The last argumet to <code class=\"highlighter-rouge\">createSelector</code> can be treated as our “projector function”. Let’s take a look at one of the TypeScript definitions for <code class=\"highlighter-rouge\">createSelector</code> to further grasp this before continuing:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">createSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S1</span><span class=\"p\">,</span> <span class=\"nx\">S2</span><span class=\"p\">,</span> <span class=\"nx\">S3</span><span class=\"p\">,</span> <span class=\"nx\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n  <span class=\"nx\">s1</span><span class=\"p\">:</span> <span class=\"nx\">Selector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nx\">s2</span><span class=\"p\">:</span> <span class=\"nx\">Selector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nx\">s3</span><span class=\"p\">:</span> <span class=\"nx\">Selector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">S3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n  <span class=\"nx\">projector</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">s1</span><span class=\"p\">:</span> <span class=\"nx\">S1</span><span class=\"p\">,</span> <span class=\"nx\">s2</span><span class=\"p\">:</span> <span class=\"nx\">S2</span><span class=\"p\">,</span> <span class=\"nx\">s3</span><span class=\"p\">:</span> <span class=\"nx\">S3</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Result</span>\n<span class=\"p\">):</span> <span class=\"nx\">MemoizedSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>We don’t need to panic ourselves with all the typings here - but let’s look at <code class=\"highlighter-rouge\">s1</code>, <code class=\"highlighter-rouge\">s2</code> and <code class=\"highlighter-rouge\">s3</code>. Notice how in the <code class=\"highlighter-rouge\">projector</code> we are given <code class=\"highlighter-rouge\">s1</code>, <code class=\"highlighter-rouge\">s2</code> and <code class=\"highlighter-rouge\">s3</code> as the function arguments - in the order in which we supplied them. This is far better than my first example in the introduction where we had to nest function calls. It’s readable and concise.</p>\n\n<p>In short: the projector function is passed, as arguments, the returned values of the selectors listed before it in the order in which they were listed.</p>\n\n<p>The role of the projector function is a powerful one. We can ask for various state properties, anywhere within our state tree, we can derive, transform or combine data from the state slices passed to it and return this modified data as a single object - typically for component consumption. Again, it’s clean and concise - and this state logic is nowhere inside our components. Our components <em>consume</em> the state, that’s it.</p>\n\n<p>Prior to creating <code class=\"highlighter-rouge\">getPizzaState</code>, in order to get the pizza entities in our component we needed to do this:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span>\n  <span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getProductsState</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>However with our new found <code class=\"highlighter-rouge\">getPizzaState</code> friend, we can now knock out one of the <code class=\"highlighter-rouge\">map</code> calls:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getPizzas</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>You can likely guess how we can now complete our journey and reference those <code class=\"highlighter-rouge\">entities</code> - but the way we gain access is a little different and typically begins in our reducer, let’s take a look:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/pizzas.reducer.ts</span>\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"nl\">entities</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">]:</span> <span class=\"nx\">Pizza</span> <span class=\"p\">};</span>\n  <span class=\"nl\">loaded</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n  <span class=\"nl\">loading</span><span class=\"p\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">initialState</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">entities</span><span class=\"p\">:</span> <span class=\"p\">{},</span>\n  <span class=\"na\">loaded</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">loading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">reducer</span><span class=\"p\">(</span>\n  <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">initialState</span><span class=\"p\">,</span>\n  <span class=\"nx\">action</span><span class=\"p\">:</span> <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">PizzasAction</span>\n<span class=\"p\">):</span> <span class=\"nx\">PizzaState</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ... switches and stuff</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasEntities</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasLoading</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loading</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasLoaded</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">PizzaState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">loaded</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>What’s important to notice in the <code class=\"highlighter-rouge\">PizzaState</code> reducer is the functions that are exported at the bottom. These are state property selectors - pure functions. This is a great place to export all other properties of this state level so that we can easily compose them in the next level up - which already has access to them through an <code class=\"highlighter-rouge\">import</code> statement.</p>\n\n<p>Back in our top-level reducer file, <code class=\"highlighter-rouge\">index.ts</code>, we are going to compose a selector that can finally return our beloved pizza <code class=\"highlighter-rouge\">entities</code>:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromPizzas</span> <span class=\"k\">from</span> <span class=\"s1\">'./pizzas.reducer'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getProductsState</span> <span class=\"o\">=</span> <span class=\"nx\">createFeatureSelector</span><span class=\"o\">&lt;</span><span class=\"nx\">ProductsState</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'products'</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzaState</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getProductsState</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">ProductsState</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">pizzas</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasEntities</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getPizzaState</span><span class=\"p\">,</span>\n  <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">getPizzasEntities</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>We use <code class=\"highlighter-rouge\">fromPizzas.getPizzasEntities</code> as the <em>projector function</em> of <code class=\"highlighter-rouge\">createSelector</code> that will return a reference to the pizza property <code class=\"highlighter-rouge\">entities</code>.</p>\n\n<p>Can we drop that last <code class=\"highlighter-rouge\">.map()</code> that was left in our component code?…</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getPizzas</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">pizzas</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">pizza</span><span class=\"p\">.</span><span class=\"nx\">entities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Why certainly. We can now supply our entities:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getPizzasEntities</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>This will now return us something like:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span>\n  <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 1'</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n  <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">name</span><span class=\"p\">:</span> <span class=\"s1\">'Pizza 2'</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This is great, and exactly what we needed. However with Angular, or any other framework/solution really, we should expect this data structure back as an array. In the case of Angular, we can then ship it nicely into <code class=\"highlighter-rouge\">ngFor</code>.</p>\n\n<p>Entities represent a way of normalising data structures by using unique IDs as references to them. It makes data look up very easy, fast, composable - but that’s a story for another post.</p>\n\n<p>So what if we want to convert our entities-based selector into an array format, for consumption via <code class=\"highlighter-rouge\">ngFor</code>? We can create another selector, and use the projector function to map our data structure across to an array, quite easily:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// src/products/store/reducers/index.ts</span>\n\n<span class=\"c1\">// ...</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getPizzasEntities</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span>\n  <span class=\"nx\">getPizzaState</span><span class=\"p\">,</span>\n  <span class=\"nx\">fromPizzas</span><span class=\"p\">.</span><span class=\"nx\">getPizzasEntities</span>\n<span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">getAllPizzas</span> <span class=\"o\">=</span> <span class=\"nx\">createSelector</span><span class=\"p\">(</span><span class=\"nx\">getPizzasEntities</span><span class=\"p\">,</span> <span class=\"nx\">entities</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">entities</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">id</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">entities</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]);</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>This has several key benefits. In state management, we might want to lookup items via their ID (normalised into entities), and we can do so by referencing <code class=\"highlighter-rouge\">getPizzasEntities</code> where for example we could pass a route param id into our selector, and return that single entity. No loops, no maps, just an object lookup. It might be that for some components, we actually want entities, and for some - like a list view - we’re more interested in the <em>same</em> data, but as an array!</p>\n\n<p>Selectors are also memoised, which means they’re fast and only recalculate when required to do so.</p>\n\n<p>With our mission complete, we can now pass that one selector into our <code class=\"highlighter-rouge\">store.select</code> and we’re done:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// an array of pizzas, what else could you ever ask for?</span>\n<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">(</span><span class=\"nx\">fromStore</span><span class=\"p\">.</span><span class=\"nx\">getAllPizzas</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>Voilà!</p>\n\n<h2>Conclusion</h2>\n\n<p>Selectors are a somewhat complex beast to start grasping and using, I’d encourage you to take a look around my <a href=\"https://github.com/UltimateAngular/ngrx-store-effects-app/tree/27-testing-effects/src/products/store/selectors\">example NGRX application</a> to see how things fit together in a bigger picture.</p>\n\n<p>Selectors are how we compose state, via functions that reference various pieces of our data structure. We can then merge them, combine them, pluck properties from them and combine them with others (this is especially easy with entities and ids that allow us to grab properties from our state and bring them into a new selector to compose new state). Possibilities are endless and somewhat easy to manage. Once we’ve composed our data structure via a selector, we can ship it off to our component(s) for consumption.</p>\n","enclosure":{},"categories":["ngrx"],"color":"purple","category":"Todd Motto","date":"2017-12-20 00:00:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"To Serve Man, with Software","pubDate":"2017-12-31 02:01:52","link":"https://blog.codinghorror.com/to-serve-man-with-software/","guid":"5a481e5fb392750022285b5b","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2017/12/software-is-eating-the-world-marc-andreessen.jpg","description":"<div class=\"kg-card-markdown\"><p>I didn't choose to be a programmer. Somehow, it seemed, <a href=\"https://blog.codinghorror.com/if-loving-computers-is-wrong-i-dont-want-to-be-right/\">the computers chose me</a>. For a long time, that was fine, that was enough; that was all I needed. But along the way I never felt that being a programmer was this <a href=\"https://blog.codinghorror.com/please-dont-learn-to-code/\">unambiguously great-for-everyone</a> career field with zero downsides. There</p></div>","content":"<div class=\"kg-card-markdown\">\n<p>I didn't choose to be a programmer. Somehow, it seemed, <a href=\"https://blog.codinghorror.com/if-loving-computers-is-wrong-i-dont-want-to-be-right/\">the computers chose me</a>. For a long time, that was fine, that was enough; that was all I needed. But along the way I never felt that being a programmer was this <a href=\"https://blog.codinghorror.com/please-dont-learn-to-code/\">unambiguously great-for-everyone</a> career field with zero downsides. There are absolutely occupational hazards of being a programmer, and <a href=\"https://blog.codinghorror.com/your-favorite-programming-quote/\">one of my favorite programming quotes</a> is an allusion to one of them:</p>\n<blockquote>\n<p>It should be noted that no ethically-trained software engineer would ever consent to write a <code>DestroyBaghdad</code> procedure. Basic professional ethics would instead require him to write a <code>DestroyCity</code> procedure, to which Baghdad could be given as a parameter.</p>\n</blockquote>\n<p>Which reminds me of <a href=\"https://waxy.org/2015/12/tracking_the_trump_is_a_comment_section_running_for_president_joke/\">another joke that people were telling in 2015</a>:</p>\n<blockquote>\n<p>Donald Trump is basically a comment section running for president</p>\n</blockquote>\n<p>Which is troubling because technically, <em>technically</em>, I run a company that <a href=\"https://discourse.org/\">builds comment sections</a>.</p>\n<p>Here at the tail end of 2017, from where I sit neither of these jokes seem particularly funny to me any more. Perhaps I have lost the capacity to feel joy as a human being? <em>Haha just kidding!</em> <em>... kinda.</em></p>\n<p>Remember <a href=\"https://www.wsj.com/articles/SB10001424053111903480904576512250915629460\">in 2011</a> when Marc Andreeseen said that \"Software is eating the world?\"</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/12/software-is-eating-the-world-marc-andreessen.jpg\" alt=\"software is eating the world, Marc Andreessen\"></p>\n<p>That used to sound all hip and cool and inspirational, like \"Wow! We software developers really <em>are</em> making a difference in the world!\" and now for the life of me I can't read it as anything other than an ominous warning that we just weren't smart enough to translate properly at the time. But <a href=\"https://en.wikipedia.org/wiki/To_Serve_Man_(The_Twilight_Zone)\">maybe now we are</a>.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/To_Serve_Man_(The_Twilight_Zone)\"><img src=\"https://blog.codinghorror.com/content/images/2017/12/to-serve-man.jpg\" alt=\"to-serve-man\"></a></p>\n<p>I've said many, many times that the key to becoming an experienced software developer is to understand that you are, at all times, <a href=\"https://blog.codinghorror.com/on-the-meaning-of-coding-horror/\">your own worst enemy</a>. I don't mean this in a negative way – you have to constantly plan for and design around your inevitable human mistakes and fallibility. It's fundamental to good software engineering because, well, we're all human. The good-slash-bad news is that you're only <a href=\"https://blog.codinghorror.com/the-trap-you-set-for-yourself/\"><em>accidentally</em> out to get yourself</a>. But what happens when we're infinitely connected and software is suddenly <em>everywhere</em>, in everyone's pockets every moment of the day, starting to approximate a natural extension of our bodies? All of a sudden those little collective social software accidents become <a href=\"https://www.wired.com/story/the-other-tech-bubble/\">considerably more dangerous</a>:</p>\n<blockquote>\n<p>The issue is bigger than any single scandal, I told him. As headlines have exposed the troubling inner workings of company after company, startup culture no longer feels like fodder for gentle parodies about ping pong and hoodies. It feels ugly and rotten. Facebook, the greatest startup success story of this era, isn’t a merry band of hackers building cutesy tools that allow you to digitally Poke your friends. It’s a powerful and potentially sinister collector of personal data, a propaganda partner to government censors, and an enabler of discriminatory advertising.</p>\n</blockquote>\n<p>I'm reminded of a particular Mitchell and Webb skit: <em>\"Are we the baddies?\"</em></p>\n\n<p>On the topic of unanticipated downsides to technology, there is no show more essential than <a href=\"https://www.netflix.com/title/70264888\">Black Mirror</a>. If you haven't watched Black Mirror yet, do not pass go, do not collect $200, go immediately to Netflix and watch it. Go on! Go ahead!</p>\n\n<blockquote>\n<p>⚠ Fair warning: please DO NOT start with season 1 episode 1 of Black Mirror! Start with season 3, and go forward. If you like those, dip into season 2 and the just-released season 4, then the rest. But humor me and please at least watch the first episode of season 3.</p>\n</blockquote>\n<p>The technology described in Black Mirror can be fanciful at times, but several episodes portray disturbingly plausible scenarios with <em>today's</em> science and tech, much less what we'll have 20 to 50 years from now. These are very real cautionary tales, and some of this stuff is well on its way toward being realized.</p>\n<p>Programmers don't think of themselves as people with the power to change the world. Most programmers I know, including myself, grew up as nerds, geeks, social outcasts. Did I ever tell you about the time I wrote a self-destructing Apple // boot disk program to let a girl in middle school know that I liked her? I was (and still am) a terrible programmer, but oh man did I ever test the heck out of <em>that</em> code before copying on to her school floppy disc. But I digress. What do you do when you wake up one day and software <em>has</em> kind of eaten the world, and <strong>it is no longer clear if software is in fact an unambiguously good thing, like we thought, like everyone told us … like we <em>wanted it to be?</em></strong></p>\n<p>Months ago I submitted a brief interview for a <a href=\"https://www.amazon.com/dp/1465462333/?tag=codihorr-20\">children's book about coding</a>.</p>\n<p><a href=\"https://www.amazon.com/dp/1465462333/?tag=codihorr-20\"><img src=\"https://blog.codinghorror.com/content/images/2017/12/9780241285060.jpg\" width=\"400\"></a></p>\n<p>I recently recieved a complimentary copy of the book in the mail. I paged to <a href=\"https://blog.codinghorror.com/content/images/2017/12/dk-findout-coding-page-50.jpg\">my short interview</a>, alongside the very cool <a href=\"http://www.prottsman.com/\">Kiki Prottsman</a>. I had no real recollection of the interview questions after the months of lead time it takes to print a physical book, but reading the printed page, I suddenly hit myself over the head with the very answer I had been searching my soul for these past 6 months:</p>\n<p><a href=\"https://blog.codinghorror.com/content/images/2017/12/dk-findout-coding-page-50.jpg\"><img src=\"https://blog.codinghorror.com/content/images/2017/12/dk-findout-coding-page-50-quote.jpg\" alt=\"Jeff Atwood quote: what do you love most about coding?\"></a></p>\n<p>In attempting to simplify my answers for an audience of kids, I had concisely articulated the one thing that keeps me coming back to software: <strong>to serve man</strong>. Not on a platter, for bullshit monetization – but software that <a href=\"https://blog.codinghorror.com/the-just-in-time-theory/\">helps people</a> be the best version of themselves.</p>\n\n<p>And you know why I do it? I need that help, too. I get tired, angry, upset, emotional, cranky, irritable, frustrated and I need to be reminded from time to time to choose to be the better version of myself. I don't always succeed. But <em>I want to</em>. And I believe everyone else – for some reasonable statistical value of everyone else – fundamentally does, too.</p>\n<p>That was the not-so-secret design philosophy behind Stack Overflow, that <strong>by helping others become better programmers, you too would become a better programmer</strong>. It's unavoidable. And, even better, if we leave enough helpful breadcrumbs behind for those that follow us, <em>we collectively advance the whole of programming for everyone</em>.</p>\n<p>I apologize for not blogging much in 2017.  I've certainly been busy with Discourse which is actually going great; we grew to 21 people and <a href=\"https://blog.discourse.org/2017/12/discourse-gives-back-2017/\">gave $55,000 back</a> this year to the open source ecosystem we build on. But that's no excuse. The truth is that it's been hard to write because this has been a deeply troubling year in so many dimensions — for men, for tech, for American democracy. I'm ashamed of much that happened, and I think one of the first and most important steps we can take is to <a href=\"https://blog.codinghorror.com/the-hugging-will-continue-until-morale-improves/\">embrace explicit codes of conduct</a> throughout our industry. I also continue to believe, if we start to think more holistically about what our software can do to <strong>serve all people</strong>, not just ourselves personally (or, even worse, the company we work for) — that software can and should be part of the solution.</p>\n<p>I tried to amplify on these thoughts in recent podcasts:</p>\n<table>\n<tr>\n<td><img src=\"https://blog.codinghorror.com/content/images/2017/12/kim-crayton.jpg\" width=\"100\" height=\"100\"></td>\n        <td> <a href=\"http://www.kimcrayton.com/commengreport-jeff-atwood/\">Community Engineering Report</a> with Kim Crayton</td>\n    </tr>\n<tr>\n<td><img src=\"https://blog.codinghorror.com/content/images/2017/12/dave-rael.jpg\" width=\"100\" height=\"100\"></td>\n        <td> <a href=\"http://developeronfire.com/podcast/episode-258-jeff-atwood-sharing-the-house\">Developer on Fire</a> with Dave Rael</td>\n    </tr>\n<tr>\n<td><img src=\"https://blog.codinghorror.com/content/images/2017/12/william-channer.jpg\" width=\"100\" height=\"100\"></td>\n        <td> <a href=\"https://drt.fm/jeff-atwood\">Dorm Room Tycoon</a> with William Channer</td>\n    </tr>\n</table>\n<p>Software is easy to change, but people ... aren't. So in the new year, as software developers, let's make a resolution to focus on the part we <em>can</em> change, and keep asking ourselves one very important question: <strong>how can our software help people become the best version of themselves?</strong></p>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2017-12-31 02:01:52","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"The Existential Terror of Battle Royale","pubDate":"2017-11-05 10:02:53","link":"https://blog.codinghorror.com/the-existential-terror-of-battle-royale/","guid":"59fc20474dd8920022728f05","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2017/11/pubg-steam-stats-nov-2017.png","description":"<div class=\"kg-card-markdown\"><p>It's been a while since I wrote a blog post, I guess in general, but also a blog post about video games. Video games are probably <a href=\"https://www.google.com/search?q=site%3Ablog.codinghorror.com+%22video+games%22\">the single thing most attributable to my career as a programmer</a>, and everything else I've done professionally after that. I still feel video games</p></div>","content":"<div class=\"kg-card-markdown\">\n<p>It's been a while since I wrote a blog post, I guess in general, but also a blog post about video games. Video games are probably <a href=\"https://www.google.com/search?q=site%3Ablog.codinghorror.com+%22video+games%22\">the single thing most attributable to my career as a programmer</a>, and everything else I've done professionally after that. I still feel video games are one of the best ways to learn and teach programming, <a href=\"https://blog.codinghorror.com/heres-the-programming-game-you-never-asked-for/\">if properly scoped</a>, and furthermore I take <a href=\"https://blog.codinghorror.com/level-one-the-intro-stage/\">many cues from video games in building software</a>.</p>\n<p>I would characterize my state of mind for the last six to eight months as … <em>poor</em>. Not only because of <a href=\"https://blog.codinghorror.com/im-loyal-to-nothing-except-the-dream/\">current events in the United States</a>, though the neverending barrage of bad news weighs heavily on me, and I continue to be profoundly disturbed by the erosion of core values that I thought most of us stood for as Americans. Didn't we used to look out for each other, care about each other, and fight to protect those that can't protect themselves?</p>\n<p>In times like these, I sometimes turn to video games for escapist entertainment. One game in particular caught my attention because of its meteoric rise in player count over the last year.</p>\n<p><a href=\"http://steamcharts.com/app/578080\"><img src=\"https://blog.codinghorror.com/content/images/2017/11/pubg-steam-stats-nov-2017.png\" alt=\"pubg-steam-stats-nov-2017\"></a></p>\n<p>That game is <a href=\"http://store.steampowered.com/app/578080/PLAYERUNKNOWNS_BATTLEGROUNDS/\">Player Unknown's Battlegrounds</a>. I was increasingly curious why it was so popular, and kept getting more popular every month. Calling it a mere phenomenon seems like underselling it; something truly unprecedented is happening here. I finally broke down and bought a copy for $30 in September.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/11/player-unknown-battleground.jpg\" alt=\"player-unknown-battleground\"></p>\n<p>After a few hours in, I had major flashbacks to <a href=\"https://blog.codinghorror.com/the-gamification/\">the first time I played Counter-Strike in 1998</a>. I realized that <strong>we are witnessing the birth of an entirely new genre of game: the Battle Royale</strong>. I absolutely believe that huge numbers of people will still be playing some form of this game 20 years from now, too.</p>\n<p><a href=\"http://store.steampowered.com/stats/\"><img src=\"https://blog.codinghorror.com/content/images/2017/11/steam-top-games-by-player-count-nov-2017.png\" alt=\"steam-top-games-by-player-count-nov-2017\"></a></p>\n<p>I've seen <a href=\"https://en.wikipedia.org/wiki/Battle_Royale_(film)\">the Japanese movie</a>, and it's true that there were <a href=\"https://en.wikipedia.org/wiki/Battle_royale_game\">a few Battle Royale games</a> before PUBG, but this is clearly the defining moment and game for the genre, the one that sets a precedent for everyone else to follow.</p>\n<p>It's hard to explain why Battlegrounds is so compelling, but let's start with the loneliness.</p>\n<p>Although you can play in squads (and I recommend it), the purest original form of the game is 100 players, last man standing. You begin with nothing but the clothes on your back, in a cargo aircraft, flying over an unknown island in a random trajectory.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/11/battlegrounds-cargo-plane.jpg\" alt=\"battlegrounds-cargo-plane\"></p>\n<p>It's up to you to decide when to drop, and where to land on this huge island, full of incredibly detailed cities, buildings and houses – but strangely devoid of all life.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/11/playerunknown-battleground-drop.jpg\" alt=\"playerunknown-battleground-drop\"></p>\n<p>What happened to everyone? Where did they go? The sense of apocalypse is overwhelming. It's you versus the world, but where did the rest of the world go? You'll wander this vast deserted island, scavenging for weapons and armor in near complete silence. You'll hear nothing but the wind blowing and the occasional buzzing of flies. But then, suddenly the jarring pak-pak-pak of gunfire off in the distance, reminding you that other people are here. And they aren't your friends.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/11/battle-royale-vista.jpg\" alt=\"battle-royale-vista\"></p>\n<p>the dread of never knowing when another of the 100 players on this enormous island is going to suddenly appear around a corner or over a hill is <em>intense</em>. You'll find yourself wearing headphones, cranking the volume, constantly on edge listening for the implied threat of footfalls. Wait, did I hear someone just now, or was that me? You clench, and wait. I've had so many visceral panic moments playing this game, to the point that I had to stop playing just to calm down.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/11/pubg-combat.jpg\" alt=\"pubg-combat\"></p>\n<p>PUBG is, in its way, the scariest zombie movie I've ever seen, though it lacks a single zombie. It dispenses with the pretense of a story, so you can realize much sooner that the zombies, as terrible as they may be, are nowhere as dangerous to you as your fellow man.</p>\n<p>Meanwile, that huge cargo airplane still roars overhead every so often, impassive, indifferent, occasionally dropping supply crates with high powered items to fight over. Airstrikes randomly target areas circled in red on the map, masking footfalls, and forcing movement while raining arbitrary death and terror.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/11/pubg-map.jpg\" alt=\"pubg-map\"></p>\n<p>Although the island is huge and you can land anywhere, after a few minutes a random circle is overlaid on the map, and a slowly moving wall of deadly energy starts closing in on that circle. Stay outside that circle at your peril; if you find yourself far on the opposite side of the map from a circle, you better start hunting for a vehicle or boat (they're present, but rare) quickly. These terrordome areas are always shrinking, always impending, in an ever narrowing cone, forcing the remaining survivors closer and closer together. The circles get tighter and deadlier and quicker as the game progresses, ratcheting up the tension and conflict.</p>\n<p>Eventually the circle becomes so small that it's impossible for the handful of remaining survivors to avoid contact, and one person, <em>one</em> out of the hundred that originally dropped out of the cargo plane, emerges as the winner. I've never won solo, but I have won squad, and even finishing first out of 25 squads is an unreal, euphoric experience. The odds are so incredibly against you from the outset, plus you quickly discover that 85% of the game is straight up chance: someone happens to roll up behind you, a sniper gets the drop on you, or you get caught in the open with few options. Wrong place, wrong time, game over. Sucks to be you.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/11/pubg-vehicle-shooting.jpg\" alt=\"pubg-vehicle-shooting\"></p>\n<p>You definitely learn to be careful, but there's only so careful you can be. Death comes quickly, without warning, and often at random. What else can you expect from a game mode where there are 100 players but only 1 eventual winner?</p>\n<p>There haven't been many Battle Royale games, so this game mode is a relatively new phenomenon. If you'd like to give it a try for free, <strong>I highly recommend <a href=\"https://www.epicgames.com/fortnite/\">Fortnite's Battle Royale mode</a> which is 100% free, a near-clone of PUBG, and quite good in its own right.</strong> They added their Battle Royale mode well after the fact; the core single player \"save the world\" gameplay of building stuff and fighting zombie hordes is quite fun too, though a bit shallow. It also has what is, in my opinion, some of the most outstanding visual style I've ever seen in a game – a cool, hyperbolic cartoon mix of Chuck Jones, Sam &amp; Max, and Cloudy with a Chance of Meatballs. It's also delightfully diverse in its character models.</p>\n<p><a href=\"https://www.epicgames.com/fortnite/\"><img src=\"https://blog.codinghorror.com/content/images/2017/11/fortnite-battle-royale.jpg\" alt=\"fortnite-battle-royale\"></a></p>\n<p>(The only things you'll give up over PUBG are the realistic art style, vehicles, and going prone. But the superb structure building system in Fortnite <em>almost</em> makes up for that. If nothing else it is a demonstration of how incredibly compelling the Battle Royale game mode is, because that part of the game is <a href=\"https://www.pcgamesn.com/fortnite/fortnite-battle-royale-player-numbers\">wildly successful</a> in a a way that the core game, uh, wasn't. Also it's free!)</p>\n<p>I didn't intend for this to happen, but to me, <strong>the Battle Royale game mode perfectly captures the zeitgeist of the current moment</strong>, and matches my current state of mind to a disturbing degree. It's an absolutely terrifying experience of every human for themselves, winner takes all, with impossible odds. There are moments it can be thrilling, even inspiring, but mostly it's brutal and unforgiving. To succeed you need to be exceedingly cautious, highly skilled, and just plain <em>lucky</em>. Roll the dice again, but know that everyone will run towards the sound of gunfire in hopes of picking off survivors and looting their corpses. Including you.</p>\n<p>Battle Royale is not the game mode we wanted, it's not the game mode we needed, it's the game mode we all <em>deserve</em>. And the best part is, when we're done playing, we can turn it off.</p>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2017-11-05 10:02:53","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Hacker, Hack Thyself","pubDate":"2017-06-02 08:11:16","link":"https://blog.codinghorror.com/hacker-hack-thyself/","guid":"5988f60721f57d0019a2e12b","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2017/06/discourse-download-all.png","description":"<div class=\"kg-card-markdown\"><p>We've read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the <a href=\"https://discourse.org/\">Discourse</a> project; we endeavor to build open source software that is secure and safe for communities by default, even if there are</p></div>","content":"<div class=\"kg-card-markdown\">\n<p>We've read so many sad stories about communities that were fatally compromised or destroyed due to security exploits. We took that lesson to heart when we founded the <a href=\"https://discourse.org/\">Discourse</a> project; we endeavor to build open source software that is secure and safe for communities by default, even if there are thousands, or millions, of them out there.</p>\n<p>However, we also value <em>portability</em>, the ability to get your data into and out of Discourse at will. This is why Discourse, unlike other forum software, defaults to a Creative Commons license. As a basic user on any Discourse you can easily export and download all your posts right from your user page.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-download-all.png\" alt=\"Discourse Download All Posts\"></p>\n<p>As a site owner, you can easily back up and restore your entire site database from the admin panel, right in your web browser. Automated weekly backups are set up for you out of the box, too. I'm not <a href=\"https://blog.codinghorror.com/international-backup-awareness-day/\">the world's foremost expert on backups</a> for nothing, man!</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-backups.png\" alt=\"Discourse database backup download\"></p>\n<p>Over the years, we've learned that balancing security and data portability can be tricky.  You bet your sweet ASCII a <strong>full database download</strong> is what hackers start working toward the minute they gain any kind of foothold in your system. It's the ultimate prize.</p>\n<p>To mitigate this threat, we've slowly tightened restrictions around Discourse backups in various ways:</p>\n<ul>\n<li>\n<p>Administrators have a minimum password length of 15 characters.</p>\n</li>\n<li>\n<p>Both backup creation and backup download administrator actions are formally logged.</p>\n</li>\n<li>\n<p>Backup download tokens are single use and emailed to the address of the administrator, to confirm that user has full control over the email address.</p>\n</li>\n</ul>\n<p>The name of the security game is defense in depth, so all these hardening steps help … but we still need to <strong>assume that Internet Bad Guys will somehow get a copy of your database</strong>. And then what? Well, what's in the database?</p>\n<ul>\n<li>\n<p>Identity cookies</p>\n<p>Cookies are, of course, how the browser can tell who you are. Cookies are usually stored as hashes, rather than the actual cookie value, so having the hash doesn't let you impersonate the target user. Furthermore, most modern web frameworks rapidly cycle cookies, so they are only valid for a brief 10 to 15 minute window anyway.</p>\n</li>\n<li>\n<p>Email addresses</p>\n<p>Although users have reason to be concerned about their emails being exposed, very few people treat their email address as anything particularly precious these days.</p>\n</li>\n<li>\n<p>All posts and topic content</p>\n<p>Let's assume for the sake of argument that this is a fully public site and nobody was posting anything particularly sensitive there. So we're not worried, at least for now, about trade secrets or other privileged information being revealed, since they were all public posts anyway. If we were, that's a whole other blog post I can write at a later date.</p>\n</li>\n<li>\n<p>Password hashes</p>\n<p>What's left is <strong>the password hashes</strong>. And that's … <a href=\"https://blog.codinghorror.com/speed-hashing/\">a serious problem indeed</a>.</p>\n</li>\n</ul>\n<p>Now that the attacker has your database, they can crack your password hashes with <a href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\">large scale offline attacks</a>, using the full resources of any cloud they can afford. And once they've cracked a particular password hash, <strong>they can log in as that user … forever</strong>. Or at least until that user changes their password.</p>\n<blockquote>\n<p>⚠️ That's why, if you know (or even suspect!) your database was exposed, the very first thing you should do is reset everyone's password.</p>\n</blockquote>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/discourse-db-password-hashes.png\" alt=\"Discourse database password hashes\"></p>\n<p>But what if you <em>don't</em> know? Should you preemptively reset everyone's password every 30 days, like the world's worst bigco IT departments? That's downright user hostile, and leads to serious pathologies of its own. The reality is that you probably <em>won't</em> know when your database has been exposed, at least not until it's too late to do anything about it. So it's crucial to slow the attackers down, to give yourself time to deal with it and respond.</p>\n<p>Thus, the only real protection you can offer your users is just how resistant to attack your stored password hashes are. There are two factors that go into password hash strength:</p>\n<ol>\n<li>\n<p><strong>The hashing algorithm</strong>. As slow as possible, and ideally designed to be <em>especially</em> slow on GPUs for reasons that will become painfully obvious about 5 paragraphs from now.</p>\n</li>\n<li>\n<p><strong>The work factor</strong> or <strong>number of iterations</strong>. Set this as high as possible, without opening yourself up to a possible denial of service attack.</p>\n</li>\n</ol>\n<p>I've seen guidance that said you should set the overall work factor high enough that hashing a password takes at least 8ms on the target platform. It turns out <a href=\"https://samsaffron.com/\">Sam Saffron</a>, one of my Discourse co-founders, made a good call back in 2013 when he selected the NIST recommendation of <strong>PBKDF2-HMAC-SHA256</strong> and <strong>64k iterations</strong>. We measured, and that indeed takes roughly 8ms using our existing Ruby login code on our current (fairly high end, Skylake 4.0 Ghz) servers.</p>\n<p>But that was 4 years ago. Exactly how secure are our password hashes in the database today? Or 4 years from now, or 10 years from now? We're building open source software for the long haul, and we need to be sure we are making reasonable decisions that protect everyone. So in the spirit of <a href=\"https://blog.codinghorror.com/designing-for-evil/\">designing for evil</a>, it's time to put on our Darth Helmet and play the bad guy – <strong>let's crack our own hashes!</strong></p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/dark-helmet.jpg\" alt=\"\"></p>\n<p>We're gonna use the biggest, baddest single GPU out there at the moment, <a href=\"https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40#gistcomment-2060753\">the GTX 1080 Ti</a>. As a point of reference, for PBKDF2-HMAC-SHA256 the 1080 achieves 1180 kH/s, whereas the 1080 Ti achieves 1640 kH/s. In a <em>single</em> video card generation the attack hash rate has increased nearly 40 percent. Ponder that.</p>\n<p>First, a tiny hello world test to see if things are working. I downloaded <a href=\"https://hashcat.net/hashcat/\">hashcat</a>. I logged into our demo at <a href=\"http://try.discourse.org/\">try.discourse.org</a> and created a new account with the password <code>0234567890</code>; I checked the database, and this generated the following values in the hash and salt database columns for that new user:</p>\n<blockquote>\n<p>hash<br><code>93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=</code><br>\nsalt<br><code>ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=</code></p>\n</blockquote>\n<p>Hashcat requires the following input file format: one line per hash, with the hash type, number of iterations, salt and hash (base64 encoded) separated by colons:</p>\n<pre><code>type   iter  salt                                         hash\nsha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=\n</code></pre>\n<p>Let's hashcat it up and see if it works:</p>\n<p><code>./h64 -a 3 -m 10900 .\\one-hash.txt 0234567?d?d?d</code></p>\n<p>Note that this is an intentionally tiny amount of work, it's only guessing three digits. And sure enough, we cracked it fast! See the password there on the end? We got it.</p>\n<p><code>sha256:64000:ZWVhZWQ4YjZmODU4Mzc0M2E2ZDRlNjBkNjY3YzE2ODA=:93LlpbKZKficWfV9jjQNOSp39MT0pDPtYx7/gBLl5jw=:0234567890</code></p>\n<p>Now that we know it works, let's get down to business. But we'll start easy. How long does it take to brute force attack <strong>the easiest possible Discourse password, 8 numbers</strong> – that's \"only\" 10<sup>8</sup> combinations, a little over one hundred million.</p>\n<pre><code>Hash.Type........: PBKDF2-HMAC-SHA256\nTime.Estimated...: Fri Jun 02 00:15:37 2017 (1 hour, 0 mins)\nGuess.Mask.......: ?d?d?d?d?d?d?d?d [8]\n</code></pre>\n<p>Even with a top of the line GPU that's … OK, I guess. Remember this is just one hash we're testing against, so you'd need one hour per row (user) in the table. And I have more bad news for you: Discourse hasn't allowed 8 character passwords for <a href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\">quite some time now</a>. How long does it take if we try longer numeric passwords?</p>\n<pre><code>?d?d?d?d?d?d?d?d?d [9]\nFri Jun 02 10:34:42 2017 (11 hours, 18 mins)\n\n?d?d?d?d?d?d?d?d?d?d [10]\nTue Jun 06 17:25:19 2017 (4 days, 18 hours)\n\n?d?d?d?d?d?d?d?d?d?d?d [11]\nMon Jul 17 23:26:06 2017 (46 days, 0 hours)\n\n?d?d?d?d?d?d?d?d?d?d?d?d [12]\nTue Jul 31 23:58:30 2018 (1 year, 60 days)\n</code></pre>\n<p>But all digit passwords are easy mode, for babies! How about some <em>real</em> passwords that use at least lowercase letters, or lowercase + uppercase + digits?</p>\n<pre><code>Guess.Mask.......: ?l?l?l?l?l?l?l?l [8]\nTime.Estimated...: Mon Sep 04 10:06:00 2017 (94 days, 10 hours)\n\nGuess.Mask.......: ?1?1?1?1?1?1?1?1 [8] (-1 = ?l?u?d)\nTime.Estimated...: Sun Aug 02 09:29:48 2020 (3 years, 61 days)\n</code></pre>\n<p>A brute force try-every-single-letter-and-number attack is not looking so hot for us at this point, even with a high end GPU. But what if we divided the number by <strong>eight</strong> … <a href=\"https://gist.github.com/epixoip/a83d38f412b4737e99bbef804a270c40\">by putting eight video cards in a single machine?</a> That's well within the reach of a small business budget or a wealthy individual. Unfortunately, dividing 38 months by 8 isn't such a dramatic reduction in the time to attack. Instead, let's talk about nation state attacks where they have the budget to throw <em>thousands</em> of these GPUs at the problem (1.1 days), maybe even <em>tens of thousands</em> (2.7 hours), then … yes. Even allowing for 10 character password minimums, you are in serious trouble at that point.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/06/8-gpu-cracking-rig.jpg\" alt=\"\"></p>\n<p>If we want Discourse to be nation state attack resistant, clearly we'll need to do better. Hashcat has a handy benchmark mode, and <a href=\"https://docs.google.com/spreadsheets/d/1iwoMR5TBYAZ5eiSphkIQfIEfbrVvWW_tKwS4L1cYlaI/pubhtml?gid=0&amp;single=true\">here's a sorted list of the strongest (slowest) hashes that Hashcat knows about</a> benchmarked on a rig with 8 Nvidia GTX 1080 GPUs. Of the things I recognize on that list, <strong>bcrypt</strong>, <strong>scrypt</strong> and <strong>PBKDF2-HMAC-SHA512</strong> stand out.</p>\n<p>My quick hashcat results gave me some confidence that we weren't doing anything terribly wrong with the Discourse password hashes stored in the database. But I wanted to be <em>completely sure</em>, so I hired someone with a background in security and penetration testing to, under a signed NDA, try cracking the password hashes of two live and very popular Discourse sites <a href=\"https://discourse.org/customers\">we currently host</a>.</p>\n<blockquote>\n<p>I was provided two sets of password hashes from two different Discourse communities, containing 5,909 and 6,088 hashes respectively. Both used the PBKDF2-HMAC-SHA256 algorithm with a work factor of 64k. Using hashcat, my Nvidia GTX 1080 Ti GPU generated these hashes at a rate of ~27,000/sec.</p>\n<p>Common to all discourse communities are various password requirements:</p>\n<ul>\n<li>All users must have a minimum password length of 10 characters.</li>\n<li>All administrators must have a minimum password length of 15 characters.</li>\n<li>Users cannot use any password matching a blacklist of the 10,000 most commonly used passwords.</li>\n<li>Users can choose to create a username and password or use various third party authentication mechanisms (Google, Facebook, Twitter, etc). If this option is selected, a secure random 32 character password is autogenerated. It is not possible to know whether any given password is human entered, or autogenerated.</li>\n</ul>\n<p>Using common password lists and masks, I cracked 39 of the 11,997 hashes in about three weeks, 25 from the ████████ community and 14 from the ████████ community.</p>\n</blockquote>\n<p>This is a security researcher who commonly runs these kinds of audits, so all of the attacks used <strong>wordlists</strong>, along with known effective patterns and <a href=\"https://hashcat.net/wiki/doku.php?id=mask_attack\">masks</a> derived from the researcher's previous password cracking experience, instead of raw brute force. That recovered the following passwords (and one duplicate):</p>\n<table><tr>\n<td>\n<code>007007bond</code><br><code>123password</code><br><code>1qaz2wsx3e</code><br><code>A3eilm2s2y</code><br><code>Alexander12</code><br><code>alexander18</code><br><code>belladonna2</code><br><code>Charlie123</code><br><code>Chocolate1</code><br><code>christopher8</code><br><code>Elizabeth1</code><br><code>Enterprise01</code><br><code>Freedom123</code><br><code>greengrass123</code><br><code>hellothere01</code><br><code>I123456789</code><br><code>Iamawesome</code><br><code>khristopher</code><br><code>l1ghthouse</code><br>\n</td>\n<td>\n<code>l3tm3innow</code><br><code>Neversaynever</code><br><code>password1235</code><br><code>pittsburgh1</code><br><code>Playstation2</code><br><code>Playstation3</code><br><code>Qwerty1234</code><br><code>Qwertyuiop1</code><br><code>qwertyuiop1234567890</code><br><code>Spartan117</code><br><code>springfield0</code><br><code>Starcraft2</code><br><code>strawberry1</code><br><code>Summertime</code><br><code>Testing123</code><br><code>testing1234</code><br><code>thecakeisalie02</code><br><code>Thirteen13</code><br><code>Welcome123</code><br>\n</td>\n</tr></table>\n<p>If we multiply this effort by 8, and double the amount of time allowed, it's conceivable that a <em>very</em> motivated attacker, or <a href=\"https://arstechnica.com/security/2013/10/how-the-bible-and-youtube-are-fueling-the-next-frontier-of-password-cracking/\">one with a sophisticated set of wordlists and masks</a>, could eventually recover 39 × 16 = 624 passwords, or about <strong>five percent</strong> of the total users. That's reasonable, but higher than I would like. We absolutely plan to add a hash type table in future versions of Discourse, so we can switch to an even more secure (read: <a href=\"http://www.pxdojo.net/2015/08/what-i-learned-from-cracking-4000.html\">much slower</a>) password hashing scheme in the next year or two.</p>\n<pre><code>bcrypt $2*$, Blowfish (Unix)\n  20273 H/s\n\nscrypt\n  886.5 kH/s\n\nPBKDF2-HMAC-SHA512\n  542.6 kH/s \n\nPBKDF2-HMAC-SHA256\n 1646.7 kH/s \n</code></pre>\n<p>After this exercise, I now have a much deeper understanding of our worst case security scenario, a database compromise combined with a professional offline password hashing attack. I can also more confidently recommend and stand behind our engineering work in making Discourse secure for everyone. So if, like me, you're not entirely sure you are doing things securely, it's time to put those assumptions to the test. Don't wait around for hackers to attack you — <strong>hacker, hack thyself!</strong></p>\n<table><tr><td class=\"welovecodinghorror\">[advertisement] At Stack Overflow, we put developers first. We already help you find answers to your tough coding questions; now let us help you <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">find your next job</a>.</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2017-06-02 08:11:16","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Thunderbolting Your Video Card","pubDate":"2017-03-24 09:08:37","link":"https://blog.codinghorror.com/thunderbolting-your-video-card/","guid":"5988f60721f57d0019a2e129","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2017/03/skull-canyon-nuc-with-razer-core.jpg","description":"<div class=\"kg-card-markdown\">\n<p>When I wrote about <a href=\"https://blog.codinghorror.com/the-golden-age-of-x86-gaming/\">The Golden Age of x86 Gaming</a>, I <em>implied</em> that, in the future, it might be an interesting, albeit expensive, idea to upgrade your video card via an external Thunderbolt 3 enclosure.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/skull-canyon-nuc-with-razer-core.jpg\" alt=\"\"></p>\n<p>I'm here to report that <strong>the future is now</strong>.</p>\n<p>Yes, that's right, I paid $500</p>\n</div>","content":"<div class=\"kg-card-markdown\">\n<p>When I wrote about <a href=\"https://blog.codinghorror.com/the-golden-age-of-x86-gaming/\">The Golden Age of x86 Gaming</a>, I <em>implied</em> that, in the future, it might be an interesting, albeit expensive, idea to upgrade your video card via an external Thunderbolt 3 enclosure.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/skull-canyon-nuc-with-razer-core.jpg\" alt=\"\"></p>\n<p>I'm here to report that <strong>the future is now</strong>.</p>\n<p>Yes, that's right, I paid $500 for <a href=\"https://www.razerzone.com/store/razer-core\">an external Thunderbolt 3 enclosure</a> to fit a $600 video card, all to enable a plug-in upgrade of a GPU on a <a href=\"https://blog.codinghorror.com/the-golden-age-of-x86-gaming/\">Skull Canyon NUC</a> that itself cost around $1000 fully built. I know, it sounds crazy, and … OK fine, I won't argue with you. It's crazy.</p>\n<p>This matters mostly because of 4k, aka 2160p, aka 3840 × 2160, aka <strong>Ultra HD</strong>.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2015/08/common-hd-resolutions-compared.png\" alt=\"4k compared to 1080p\"></p>\n<p>Plain old regular HD, aka 1080p, aka 1920 × 1080, is one quarter the size of 4k, and ¼ the work. By today's GPU standards HD is pretty much <em>easy mode</em> these days. It's not even interesting. No offense to console fans, or anything.</p>\n<p>Late in 2016, I got a <a href=\"https://www.amazon.com/gp/product/B01CDD4J58/?tag=codihorr-20\">4k OLED display</a> and it … kind of blew my mind. I have never seen blacks so black, colors so vivid, on a display so thin. It made my previous 2008 era Panasonic plasma set look lame. It's so good that I'm now a little angry that every display that my eyes touch isn't OLED already. I even got into nerd fights over it, and to be honest, I'd still throw down for OLED. It is legitimately <em>that good</em>. Come at me, bro.</p>\n<p>Don't believe me? Well, guess which display in the below picture is OLED? Go on, guess:</p>\n<p><a href=\"http://www.consumerreports.org/lcd-led-oled-tvs/2016-LG-4K-oled-tvs/\"><img src=\"https://blog.codinghorror.com/content/images/2017/03/CptX7RCVYAAKNOP.jpg\" alt=\"Guess which screen is OLED?\"></a></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/andrewbstiles\">@andrewbstiles</a> if it was physically possible to have sex with this TV I.. uh.. I'd take it on long, romantic walks</p>— Jeff Atwood (@codinghorror) <a href=\"https://twitter.com/codinghorror/status/764304493483663361\">August 13, 2016</a>\n</blockquote>\n<p>There's a reason every site that reviews TVs had to recalibrate their results when <a href=\"http://thewirecutter.com/reviews/best-tv/\">they reviewed the 2016 OLED sets</a>.</p>\n<blockquote>\n<p>In my extended review at Reference Home Theater, I call it “the best looking TV I’ve ever reviewed.” But we aren’t alone in loving the E6. Vincent Teoh at HDTVtest writes, “We’re not even going to qualify the following endorsement: if you can afford it, this is the TV to buy.” <a href=\"http://rtings.com/\">Rtings.com</a> gave <a href=\"https://www.amazon.com/gp/product/B01CDD4J58/?tag=codihorr-20\">the E6 OLED</a> the highest score of any TV the site has ever tested. <a href=\"http://reviewed.com/\">Reviewed.com</a> awarded it a 9.9 out of 10, with only the LG G6 OLED (which offers the same image but better styling and sound for $2,000 more) coming out ahead.</p>\n</blockquote>\n<p>But I digress.</p>\n<p>Playing games at 1080p in my living room was already possible. But now that I have an incredible 4k display in the living room, it's a whole other level of difficulty. Not just twice as hard – and remember current consoles <em>barely</em> manage to eke out 1080p at 30fps in most games – but <strong>four times as hard</strong>. That's where external GPU power comes in.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/razer-core-with-gpu.jpg\" alt=\"\"></p>\n<p>The cool technology underpinning all of this is <strong>Thunderbolt 3</strong>. The thunderbolt cable bundled with the Razer Core is rather … diminutive. There's <a href=\"https://blog.startech.com/post/thunderbolt-3-the-basics/\">a reason for this</a>.</p>\n<blockquote>\n<p><strong>Is there a maximum cable length for Thunderbolt 3 technology?</strong></p>\n<p>Thunderbolt 3 passive cables have maximum lengths.</p>\n<ul>\n<li>0.5m TB 3 (40Gbps)</li>\n<li>1.0m TB 3 (20Gbps)</li>\n<li>2.0m TB 3 (20Gbps)</li>\n</ul>\n<p>In the future we will offer active cables which will provide 40Gbps of bandwidth at longer lengths.</p>\n</blockquote>\n<p>40Gbps is, for the record, an <em>insane</em> amount of bandwidth. Let's use our rule of thumb based on ultra common gigabit ethernet, that 1 gigabit = 120 megabytes/second, and we arrive at <strong>4.8 gigabytes/second</strong>. Zow.</p>\n<p>That's more than enough bandwidth to run even the highest of high end video cards, but it is not without overhead. There's <a href=\"http://www.ultrabookreview.com/10761-razer-core-review/\">a mild performance hit</a> for running the card externally, on the order of <strong>15%</strong>. There's also a further performance hit of 10% if you are in \"loopback\" mode on a laptop where you don't <em>have</em> an external display, so the video frames have to be shuttled back from the GPU to the internal laptop display.</p>\n<p>This may look like a gamer-only thing, but surprisingly, it isn't. What you get is the general purpose ability to attach <strong>any PCI express card</strong> to any computer with a <strong>Thunderbolt 3</strong> port and, for the most part, it just works!</p>\n<p>Linus breaks it down and answers all your most difficult questions:</p>\n\n<p>Please watch the above video closely if you're actually interested in this stuff; it is essential. I'll add some caveats of my own after working with the Razer Core for a while:</p>\n<ul>\n<li>\n<p>Make sure the video card you plan to put into the Razer Core is not too tall, or too wide. You can tell if a card is going to be too tall by looking at pictures of the mounting rear bracket. If the card extends significantly above the standard rear mounting bracket, it won't fit. If the card takes more than 2 slots in width, it also won't fit, but this is more rare. Depth (length) is rarely an issue.</p>\n</li>\n<li>\n<p>There are four fans in the Razer Core and although it is <em>reasonably</em> quiet, it's not super silent or anything. You may want to <a href=\"http://forum.notebookreview.com/threads/razer-core-disassembly-fan-location-guide.802000/\">mod the fans</a>. The Razer Core is a remarkably simple device, internally, it's really just a power supply, some Thunderbolt 3 bridge logic, and a PCI express slot. I agree with Linus that the #1 area Razer could improve in the future, beyond generally getting the price down, is to use fewer and larger fans that run quieter.</p>\n</li>\n<li>\n<p>If you're putting a heavy hitter GPU in the Razer Core, I'd try to avoid blower style cards (the ones that exhaust heat from the rear) in favor of those that cool with large fans blowing down and around the card. Dissipating 150w+ is no mean feat and you'll definitely need to keep the enclosure in open air … and of course within 0.5 meters of the computer it's connected to.</p>\n</li>\n<li>\n<p>There is no visible external power switch on the Razer Core. It doesn't power on until you connect a TB3 cable to it. I was totally not expecting that. But once connected, it powers up and the Windows 10 Thunderbolt 3 drivers kick in and ask you to authorize the device, which I did (always authorize). Then it spun a bit, detected the new GPU, and suddenly I had multiple graphics card active on the same computer. I also installed the latest Nvidia drivers just to make sure everything was ship shape.</p>\n</li>\n<li>\n<p>It's kinda ... <em>weird</em> having multiple GPUs simultaneously active. I wanted to make the Razer Core display the only display, but you can't really turn off the built in GPU – you can select \"only use display 2\", that's all. I got into several weird states where windows were opening on the other display and I had to mess around a fair bit to get things locked down to just one display. You may want to consider whether you have both \"displays\" connected for troubleshooting, or not.</p>\n</li>\n</ul>\n<p>And then, there I am, playing Lego Marvel in splitscreen co-op at glorious 3840 × 2160 UltraHD resolution on an amazing OLED display with my son. It is <em>incredible</em>.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/lego-marvel-4k.jpg\" alt=\"\"></p>\n<p>Beyond the technical \"because I could\", I am <strong>wildly optimistic about the future of external Thunderbolt 3 expansion boxes</strong>, and here's why:</p>\n<ul>\n<li>\n<p>The main expense and bottleneck in any stonking gaming rig is, by <em>far</em>, the GPU. It's also the item you are most likely to need to replace a year or two from now.</p>\n</li>\n<li>\n<p>The CPU and memory speeds available today are so comically fast that any device with a low-end i3-7100 for $120 will make zero difference in real world gaming at 1080p or higher … if you're OK with 30fps minimum. If you bump up to $200, you can get a quad-core i5-7500 that guarantees you 60fps minimum everywhere.</p>\n</li>\n<li>\n<p>If you prefer a small system or a laptop, an external GPU makes it so much more flexible. Because CPU and memory speeds are already so fast, 99.9% of the time your bottleneck is the GPU, and almost <strong>any small device you can buy with a Thunderbolt 3 port can now magically transform into a potent gaming rig with a single plug</strong>. Thunderbolt 3 may be a bit cutting edge today, but more and more devices are shipping with Thunderbolt 3. Within a few years, I predict TB3 ports will be as common as USB3 ports.</p>\n</li>\n<li>\n<p>A general purpose external PCI express enclosure will be usable for a very long time. My last <em>seven</em> video card upgrades were plug and play PCI Express cards that would have worked fine in any computer I've built in the last ten years.</p>\n</li>\n<li>\n<p>External GPUs are not meaningfully bottlenecked by Thunderbolt 3 bandwidth; the impact is 15%  to 25%, and perhaps even less over time as drivers and implementations mature. While Thunderbolt 3 has \"only\" PCI Express x4 bandwidth, many benchmarkers have noted that GPUs moving from PCI Express x16 to x8 has <a href=\"https://www.pugetsystems.com/labs/articles/Impact-of-PCI-E-Speed-on-Gaming-Performance-518/\">almost no effect on performance</a>. And there's always Thunderbolt 4 on the horizon.</p>\n</li>\n</ul>\n<p>The future, as they say, is already here – it's just not evenly distributed.</p>\n<p>I am painfully aware that <strong>costs need to come down</strong>. Way, <em>way</em> down. The <a href=\"https://www.razerzone.com/store/razer-core\">$499 Razer Core</a> is well made, on the vanguard of what's possible, a harbinger of the future, and fantastically enough, it does <em>even more</em> than what it says on the tin. But it's not exactly <em>affordable</em>.</p>\n<p>I would absolutely love to see a modest, dedicated $200 external Thunderbolt 3 box that included an inexpensive current-gen GPU. This would <em>clobber</em> any onboard GPU on the planet. Let's compare my Skull Canyon NUC, which has Intel's <a href=\"http://www.notebookcheck.net/Intel-Iris-Pro-Graphics-580.160664.0.html\">fastest ever, PS4 class embedded GPU</a>, with the modest $150 <a href=\"http://www.notebookcheck.com/NVIDIA-GeForce-GTX-1050-Ti-Desktop.181030.0.html\">GeForce GTX 1050 Ti</a>:</p>\n<table width=\"300px\">\n<tr>\n<td colspan=\"2\"><b>1920 × 1080 high detail</b></td>\n</tr>\n<tr>\n<td>Bioshock Infinite</td>\n<td>15 → 79 fps</td>\n</tr>\n<tr>\n<td>Rise of the Tomb Raider</td>\n<td>12 → 49 fps</td>\n</tr>\n<tr>\n<td>Overwatch</td>\n<td>43 → 114 fps</td>\n</tr>\n</table>\n<p>As predicted, that's a 3x-5x stompdown. Mac users lamenting their general lack of upgradeability, hear me: <em>this sort of box is exactly what you want and need</em>. Imagine if Apple was to embrace upgrading their laptops and all-in-one systems via Thunderbolt 3.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/razer-core-and-razer-laptop.jpg\" alt=\"\"></p>\n<p>I know, I know. It's a stretch. But a man can dream … of externally upgradeable GPUs. That are too expensive, sure, but they are here, right now, today. They'll only get cheaper over time.</p>\n<table><tr><td class=\"welovecodinghorror\">  \n[advertisement] <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">Find a better job the Stack Overflow way</a> - what you need when you need it, no spam, and no scams.\n</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2017-03-24 09:08:37","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Password Rules Are Bullshit","pubDate":"2017-03-10 11:16:26","link":"https://blog.codinghorror.com/password-rules-are-bullshit/","guid":"5988f60721f57d0019a2e128","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2017/03/password_strength.png","description":"<div class=\"kg-card-markdown\">\n<p>Of the many, many, <em>many</em> <a href=\"https://blog.codinghorror.com/the-dirty-truth-about-web-passwords/\">bad things about passwords</a>, you know what the worst is? Password rules.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">If we don't solve the password problem for users in my lifetime I am gonna haunt you from beyond the grave as a ghost <a href=\"http://t.co/Tf9EnwgoZv\">pic.twitter.com/Tf9EnwgoZv</a></p>— Jeff Atwood</blockquote>\n</div>","content":"<div class=\"kg-card-markdown\">\n<p>Of the many, many, <em>many</em> <a href=\"https://blog.codinghorror.com/the-dirty-truth-about-web-passwords/\">bad things about passwords</a>, you know what the worst is? Password rules.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\">If we don't solve the password problem for users in my lifetime I am gonna haunt you from beyond the grave as a ghost <a href=\"http://t.co/Tf9EnwgoZv\">pic.twitter.com/Tf9EnwgoZv</a></p>— Jeff Atwood (@codinghorror) <a href=\"https://twitter.com/codinghorror/status/631238409269309440\">August 11, 2015</a>\n</blockquote>\n<p>Let this pledge be duly noted on the permanent record of the Internet. I don't know if there's an afterlife, but I'll be finding out soon enough, and I plan to go out <em>mad as hell</em>.</p>\n<p>The world is absolutely awash in terrible password rules:</p>\n<ul>\n<li><a href=\"https://github.com/duffn/dumb-password-rules\">Dumb Password Rules</a></li>\n<li><a href=\"http://badpasswordpolicies.tumblr.com/\">Bad Password Policies</a></li>\n<li><a href=\"http://password-shaming.tumblr.com/\">Password Requirements Shaming</a></li>\n</ul>\n<p>But I don't need to tell you this. The more likely you are to use a truly random password generation tool, like us über-geeks are supposed to, the more likely you have suffered mightily – and daily – under this regime.</p>\n<p>Have you seen the classic XKCD <a href=\"https://xkcd.com/936/\">about passwords</a>?</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/password_strength.png\" alt=\"To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize.\"></p>\n<p>We <a href=\"https://security.stackexchange.com/questions/6095/xkcd-936-short-complex-password-or-long-dictionary-passphrase\">can certainly debate</a> whether \"correct horse battery staple\" is a viable password strategy or not, but the argument here is mostly that <em>length matters</em>.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/twss.jpg\" alt=\"That's What She Said\"></p>\n<p>No, seriously, it does. I'll go so far as to say <a href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\">your password is too damn short</a>. These days, given the state of cloud computing and GPU password hash cracking, any password of 8 characters or less is perilously close to <em>no password at all</em>.</p>\n<p>So then perhaps we have one rule, that <strong>passwords must not be short</strong>. A long password is much more likely to be secure than a short one … right?</p>\n<p>What about this four character password?</p>\n<h1>✅🐎🔋🖇️</h1>\n<p>What about this eight character password?</p>\n<h1>正确马电池订书钉</h1>\n<p>Or this (hypothetical, but all too real) seven character password?</p>\n<h1>ش导พิ한<img src=\"https://blog.codinghorror.com/content/images/2017/06/klingon-char.png\" width=\"35\" height=\"42\" alt=\"\">✌︎🚖</h1>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n<p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/codinghorror\">@codinghorror</a> I'm sorry but your password must contain 1 char each from: Arabic, Chinese, Thai, Korean, Klingon, Wingdings and an emoji</p>— Finley Creative (@FinleyCreative) <a href=\"https://twitter.com/FinleyCreative/status/705349059217784833\">March 3, 2016</a>\n</blockquote>\n<p>You may also be surprised, if you paste the above four Unicode emojis into your favorite login dialog (go ahead – try it), to discover that it … <em>isn't</em> in fact four characters.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/discourse-login-emoji-password.png\" alt=\"\"></p>\n<p>Oh dear.</p>\n<pre><code>\"💩\".length === 2\n</code></pre>\n<p>Our old pal Unicode <a href=\"http://blog.jonnew.com/posts/poo-dot-length-equals-two\">strikes again</a>.</p>\n<p>As it turns out, even the simple rule that \"your password must be of reasonable length\" … ain't necessarily so. Particularly if we stop thinking like <a href=\"https://blog.codinghorror.com/the-ugly-american-programmer/\">Ugly ASCII Americans</a>.</p>\n<p>And what of those nice, long passwords? Are they <em>always</em> secure?</p>\n<pre><code>aaaaaaaaaaaaaaaaaaa\n0123456789012345689\npasswordpassword\nusernamepassword\n</code></pre>\n<p>Of course not, because <em>have you met any users lately?</em></p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/incorrect-password.jpg\" alt='I changed all my passwords to \"incorrect\"'></p>\n<p>They consistently ruin every piece of software I've ever written. Yes, yes, I know you, Mr. or Ms. über-geek, know <em>all</em> about the concept of entropy. But expressing your love of entropy as terrible, idiosyncratic password rules …</p>\n<ul>\n<li>must contain uppercase</li>\n<li>must contain lowercase</li>\n<li>must contain a number</li>\n<li>must contain a special character</li>\n</ul>\n<p>… is a spectacular failure of imagination in a world of Unicode and Emoji.</p>\n<p>As we built <a href=\"https://discourse.org/\">Discourse</a>, I discovered that <a href=\"https://blog.codinghorror.com/the-god-login/\">the login dialog was a remarkably complex piece of software</a>, despite its surface simplicity. The primary password rule we used was also the simplest one: <strong>length</strong>. Since I wrote that, we've already increased our minimum password default length from 8 to 10 characters. And if you happen to be an admin or moderator, we decided the minimum has to be even more, <strong>15</strong> characters.</p>\n<p>I also advocated <strong>checking passwords against the 100,000 most common passwords</strong>. If you look at <a href=\"https://blog.keepersecurity.com/2017/01/13/most-common-passwords-of-2016-research-study/\">10 million passwords from data breaches in 2016</a>, you'll find the top 25 most used passwords are:</p>\n<table width=\"320px\"><tr>\n<td>\n<code>123456</code><br><code>123456789</code><br><code>qwerty</code><br><code>12345678</code><br><code>111111</code><br><code>1234567890</code><br><code>1234567</code><br><code>password</code><br><code>123123</code><br><code>987654321</code><br><code>qwertyuiop</code><br><code>mynoob</code><br>\n</td>\n<td>\n<code>123321</code><br><code>666666</code><br><code>18atcskd2w</code><br><code>7777777</code><br><code>1q2w3e4r</code><br><code>654321</code><br><code>555555</code><br><code>3rjs1la7qe</code><br><code>google</code><br><code>1q2w3e4r5t</code><br><code>123qwe</code><br><code>zxcvbnm</code><br><code>1q2w3e</code><br>\n</td>\n</tr></table>\n<p>Even this data betrays some ASCII-centrism. The numbers are the same in any culture I suppose, but I find it hard to believe the average Chinese person will ever choose the passwords \"password\", \"quertyuiop\", or \"mynoob\". So this list <em>has</em> to be customizable, localizable.</p>\n<p>(One interesting idea is to search for common shorter password matches inside longer passwords, but I think this would cause too many false positives.)</p>\n<p>If you examine the data, this also turns into an argument in favor of password length. Note that only 5 of the top 25 passwords are 10 characters, so if we require 10 character passwords, we've already reduced our exposure to the most common passwords by 80%. I saw this originally when I <a href=\"https://github.com/danielmiessler/SecLists/tree/master/Passwords\">gathered millions and millions of leaked passwords for Discourse research</a>, then filtered the list down to just those passwords reflecting our new minimum requirement of 10 characters or more.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/top-million-common-passwords-by-length.png\" alt=\"\"></p>\n<p>It suddenly became a <em>tiny</em> list. (If you've done similar common password research, please do share your results in the comments.)</p>\n<p>I'd like to offer the following common sense advice to my fellow developers:</p>\n<h4>1. Password rules are bullshit</h4>\n<ul>\n<li>They don't work.</li>\n<li>They heavily penalize your ideal audience, people that use real random password generators. Hey guess what, that password randomly <em>didn't</em> have a number or symbol in it. I just double checked my math textbook, and yep, it's possible. I'm pretty sure.</li>\n<li>They frustrate average users, who then become uncooperative and use \"creative\" workarounds that make their passwords <em>less</em> secure.</li>\n<li>They are often wrong, in the sense that the rules chosen are grossly incomplete and/or insane, per the many shaming links I've shared above.</li>\n<li>Seriously, for the <em>love of God</em>, stop with this arbitrary password rule nonsense already. If you won't take my word for it, read <a href=\"https://nakedsecurity.sophos.com/2016/08/18/nists-new-password-rules-what-you-need-to-know/\">this 2016 NIST password rules recommendation</a>. It's right there, \"no composition rules\". However, I do see one error, it should have said \"no <em>bullshit</em> composition rules\".</li>\n</ul>\n<h4>2. Enforce a minimum <em>Unicode</em> password length</h4>\n<p>One rule is at least easy to remember, understand, and enforce. This is the proverbial one rule to bring them all, and in the darkness bind them.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/03/one-donut-to-bind-them-all.jpg\" alt=\"\"></p>\n<ul>\n<li>It's simple. Users can count. Most of them, anyway.</li>\n<li>It works. The data <em>shows us</em> it works; just download any common password list of your choice and group by password length.</li>\n<li>The math doesn't lie. All other things being equal, a longer password <em>will</em> be more random – and thus more secure – than a short password.</li>\n<li>Accept that even this one rule isn't inviolate. A minimum password length of 6 on a Chinese site <em>might</em> be perfectly reasonable. A 20 character password <em>can</em> be ridiculously insecure.</li>\n<li>If you don't allow (almost) every single unicode character in the password input field, you are probably doing it wrong.</li>\n<li>It's a bit of an implementation detail, but make sure <em>maximum</em> password length is reasonable as well.</li>\n</ul>\n<h4>3. Check for common passwords</h4>\n<p>As I've already noted, the definition of \"common\" depends on your audience, and language, but it is a terrible disservice to users when you let them choose passwords that exist in the list of 10k, 100k, or million most common known passwords from data breaches. There's <em>no question</em> that a hacker will submit these common passwords in a hack attempt – and it's shocking how far you can get, even with aggressive password attempt rate limiting, using <a href=\"https://xato.net/10-000-top-passwords-6d6380716fe0\">just the 1,000 most common passwords</a>.</p>\n<ul>\n<li>1.6% have a password from the top 10 passwords</li>\n<li>4.4% have a password from the top 100 passwords</li>\n<li>9.7% have a password from the top 500 passwords</li>\n<li>13.2% have a password from the top 1,000 passwords</li>\n<li>30% have a password from the top 10,000 passwords</li>\n</ul>\n<p>Lucky you, there are millions and millions of real breached password lists out there to sift through. It is sort of fun to do data forensics, because these aren't hypothetical synthetic Jack the Ripper password rules some bored programmer dreamed up, these are <em>real</em> passwords used by <em>real</em> users.</p>\n<p>Do the research. Collect the data. Protect your users from themselves.</p>\n<h4>4. Check for basic entropy</h4>\n<p>No need to get fancy here; pick the measure of entropy that satisfies you deep in the truthiness of your gut. But remember you have to be able to <em>explain</em> it to users when they fail the check, too.</p>\n<p><a href=\"http://www.digifail.com/software/spectra.shtml\"><img src=\"https://blog.codinghorror.com/content/images/2017/03/entropy2.png\" alt=\"entropy visualized\"></a></p>\n<p>I had a bit of a sad when I realized that we  were perfectly fine with users selecting a 10 character password that was literally \"aaaaaaaaaa\". In my opinion, the simplest way to do this is to ensure that there are at least (x) unique characters out of (y) total characters. And that's what we do as of the current beta version of Discourse. But I'd love your ideas in the comments, too. The simpler and clearer the better!</p>\n<h4>5. Check for special case passwords</h4>\n<p>I'm embarrassed to admit that when building the Discourse login, <a href=\"https://blog.codinghorror.com/the-god-login/\">as I discussed in The God Login</a>, we missed two common cases that you really <em>have</em> to block:</p>\n<ul>\n<li>password equal to username</li>\n<li>password equal to email address</li>\n</ul>\n<p>🤦 If you are using Discourse versions earlier than 1.4, I'm so sorry and <em>please upgrade immediately</em>.</p>\n<p>Similarly, you might also want to block other special cases like</p>\n<ul>\n<li>password equal to URL or domain of website</li>\n<li>password equal to app name</li>\n</ul>\n<p>In short, try to think outside the password input box, like a user would.</p>\n<blockquote>\n<p>🔔 <strong>Clarification</strong></p>\n<p>A few people have interpreted this post as \"all the <em>other</em> password rules are bullshit, except these four I will now list.\" That's not what I'm trying to say here.</p>\n<p>The idea is to focus on the one understandable, simple, practical, works-in-real-life-in-every-situation rule: <strong>length</strong>. Users can enter (almost) anything, in proper Unicode, <em>provided it's long enough</em>. That's the <strong>one rule to bind them all</strong> that we need to teach users: length!</p>\n<p>Items #3 through #5 are more like genie-special-exception checks, a <a href=\"https://www.youtube.com/watch?v=Bwic3hJ4q1A\">you can't wish for infinite wishes</a> kind of thing. It doesn't need to be discussed up front because it <em>should</em> be really rare. Yes, you must stop users from having comically bad passwords that equal their username, or <code>aaaaaaaaaaa</code> or <code>0123456789</code>, but only as post-entry checks, not as rules that need to be explained in advance.</p>\n<p>So TL;DR: one rule. Length. Enter whatever you want, just make sure it's long enough to be a reasonable password.</p>\n</blockquote>\n<table><tr><td class=\"welovecodinghorror\">\n[advertisement] Building out your tech team? <a href=\"http://careers.stackoverflow.com/products\" rel=\"nofollow\">Stack Overflow Careers</a> helps you hire from the largest community for programmers on the planet. We built our site with developers like you in mind.\n</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2017-03-10 11:16:26","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"I'm Loyal to Nothing Except the Dream","pubDate":"2017-01-30 09:19:56","link":"https://blog.codinghorror.com/im-loyal-to-nothing-except-the-dream/","guid":"5988f60721f57d0019a2e127","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2017/01/voting-in-2016-presidential-election.png","description":"<div class=\"kg-card-markdown\"><p>There is much I take for granted in my life, and the normal functioning of American government is one of those things. In my 46 years, I've lived under nine different presidents. The first I remember is Carter. I've voted in every presidential election since 1992, but I do not</p></div>","content":"<div class=\"kg-card-markdown\">\n<p>There is much I take for granted in my life, and the normal functioning of American government is one of those things. In my 46 years, I've lived under nine different presidents. The first I remember is Carter. I've voted in every presidential election since 1992, but I do not consider myself a Democrat, or a Republican. I vote based on leadership – above all, leadership – and issues.</p>\n<p>In my 14 years of blogging, I've never written a political blog post. I haven't needed to.</p>\n<p>Until now.</p>\n<p>It is quite clear <strong>something has become deeply unglued in the state of American politics.</strong></p>\n<ul>\n<li>\n<p>The nuclear doomsday clock was <a href=\"http://www.reuters.com/article/us-science-doomsdayclock-idUSKBN15A2JJ\">just moved as close to midnight</a> as it has been in 64 years.</p>\n</li>\n<li>\n<p>America was downgraded from a <a href=\"http://www.cnbc.com/2017/01/25/us-is-no-longer-a-full-democracy-eiu-warns.html\">Democracy to a Flawed Democracy</a>.</p>\n</li>\n</ul>\n<p>As of 2017, the United States, through a sequence of highly improbable events, managed to elect an extremely controversial president.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/voting-in-2016-presidential-election.png\" alt=\"\"></p>\n<p>A president with <a href=\"http://fortune.com/2017/01/29/donald-trump-approval-rating-gallup/\">historically low approval ratings</a>, elected on a platform many considered <a href=\"https://www.theguardian.com/technology/2016/oct/31/peter-thiel-defends-donald-trump-muslim-ban-mexico-wall\">too extreme to even be taken literally</a>:</p>\n<blockquote>\n<p>Asked about Trump’s statements proposing the construction of a wall on the US-Mexico border and a ban on all Muslims entering the country, Thiel suggested that Trump supporters do not actually endorse those policies.</p>\n<p>“I don’t support a religious test. I certainly don’t support the specific language that Trump has used in every instance,” he said. “But I think one thing that should be distinguished here is that the media is always taking Trump literally. It never takes him seriously, but it always takes him literally.”</p>\n<p>The billionaire went on to define how he believes the average Trump supporter interprets the candidate’s statements. “I think a lot of voters who vote for Trump take Trump seriously but not literally, so when they hear things like the Muslim comment or the wall comment their question is not, ‘Are you going to build a wall like the Great Wall of China?’ or, you know, ‘How exactly are you going to enforce these tests?’ What they hear is we’re going to have a saner, more sensible immigration policy.”</p>\n</blockquote>\n<p>A little over a week into the new presidency, it is obvious that <strong>Trump meant every word of what he said.</strong> He will <a href=\"https://www.nytimes.com/2017/01/26/world/mexicos-president-cancels-meeting-with-trump-over-wall.html\">build a US-Mexico wall</a>. And he signed an executive order that <em>literally</em>, not figuratively, <a href=\"http://www.cnn.com/2017/01/28/politics/donald-trump-executive-order-immigration-reaction/\">banned Muslims from entering the US</a> — even if they held valid green cards.</p>\n<p>As I said, I vote on policies, and <strong>as an American, I reject these two policies.</strong> Our Mexican neighbors are not an evil to be kept out with a wall, but an ally to be cherished. One of my <a href=\"https://en.wikipedia.org/wiki/Miguel_de_Icaza\">favorite people</a> is a Mexican immigrant. Mexican culture is ingrained deeply into America and we are all better for it. The history of America is the history of immigrants seeking religious freedom from persecution, finding a new life in the land of opportunity. Imagine the bravery it takes to leave everything behind, your relatives, your home, your <em>whole life as you know it</em>, to take your entire family on a five thousand mile journey to another country on nothing more than the promise of a dream. I've never done that, though my great-great grandparents did. Muslim immigrants are <a href=\"https://www.buzzfeed.com/sarahmathews/how-to-get-your-green-card-in-america?utm_term=.lsbOAjkpl#.vjXYP1qbQ\">more American than I will ever be</a>, and I am incredibly proud to have them here, as fellow Americans.</p>\n<p><a href=\"http://www.snopes.com/superman-1950-poster-diversity/\"><img src=\"https://blog.codinghorror.com/content/images/2017/01/help-keep-your-school-all-american.jpg\" alt=\"Help Keep Your School All American!\"></a></p>\n<p>Trump is the first president in 40 years to <a href=\"http://money.cnn.com/2017/01/23/news/economy/donald-trump-tax-returns/\">refuse to release</a> his tax returns in office. He has also refused to <a href=\"http://www.npr.org/sections/thetwo-way/2017/01/12/509421108/u-s-ethics-official-trumps-divestiture-is-hard-pricy-and-essential\">divest himself</a> from his dizzying array of businesses across the globe, which present financial conflicts of interest. All of this, plus the hasty way he is ramrodding his campaign plans through on executive orders, with little or no forethought to how it would work – or if it would work at all – speaks to <strong>how negligent and dangerous Trump is as the leader of the free world.</strong> I want to reiterate that I don't care about party; I'd be absolutely over the moon with President Romney or President McCain, or any other rational form of leadership at this point.</p>\n<p>It is unclear to me how we got where we are today. But echoes of this appeal to nationalism <a href=\"https://www.washingtonpost.com/world/europe/in-poland-a-window-on-what-happens-when-populists-come-to-power/2016/12/18/083577e8-c203-11e6-92e8-c07f4f671da4_story.html?utm_term=.31b3ca7bd3e6\">in Poland</a>, and <a href=\"https://www.washingtonpost.com/posteverything/wp/2017/01/27/in-venezuela-we-couldnt-stop-chavez-dont-make-the-same-mistakes-we-did/?utm_term=.b8a94d3760b2\">in Venezula</a>, offer clues. We brought <a href=\"https://bbs.boingboing.net/t/when-youre-accustomed-to-privilege-equality-feels-like-oppression/81995\">fact checkers to a culture war</a> … and we lost. During the election campaign, I was strongly reminded of Frank Miller's 1986 Nuke story arc, which I read in Daredevil as a teenager — the seductive appeal of unbridled nationalism bleeding across the page in stark primary colors.</p>\n<p><a href=\"https://www.amazon.com/dp/0785134816/?tag=codihorr-20\"><img src=\"https://blog.codinghorror.com/content/images/2017/01/daredevil-233-page.png\" alt=\"Daredevil issue 233, page excerpt\"></a></p>\n<p>Nuke is a self-destructive form of <a href=\"https://library.ucsd.edu/dc/search?f%5Bcollection_sim%5D%5B%5D=Dr.+Seuss+Political+Cartoons&amp;f%5Bobject_type_sim%5D%5B%5D=image&amp;f%5Bsubject_topic_sim%5D%5B%5D=War+and+domestic+issues--America+first\">America First nationalism</a> that, for whatever reasons, won the presidency through dark subvocalized whispers, and is now playing out in horrifying policy form. But we are not now a different country; we remain <em>the very same country that elected Reagan and Obama.</em> We lead the free world. And we do it by taking the higher moral ground, choosing to do what is <em>right</em> before doing what is expedient.</p>\n\n<p>I exercised my rights as a American citizen and I voted, yes. But <strong>I mostly ignored government beyond voting</strong>. I assumed that the wheels of American government would turn, and reasonable decisions would be made by reasonable people. Some I would agree with, others I would not agree with, but I could generally trust that the arc of American history inexorably bends toward justice, towards freedom, toward equality. Towards the things that make up the underlying American dream that this country is based on.</p>\n<p>This is no longer the case.</p>\n<p>I truly believe we are at an unprecedented time in American history, in uncharted territory. I have benefited from democracy passively, without trying at all, for 46 years. I now understand that the next four years is perhaps <a href=\"http://fusion.net/story/379938/comic-trump-election-protest-civil-rights-movement-memphis/\">the most important time to be an activist in the United States since the civil rights movement</a>. <strong>I am ready to do the work.</strong></p>\n<ul>\n<li>\n<p>I have never once in my life called my representatives in congress. That will change. I will be calling and writing my representatives regularly, using <a href=\"https://5calls.org/\"><strong>tools like 5 Calls</strong></a> to do so.</p>\n</li>\n<li>\n<p>I will strongly support, advocate for, and advertise any technical tools on web or smartphone that help Americans have their voices heard by their representatives, even if it takes faxing to do so. Build these tools. <em>Make them amazing</em>.</p>\n</li>\n<li>\n<p>I am subscribing to support essential investigative journalism such as the <a href=\"https://www.nytimes.com/subscriptions/Multiproduct/lp8HYKU.html\">New York Times</a>, <a href=\"https://myaccount2.latimes.com/dsssubscribe.aspx\">Los Angeles Times</a>, and <a href=\"https://subscribe.washingtonpost.com/\">Washington Post</a>.</p>\n</li>\n<li>\n<p>I have set up large monthly donations to the <a href=\"https://www.aclu.org/\">ACLU</a> which is doing critical work in fighting governmental abuse under the current regime.</p>\n</li>\n<li>\n<p>I have set up monthly donations to independent journalism such as <a href=\"https://www.propublica.org/donate/\">ProPublica</a> and <a href=\"http://www.npr.org/stations/\">NPR</a>.</p>\n</li>\n<li>\n<p>I have set up monthly donations to agencies that fight for vulnerable groups, such as <a href=\"https://www.plannedparenthood.org/\">Planned Parenthood</a>, <a href=\"https://www.reproductiverights.org/\">Center for Reproductive Rights</a>, <a href=\"https://refugeerights.org/\">Refugee Rights</a>, <a href=\"http://www.naacp.org/\">NAACP</a>, <a href=\"http://www.maldef.org/\">MALDEF</a>, <a href=\"http://www.thetrevorproject.org/\">the Trevor Project</a>, and so on.</p>\n</li>\n<li>\n<p>I wish to see the formation of a third political party in the United States, led by those who are willing to speak truth to power like <a href=\"https://www.evanmcmullin.com/\">Evan McMullin</a>. It is shameful how many elected representatives will not speak out. Those who do: trust me, we're watching and taking notes. And we will be bringing all our friends and audiences to bear to help you win.</p>\n</li>\n<li>\n<p>I will be watching closely to see which representatives rubber-stamp harmful policies and appointees, and I will vote against them across the ticket, on every single ticket I can vote on.</p>\n</li>\n<li>\n<p>I will actively support all efforts to make the <a href=\"https://en.wikipedia.org/wiki/National_Popular_Vote_Interstate_Compact\">National Popular Vote Interstate Compact</a> happen, to reform the electoral college.</p>\n</li>\n<li>\n<p>To the extent that my schedule allows, I will participate in protests to combat policies that I believe are harmful to Americans.</p>\n</li>\n<li>\n<p>I am not quite at a place in my life where I'd consider running for office, but I will be, eventually. To the extent that <a href=\"https://stackoverflow.blog/2010/12/stack-exchange-moderator-elections-begin/\">any Stack Overflow user can be elected a moderator</a>, I could be elected into office, locally, in the house, even the senate. Has anyone asked Joel Spolsky if he'd be willing to run for office? Because I'd be hard pressed to come up with someone I trust more than my old business partner Joel to do the right thing. I would vote for him so hard I'd break the damn voting machine.</p>\n</li>\n</ul>\n<p>I want to pay back this great country for everything it has done for me in my life, and carry the dream forward, not just selfishly for myself and my children, but for everyone's children, and our children's children. I do not mean <a href=\"http://progressive.org/dispatches/howard-zinn-s-july-4-wisdom-stands-test-time/\">the hollow promises of American nationalism</a> …</p>\n<blockquote>\n<p>We would do well to renounce nationalism and all its symbols: its flags, its pledges of allegiance, its anthems, its insistence in song that God must single out America to be blessed.</p>\n<p>Is not nationalism—that devotion to a flag, an anthem, a boundary so fierce it engenders mass murder—one of the great evils of our time, along with racism, along with religious hatred?</p>\n<p>These ways of thinking—cultivated, nurtured, indoctrinated from childhood on— have been useful to those in power, and deadly for those out of power.</p>\n</blockquote>\n<p>… but the enduring values of freedom, justice, and equality that this nation was founded on. <strong>I pledge my allegiance to the American dream, and the American people</strong> – not to the nation, <em>never</em> to the nation.</p>\n<p><a href=\"https://www.amazon.com/dp/0785134816/?tag=codihorr-20\"><img src=\"https://blog.codinghorror.com/content/images/2017/01/daredevil-233-page-loyal-to-nothing-except-the-dream.png\" alt=\"Daredevil issue 233, page excerpt\"></a></p>\n<p>I apologize that it's taken me 46 years to wake up and realize that some things, like the American dream, aren't guaranteed. There will come a time where you <em>have</em> to stand up and fight for them, for democracy to work. I will.</p>\n<p>Will you?</p>\n<table><tr><td class=\"welovecodinghorror\">\n[advertisement] At Stack Overflow, we help developers learn, share, and grow. Whether you’re looking for your next dream job or looking to build out your team, <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">we've got your back</a>.\n</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2017-01-30 09:19:56","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"An Inferno on the Head of a Pin","pubDate":"2017-01-17 11:37:18","link":"https://blog.codinghorror.com/an-inferno-on-the-head-of-a-pin/","guid":"5988f60721f57d0019a2e126","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2017/01/intel-pentium-66.jpg","description":"<div class=\"kg-card-markdown\">\n<p>Today's processors contain <a href=\"https://blog.codinghorror.com/moores-law-in-practical-terms/\">billions of</a> heat-generating transistors in an ever shrinking space. The power budget might go from:</p>\n<ul>\n<li>1000 watts on a specialized server</li>\n<li>100 watts on desktops</li>\n<li>30 watts on laptops</li>\n<li>5 watts on tablets</li>\n<li>1 or 2 watts on a phone</li>\n<li>100 milliwatts on an <a href=\"http://www.anandtech.com/show/8702/ingenic-launches-newton2-mips-based-iot-and-wearables-solution\">embedded system</a>\n</li>\n</ul>\n<p>That's</p>\n</div>","content":"<div class=\"kg-card-markdown\">\n<p>Today's processors contain <a href=\"https://blog.codinghorror.com/moores-law-in-practical-terms/\">billions of</a> heat-generating transistors in an ever shrinking space. The power budget might go from:</p>\n<ul>\n<li>1000 watts on a specialized server</li>\n<li>100 watts on desktops</li>\n<li>30 watts on laptops</li>\n<li>5 watts on tablets</li>\n<li>1 or 2 watts on a phone</li>\n<li>100 milliwatts on an <a href=\"http://www.anandtech.com/show/8702/ingenic-launches-newton2-mips-based-iot-and-wearables-solution\">embedded system</a>\n</li>\n</ul>\n<p>That's <s>three</s> four orders of magnitude. Modern CPU design is <strong>the delicate art of placing an inferno on the head of a pin.</strong></p>\n<p>Look at the original 1993 Pentium compared to the 20th anniversary Pentium:</p>\n<table cellpadding=\"4\" cellspacing=\"4\" class=\"reformat-mobile\">\n<tr>\n<td>\n<img src=\"https://blog.codinghorror.com/content/images/2017/01/intel-pentium-66.jpg\" width=\"260px\" alt=\"Intel Pentium 66\">\n</td>\n<td>\n1993<br>\nPentium<br>\n66 Mhz<br>\n16kb L1<br><b>3.2 million</b> transistors<br>\n</td>\n</tr>\n<tr>\n<td>\n<img src=\"https://blog.codinghorror.com/content/images/2017/01/intel-pentium-g2358-20th-anniversary.jpg\" width=\"260px\" alt=\"Intel Pentium G3258 20th Anniversary Edition\">\n</td>\n<td>\n2014<br>\nPentium G3258<br>\n3.2 Ghz × 2 cores<br>\n128kb L1, 512kb L2, 3MB L3<br><b>1.4 billion</b> transistors\n</td>\n</tr>\n</table>\n<p>I remember cooling the early CPUs with simple heatsinks; no fan. Those days are long gone.</p>\n<p>A roomy desktop computer affords cooling opportunities (and thus a watt budget) that a laptop or tablet could only dream of. How often will you be at peak load? For most computers, the answer is \"rarely\". The smaller the space, the higher the required performance, the more … challenging your situation gets.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/challenge-accepted-barney.gif\" alt=\"\"></p>\n<p>Sometimes, <a href=\"https://blog.codinghorror.com/to-ecc-or-not-to-ecc/\">I build servers</a>.</p>\n<blockquote>\n<p>Inspired by Google and their use of cheap, commodity x86 hardware to scale on top of the open source Linux OS, I also <a href=\"http://blog.codinghorror.com/building-servers-for-fun-and-prof-ok-maybe-just-for-fun/\">built our own servers</a>. When I get stressed out, when I feel the world weighing heavy on my shoulders and I don't know where to turn … <em>I build servers</em>. It's therapeutic. \n</p>\n</blockquote>\n<p>Servers are one of those situations where you <em>may</em> be at full CPU load more often than not. I prefer to build <a href=\"http://www.computerhope.com/jargon/num/1u.htm\">1U servers</a> which is the smallest rack mountable unit, at 1.75\" total height.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/1u-servers.jpg\" alt=\"\"></p>\n<p>You get plenty of cores on a die these days,  so I build single CPU servers. One reason is price; the other reason is that clock speed declines proportionally to the number of cores on a die (this is for the Broadwell Xeon V4 series):</p>\n<table>\n<tr>\n<td></td>\n<td>cores</td>\n<td>GHz</td>\n<td></td>\n</tr>\n<tr>\n<td>E5-1630</td>\n<td>4</td>\n<td>3.7</td>\n<td>$406</td>\n</tr>\n<tr>\n<td>E5-1650</td>\n<td>6</td>\n<td>3.6</td>\n<td>$617</td>\n</tr>\n<tr>\n<td>E5-1680</td>\n<td>8</td>\n<td>3.4</td>\n<td>$1723</td>\n</tr>\n<tr>\n<td>E5-2680</td>\n<td>12</td>\n<td>2.4</td>\n<td>$1745</td>\n</tr>\n<tr>\n<td>E5-2690</td>\n<td>14</td>\n<td>2.6</td>\n<td>$2090</td>\n</tr>\n<tr>\n<td>E5-2697</td>\n<td>18</td>\n<td>2.3</td>\n<td>$2702</td>\n</tr>\n</table>\n<p>Yes, there are server CPUs with even more cores, but if you have to ask how much they cost, you <em>definitely</em> can't afford them … and they're clocked even slower. <a href=\"https://discourse.org/\">What we do</a> is serviced better by a smaller number of super fast cores than a larger number of slow cores, anyway.</p>\n<p>With that in mind, consider these two Intel Xeon server CPUs:</p>\n<ul>\n<li>\n<a href=\"http://ark.intel.com/products/82764/Intel-Xeon-Processor-E5-1630-v3-10M-Cache-3_70-GHz\">E5-1630 V3</a> (4 core, 3.7 - 3.8 Ghz)</li>\n<li>\n<a href=\"http://ark.intel.com/products/82765/Intel-Xeon-Processor-E5-1650-v3-15M-Cache-3_50-GHz\">E5-1650 V3</a> (6 core, 3.5 - 3.8 Ghz)</li>\n</ul>\n<p>As you can see from the official Intel product pages for each processor, they both have a TDP heat budget of <strong>140 watts</strong>. I'm scanning the specs, thinking maybe this is an OK tradeoff.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/thought-bubble-more-cores.png\" alt=\"\"></p>\n<p>Unfortunately, here's what I actually measured with <a href=\"https://blog.codinghorror.com/why-estimate-when-you-can-measure/\">my trusty Kill-a-Watt</a> for each server build as I performed <a href=\"https://blog.codinghorror.com/is-your-computer-stable/\">my standard stability testing</a>, with completely identical parts except for the CPU:</p>\n<ul>\n<li>E5-1630: 40w idle, 170w mprime</li>\n<li>E5-1650: 55w idle, <strong>250w</strong> mprime</li>\n</ul>\n<p>I am here to tell you that Intel's TDP figure of 140 watts for the 6 core version of this CPU is a <em>terrible, scurrilous lie!</em></p>\n<p>This caused a bit of a problem for me as our standard 1U server build now <strong>overheats, alarms, and throttles with the 6 core CPU</strong> — whereas the 4 core CPU was just fine. Hey Intel! From my home in California, <a href=\"https://www.penny-arcade.com/comic/2002/07/22\">I stab at thee!</a></p>\n<p>But, you know..</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/challenge-accepted.gif\" alt=\"\"></p>\n<h4>Better Heatsink</h4>\n<p>The 1.75\" maximum height of the 1U server form factor doesn't leave a lot of room for creative cooling of a CPU. But you <em>can</em> switch from an Aluminum cooler to a Copper one.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/1u-heatsink-copper-vs-alu.jpg\" alt=\"\"></p>\n<p>Copper is significantly more expensive, plus heavier and harder to work with, so it's generally easier to throw an ever-larger mass of aluminum at the cooling problem when you can. But when space is a constraint, as it is with a 1U server, copper dissipates more heat <a href=\"http://www.ecnmag.com/article/2010/04/comparing-impact-different-heat-sink-materials-cooling-performance\">in the same form factor</a>.</p>\n<p>The famous \"Ninja\" CPU cooler <a href=\"http://www.silentpcreview.com/article805-page2.html\">came in identical copper and aluminum versions</a> so we can compare apples to apples:</p>\n<ul>\n<li>Aluminum Ninja — 24C rise over ambient</li>\n<li>Copper Ninja — 17C rise over ambient</li>\n</ul>\n<p>You can scale the load and the resulting watts of heat by spinning up MPrime threads for the exact number of cores you want to \"activate\", so that's how I tested:</p>\n<ul>\n<li>Aluminum heatsink — stable at 170w (mprime threads=4), but heat warnings with 190w (mprime threads=5)</li>\n<li>Copper heatsink — stable at 190w (mprime threads=5) but heat warnings with 230w (mprime threads=6)</li>\n</ul>\n<p>Each run has to be overnight to be considered successful.  This helped, noticeably. But we need more.</p>\n<h4>Better Thermal Interface</h4>\n<p>When it comes to server builds, I stick with the pre-applied grey thermal interface pad that comes on the heatsinks. But out of boredom and a desire to experiment, I …</p>\n<ul>\n<li>Removed the copper heatsink.</li>\n<li>Used isopropyl alcohol to clean both CPU and heatsink.</li>\n<li>Applied fancy \"Ceramique\" thermal compound I have on hand, <a href=\"https://www.pugetsystems.com/labs/articles/Thermal-Paste-Application-Techniques-170/\">using an X shape pattern</a>.</li>\n</ul>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/applying-thermal-paste.jpg\" alt=\"\"></p>\n<p>I wasn't expecting any change at all, but to my surprise with the new TIM applied <strong>it took 5x longer to reach throttle temps</strong> with mprime threads=6. Before, it would thermally throttle within a minute of launching the test, and after it took ~10 minutes to reach that same throttle temp. The difference was noticeable.</p>\n<p>That's a surprisingly good outcome, and it tells us the default grey goop that comes pre-installed on heatsinks is ... not great. Per <a href=\"http://skinneelabs.com/2011-thermal-paste-review-comparison/3/\">this 2011 test</a>, the difference between worst and best thermal compounds is 4.3°C.</p>\n<p>But as Dan once bravely noted <a href=\"http://www.dansdata.com/goop.htm\">while testing Vegemite as a thermal interface material</a>:</p>\n<blockquote>\n<p>If your PC's so marginal that a CPU running three or four degrees Celsius warmer will crash it [or, for modern CPUs, cause the processor to auto-throttle itself and substantially reduce system performance], the solution is not to try to edge away from the precipice with better thermal compound. It's to make a big change to the cooling system, or just lower the darn clock speed.</p>\n</blockquote>\n<p>An improved thermal interface just gets you there <em>faster</em> (or slower); it doesn't address the underlying problem. So we're not done here.</p>\n<h4>Ducted Airflow</h4>\n<p>Most, but not all, of the SuperMicro cases I've used have included a basic fan duct / shroud that lays across the central fans and the system. Given that the case fans are pretty much directly in front of the CPU anyway, I've included the shroud in the builds out of a sense of completeness more than any conviction that it was doing anything for the cooling performance.</p>\n<p>This particular server case, though, did <em>not</em> include a fan duct. I didn't think much about it at the time, but considering the heat stress this 6-core CPU and its 250 watt heat generation was putting on our 1U build, I decided I should build a quick duct out of card stock and test it out.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/server-duct-testing.jpg\" alt=\"\"></p>\n<p>(I know, I know, it's a super janky duct! But I was prototyping!)</p>\n<p>Sure enough, this duct, combined with the previous heatsink and TIM changes, enabled the server to <strong>remain stable overnight with a full MPrime run of 12 threads.</strong></p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2017/01/chuck_norris_approves.gif\" alt=\"\"></p>\n<p>I think we've certainly demonstrated the surprising (to me, at least) value of fan shrouds. But before we get too excited, let's consider one last thing.</p>\n<h4>Define \"CPU Load\"</h4>\n<p>Sometimes you get so involved with solving the problem at hand that you forget to consider whether you are, in fact, solving the <em>right</em> problem.</p>\n<p>In these tests, we defined 100% CPU load using MPrime. Some people claim MPrime is more of a <a href=\"https://en.wikipedia.org/wiki/Power_virus\">power virus</a> than a real load test, because it exerts so much heat pressure on the CPUs. I initially dismissed these claims since I've used MPrime (and its Windows cousin, Prime95) for almost 20 years to test CPU stability, and it's never let me down.</p>\n<p>But I <a href=\"http://www.overclock.net/t/1510388/haswell-e-overclock-leaderboard-owners-club/2390#post_22900116\">did more research</a> and I found that MPrime, since 2011, uses <strong>AVX2</strong> instructions extensively on newer Intel CPUs:</p>\n<blockquote>\n<p>The newer versions of Prime load in a way that they are only safe to run at near stock settings. The server processors actually downclock when AVX2 is detected to retain their TDP rating. On the desktop we're free to play and the thing most people don't know is how much current these routines can generate. It can be lethal for a CPU to see that level of current for prolonged periods.</p>\n<p>…</p>\n<p>That's why most stress test programs alternate between different data pattern types. Depending on how effective the rotation is, and how well that pattern causes issues for the system timing margin, it will, or will not, catch potential for instability. So it's wise not to hang one's hat on a single test type.</p>\n</blockquote>\n<p>This explains why I saw such a large discrepancy between other CPU load programs like BurnP6 and MPrime.</p>\n<p>MPrime does an amazing job of generating the type of CPU load that causes maximum heat pressure. But unless your servers regularly chew through <a href=\"http://superuser.com/questions/981466/in-prime95-why-do-small-ffts-generate-the-most-heat-despite-cpu-at-100-for-al/981477#981477\">zillions of especially power-hungry AVX2 instructions</a> this may be completely unrepresentative of any real world load your server would <em>actually see</em>.</p>\n<h4>Your Own Personal Inferno</h4>\n<p>Was this overkill? Probably. Even with the aluminum heatsink, no change to thermal interface material, and zero ducting, we'd probably see no throttling under normal use in our server rack. But I wanted to be <em>sure</em>. Completely sure.</p>\n<p>Is this extreme? Putting 140 TDP of CPU heat in a 1U server? Not really. Nick at Stack Overflow told me they just put two 22 core, 145W TDP Xeon 2699v4 CPUs <em>and</em> four 300W TDP GPUs in a single Dell C4130 1U server. I'd sure hate to be in the room when those fans spin up. I'm also a little afraid to find out what happens if you run MPrime plus full GPU load on that box.</p>\n<p>Servers are an admittedly rare example of big CPU performance heat and size tradeoffs, one of the few left. It is fun to play at the extremes, but the SoC inside your phone makes the same tradeoffs on a smaller scale. <strong>Tiny infernos in our pockets</strong>, each and every one.</p>\n<table><tr><td class=\"welovecodinghorror\">[advertisement] At Stack Overflow, we put developers first. We already help you find answers to your tough coding questions; now let us help you <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">find your next job</a>.</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2017-01-17 11:37:18","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Let's Encrypt Everything","pubDate":"2016-11-23 00:03:31","link":"https://blog.codinghorror.com/lets-encrypt-everything/","guid":"5988f60721f57d0019a2e125","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2016/11/lets-encrypt-security-details.png","description":"<div class=\"kg-card-markdown\">\n<p>I'll admit <a href=\"https://blog.codinghorror.com/should-all-web-traffic-be-encrypted/\">I was late</a> to the HTTPS party.</p>\n<p><a href=\"https://letsencrypt.org/\"><img src=\"https://blog.codinghorror.com/content/images/2016/11/lets-encrypt-security-details.png\" alt=\"\"></a></p>\n<p>But post Snowden, and particularly after the result of the last election here in the US, it's clear that <strong>everything on the web should be encrypted by default</strong>.</p>\n<p>Why?</p>\n<ol start=\"0\"><li>\n<p>You have <a href=\"https://blog.codinghorror.com/an-inalienable-right-to-privacy/\">an unalienable right to privacy</a>, both in the real world</p>\n</li></ol>\n</div>","content":"<div class=\"kg-card-markdown\">\n<p>I'll admit <a href=\"https://blog.codinghorror.com/should-all-web-traffic-be-encrypted/\">I was late</a> to the HTTPS party.</p>\n<p><a href=\"https://letsencrypt.org/\"><img src=\"https://blog.codinghorror.com/content/images/2016/11/lets-encrypt-security-details.png\" alt=\"\"></a></p>\n<p>But post Snowden, and particularly after the result of the last election here in the US, it's clear that <strong>everything on the web should be encrypted by default</strong>.</p>\n<p>Why?</p>\n<ol start=\"0\">\n<li>\n<p>You have <a href=\"https://blog.codinghorror.com/an-inalienable-right-to-privacy/\">an unalienable right to privacy</a>, both in the real world and online. And <strong>without HTTPS you have zero online privacy</strong> – from anyone else on your WiFi, from your network provider, from website operators, from large companies, from the government.</p>\n</li>\n<li>\n<p><strong>The performance penalty of HTTPS is gone</strong>, in fact, HTTPS arguably <a href=\"http://blog.httpwatch.com/2015/01/16/a-simple-performance-comparison-of-https-spdy-and-http2/\">performs <em>better</em> than HTTP on modern devices</a>.</p>\n</li>\n<li>\n<p><strong>Using HTTPS means nobody can tamper with the content in your web browser.</strong> This was a bit of an abstract concern five years ago, but these days, there are more and more instances of upstream providers actively mucking with the data that passes through their pipes. For example, if Comcast detects you have a copyright strike, they'll <a href=\"http://arstechnica.com/tech-policy/2013/02/heres-what-an-actual-six-strikes-copyright-alert-looks-like/\">insert banners into your web content</a> … <em>all</em> your web content! And that's what the good guy scenario looks like – or at least a corporation trying to follow the rules. Imagine what it looks like when someone, or some large company, decides the rules don't apply to them?</p>\n</li>\n</ol>\n<p>So, how do you as an end user \"use\" encryption on the web? Mostly, you lobby for the websites you use regularly to adopt it. And it's working. In the last year, the use of HTTPS by default on websites <a href=\"https://snyk.io/blog/https-breaking-through/\">has doubled</a>.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/https-share-top-500k-sites.png\" alt=\"\"></p>\n<p>Browsers can help, too. By January 2017, Google Chrome will show this alert in the UI when a login or credit card form is displayed on an unencrypted connection:</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/chrome-insecure.jpg\" alt=\"\"></p>\n<p>Additionally, Google is throwing their considerable weight behind this effort by <a href=\"https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html\">ranking non-encrypted websites lower in search results</a>.</p>\n<p>But there's another essential part required for encryption to work on <em>any</em> websites – <strong>the HTTPS certificate</strong>. Historically these certificates have been <a href=\"https://blog.codinghorror.com/digital-certificates-do-they-work/\">issued by certificate authorities</a>, and they were at least $30 per year per website, sometimes hundreds of dollars per year. Without that required cash each year, without the SSL certificate that you must re-purchase every year in perpetuity – you can't encrypt <em>anything</em>.</p>\n<p>That is, until <a href=\"https://letsencrypt.org/\">Let's Encrypt</a> arrived on the scene.</p>\n<p><a href=\"https://letsencrypt.org/\"><img src=\"https://blog.codinghorror.com/content/images/2016/11/lets-encrypt-banner.jpg\" alt=\"\"></a></p>\n<p>Let's Encrypt is a 501.3(c)(3) non-profit organization supported by the Linux Foundation. They've been in beta for about a year now, and to my knowledge they are the only reliable, official free source of SSL certificates that has ever existed.</p>\n<p>However, <strong>because Let's Encrypt is a non-profit organization</strong>, not owned by any company that must make a profit from each SSL certificate they issue, they <a href=\"https://www.generosity.com/community-fundraising/make-a-more-secure-web-with-let-s-encrypt\">need our support</a>:</p>\n\n<p>As a company, we've donated a <a href=\"https://community.letsencrypt.org/\">Discourse hosted support community</a>, and a cash amount that represents how much we would have paid in a year to one of the existing for-profit certificate authorities to set up HTTPS for all the <a href=\"https://discourse.org/\">Discourse</a> websites we host.</p>\n<p>I urge you to do the same:</p>\n<ul>\n<li>\n<p>Estimate how much you would have paid for any free SSL certificates you obtained from Let's Encrypt, and <a href=\"https://letsencrypt.org/donate/\">please donate that amount</a> to Let's Encrypt.</p>\n</li>\n<li>\n<p>If you work for a large company, urge them to <a href=\"https://letsencrypt.org/become-a-sponsor/\">sponsor Let's Encrypt</a> as a fundamental cornerstone of a safe web.</p>\n</li>\n</ul>\n<p>If you believe in an unalienable right to privacy on the Internet for every citizen in every nation, <em>please</em> support Let's Encrypt.</p>\n<table><tr><td class=\"welovecodinghorror\">\n[advertisement] <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">Find a better job the Stack Overflow way</a> - what you need when you need it, no spam, and no scams.\n</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2016-11-23 00:03:31","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"Your Digital Pinball Machine","pubDate":"2016-11-02 20:01:47","link":"https://blog.codinghorror.com/your-digital-pinball-machine/","guid":"5988f60721f57d0019a2e124","author":"Jeff Atwood","thumbnail":"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-screens.jpg","description":"<div class=\"kg-card-markdown\">\n<p>I've had something of an obsession with digital pinball for <a href=\"https://blog.codinghorror.com/pc-pinball-sims/\">years</a> now. That recently culminated in me buying <a href=\"http://virtuapin.net/index.php?main_page=product_info&amp;products_id=92\">a Virtuapin Mini</a>.</p>\n<p><a href=\"http://virtuapin.net/index.php?main_page=product_info&amp;products_id=92\"><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-screens.jpg\" alt=\"\"></a></p>\n<p>OK, yes, it's an extravagance. There's no question. But in my defense, it is a minor extravagance relative to a real pinball machine.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-vs-real-pinball.jpg\" alt=\"\"></p>\n<p>The mini is much smaller than</p>\n</div>","content":"<div class=\"kg-card-markdown\">\n<p>I've had something of an obsession with digital pinball for <a href=\"https://blog.codinghorror.com/pc-pinball-sims/\">years</a> now. That recently culminated in me buying <a href=\"http://virtuapin.net/index.php?main_page=product_info&amp;products_id=92\">a Virtuapin Mini</a>.</p>\n<p><a href=\"http://virtuapin.net/index.php?main_page=product_info&amp;products_id=92\"><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-screens.jpg\" alt=\"\"></a></p>\n<p>OK, yes, it's an extravagance. There's no question. But in my defense, it is a minor extravagance relative to a real pinball machine.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-vs-real-pinball.jpg\" alt=\"\"></p>\n<p>The mini is much smaller than a normal pinball machine, so it's easier to move around, takes up less space, and is less expensive. Plus <strong>you can emulate every pinball machine, ever!</strong> The <a href=\"http://virtuapin.net/index.php?main_page=product_info&amp;products_id=92\">Virtuapin Mini</a> is a custom $3k build centered around three screens:</p>\n<ul>\n<li>27\" main playfield (HDMI)</li>\n<li>23\" backglass (DVI)</li>\n<li>8\" digital matrix (USB LCD)</li>\n</ul>\n<p>Most of the magic is in those screens, and whether the pinball sim in question allows you to arrange the three screens in its advanced settings, usually by enabling a \"cabinet\" mode.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-three-monitors-size-and-position.png\" alt=\"\"></p>\n<p>Let me give you an internal tour. Open the front coin door and detach the two internal nuts for the front bolts, which are finger tight. Then remove the metal lockdown bar and slide the tempered glass out.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-lockdown-bar.jpg\" alt=\"\"></p>\n<p>The most uniquely pinball item in the case is right at the front. This <a href=\"http://virtuapin.net/index.php?main_page=product_info&amp;cPath=8&amp;products_id=105\">Digital Plunger Kit</a> connects the 8 buttons (2 on each side, 3 on the front, 1 on the bottom) and includes an <strong>analog tilt sensor</strong> and <strong>analog plunger sensor</strong>. All of which shows up as a standard game controller in Windows.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-control-board-1.jpg\" alt=\"\"></p>\n<p>On the left front side, the audio amplifier and left buttons.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-left-front.jpg\" alt=\"\"></p>\n<p>On the right front side, the digital plunger and right buttons.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-right-front.jpg\" alt=\"\"></p>\n<p>The 27\" playfield monitor is mounted using a clever rod assembly to the standard VESA mount on the back, so we can easily rotate it up to work on the inside as needed.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-monitor-raised.jpg\" alt=\"\"></p>\n<p>To remove the playfield, disconnect the power cord and the HDMI connector. Then lift it up and out, and you now have complete access to the interior.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-interior.jpg\" alt=\"\"></p>\n<p>Notice the large down-firing subwoofer mounted in the middle of the body, as well as the ventilation holes. The PC \"case\" is just a back panel, and the power strip is <a href=\"https://www.amazon.com/dp/B000P1QJXQ/?tag=codihorr-20\">the Smart Strip kind</a> where it auto-powers everything based on the PC being powered on or off. The actual power switch is on the bottom front right of the case.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-backglass-speakers.jpg\" alt=\"\"></p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtuapin-mini-playfield.jpg\" alt=\"\"></p>\n<p>Powering it up and getting all three screens configured in the pinball sim of your choice results in … <em>magic</em>.</p>\n\n<p>It is a <strong>thoroughly professional build</strong>, as you'd expect from a company that has been building these pinball rigs for the last decade. It uses real wood (not MDF), tempered glass, and authentic metal pinball parts throughout.</p>\n<p>I was truly impressed by the build quality of this machine. Paul of Virtuapin said they're on roughly version four of the machine and it shows. It's over 100 pounds fully assembled and arrives on a shipping pallet. I can only imagine how heavy the full size version would be!</p>\n<p>That said, I do have some tweaks I recommend:</p>\n<ul>\n<li>\n<p><strong>Make <em>absolutely sure</em> you get <a href=\"https://blog.codinghorror.com/the-ips-lcd-revolution/\">an IPS panel</a> as your 27\" playfield monitor</strong>. As arrived, mine had a TN panel and while it was playable if you stood directly in front of the machine, playfield visibility was pretty dire outside that narrow range. I dropped in the <a href=\"https://www.amazon.com/dp/B00KYCSRSG/?tag=codihorr-20\">BenQ GW2765HT</a> to replace the GL2760H that was in there, and I was golden. If you plan to order, I would definitely talk to Paul at VirtuaPin and specify that you want this IPS display even if it costs a little more. The 23\" backglass monitor is also TN but the viewing angles are reasonable-ish in that orientation and the backglass is mostly for decoration anyway.</p>\n</li>\n<li>\n<p>The improved display has a 1440p resolution compared to the 1080p originally shipped, so you might want to upgrade from the GeForce 750 Ti video card to the <a href=\"https://www.amazon.com/dp/B01MF7EQJZ/?tag=codihorr-20\">just-released 1050 Ti</a>. This is not strictly required, as I found the 750 Ti an excellent performer even at the higher resolution, but I plan to play only fully 3D pinball sims and the 1050 Ti <a href=\"http://www.pcworld.com/article/3134528/components-graphics/nvidia-geforce-gtx-1050-and-gtx-1050-ti-review-the-new-budget-gaming-champions.html\">gets excellent reviews</a> for $140, so I went for it.</p>\n</li>\n<li>\n<p>Internally everything is exceptionally well laid out, the only very minor improvement I'd recommend is connecting the rear exhaust fan to the motherboard header so its fan speed can be dynamically controlled by the computer rather than being at full power all the time.</p>\n</li>\n<li>\n<p>On the <a href=\"http://virtuapin.net/index.php?main_page=product_info&amp;products_id=92\">Virtuapin website order form</a> the PC they provide sounds quite outdated, but don't sweat it: I picked the lowest options thinking I would have to replace it all, and they shipped me a Haswell based quad-core PC with 8GB RAM and a 256GB SSD, even though those options weren't even on the order form.</p>\n</li>\n</ul>\n<p>I realize $3k (plus palletized shipping) is a lot of money, but I estimate it would cost you at <em>least</em> $1500 in parts to build this machine, plus a month of personal labor. Provided you get the IPS playfield monitor, this is a solidly constructed \"real\" pinball machine, and if you're into digital pinball like I am, it's an absolute <em>joy</em> to play and a good deal for what you actually get. As Ferris Bueller once said:</p>\n\n<p>If you'd like to experiment with this and don't have three grand burning a hole in your pocket, 90% of digital pinball simulation is <strong>a widescreen display in portrait mode</strong>. Rotate one of your monitors, add another monitor if you're feeling extra fancy, and give it a go.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/pinball-with-rotated-monitor.jpg\" alt=\"\"></p>\n<p>As for software, most people talk about <a href=\"https://en.wikipedia.org/wiki/Visual_Pinball\">Visual Pinball</a> for these machines, and it works. But the combination of janky hacked-together 2D bitmap technology used in the gameplay, and the fact that all those designs are ripoffs that pay nothing in licensing back to the original pinball manufacturers really bothers me.</p>\n<p>I prefer <a href=\"http://store.steampowered.com/app/238260/\">Pinball Arcade</a> in DirectX 11 mode, which is <a href=\"https://imgur.com/a/vPQvh\">downright beautiful</a>, easily (and legally!) obtainable via Steam and offers a stable of 60+ incredible officially licensed classic pinball tables to choose from, all meticulously recreated in high resolution 3D with excellent physics.</p>\n<p><a href=\"https://imgur.com/a/vPQvh\"><img src=\"https://blog.codinghorror.com/content/images/2016/11/visual-pinball-dx9-vs-dx11.jpg\" alt=\"\"></a></p>\n<p>As for getting pinball simulations running on your three monitor setup, if you're lucky the game will have a <strong>cabinet mode</strong> you can turn on. Unfortunately, this can be weird due to … licensing issues. Apparently building a pinball sim on the computer requires entirely different licensing than placing it inside a full-blown pinball cabinet.</p>\n<p><a href=\"http://store.steampowered.com/app/238260/\"><strong>Pinball Arcade</strong></a> has a <a href=\"http://pinballarcadefans.com/showthread.php/10199-DOWNLOAD-Pinball-Arcade-Free-Camera-Mod\">nifty camera hack</a> someone built that lets you position three cameras as needed to get the three displays. You will also need the excellent <a href=\"http://www.x360ce.com/\">x360ce program</a> to dynamically map joystick events and buttons to a simulated Xbox 360 controller.</p>\n<p><a href=\"http://store.steampowered.com/app/226980/\"><strong>Pinball FX2</strong></a> added a cabinet mode about a year ago, but turning it on requires a special code and you have to send them a picture of your cabinet (!) to get that code. I did, and the cabinet mode works great; just enter your code, specify the coordinates of each screen in the settings and you are good to go. While these tables definitely have arcadey physics, I find them great fun and there are a ton to choose from.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/virtapin-mini-portal-2.JPG\" alt=\"\"></p>\n<p><a href=\"http://store.steampowered.com/app/287900/\"><strong>Pro Pinball Timeshock Ultra</strong></a> is unique because it's originally from 1997 and was one of the first \"simulation\" level pinball games. The current rebooted version is still pre-rendered graphics rather than 3D, but the client downloads the necessary gigabytes of pre-rendered content at your exact screen resolution and it looks amazing.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/pro-pinball-timeshock-ultra-4k-1.jpg\" alt=\"\"></p>\n<p>Timeshock has explicit cabinet support in the settings and via command line tweaks. Also, in cabinet mode, when choosing table view, you want the bottom left one. Trust me on this! It supports maximum height for portrait cabinet mode.</p>\n<p><img src=\"https://blog.codinghorror.com/content/images/2016/11/pro-pinball-timeshock-best-cabinet-view.jpg\" alt=\"\"></p>\n<p>Position each window as necessary, then enable fullscreen for each one and it'll snap to the monitor you placed it on. It's \"only\" one table, but arguably the most classic of all pinball sims. I sincerely hope they continue to reboot the rest of the Pro Pinball series, including Big Race USA which is my favorite.</p>\n<p>I've always loved pinball machines, even though they struggled to keep up with digital arcade games. In some ways I view my current project, <a href=\"https://discourse.org/\">Discourse</a>, as a similarly analog experience attempting to bridge the gap to the modern digital world:</p>\n<blockquote>\n<p>The fantastic 60 minute documentary <a href=\"http://www.tilt-movie.com/\">Tilt: The Battle to Save Pinball</a> has so many parallels with what we're trying to do for forum software.</p>\n</blockquote>\n\n<blockquote>\n<p>Pinball is threatened by Video Games, in the same way that Forums are threatened by Facebook and Twitter and Tumblr and Snapchat. They're considered old and archaic technology. They've stopped being sexy and interesting relative to what else is available.</p>\n<p>Pinball was forced to reinvent itself several times throughout the years, from mechanical, to solid state, to computerized. And the defining characteristic of each \"era\" of pinball is that the new tables, once you played them, made all the previous pinball games seem immediately obsolete because of all the new technology.</p>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Pinball_2000\">Pinball 2000</a> project was an attempt to invent the next generation of pinball machines:</p>\n</blockquote>\n\n<blockquote>\n<blockquote>\n<p>It wasn't a new feature, a new hardware set, it was everything new. We have to get everything right. We thought that we had reinvented the wheel. And in many respects, we had.</p>\n</blockquote>\n<p>This is exactly what we want to do with <a href=\"https://discourse.org/\">Discourse</a> – build a forum experience so advanced that playing will make all previous forum software seem immediately obsolete.</p>\n<p>Discourse aims to save forums and make them relevant and useful to a whole new generation.</p>\n</blockquote>\n<p>So if I seem a little more nostalgic than most about pinball, perhaps a little <em>too</em> nostalgic at times, <a href=\"https://blog.codinghorror.com/the-only-truly-failed-project/\">maybe that's why</a>.</p>\n<table><tr><td class=\"welovecodinghorror\">\n[advertisement] Building out your tech team? <a href=\"http://careers.stackoverflow.com/products\" rel=\"nofollow\">Stack Overflow Careers</a> helps you hire from the largest community for programmers on the planet. We built our site with developers like you in mind.\n</td></tr></table>\n</div>","enclosure":{},"categories":[],"color":"#555","category":"Coding Horror","date":"2016-11-02 20:01:47","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"},{"title":"The ‘Capable Web’: A 10 Year Retrospective","pubDate":"2018-09-04 17:47:00","link":"http://blog.chromium.org/2018/09/the-capable-web-10-year-retrospective.html","guid":"tag:blogger.com,1999:blog-2471378914199150966.post-3266026029210949977","author":"Chrome Blog","thumbnail":"https://img.youtube.com/vi/CvKHIVFI2w8/default.jpg","description":"\n<div dir=\"ltr\">\n<span>When we </span><a href=\"http://www.scottmccloud.com/googlechrome/\"><span>introduced Chrome</span></a><span> in 2008, our goal was to “keep evolving with the web and continuing to build a solid foundation for modern web applications.” In honor of our tenth year, we’d like to highlight some of the major changes in the web’s rich capabilities that we feel lucky to share with other browser vendors.</span>\n</div>\n<b><span><br></span></b><br><div dir=\"ltr\"><span><span>As the very first pages were served on the open web in </span><a href=\"http://info.cern.ch/hypertext/WWW/TheProject.html\"><span>1990</span></a><span>, people recognized that the ability to deliver dynamic content would make the web unique—you could provide information and function just by sharing a URL. The </span><a href=\"https://en.wikipedia.org/wiki/Common_Gateway_Interface\"><span>Common Gateway Interface</span></a><span> standard released in 1993 defined a simple interface for web servers to run code in response to web requests. It brought a new era of experience and capability to computing, accessible at the click of a link. Hop forward two short years to JavaScript, then another year to frames, specifically the &lt;iframe&gt; tag. These innovations let developers dynamically load content into pages, brought a new level of interactivity to the web, and increased user expectations of what could be done in the browser. </span></span></div>\n<span><br></span><br><div dir=\"ltr\"><span><span>Accessibility, linkability, indexability, and universal reach have always been the web’s core strengths. Alongside these super powers, users want ever richer and more-engaging experiences. “</span><a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"><span>Ajax</span></a><span>” was coined in 2005 to describe the combination of asynchronous JavaScript and XML, which shaped a more interactive, modern web. It led to the creation of such services as Google Maps, cementing the web as the best way to deliver experiences available to anyone, on any device.</span></span></div>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2><br></h2>\n<h2><br></h2>\n<h2>2008 – 2014: Web applications, HTML5, and the start of the mobile era</h2>\n<div>\n<div dir=\"ltr\"><span><span><span>Chrome saw huge progress in its early years, with a large number of what are now considered “core APIs” coming to the web after the WebKit implementation. The </span><a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/video.html#video\"><span>video</span></a><span>, </span><a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/video.html#audio\"><span>audio</span></a><span>, and </span><a href=\"https://www.w3.org/TR/2dcontext/\"><span>canvas</span></a><span> elements were some of the first “modern web” features that many of us distinctly remember (and who can forget border-radius?). These features brought a new level of interaction to web experiences, and meant developers no longer needed plugins such as Adobe Flash or Java, to build interactive media and graphical experiences. </span><a href=\"https://experiments.withgoogle.com/collection/chrome\"><span>Chrome experiments</span></a><span> have captured great examples of rich experiences that are a direct result of the web’s improved performance.</span></span></span></div>\n<span><span><span></span></span></span><br><div dir=\"ltr\">\n<span><span><span>The “Mobile Web” really hit the world in 2010, and we saw a slew of new platform primitives introduced for the platform (many inspired directly by </span><a href=\"https://web.archive.org/web/20090317170140/http://code.google.com/apis/gears/\"><span>Google Gears</span></a><span>) to help make building web apps easier. We could now make responsive, offline-enabled applications with </span><a href=\"https://www.html5rocks.com/tutorials/appcache/beginner/\"><span>AppCache</span></a><span> and </span><a href=\"https://www.w3.org/TR/webdatabase/\"><span>WebSQL</span></a><span>, request permission to access the user's </span><a href=\"https://w3c.github.io/geolocation-api/\"><span>geolocation</span></a><span>, and even understand the </span><a href=\"https://w3c.github.io/deviceorientation/\"><span>orientation</span></a><span> of the user’s device.</span></span></span><br><span><span><a href=\"https://www.html5rocks.com/en/tutorials/websockets/basics/\">WebSocket</a> landed on the platform the same year, heralding a change in the types of experiences developers could deliver on the web. No longer did they have to use long polling to enable a bi-directional channel between the user and a service; developers now had a two-way channel with a simple API to provide real-time communication. </span></span><br><span><span><br></span></span><br><div>\n<div class=\"separator\"><br></div>\n<div class=\"separator\"><br></div>\n<div></div>\n<div><i>Plink is an interactive music experiment synchronising player state via websockets.</i></div>\n</div>\n<div dir=\"ltr\">\n<div><span><br></span></div>\n<span><span><br></span></span><span><span>Four major APIs came to Chrome in 2011. </span><a href=\"https://www.html5rocks.com/en/tutorials/webgl/webgl_fundamentals/\"><span>WebGL</span></a><span>, </span><a href=\"https://www.html5rocks.com/en/tutorials/webaudio/intro/\"><span>Web Audio</span></a><span>, and the </span><a href=\"https://developers.google.com/web/updates/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API\"><span>Fullscreen API</span></a><span> let us build rich and immersive experiences that could take advantage of the entire screen. </span><a href=\"https://w3c.github.io/IndexedDB/\"><span>IndexedDB</span></a><span> — a new “web-first” storage mechanism — us store and query serializable JavaScript objects such as Strings, Objects, Arrays, Files, and Blobs more effectively.</span></span>\n</div>\n<div dir=\"ltr\">\n<br><div class=\"separator\"></div>\n</div>\n<div><i>Chrome Web Lab was an experiment that bridged the physical and digital worlds. It used  Web Socket, video, real-time streaming, WebGL, and Web Audio to create an immersive world.</i></div>\n<br><div><span><br></span></div>\n<span>A bumper year for game-changing experiences on the web arrived in 2012. On the back of </span><a href=\"https://www.khronos.org/webgl/\"><span>WebGL</span></a><span> and </span><a href=\"https://fullscreen.spec.whatwg.org/\"><span>Fullscreen</span></a><span>, the </span><a href=\"https://www.w3.org/TR/pointerlock/\"><span>Pointer Lock</span></a><span> and </span><a href=\"https://w3c.github.io/gamepad/\"><span>Gamepad</span></a><span> APIs let us build games and other web experiences that felt really interactive. The game-changing collection of </span><a href=\"https://www.html5rocks.com/en/tutorials/webrtc/basics/\"><span>WebRTC</span></a><span> APIs truly set the web apart from all of the other platforms: It let us build P2P video-chat and real-time data sharing, without any plug-ins or proprietary stack, and accessible by simply clicking a link.</span><br><div><br></div>\n</div>\n</div>\n<div>\n<div class=\"separator\"><a href=\"https://4.bp.blogspot.com/-tBC3f-idByE/W45c7rvIOGI/AAAAAAAAA7w/Sb8LjECxadUXmH3WzSdeEle1uklrlhDvgCLcBGAs/s1600/Paul_WebRTC_Screenshot.png\" imageanchor=\"1\"><img border=\"0\" height=\"400\" src=\"https://4.bp.blogspot.com/-tBC3f-idByE/W45c7rvIOGI/AAAAAAAAA7w/Sb8LjECxadUXmH3WzSdeEle1uklrlhDvgCLcBGAs/s400/Paul_WebRTC_Screenshot.png\" width=\"240\"></a></div>\n<div><i>One of the first Chrome on Android to Chrome on Android WebRTC calls (March 2013)</i></div>\n<br><div><span>In just seven years, the web changed drastically. Browsers got significantly faster and more capable, letting developers build richer experiences on the desktop. Users started to consume even more content on mobile, meaning we all had to rethink how our experiences would work across devices and form-factors, even when the user had no connectivity.</span></div>\n<br><div mardir=\"ltr\" margin-bottom:=\"\">\n<div>\n<div margin-bottom:=\"\" margin-top:=\"\">\n<span><span><br></span></span><br><h2><span>2015-2018: PWA, The Extensible Web, and deeper integration era</span></h2>\n<span><span><span>In 2015, we experienced a fundamental change in how we thought about integrating capabilities into the web platform. The </span><a href=\"https://extensiblewebmanifesto.org/\"><span>Extensible Web manifesto</span></a><span> asked browser engineers to consider a layered platform that offered lower-level primitives that were easier to explain, more efficient to implement, and allowed web developers to easily build higher-level abstractions, thus increasing the cadence and availability of compelling new features. </span><a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\"><span>Service Worker</span></a><span> is an example of building on these APIs to follow these principles. Service Worker is a small piece of JavaScript that sits between the browser and the network, and lets the developer decide what to do with any web requests.</span></span></span>\n</div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>The combination of Service Worker and a handful of new APIs allowed marked the beginning of the Progressive Web Apps (PWA) era. PWAs are high-quality sites that combine the reach of the web with the user expectations that come with native platforms. Specifically, PWAs are...</span></span></span></div>\n<ul>\n<li>\n<b>Fast</b>—they load instantly</li>\n<li>\n<b>Reliable</b>—they never show the “<a href=\"https://twitter.com/ChromiumDev/status/966800777338671105\">downasaur</a>,” even in uncertain network conditions, by taking advantage of the Service Worker and Cache APIs</li>\n<span><li>\n<b>Engaging</b>—they respond quickly to user interactions with silky-smooth animations and no janky scrolling</li>\n<li>\n<b>Capable</b>—the sites feel like natural extensions on the device, with immersive user experiences provided by features such as “fullscreen” and standalone mode through Web App Manifest; they deliver capabilities for meeting specific business goals, such as re-engagement through the Add to Homescreen feature and Web Push notifications</li></span>\n</ul>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>As PWAs became more established, so did the capabilities of the platform. The </span><a href=\"https://developers.google.com/web/updates/2015/12/background-sync\"><span>Background Sync API</span></a><span> brought increased opportunities for developers to improve the resilience of their applications. We also got a better understanding of the network capabilities with extensions to the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API\"><span>Network Information API</span></a><span>.</span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><a href=\"https://developers.google.com/web/updates/2016/10/pointer-events\"><span>Pointer Events</span></a><span>, a critical component for any web site or app, came to Chrome after a long wait. Pointer Events presented a unified model for handling all forms of gesture-based input, ranging from touch to pens to mouse pointers.</span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>In 2017, deeper integration of web apps with the host operating system and secure access to devices around the user arrived.. </span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>The </span><a href=\"https://developers.google.com/web/updates/2016/12/imagecapture\"><span>Image Capture</span></a><span> and </span><a href=\"https://developers.google.com/web/updates/2016/10/capture-stream\"><span>Media Capture</span></a><span> APIs provided full-frame access and control over a phone camera, as well as from other input sources such as a canvas. The </span><a href=\"https://developers.google.com/web/updates/2016/09/navigator-share\"><span>Web Share API</span></a><span> let sites share data directly with the operating system’s native sharing systems.</span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>The </span><a href=\"https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\"><span>Web Bluetooth API</span></a><span> let a user securely select a Bluetooth LE device and have a webpage interact with the device. The </span><a href=\"https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web\"><span>Web USB API</span></a><span> enabled the same level of connectivity, but to devices connected to the user's machine. </span></span></span></div>\n<span><span><br><a href=\"https://webassembly.org/\"><span>WebAssembly</span></a><span> (WASM) opens up many possibilities. It brings a runtime that can execute code at near-native performance. Plus, it opens a new world of experiences on the web by letting developers use existing codebases built for other platforms on the web platform.</span></span></span>\n</div>\n<div class=\"separator\"><br></div>\n<br><div><span><span><br></span></span></div>\n<div><br></div>\n<div>\n<span><a href=\"https://webvr.info/\">Web VR</a></span><span> came to the web at roughly the same time it came to native platforms. It let us deliver immersive experiences without installing an app, significantly reducing the gap between a new native primitive arriving on platforms and being available across the web platform.</span>\n</div>\n<div>\n<h2><span><br></span></h2>\n<h2><span><br></span></h2>\n<h2><span><br></span></h2>\n<h2><span>Forward to the future</span></h2>\n<span>We’re excited about the possibilities of the web platform. The web can (and should) be feature-rich, but new capabilities don't always have to be more complex. Web development should be predictable, manageable, and pain-free. Coming APIs such as </span><a href=\"https://developers.google.com/web/updates/2018/06/feature-policy\"><span>Feature Policy</span></a><span> are great examples of additions that will help developers create amazing sites in a more predictable way, and provide more control and customization over the UX of certain browser features. Feature Policy is the browser's built-in guide rails to help web developers avoid common pitfalls and use best practices.</span><span></span><br><span><span><br></span></span><br><div dir=\"ltr\"><span><span><a href=\"https://www.youtube.com/watch?v=dVd8KRLbAx4\"><span>Layered APIs</span></a><span> is another initiative that we're excited about. With it, developers will be able to load and use high-level features shipped directly into the browser as JS modules. For example, instead of building a custom virtualize-scrolling component, developers can just import and use &lt;virtual-scroller&gt; in a site. Layered APIs can be quickly iterated on by the standards bodies and implemented by browser vendors, and will help create a pay-as-you-go standard library for the web. And looking further, the Houdini and Web XR APIs will radically change experiences we can build on and with the web.</span></span></span></div>\n<span><span><br></span></span><br><div class=\"separator\"><span></span></div>\n<span></span><br><div dir=\"ltr\"><span><br></span></div>\n<span><span><br></span></span><br><div dir=\"ltr\"><span><span><span>Over the last 10 years, we’ve seen a massive increase in the rate at which new primitives and capabilities can be introduced to the web. We can thank all the browser vendors for their continued work to create and iterate on specs, using streamlined processes like those defined by the </span><a href=\"https://www.w3.org/community/wicg/\"><span>WICG</span></a><span> and based on the principles in the </span><a href=\"https://extensiblewebmanifesto.org/\"><span>Extensible Web Manifesto</span></a><span>. We’ll continue our commitment to work with browser vendors and the developer ecosystem to prioritize features that users need, and to ensure that those capabilities arrive in a “webby” way. By doing so, we can uphold our original mission, while also prioritizing user safety, discoverability, instant access, and universal reach for everyone on the planet.</span></span></span></div>\n<span><span><br></span></span><br><div dir=\"ltr\">\n<span><span><span>Here’s to the future of an even-more-capable open web.</span></span></span><br><span><span><br></span></span><span><span><span>Posted by Paul Kinlan, the Wizzy Web Warrior.</span></span></span>\n</div>\n<span></span><br><div><span><span><br></span></span></div>\n<span></span>\n</div>\n<div><span><span><br></span></span></div>\n<div><span><span><br></span></span></div>\n</div>\n<div dir=\"ltr\"><span><span><br></span></span></div>\n<div dir=\"ltr\"><span><span><br></span></span></div>\n</div>\n","content":"\n<div dir=\"ltr\">\n<span>When we </span><a href=\"http://www.scottmccloud.com/googlechrome/\"><span>introduced Chrome</span></a><span> in 2008, our goal was to “keep evolving with the web and continuing to build a solid foundation for modern web applications.” In honor of our tenth year, we’d like to highlight some of the major changes in the web’s rich capabilities that we feel lucky to share with other browser vendors.</span>\n</div>\n<b><span><br></span></b><br><div dir=\"ltr\"><span><span>As the very first pages were served on the open web in </span><a href=\"http://info.cern.ch/hypertext/WWW/TheProject.html\"><span>1990</span></a><span>, people recognized that the ability to deliver dynamic content would make the web unique—you could provide information and function just by sharing a URL. The </span><a href=\"https://en.wikipedia.org/wiki/Common_Gateway_Interface\"><span>Common Gateway Interface</span></a><span> standard released in 1993 defined a simple interface for web servers to run code in response to web requests. It brought a new era of experience and capability to computing, accessible at the click of a link. Hop forward two short years to JavaScript, then another year to frames, specifically the &lt;iframe&gt; tag. These innovations let developers dynamically load content into pages, brought a new level of interactivity to the web, and increased user expectations of what could be done in the browser. </span></span></div>\n<span><br></span><br><div dir=\"ltr\"><span><span>Accessibility, linkability, indexability, and universal reach have always been the web’s core strengths. Alongside these super powers, users want ever richer and more-engaging experiences. “</span><a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"><span>Ajax</span></a><span>” was coined in 2005 to describe the combination of asynchronous JavaScript and XML, which shaped a more interactive, modern web. It led to the creation of such services as Google Maps, cementing the web as the best way to deliver experiences available to anyone, on any device.</span></span></div>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2></h2>\n<h2><br></h2>\n<h2><br></h2>\n<h2>2008 – 2014: Web applications, HTML5, and the start of the mobile era</h2>\n<div>\n<div dir=\"ltr\"><span><span><span>Chrome saw huge progress in its early years, with a large number of what are now considered “core APIs” coming to the web after the WebKit implementation. The </span><a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/video.html#video\"><span>video</span></a><span>, </span><a href=\"https://www.w3.org/TR/2011/WD-html5-20110113/video.html#audio\"><span>audio</span></a><span>, and </span><a href=\"https://www.w3.org/TR/2dcontext/\"><span>canvas</span></a><span> elements were some of the first “modern web” features that many of us distinctly remember (and who can forget border-radius?). These features brought a new level of interaction to web experiences, and meant developers no longer needed plugins such as Adobe Flash or Java, to build interactive media and graphical experiences. </span><a href=\"https://experiments.withgoogle.com/collection/chrome\"><span>Chrome experiments</span></a><span> have captured great examples of rich experiences that are a direct result of the web’s improved performance.</span></span></span></div>\n<span><span><span></span></span></span><br><div dir=\"ltr\">\n<span><span><span>The “Mobile Web” really hit the world in 2010, and we saw a slew of new platform primitives introduced for the platform (many inspired directly by </span><a href=\"https://web.archive.org/web/20090317170140/http://code.google.com/apis/gears/\"><span>Google Gears</span></a><span>) to help make building web apps easier. We could now make responsive, offline-enabled applications with </span><a href=\"https://www.html5rocks.com/tutorials/appcache/beginner/\"><span>AppCache</span></a><span> and </span><a href=\"https://www.w3.org/TR/webdatabase/\"><span>WebSQL</span></a><span>, request permission to access the user's </span><a href=\"https://w3c.github.io/geolocation-api/\"><span>geolocation</span></a><span>, and even understand the </span><a href=\"https://w3c.github.io/deviceorientation/\"><span>orientation</span></a><span> of the user’s device.</span></span></span><br><span><span><a href=\"https://www.html5rocks.com/en/tutorials/websockets/basics/\">WebSocket</a> landed on the platform the same year, heralding a change in the types of experiences developers could deliver on the web. No longer did they have to use long polling to enable a bi-directional channel between the user and a service; developers now had a two-way channel with a simple API to provide real-time communication. </span></span><br><span><span><br></span></span><br><div>\n<div class=\"separator\"><br></div>\n<div class=\"separator\"><br></div>\n<div></div>\n<div><i>Plink is an interactive music experiment synchronising player state via websockets.</i></div>\n</div>\n<div dir=\"ltr\">\n<div><span><br></span></div>\n<span><span><br></span></span><span><span>Four major APIs came to Chrome in 2011. </span><a href=\"https://www.html5rocks.com/en/tutorials/webgl/webgl_fundamentals/\"><span>WebGL</span></a><span>, </span><a href=\"https://www.html5rocks.com/en/tutorials/webaudio/intro/\"><span>Web Audio</span></a><span>, and the </span><a href=\"https://developers.google.com/web/updates/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API\"><span>Fullscreen API</span></a><span> let us build rich and immersive experiences that could take advantage of the entire screen. </span><a href=\"https://w3c.github.io/IndexedDB/\"><span>IndexedDB</span></a><span> — a new “web-first” storage mechanism — us store and query serializable JavaScript objects such as Strings, Objects, Arrays, Files, and Blobs more effectively.</span></span>\n</div>\n<div dir=\"ltr\">\n<br><div class=\"separator\"></div>\n</div>\n<div><i>Chrome Web Lab was an experiment that bridged the physical and digital worlds. It used  Web Socket, video, real-time streaming, WebGL, and Web Audio to create an immersive world.</i></div>\n<br><div><span><br></span></div>\n<span>A bumper year for game-changing experiences on the web arrived in 2012. On the back of </span><a href=\"https://www.khronos.org/webgl/\"><span>WebGL</span></a><span> and </span><a href=\"https://fullscreen.spec.whatwg.org/\"><span>Fullscreen</span></a><span>, the </span><a href=\"https://www.w3.org/TR/pointerlock/\"><span>Pointer Lock</span></a><span> and </span><a href=\"https://w3c.github.io/gamepad/\"><span>Gamepad</span></a><span> APIs let us build games and other web experiences that felt really interactive. The game-changing collection of </span><a href=\"https://www.html5rocks.com/en/tutorials/webrtc/basics/\"><span>WebRTC</span></a><span> APIs truly set the web apart from all of the other platforms: It let us build P2P video-chat and real-time data sharing, without any plug-ins or proprietary stack, and accessible by simply clicking a link.</span><br><div><br></div>\n</div>\n</div>\n<div>\n<div class=\"separator\"><a href=\"https://4.bp.blogspot.com/-tBC3f-idByE/W45c7rvIOGI/AAAAAAAAA7w/Sb8LjECxadUXmH3WzSdeEle1uklrlhDvgCLcBGAs/s1600/Paul_WebRTC_Screenshot.png\" imageanchor=\"1\"><img border=\"0\" height=\"400\" src=\"https://4.bp.blogspot.com/-tBC3f-idByE/W45c7rvIOGI/AAAAAAAAA7w/Sb8LjECxadUXmH3WzSdeEle1uklrlhDvgCLcBGAs/s400/Paul_WebRTC_Screenshot.png\" width=\"240\"></a></div>\n<div><i>One of the first Chrome on Android to Chrome on Android WebRTC calls (March 2013)</i></div>\n<br><div><span>In just seven years, the web changed drastically. Browsers got significantly faster and more capable, letting developers build richer experiences on the desktop. Users started to consume even more content on mobile, meaning we all had to rethink how our experiences would work across devices and form-factors, even when the user had no connectivity.</span></div>\n<br><div mardir=\"ltr\" margin-bottom:=\"\">\n<div>\n<div margin-bottom:=\"\" margin-top:=\"\">\n<span><span><br></span></span><br><h2><span>2015-2018: PWA, The Extensible Web, and deeper integration era</span></h2>\n<span><span><span>In 2015, we experienced a fundamental change in how we thought about integrating capabilities into the web platform. The </span><a href=\"https://extensiblewebmanifesto.org/\"><span>Extensible Web manifesto</span></a><span> asked browser engineers to consider a layered platform that offered lower-level primitives that were easier to explain, more efficient to implement, and allowed web developers to easily build higher-level abstractions, thus increasing the cadence and availability of compelling new features. </span><a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\"><span>Service Worker</span></a><span> is an example of building on these APIs to follow these principles. Service Worker is a small piece of JavaScript that sits between the browser and the network, and lets the developer decide what to do with any web requests.</span></span></span>\n</div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>The combination of Service Worker and a handful of new APIs allowed marked the beginning of the Progressive Web Apps (PWA) era. PWAs are high-quality sites that combine the reach of the web with the user expectations that come with native platforms. Specifically, PWAs are...</span></span></span></div>\n<ul>\n<li>\n<b>Fast</b>—they load instantly</li>\n<li>\n<b>Reliable</b>—they never show the “<a href=\"https://twitter.com/ChromiumDev/status/966800777338671105\">downasaur</a>,” even in uncertain network conditions, by taking advantage of the Service Worker and Cache APIs</li>\n<span><li>\n<b>Engaging</b>—they respond quickly to user interactions with silky-smooth animations and no janky scrolling</li>\n<li>\n<b>Capable</b>—the sites feel like natural extensions on the device, with immersive user experiences provided by features such as “fullscreen” and standalone mode through Web App Manifest; they deliver capabilities for meeting specific business goals, such as re-engagement through the Add to Homescreen feature and Web Push notifications</li></span>\n</ul>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>As PWAs became more established, so did the capabilities of the platform. The </span><a href=\"https://developers.google.com/web/updates/2015/12/background-sync\"><span>Background Sync API</span></a><span> brought increased opportunities for developers to improve the resilience of their applications. We also got a better understanding of the network capabilities with extensions to the </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API\"><span>Network Information API</span></a><span>.</span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><a href=\"https://developers.google.com/web/updates/2016/10/pointer-events\"><span>Pointer Events</span></a><span>, a critical component for any web site or app, came to Chrome after a long wait. Pointer Events presented a unified model for handling all forms of gesture-based input, ranging from touch to pens to mouse pointers.</span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>In 2017, deeper integration of web apps with the host operating system and secure access to devices around the user arrived.. </span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>The </span><a href=\"https://developers.google.com/web/updates/2016/12/imagecapture\"><span>Image Capture</span></a><span> and </span><a href=\"https://developers.google.com/web/updates/2016/10/capture-stream\"><span>Media Capture</span></a><span> APIs provided full-frame access and control over a phone camera, as well as from other input sources such as a canvas. The </span><a href=\"https://developers.google.com/web/updates/2016/09/navigator-share\"><span>Web Share API</span></a><span> let sites share data directly with the operating system’s native sharing systems.</span></span></span></div>\n<span><span></span></span><br><div dir=\"ltr\"><span><span><span>The </span><a href=\"https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\"><span>Web Bluetooth API</span></a><span> let a user securely select a Bluetooth LE device and have a webpage interact with the device. The </span><a href=\"https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web\"><span>Web USB API</span></a><span> enabled the same level of connectivity, but to devices connected to the user's machine. </span></span></span></div>\n<span><span><br><a href=\"https://webassembly.org/\"><span>WebAssembly</span></a><span> (WASM) opens up many possibilities. It brings a runtime that can execute code at near-native performance. Plus, it opens a new world of experiences on the web by letting developers use existing codebases built for other platforms on the web platform.</span></span></span>\n</div>\n<div class=\"separator\"><br></div>\n<br><div><span><span><br></span></span></div>\n<div><br></div>\n<div>\n<span><a href=\"https://webvr.info/\">Web VR</a></span><span> came to the web at roughly the same time it came to native platforms. It let us deliver immersive experiences without installing an app, significantly reducing the gap between a new native primitive arriving on platforms and being available across the web platform.</span>\n</div>\n<div>\n<h2><span><br></span></h2>\n<h2><span><br></span></h2>\n<h2><span><br></span></h2>\n<h2><span>Forward to the future</span></h2>\n<span>We’re excited about the possibilities of the web platform. The web can (and should) be feature-rich, but new capabilities don't always have to be more complex. Web development should be predictable, manageable, and pain-free. Coming APIs such as </span><a href=\"https://developers.google.com/web/updates/2018/06/feature-policy\"><span>Feature Policy</span></a><span> are great examples of additions that will help developers create amazing sites in a more predictable way, and provide more control and customization over the UX of certain browser features. Feature Policy is the browser's built-in guide rails to help web developers avoid common pitfalls and use best practices.</span><span></span><br><span><span><br></span></span><br><div dir=\"ltr\"><span><span><a href=\"https://www.youtube.com/watch?v=dVd8KRLbAx4\"><span>Layered APIs</span></a><span> is another initiative that we're excited about. With it, developers will be able to load and use high-level features shipped directly into the browser as JS modules. For example, instead of building a custom virtualize-scrolling component, developers can just import and use &lt;virtual-scroller&gt; in a site. Layered APIs can be quickly iterated on by the standards bodies and implemented by browser vendors, and will help create a pay-as-you-go standard library for the web. And looking further, the Houdini and Web XR APIs will radically change experiences we can build on and with the web.</span></span></span></div>\n<span><span><br></span></span><br><div class=\"separator\"><span></span></div>\n<span></span><br><div dir=\"ltr\"><span><br></span></div>\n<span><span><br></span></span><br><div dir=\"ltr\"><span><span><span>Over the last 10 years, we’ve seen a massive increase in the rate at which new primitives and capabilities can be introduced to the web. We can thank all the browser vendors for their continued work to create and iterate on specs, using streamlined processes like those defined by the </span><a href=\"https://www.w3.org/community/wicg/\"><span>WICG</span></a><span> and based on the principles in the </span><a href=\"https://extensiblewebmanifesto.org/\"><span>Extensible Web Manifesto</span></a><span>. We’ll continue our commitment to work with browser vendors and the developer ecosystem to prioritize features that users need, and to ensure that those capabilities arrive in a “webby” way. By doing so, we can uphold our original mission, while also prioritizing user safety, discoverability, instant access, and universal reach for everyone on the planet.</span></span></span></div>\n<span><span><br></span></span><br><div dir=\"ltr\">\n<span><span><span>Here’s to the future of an even-more-capable open web.</span></span></span><br><span><span><br></span></span><span><span><span>Posted by Paul Kinlan, the Wizzy Web Warrior.</span></span></span>\n</div>\n<span></span><br><div><span><span><br></span></span></div>\n<span></span>\n</div>\n<div><span><span><br></span></span></div>\n<div><span><span><br></span></span></div>\n</div>\n<div dir=\"ltr\"><span><span><br></span></span></div>\n<div dir=\"ltr\"><span><span><br></span></span></div>\n</div>\n","enclosure":{"thumbnail":"https://img.youtube.com/vi/CvKHIVFI2w8/default.jpg"},"categories":["10th birthday","birthday","capabilities","capable web","chrome","open web"],"color":"lightgreen","category":"Chromium Blog","date":"2018-09-04 17:47:00","thumbNail":"http://icons.iconarchive.com/icons/paomedia/small-n-flat/1024/sign-check-icon.png"}],"saveDate":"2018-09-08T14:48:56.143Z"}
